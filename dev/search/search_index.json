{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ultimate Notion","text":"<p>Ultimate Notion is the ultimate Python client for Notion with a rich set of features:</p> <ul> <li>\ud83d\udc0d Pythonic API \u2014 Clean, intuitive Python interfaces with robust type annotations.</li> <li>\ud83d\uddc2\ufe0f CRUD operations \u2014 Create, read, update, and delete Notion pages, databases, and blocks.</li> <li>\ud83d\udd0e Rich querying capabilities \u2014 Support for filters, sorting, pagination, and searching.</li> <li>\ud83e\ude84 Flexible exports \u2014 Convert pages to Markdown, HTML, and databases to pandas, Polars.</li> <li>\u2b06\ufe0f File upload support \u2014 Easily upload and manage files in Notion pages and databases.</li> <li>\ud83e\udde9 Built atop notion-sdk-py \u2014 Enhancing the functionality of the popular low-level client.</li> <li>\ud83d\udcaf 100% feature parity \u2014 Full compatibility with all notion-sdk-py capabilities and more.</li> <li>\ud83d\udda5\ufe0f Command line interface \u2014 Convenient CLI for quick operations and automation scripts.</li> <li>\ud83d\udd12 Token-based authentication \u2014 Secure access using Notion integration tokens.</li> <li>\ud83d\ude80 One-step setup \u2014 Getting up to speed with a simple setup guide.</li> <li>\ud83d\udcdc MIT licensed \u2014 Released under the permissive MIT license for maximum flexibility.</li> </ul> <p>\ud83d\udc49 Want to learn more? Explore the full feature breakdown.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e., ,/p and ./n for previous and next page, respectively, as well as //s for searching.</p>"},{"location":"authors/","title":"Contributors","text":"<ul> <li>Florian Wilhelm</li> <li>al1p-R</li> <li>Tzumx</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-095","title":"Version 0.9.5","text":"<ul> <li>New: Add the new <code>Place</code> database/source property.</li> <li>Fix: Allow to bind a schema with a two-way target property to an existing database, issue #134.</li> <li>Fix: <code>session.get_page(PAGE)</code> no longer fails if parent of <code>Page</code> is not accessible by the integration, issue #135.</li> <li>Fix: Added <code>BGColor</code> type annotation for color parameter in <code>text()</code> and <code>Text</code>, issue #140.</li> </ul>"},{"location":"changelog/#version-094-2025-10-01","title":"Version 0.9.4, 2025-10-01","text":"<ul> <li>Chg: Allow the creation of a unique ID property, which is now supported by the Notion API.</li> <li>New: Allow changing the prefix of a unique ID property.</li> <li>Chg: The <code>reload()</code> method of a database has a <code>rebind_schema</code> property, which is activated by default.</li> <li>Doc: Updated the Getting started docs to the current version of Notion.</li> <li>Doc: Updated the Configuration docs.</li> </ul>"},{"location":"changelog/#version-093-2025-09-26","title":"Version 0.9.3, 2025-09-26","text":"<ul> <li>Fix: Map file type <code>audio/x-wav</code> to <code>audio/wav</code> and add a <code>mime_type</code> parameter to <code>upload</code>, issue #127.</li> </ul>"},{"location":"changelog/#version-092-2025-09-25","title":"Version 0.9.2, 2025-09-25","text":"<ul> <li>New: Add new <code>is_locked</code> property to show if a page is locked or not.</li> <li>Fix: Pagination when appending block children no longer leads to repeated appendings.</li> <li>Fix: Assembling a hierarchy of blocks offline and appending it will result in automatic batching        adhering to the Notion API limits, issue #119, #120.</li> <li>Fix: Appended blocks are now added to session cache.</li> <li>New: Added support for the Notion audio block, issue #123.</li> <li>New: Allow comparing offline blocks to the ones synchronized to Notion, issue #124.</li> </ul>"},{"location":"changelog/#version-091-2025-09-03","title":"Version 0.9.1, 2025-09-03","text":"<ul> <li>Fix: Add missing link mention object, which led to an exception.</li> <li>Fix: Linked databases are handled as <code>ChildDatabase</code> objects and no longer resolved, issue #110.</li> <li>Chg: Have a <code>User</code> hierarchy with <code>Bot</code>, <code>Person</code>, etc. to reflect the actual Notion API.</li> <li>Doc: Completed missing parts in the documentation and example for file uploads.</li> <li>New: Allow uploading and appending a file as block to a page via the CLI.</li> <li>Fix: Fix user mention problem, which was caused by a Notion API change.</li> </ul>"},{"location":"changelog/#version-09-2025-09-01","title":"Version 0.9, 2025-09-01","text":"<p>First Beta release:</p> <ul> <li>New: Allow updating if a database is inline or not, issue #80.</li> <li>Chg: <code>create_db</code> has a <code>title</code> parameter to set a title if no schema is used or needs to be overwritten.</li> <li>Chg: Removed <code>from_dict</code> class method of <code>Schema</code> since this can now be more easily done manually.</li> <li>Chg: Unify <code>Property</code> and <code>PropertyType</code> to simplify declarative approach to schemas, issue #81.</li> <li>Fix: Possible collision of attribute names in <code>Page</code> and <code>Schema</code>, issue #86.</li> <li>Fix: Wrong equality check between properties as well as property values.</li> <li>New: Bind a schema automatically with <code>bind_schema()</code> if <code>db_id</code> or <code>db_title</code> is set in the <code>Schema</code>.</li> <li>Chg: Consistently return <code>None</code> for title, description, caption if these are not set instead of an empty string.</li> <li>Fix: More strict typing and checks which led to many small bug fixes in edge cases, e.g. issue #96.</li> <li>Fix: Too strict dependencies that too often lead to conflicts with other packages, e.g. issue #90.</li> <li>New: <code>uno</code> command line interface to show the current resolved config and integration info.</li> <li>New: Allow offline assembly of blocks to create a page with content in one call, issue #94.</li> <li>Fix: Different blocks now have a different hash, equality works as expected, issue #100.</li> <li>Fix: Retrieve a page object even without access access to the parent database, issue #103.</li> <li>Chg: Renamed <code>FileInfo</code> to <code>AnyFile</code> and have several subtypes like <code>UploadedFile</code>, etc.</li> <li>New: Added <code>file_upload</code>, <code>import_url</code> and <code>list_uploads</code> to support the file upload endpoints, issue #71.</li> </ul>"},{"location":"changelog/#version-08-2025-06-23","title":"Version 0.8, 2025-06-23","text":"<ul> <li>New: Added support for creating inline databases by Tzumx</li> <li>Chg: Have a proper hierarchy of Ultimate Notion exception classes.</li> <li>New: The schema of a database provides a <code>to_pydantic_model</code> class for evaluating input.</li> <li>New: More schema validations like checking for a title property and distinct property names.</li> <li>Fix: Fix error when setting a (multi-)select option with no color specified.</li> <li>New: Added a button property value.</li> <li>New: Added support for Polars, i.e. <code>to_polars</code> method of database views, issue #55.</li> <li>New: Add support for custom emoji icons, issue #70.</li> <li>Chg: Return <code>None</code> instead of an empty string <code>\"\"</code> when a text property or block is unset, issue #59.</li> <li>New: Setting the width ratios of page columns is supported, issue #74.</li> <li>Fix: Adding a column with <code>add_column(index)</code> at a given index is no longer off by 1.</li> <li>Add: Updating a database schema, i.e. adding/removing properties or changing their types, issue #76.</li> <li>Add: Changing database properties, e.g. name, formula of formula property, options, etc, issue #77.</li> <li>Add: Added the <code>display_name</code> field of comments</li> </ul>"},{"location":"changelog/#version-071-2025-01-05","title":"Version 0.7.1, 2025-01-05","text":"<ul> <li>Fix: Added missing tomli dependency, issue #62.</li> <li>Fix: Support button property of databases to fix error when retrieving a page or database, issue #63.</li> </ul>"},{"location":"changelog/#version-07-2024-12-10","title":"Version 0.7, 2024-12-10","text":"<ul> <li>New: Reading and inserting comments is implemented.</li> <li>Chg: <code>SList</code> is part of the public API now, i.e. is in the <code>ultimate_notion</code> namespace.</li> <li>Fix: Added missing <code>link_to_page</code> subtype <code>comment_id</code>.</li> <li>Chg: Remove <code>Text</code> as direct import, use <code>text</code> instead.</li> <li>Chg: <code>.props</code> namespace of a page now behaves like a mapping, i.e. read-only dictionary.</li> <li>Fix: Added missing <code>.value</code> function of several <code>PropertyValue</code>s.</li> <li>Add: Page method <code>get_property</code> to allow fetching a single property without reloading the whole page.</li> <li>Fix: Resolving page properties correctly if they contain more than 25 references.</li> <li>Fix: <code>PropertiesEndpoint.retrieve</code> now actually works and either returns a single property item or a list.</li> <li>Chg: Renamed <code>db.fetch_all()</code> to <code>db.get_all_pages()</code>.</li> <li>New: Query databases with a PySpark/Polars inspired DSL, e.g. <code>uno.prop('Name') == 'Linus Torvalds'</code>, implemented.</li> <li>Fix: Database pages created with <code>db.create_page</code> are now added to the session cache.</li> <li>New: Easily activate a debug mode within the config file.</li> <li>Fix: Rollup property defined on a self-referencing relation works now.</li> <li>Doc: Added a page about querying a database.</li> <li>Chg: Renamed property types <code>People</code> to <code>Person</code> and <code>PhoneNumber</code> to <code>Phone</code>.</li> </ul>"},{"location":"changelog/#version-06-2024-09-28","title":"Version 0.6, 2024-09-28","text":"<ul> <li>New: Also use the session cache for blocks.</li> <li>New: Properties of blocks can be updated.</li> <li>Fix: <code>has_children</code> doesn't return a wrong value anymore for pages and databases.</li> <li>Fix: Several issues with blocks and duplicated but ID-equivalent objects.</li> <li>Chg: Simplified dealing with rich texts by introducing <code>text</code>, <code>mention</code> and <code>math</code>.</li> <li>Chg: Children of pages are proper pages/databases instead of <code>ChildPage</code>/<code>ChildDatabase</code>.</li> <li>Chg: Renamed <code>PageSchema</code> to <code>Schema</code>.</li> <li>Chg: Accessing the properties of a page directly returns the primitive data types.</li> <li>Chg: Completely reworked the functionality of the <code>Table</code> block for more consistency and easier usage.</li> </ul>"},{"location":"changelog/#version-051-2024-08-09","title":"Version 0.5.1, 2024-08-09","text":"<ul> <li>Fix: Added type <code>unknown</code> in user data to generate <code>UnknownUser</code>, issue #39.</li> </ul>"},{"location":"changelog/#version-05-2024-08-07","title":"Version 0.5, 2024-08-07","text":"<ul> <li>New: Method <code>page.append</code> to append content to a page. Creation of blocks is supported!</li> <li>New: Documentation on how to create the content of a page.</li> <li>New: More robustness with respect to Notion API changes.</li> <li>New: High-level method <code>session.get_block</code> to retrieve a single block.</li> <li>Chg: Internally, <code>archived</code> property was renamed to <code>in_trash</code>.</li> <li>Chg: Renamed <code>.content</code> to <code>.children</code> of a page for more consitency.</li> <li>Chg: Use <code>Property</code> again to consistently refer to the columns of a database.</li> <li>Chg: Make use of pendulum to represent <code>DateRange</code> values.</li> <li>Chg: Renamed <code>page.database</code> to <code>page.parent_db</code> and <code>page.in_db</code> added as methods.</li> <li>Chg: Large restructering of the code base.</li> <li>Chg: Return <code>None</code> for various string attributes/properties if no string is set for consistency.</li> </ul>"},{"location":"changelog/#version-04-2024-02-14","title":"Version 0.4, 2024-02-14","text":"<ul> <li>New: Introduced a configuration file under <code>~/.ultimate-notion/config.toml</code>.</li> <li>New: Added a simple Google Tasks client.</li> <li>New: Added a general sychronization task for Notion to other services.</li> <li>New: Added a specific Google Tasks synchronization task.</li> <li>Fix: A page property can be deleted by setting it to <code>None</code>.</li> <li>Chg: Reworked the testing setup to use VCR.py more efficiently and be more robust.</li> <li>Fix: Tons of fixes within blocks and general page content.</li> <li>Chg: <code>to_markdown()</code> now uses an internal implementation instead of <code>notion2md</code>.</li> </ul>"},{"location":"changelog/#version-03-2023-12-26","title":"Version 0.3, 2023-12-26","text":"<ul> <li>Chg: <code>RichText</code> is now a subtype of <code>str</code> for a more convenient &amp; consistent usage.</li> <li>Doc: Added more documentation about using databases.</li> <li>Chg: <code>icon</code> attribute of database now returns <code>Emoji</code> instead of <code>str</code>.</li> <li>New: Allow setting the <code>icon</code> and <code>cover</code> attribute of a page.</li> <li>New: Allow setting the <code>title</code> of a non-database page.</li> <li>Fix: <code>created_by</code> and <code>last_edited_by</code> return proper <code>User</code> object.</li> </ul>"},{"location":"changelog/#version-02-2023-12-19","title":"Version 0.2, 2023-12-19","text":"<ul> <li>Fix: Notion API's undocumented <code>description</code> of <code>SelectOption</code> added.</li> <li>New: Navigate pages using <code>parent</code> and <code>children</code>.</li> <li>Chg: Rename <code>parents</code> to <code>ancestors</code>.</li> <li>Fix: Wrong return value of PropertyType <code>Status.value</code>.</li> <li>Chg: Make <code>show</code> consistent for Page, View, PageSchema.</li> <li>Ref: Refactor <code>value</code> in <code>PropertyValue</code>.</li> <li>Ref: Reduce unnecessary funtionality of <code>Number</code>, use <code>value</code> instead.</li> </ul>"},{"location":"changelog/#version-01-2023-12-16","title":"Version 0.1, 2023-12-16","text":"<ul> <li>First official alpha release.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Welcome to the contributor guide of Ultimate Notion.</p> <p>This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated.</p> <p>If you are new to using git or have never collaborated on a project previously, please have a look at contribution-guide.org. Other resources are also listed in the excellent guide created by FreeCodeCamp <sup>1</sup>.</p> <p>Please notice that all users and contributors are expected to be open, considerate, reasonable, and respectful. When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.</p>"},{"location":"contributing/#issue-reports","title":"Issue Reports","text":"<p>If you experience bugs or general issues with Ultimate Notion, please have a look at the issue tracker. If you don't see anything useful there, please feel free to file an issue report.</p> <p>Tip</p> <p>Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved.</p> <p>New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please also try to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.</p>"},{"location":"contributing/#documentation-improvements","title":"Documentation improvements","text":"<p>You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes.</p> <p>This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way as a code contribution.</p> <p>Tip</p> <p>Please notice that the GitHub web interface provides a quick way for   proposing changes. While this mechanism can be tricky for normal code contributions,   it works perfectly fine for contributing to the docs, and can be quite handy.   If you are interested in trying this method out, please navigate to   the <code>docs</code> folder in the source repository, find which file you   would like to propose changes to and click on the little pencil icon at the   top, to open GitHub's code editor. Once you finish editing the file,   please write a message in the form at the bottom of the page describing   which changes you have made and what the motivations behind them are and   submit your proposal.</p> <p>When working on documentation changes in your local machine, you can build and serve them using hatch with <code>hatch run docs:build</code> and <code>hatch run docs:serve</code>, respectively.</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":""},{"location":"contributing/#submit-an-issue","title":"Submit an issue","text":"<p>Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.</p>"},{"location":"contributing/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Create a user account on GitHub if you do not already have one.</p> </li> <li> <p>Fork the project repository: click on the Fork button near the top of the    page. This creates a copy of the code under your account on GitHub.</p> </li> <li> <p>Clone this copy to your local disk:    <pre><code>git clone git@github.com:YourLogin/ultimate-notion.git\ncd ultimate-notion\n</code></pre></p> </li> <li> <p>Make sure hatch and pre-commit are installed using pipx:    <pre><code>pipx install hatch\npipx install pre-commit\n</code></pre></p> </li> <li> <p>Optionally run <code>hatch config set dirs.env.virtual .direnv</code> to let    VS Code find your virtual environments. If you are using VS Code,    then it's quite convenient to add a file <code>.vscode/.env</code> in your checkout with:    <pre><code>NOTION_TOKEN=TOKEN_TO_YOUR_TEST_NOTION_ACCOUNT\nULTIMATE_NOTION_CONFIG=/path/to/repo/.ultimate-notion/config.toml\n</code></pre>    These settings will also be respected by pytest using pytest-dotenv.</p> </li> </ol>"},{"location":"contributing/#implement-your-changes","title":"Implement your changes","text":"<ol> <li> <p>Create a branch to hold your changes:    <pre><code>git switch -c my-feature\n</code></pre>    and start making changes. Never work on the main branch!</p> </li> <li> <p>Start your work on this branch. Don't forget to add docstrings in Google style    to new functions, modules and classes, especially if they are part of public APIs.</p> </li> <li> <p>Check that your changes don't break any unit tests with <code>hatch run vcr-only</code> for tests    that do not generate calls to the Notion API or <code>hatch run test</code> for new tests generating API calls.</p> </li> <li> <p>Run <code>hatch run lint:all</code> and <code>hatch run lint:fix</code> to check the code with ruff &amp; mypy    and automatically fix ruff issues if possible.</p> </li> <li> <p>Add yourself to the list of contributors in <code>AUTHORS.md</code>.</p> </li> <li> <p>When you\u2019re done editing, do:    <pre><code>git add &lt;MODIFIED FILES&gt;\ngit commit\n</code></pre>    to record your changes in git.\\    Please make sure you see the validation messages from pre-commit and fix any remaining issues.</p> </li> </ol> <p>Info</p> <p>Don't forget to add unit tests and documentation in case your   contribution adds a feature and is not just a bugfix.</p> <p>Moreover, writing a [descriptive commit message] is highly recommended.   In case of doubt, you can check the commit history with:   <pre><code>git log --graph --decorate --pretty=oneline --abbrev-commit --all\n</code></pre>   to look for recurring communication patterns.</p>"},{"location":"contributing/#submit-your-contribution","title":"Submit your contribution","text":"<ol> <li> <p>If everything works fine, push your local branch to the remote server with:</p> <pre><code>git push -u origin my-feature\n</code></pre> </li> <li> <p>Go to the GitHub page of your fork and click \"Create pull request\"    to send your changes for review.</p> </li> </ol> <p>Find more detailed information in creating a PR. You might also want to open    the PR as a draft first and mark it as ready for review after the feedbacks    from the continuous integration (CI) system or any required fixes.</p> <ol> <li> <p>Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases.\u00a0\u21a9</p> </li> </ol>"},{"location":"features/","title":"Features","text":"<p>Some of the features listed here loosely correspond to the features of the endpoints defined in the Notion API. Please note that slightly different terminology is used. Since the term properties is highly overloaded, we call the properties of a database as a whole schema and refer to the individual properties as database properties or sometimes columns in the context of a table or view. With page properties, we denote only the properties of a page within a database that correspond to the properties of the database schema. In contrast to that, the properties that every page has, e.g., title, icon, last edited by/time, etc., are called page attributes.</p>"},{"location":"features/#general","title":"General","text":"<ul> <li> high-level and Pythonic interface for the Notion API</li> <li> caching to avoid unnecessary calls to the Notion API</li> <li> 100% feature parity with the official Notion API</li> </ul>"},{"location":"features/#databases","title":"Databases","text":"<ul> <li> retrieve a database by its ID</li> <li> search for a database by its title</li> <li> create a new database with a given schema, i.e., properties and their types</li> <li> delete and restore a database</li> <li> update a database schema, i.e., adding/removing properties or changing their types</li> <li> change database properties, e.g., name, formula of formula property, options, etc.</li> <li> read the database attributes like title, description, cover, icon, etc.</li> <li> change database attributes like title, description, etc.</li> <li> retrieve all pages of a database</li> <li> query with filters and sorting to retrieve only specific pages</li> <li> display the content of a database as a table, e.g., in JupyterLab</li> <li> export to Polars, Pandas, Markdown, HTML, etc.</li> <li> create new pages with properties within the database respecting the schema</li> </ul>"},{"location":"features/#pages","title":"Pages","text":"<ul> <li> retrieve a page by its ID</li> <li> search for a page by its title</li> <li> create a new page</li> <li> delete and restore a page</li> <li> read page attributes like title, cover, icon, etc.</li> <li> change page attributes like title, cover, icon, etc.</li> <li> read page properties defined by a database schema</li> <li> change page properties</li> <li> navigate pages using parent and children links</li> <li> retrieve the blocks within a page</li> <li> add or remove blocks within a page</li> <li> view the content of a page as Markdown</li> </ul>"},{"location":"features/#blocks","title":"Blocks","text":"<ul> <li> create a new block and append it to a page or a parent block</li> <li> delete a block</li> <li> change the content of a block</li> <li> navigate blocks using references of parent and children</li> </ul>"},{"location":"features/#files","title":"Files","text":"<ul> <li> upload files to Notion</li> <li> import external files by URL to Notion</li> <li> list all uploads</li> </ul>"},{"location":"features/#users","title":"Users","text":"<ul> <li> retrieve all users</li> <li> retrieve a user by their ID</li> <li> retrieve own bot user, i.e., self-identify</li> </ul>"},{"location":"features/#comments","title":"Comments","text":"<ul> <li> create a comment in a page or existing discussion thread</li> <li> retrieve unresolved comments from a page or block</li> </ul>"},{"location":"features/#adapters","title":"Adapters","text":"<ul> <li> general synchronization capabilities with external services</li> <li> client for Google Tasks API and synchronization adapter to sync Google Tasks with a Notion database</li> <li> synchronization adapter for Google Sheets API to sync Google Sheets with a Notion database</li> </ul>"},{"location":"features/#notion-api-limitations","title":"Notion API Limitations","text":"<p>Some features that the Notion UI provides are impossible to implement due to limitations of the Notion API itself. These limitations include:</p> <ul> <li>creating a Status property or updating the options as well as option groups. Sending a Status property within a   create database call is currently accepted but just ignored, i.e., a database without the property will show up.</li> <li>creating a Wiki database, which has a special Verification property.</li> <li>updating the database schema with respect to the options of a select/multi-select property, the formula of a   formula property, and synced content.</li> <li>referencing in a formula expression another formula property, e.g., <code>prop(\"other formula\")</code>. Use a substitution instead.</li> <li>creating a two-way relation with the same source and target database, i.e., self-referencing. The update database call   is currently accepted but only a one-way relation is created, which seems to be a bug within the Notion API itself.</li> <li>setting the icon and cover of a database.</li> <li>moving pages since a page\u2019s parent cannot be changed.</li> <li>setting a reminder based on date and/or time.</li> <li>modifying the URL of file-like blocks, e.g., <code>File</code>, <code>Image</code>, etc. Replace the block with a new upload instead.</li> <li>creating inline comments to start a new discussion thread.</li> <li>resolving comments or listing unresolved comments.</li> <li>locking or unlocking a page or database.</li> <li>working with database button properties.</li> <li>working with place properties.</li> <li>retrieving a list of all custom emojis defined in the workspace.</li> <li>changing the description of a database property.</li> <li>resolve linked databases, i.e. views to a database.</li> <li>setting the font and background color independently of each other for rich texts.</li> <li>having a callout block without an icon as sending <code>null</code> is rejected by the Notion API.</li> </ul> <p>If you think those limitations should be fixed, let the developers of Notion know \ud83d\ude06</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2022 Florian Wilhelm</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"examples/file_upload/","title":"Uploading files","text":"<pre><code>\"\"\"This example demonstrates how to upload files to Notion\"\"\"\n\nimport ultimate_notion as uno\n\nPARENT_PAGE = 'Tests'  # Defines the page where the demo should be created\n\n\nwith uno.Session() as notion:\n    parent = notion.search_page(PARENT_PAGE).item()\n    # Create a new page for our file upload demo\n    page = notion.create_page(parent=parent, title='File Upload Demo')\n\n    with open('docs/assets/images/social-card.png', 'rb') as file:\n        uploaded_image = notion.upload(file=file, file_name='social_card.png')\n\n    # Check expiry time and status\n    print(f'Uploaded image expires at: {uploaded_image.expiry_time}')\n    print(f'Upload status: {uploaded_image.status}')\n\n    # Add some introductory content and append the uploaded image.\n    page.append(\n        [\n            uno.Heading1('File Upload Example'),\n            uno.Image(\n                uploaded_image, caption='An uploaded image used as a demo'\n            ),\n        ]\n    )\n\n    # Import an external file using non-blocking mode\n    url = (\n        'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/1080/'\n        'Big_Buck_Bunny_1080_10s_20MB.mp4'\n    )\n    imported_file = notion.import_url(\n        url=url, file_name='bunny.mp4', block=False\n    )\n    print(f'Import started with status: {imported_file.status}')\n\n    # Wait for the import to complete\n    imported_file.wait_until_uploaded()\n    print(f'Import completed with status: {imported_file.status}')\n\n    page.append(uno.Video(imported_file, caption='Bunny movie \ud83d\udc30'))\n\n    # List uploads to see our files\n    all_uploads = notion.list_uploads()\n    print(f'Total uploads in workspace: {len(all_uploads)}')\n\n    completed_uploads = notion.list_uploads(\n        filter=uno.FileUploadStatus.UPLOADED\n    )\n    print(f'Completed uploads: {len(completed_uploads)}')\n</code></pre>"},{"location":"examples/getting_started/","title":"Connecting to Notion","text":"<pre><code>\"\"\"This example demonstrates how to create an Ultimate Notion session\"\"\"\n\nimport ultimate_notion as uno\n\nPAGE_TITLE = 'Getting Started'\n\nwith uno.Session() as notion:\n    page = notion.search_page(PAGE_TITLE).item()\n    page.show()\n\n# Alternatively, without a context manager:\nnotion = uno.Session()\npage = notion.search_page(PAGE_TITLE).item()\npage.show()\nnotion.close()\n</code></pre>"},{"location":"examples/simple_taskdb/","title":"Simple task list","text":"<pre><code>\"\"\"This example demonstrates how to create a simple task list\"\"\"\n\nimport pendulum as pnd  # simpler and more intuitive datetime library\n\nimport ultimate_notion as uno\n\nPARENT_PAGE = 'Tests'  # Defines the page where the database should be created\ntoday = pnd.now('Europe/Berlin')\n\n\nclass Status(uno.OptionNS):\n    backlog = uno.Option('Backlog', color=uno.Color.GRAY)\n    in_progress = uno.Option('In Progress', color=uno.Color.BLUE)\n    blocked = uno.Option('Blocked', color=uno.Color.RED)\n    done = uno.Option('Done', color=uno.Color.GREEN)\n\n\nclass Priority(uno.OptionNS):\n    high = uno.Option('\u2739 High', color=uno.Color.RED)\n    medium = uno.Option('\u2737 Medium', color=uno.Color.YELLOW)\n    low = uno.Option('\u2736 Low', color=uno.Color.GRAY)\n\n\n# assembling the formula to show the urgency of the task\ndays_left = (\n    'if(empty(prop(\"Due Date\")), toNumber(\"\"), '\n    'dateBetween(prop(\"Due Date\"), now(), \"days\"))'\n)\nweeks_left = f'(if((({days_left}) &lt; 0), -1, 1)) * floor(abs(({days_left}) / 7))'\ntime_left = (\n    f'if(empty(({days_left})), \"\", (((if((({days_left}) &lt; 0), \"-\", \"\")) + '\n    f'(if((({weeks_left}) == 0), \"\", (format(abs(({weeks_left}))) + \"w\")))) + '\n    f'(if(((({days_left}) % 7) == 0), \"\", (format(abs(({days_left})) % 7) + '\n    '\"d\")))))'\n)\nurgency = (\n    'if(prop(\"Status\") == \"Done\", \"\u2705\", (if(empty(prop(\"Due Date\")), \"\", '\n    '(if((formatDate(now(), \"YWD\") == formatDate(prop(\"Due Date\"), \"YWD\")), '\n    f'\"\ud83d\udd39 Today\", (if(now() &gt; prop(\"Due Date\"), \"\ud83d\udd25 \" + {time_left}, \"\ud83d\udd50 \" '\n    f'+ {time_left})))))))'\n)\n\n\nclass Task(uno.Schema, db_title='My task list'):\n    \"\"\"My personal task list of all the important stuff I have to do\"\"\"\n\n    task = uno.PropType.Title('Task')\n    status = uno.PropType.Select('Status', options=Status)\n    priority = uno.PropType.Select('Priority', options=Priority)\n    urgency = uno.PropType.Formula('Urgency', formula=urgency)\n    due_date = uno.PropType.Date('Due Date')\n\n\nwith uno.Session() as notion:\n    parent = notion.search_page(PARENT_PAGE).item()\n    task_db = notion.create_db(parent=parent, schema=Task)\n\n    # just create 10 random tasks for demonstration\n    Task.create(\n        task='Plan vacation',\n        due_date=today.add(weeks=3, days=3),\n        status=Status.backlog,\n        priority=Priority.high,\n    )\n    Task.create(\n        task='Read book about procastination',\n        due_date=today.add(weeks=2, days=2),\n        status=Status.backlog,\n        priority=Priority.medium,\n    )\n    Task.create(\n        task='Clean the house',\n        due_date=today.add(days=5),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n    Task.create(\n        task='Build tool with Ultimate Notion',\n        due_date=today.add(days=1),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n    Task.create(\n        task='Complete project report for work',\n        due_date=today,\n        status=Status.in_progress,\n        priority=Priority.medium,\n    )\n    Task.create(\n        task='Call family',\n        due_date=today.subtract(days=1),\n        status=Status.done,\n        priority=Priority.low,\n    )\n    Task.create(\n        task='Pay yearly utility bills',\n        due_date=today.subtract(days=5),\n        status=Status.blocked,\n        priority=Priority.high,\n    )\n    Task.create(\n        task='Run first Marathon',\n        due_date=today.subtract(weeks=1, days=1),\n        status=Status.done,\n        priority=Priority.low,\n    )\n    Task.create(\n        task='Clearing out the cellar',\n        due_date=today.subtract(weeks=2, days=2),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n\n    task_db.get_all_pages().show()\n</code></pre>"},{"location":"examples/sync_google_tasks/","title":"Connecting to Notion","text":"<pre><code>\"\"\"How to synchronize your tasks between Google Tasks and a Notion database.\n\nThere are two ways to do this:\n1. using a declarative Notion database definition or\n2. using an existing Notion database that was created manually.\n\nNote: Follow this guide first to enable the Google API and create the\nnecessary credentials: https://developers.google.com/tasks/quickstart/python\n\"\"\"\n# mypy: disable-error-code=\"attr-defined\"\n\nimport pendulum as pnd  # simpler and more intuitive datetime library\n\nimport ultimate_notion as uno\nfrom ultimate_notion.adapters import sync\nfrom ultimate_notion.adapters.google import GTasksClient, SyncGTasks\n\n######################################################\n# Define a real simple Notion database for our tasks #\n######################################################\n\nPARENT_PAGE = 'Tests'  # Defines the page where the database should be created\ntoday = pnd.datetime(2024, 1, 1, tz='UTC')\n\n\nclass Status(uno.OptionNS):\n    backlog = uno.Option('Backlog', color=uno.Color.GRAY)\n    in_progress = uno.Option('In Progress', color=uno.Color.BLUE)\n    blocked = uno.Option('Blocked', color=uno.Color.RED)\n    done = uno.Option('Done', color=uno.Color.GREEN)\n\n\nclass Task(uno.Schema, db_title='My synced task db'):\n    \"\"\"My personal task list of all the important stuff I have to do\"\"\"\n\n    task = uno.PropType.Title('Task')\n    status = uno.PropType.Select('Status', options=Status)\n    due_date = uno.PropType.Date('Due Date')\n\n\nwith uno.Session() as notion:\n    parent = notion.search_page(PARENT_PAGE).item()\n    task_db = notion.get_or_create_db(parent=parent, schema=Task)\n\n    if task_db.is_empty:\n        Task.create(\n            task='Clean the house',\n            due_date=today.add(days=5),\n            status=Status.in_progress,\n        )\n\n        Task.create(\n            task='Try out Ultimate Notion',\n            due_date=today.subtract(days=1),\n            status=Status.done,\n        )\n\n        Task.create(\n            task='On Notion Only',\n            due_date=today.add(days=3),\n            status=Status.done,\n        )\n\n#################################################\n# Define a few tasks in a Google Tasks tasklist #\n#################################################\n\nwith GTasksClient() as gtasks:\n    tasklist = gtasks.get_or_create_tasklist('My synced task list')\n    if tasklist.is_empty:\n        tasklist.create_task('Clean the house', due=today.add(days=5))\n        tasklist.create_task(\n            'Try out Ultimate Notion', due=today.subtract(days=1)\n        )\n        tasklist.create_task('On Google Tasks only', due=today.add(days=1))\n\n########################################################\n# Create the synced task between Notion &amp; Google Tasks #\n########################################################\n\n# Option 1: Using the Notion database declaration from above\nwith uno.Session() as notion, GTasksClient(read_only=False) as gtasks:\n    task_db = notion.get_or_create_db(parent=parent, schema=Task)\n    tasklist = gtasks.get_or_create_tasklist('My synced task list')\n\n    sync_task = SyncGTasks(\n        notion_db=task_db,\n        tasklist=tasklist,\n        completed_col=Task.status,\n        completed_val=Status.done,\n        not_completed_val=Status.backlog,\n        due_col=Task.due_date,\n    )\n    # Schedule the sync task to run every second\n    # Omit the `in_total` argument to run the task forever\n    sync_task.run_every(seconds=1).in_total(times=2).schedule()\n\n    # Run all scheduled tasks\n    sync.run_all_tasks()\n\n\n# Option 2: Using an existing Notion database that was created manually\nwith uno.Session() as notion, GTasksClient(read_only=False) as gtasks:\n    task_db = notion.search_db('My synced task db').item()\n    status_col = task_db.schema.get_prop('Status')\n    due_date_col = task_db.schema.get_prop('Due Date')\n    tasklist = gtasks.get_or_create_tasklist('My synced task list')\n\n    sync_task = SyncGTasks(\n        notion_db=task_db,\n        tasklist=tasklist,\n        completed_col=status_col,\n        completed_val='Done',\n        not_completed_val='Backlog',\n        due_col=due_date_col,\n    )\n    sync_task.run_every(seconds=1).in_total(times=2).schedule()\n    sync.run_all_tasks()\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ultimate_notion<ul> <li>adapters<ul> <li>google<ul> <li>tasks<ul> <li>client</li> <li>sync</li> </ul> </li> </ul> </li> <li>sync</li> </ul> </li> <li>blocks</li> <li>cli</li> <li>comment</li> <li>config</li> <li>core</li> <li>database</li> <li>emoji</li> <li>errors</li> <li>file</li> <li>markdown</li> <li>obj_api<ul> <li>blocks</li> <li>core</li> <li>endpoints</li> <li>enums</li> <li>iterator</li> <li>objects</li> <li>props</li> <li>query</li> <li>schema</li> </ul> </li> <li>option</li> <li>page</li> <li>props</li> <li>query</li> <li>rich_text</li> <li>schema</li> <li>session</li> <li>templates</li> <li>user</li> <li>utils</li> <li>view</li> </ul> </li> </ul>"},{"location":"reference/ultimate_notion/","title":"Reference","text":""},{"location":"reference/ultimate_notion/#ultimate_notion","title":"<code>ultimate_notion</code>","text":"<p>Ultimate Notion provides a pythonic, high-level API for Notion.</p> <p>Notion-API: https://developers.notion.com/reference/intro</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.DateTimeOrRange","title":"<code>DateTimeOrRange: TypeAlias = dt.datetime | dt.date | pnd.Interval[pnd.DateTime] | pnd.Interval[pnd.Date]</code>  <code>module-attribute</code>","text":"<p>A type alias for various date, date time and interval representations.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Workspace","title":"<code>Workspace: Final = _Workspace.ROOT</code>  <code>module-attribute</code>","text":"<p>This represents the actual root workspace in Notion.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.WorkspaceType","title":"<code>WorkspaceType: TypeAlias = Literal[_Workspace.ROOT]</code>  <code>module-attribute</code>","text":"<p>This represents the type of the root workspace in Notion for type hinting.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","title":"<code>__all__ = ['PDF', 'AggFunc', 'AnyFile', 'Audio', 'BGColor', 'Block', 'Bookmark', 'Breadcrumb', 'BulletedItem', 'Callout', 'Code', 'CodeLang', 'Color', 'Column', 'Columns', 'Condition', 'Database', 'DateTimeOrRange', 'Divider', 'Embed', 'Emoji', 'Equation', 'ExternalFile', 'File', 'FileUploadStatus', 'Heading1', 'Heading2', 'Heading3', 'Image', 'LinkPreview', 'LinkToPage', 'NotionFile', 'NumberFormat', 'NumberedItem', 'Option', 'OptionGroup', 'OptionGroupType', 'OptionNS', 'Page', 'Paragraph', 'PropType', 'Property', 'Quote', 'SList', 'Schema', 'SelfRef', 'Session', 'SyncedBlock', 'Table', 'TableOfContents', 'TableRow', 'ToDoItem', 'ToggleItem', 'User', 'VState', 'Video', 'Workspace', 'WorkspaceType', '__version__', 'get_active_session', 'join', 'math', 'mention', 'prop', 'text', 'url']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","title":"<code>__version__ = version('ultimate-notion')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc","title":"<code>AggFunc</code>","text":"<p>Aggregation functions for formulas.</p> <p>The categories naming corresonds mostly to the naming in the Notion App but also eliminates some inconsistencies. The first part of the tuple is the string used in the Notion API, the second part is an alias corresoinding to the defined category num.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.AVERAGE","title":"<code>AVERAGE = ('average', 'average')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_ALL","title":"<code>COUNT_ALL = ('count', 'count_all')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_CHECKED","title":"<code>COUNT_CHECKED = ('checked', 'count_checked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_EMPTY","title":"<code>COUNT_EMPTY = ('empty', 'count_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_NOT_EMPTY","title":"<code>COUNT_NOT_EMPTY = ('not_empty', 'count_not_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_PER_GROUP","title":"<code>COUNT_PER_GROUP = ('count_per_group', 'count_per_group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_UNCHECKED","title":"<code>COUNT_UNCHECKED = ('unchecked', 'count_unchecked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_UNIQUE_VALUES","title":"<code>COUNT_UNIQUE_VALUES = ('unique', 'count_unique_values')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_VALUES","title":"<code>COUNT_VALUES = ('count_values', 'count_values')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.DATE_RANGE","title":"<code>DATE_RANGE = ('date_range', 'date_range')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.EARLIEST_DATE","title":"<code>EARLIEST_DATE = ('earliest_date', 'earliest_date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.LATEST_DATE","title":"<code>LATEST_DATE = ('latest_date', 'latest_date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MAX","title":"<code>MAX = ('max', 'max')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MEDIAN","title":"<code>MEDIAN = ('median', 'median')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MIN","title":"<code>MIN = ('min', 'min')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_CHECKED","title":"<code>PERCENT_CHECKED = ('percent_checked', 'percent_checked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_EMPTY","title":"<code>PERCENT_EMPTY = ('percent_empty', 'percent_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_NOT_EMPTY","title":"<code>PERCENT_NOT_EMPTY = ('percent_not_empty', 'percent_not_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_PER_GROUP","title":"<code>PERCENT_PER_GROUP = ('percent_per_group', 'percent_per_group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.RANGE","title":"<code>RANGE = ('range', 'range')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SHOW_ORIGINAL","title":"<code>SHOW_ORIGINAL = ('show_original', 'show_original')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SHOW_UNIQUE","title":"<code>SHOW_UNIQUE = ('show_unique', 'show_unique')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SUM","title":"<code>SUM = ('sum', 'sum')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.alias","title":"<code>alias: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.__new__","title":"<code>__new__(value: str, alias: str = '') -&gt; AggFunc</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.from_alias","title":"<code>from_alias(alias: str) -&gt; AggFunc</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile","title":"<code>AnyFile(*args: Any, **kwargs: Any)</code>","text":"<p>Information about a web resource e.g. for the files property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile.caption","title":"<code>caption: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the caption of the file.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile.name","title":"<code>name: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the name of the file.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AnyFile.__str__","title":"<code>__str__() -&gt; str</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Audio","title":"<code>Audio(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Audio block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Audio.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the audio as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor","title":"<code>BGColor</code>","text":"<p>Background colors for most textual blocks, e.g. paragraphs, callouts, etc.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.BLUE","title":"<code>BLUE = 'blue_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.BROWN","title":"<code>BROWN = 'brown_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.GRAY","title":"<code>GRAY = 'gray_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.GREEN","title":"<code>GREEN = 'green_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.ORANGE","title":"<code>ORANGE = 'orange_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.PINK","title":"<code>PINK = 'pink_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.PURPLE","title":"<code>PURPLE = 'purple_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.RED","title":"<code>RED = 'red_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.YELLOW","title":"<code>YELLOW = 'yellow_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Block","title":"<code>Block(*args: Any, **kwargs: Any)</code>","text":"<p>Abstract Notion block.</p> <p>Parent class of all block types.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.discussions","title":"<code>discussions: tuple[Discussion, ...]</code>  <code>property</code>","text":"<p>Return comments of this block as list of discussions, i.e. threads of comments.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.parent","title":"<code>parent: Block | Page | None</code>  <code>property</code>","text":"<p>Return the parent block or page, or None if not accessible.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.__eq__","title":"<code>__eq__(other: Any | Block) -&gt; bool</code>","text":"<p>Compare blocks by their content, not by their metadata like id, timestamp etc.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Block.insert_after","title":"<code>insert_after(blocks: Block | Sequence[Block]) -&gt; None</code>","text":"<p>Insert a block or several blocks after this block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.reload","title":"<code>reload() -&gt; Self</code>","text":"<p>Reload the block from the API.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Block.replace","title":"<code>replace(blocks: Block | Sequence[Block]) -&gt; None</code>","text":"<p>Replace this block with another block or blocks.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Bookmark","title":"<code>Bookmark(url: str, *, caption: str | None = None)</code>","text":"<p>Bookmark block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Bookmark.url","title":"<code>url: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the URL of the bookmark.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Bookmark.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Breadcrumb","title":"<code>Breadcrumb(*args: Any, **kwargs: Any)</code>","text":"<p>Breadcrumb block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Breadcrumb.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BulletedItem","title":"<code>BulletedItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Bulleted list item.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.BulletedItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Callout","title":"<code>Callout(text: str, *, color: Color | BGColor = Color.DEFAULT, icon: AnyFile | str | Emoji | CustomEmoji = '\ud83d\udca1')</code>","text":"<p>Callout block.</p> <p>Note</p> <p>The default icon is an electric light bulb, i.e. \ud83d\udca1. Currently it is not supported by the Notion API to have a callout block without an icon.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Callout.icon","title":"<code>icon: NotionFile | ExternalFile | Emoji | CustomEmoji</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Callout.get_default_icon","title":"<code>get_default_icon() -&gt; Emoji</code>  <code>staticmethod</code>","text":"<p>Return the default icon of a callout block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Callout.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Code","title":"<code>Code(text: str, *, language: str | CodeLang = CodeLang.PLAIN_TEXT, caption: str | None = None)</code>","text":"<p>Code block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Code.language","title":"<code>language: CodeLang</code>  <code>property</code> <code>writable</code>","text":"<p>Return the programming language of the code block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Code.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the code content of this block as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang","title":"<code>CodeLang</code>","text":"<p>Coding languages for code blocks.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ABAP","title":"<code>ABAP = 'abap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ARDUINO","title":"<code>ARDUINO = 'arduino'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.BASH","title":"<code>BASH = 'bash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.BASIC","title":"<code>BASIC = 'basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.C","title":"<code>C = 'c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CLOJURE","title":"<code>CLOJURE = 'clojure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.COFFEESCRIPT","title":"<code>COFFEESCRIPT = 'coffeescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CPP","title":"<code>CPP = 'c++'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CSHARP","title":"<code>CSHARP = 'c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CSS","title":"<code>CSS = 'css'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DART","title":"<code>DART = 'dart'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DIFF","title":"<code>DIFF = 'diff'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DOCKER","title":"<code>DOCKER = 'docker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ELIXIR","title":"<code>ELIXIR = 'elixir'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ELM","title":"<code>ELM = 'elm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ERLANG","title":"<code>ERLANG = 'erlang'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FLOW","title":"<code>FLOW = 'flow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FORTRAN","title":"<code>FORTRAN = 'fortran'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FSHARP","title":"<code>FSHARP = 'f#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GHERKIN","title":"<code>GHERKIN = 'gherkin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GLSL","title":"<code>GLSL = 'glsl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GO","title":"<code>GO = 'go'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GRAPHQL","title":"<code>GRAPHQL = 'graphql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GROOVY","title":"<code>GROOVY = 'groovy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.HASKELL","title":"<code>HASKELL = 'haskell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.HTML","title":"<code>HTML = 'html'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JAVA","title":"<code>JAVA = 'java'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JAVASCRIPT","title":"<code>JAVASCRIPT = 'javascript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JULIA","title":"<code>JULIA = 'julia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.KOTLIN","title":"<code>KOTLIN = 'kotlin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LATEX","title":"<code>LATEX = 'latex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LESS","title":"<code>LESS = 'less'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LISP","title":"<code>LISP = 'lisp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LIVESCRIPT","title":"<code>LIVESCRIPT = 'livescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LUA","title":"<code>LUA = 'lua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MAKEFILE","title":"<code>MAKEFILE = 'makefile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MARKDOWN","title":"<code>MARKDOWN = 'markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MARKUP","title":"<code>MARKUP = 'markup'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MATLAB","title":"<code>MATLAB = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MERMAID","title":"<code>MERMAID = 'mermaid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MISC","title":"<code>MISC = 'java/c/c++/c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.NIX","title":"<code>NIX = 'nix'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.OBJECTIVE_C","title":"<code>OBJECTIVE_C = 'objective-c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.OCAML","title":"<code>OCAML = 'ocaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PASCAL","title":"<code>PASCAL = 'pascal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PERL","title":"<code>PERL = 'perl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PHP","title":"<code>PHP = 'php'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PLAIN_TEXT","title":"<code>PLAIN_TEXT = 'plain text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.POWERSHELL","title":"<code>POWERSHELL = 'powershell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PROLOG","title":"<code>PROLOG = 'prolog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PROTOBUF","title":"<code>PROTOBUF = 'protobuf'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PYTHON","title":"<code>PYTHON = 'python'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.R","title":"<code>R = 'r'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.REASON","title":"<code>REASON = 'reason'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.RUBY","title":"<code>RUBY = 'ruby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.RUST","title":"<code>RUST = 'rust'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SASS","title":"<code>SASS = 'sass'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCALA","title":"<code>SCALA = 'scala'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCHEME","title":"<code>SCHEME = 'scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCSS","title":"<code>SCSS = 'scss'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SHELL","title":"<code>SHELL = 'shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SQL","title":"<code>SQL = 'sql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SWIFT","title":"<code>SWIFT = 'swift'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.TOML","title":"<code>TOML = 'toml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.TYPESCRIPT","title":"<code>TYPESCRIPT = 'typescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VB_NET","title":"<code>VB_NET = 'vb.net'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VERILOG","title":"<code>VERILOG = 'verilog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VHDL","title":"<code>VHDL = 'vhdl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VISUAL_BASIC","title":"<code>VISUAL_BASIC = 'visual basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.WEBASSEMBLY","title":"<code>WEBASSEMBLY = 'webassembly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.XML","title":"<code>XML = 'xml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.YAML","title":"<code>YAML = 'yaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color","title":"<code>Color</code>","text":"<p>Basic colors</p> <p>DEFAULT is a light gray, which is the default color in the Notion App.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Color.BLUE","title":"<code>BLUE = 'blue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.BROWN","title":"<code>BROWN = 'brown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.GRAY","title":"<code>GRAY = 'gray'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.GREEN","title":"<code>GREEN = 'green'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.ORANGE","title":"<code>ORANGE = 'orange'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.PINK","title":"<code>PINK = 'pink'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.PURPLE","title":"<code>PURPLE = 'purple'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.RED","title":"<code>RED = 'red'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.YELLOW","title":"<code>YELLOW = 'yellow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column","title":"<code>Column()</code>","text":"<p>Column block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.width_ratio","title":"<code>width_ratio: float | None</code>  <code>property</code>","text":"<p>Return the width ratio of this column.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of this column as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Columns","title":"<code>Columns(columns: int | Sequence[float | int])</code>","text":"<p>Columns block holding multiple <code>Column</code> blocks.</p> <p>This block is used to create a layout with multiple columns in a single page. Either specify the number of columns as an integer or provide a sequence of width ratios, which can be positive integers or floats.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Columns.width_ratios","title":"<code>width_ratios: tuple[float | None, ...]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the width ratios of the columns.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Columns.__getitem__","title":"<code>__getitem__(index: int) -&gt; Column</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Columns.add_column","title":"<code>add_column(index: int | None = None) -&gt; Self</code>","text":"<p>Add a new column to this block of columns at the given index.</p> <p>The index must be between 0 and the number of columns (inclusive). If no index is given, the new column is added at the end.</p> <p>To specify the width ratio of the new column, use the <code>width_ratios</code> property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Columns.append","title":"<code>append(blocks: Block | Sequence[Block], *, after: Block | None = None, sync: bool | None = None) -&gt; Self</code>","text":"<p>Append a block or a sequence of blocks to the content of this block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Columns.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of all columns as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Condition","title":"<code>Condition</code>","text":"<p>Base class for filter query conditions.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.is_method","title":"<code>is_method: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__and__","title":"<code>__and__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__iand__","title":"<code>__iand__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__ior__","title":"<code>__ior__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__or__","title":"<code>__or__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__repr__","title":"<code>__repr__() -&gt; str</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Condition.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database","title":"<code>Database(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion database.</p> <p>This object always represents an original database, not a linked database.</p> <p>API reference: https://developers.notion.com/docs/working-with-databases</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.cover","title":"<code>cover: AnyFile | None</code>  <code>property</code>","text":"<p>Return the cover of this database as file.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.description","title":"<code>description: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the description of this database as rich text.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.icon","title":"<code>icon: AnyFile | Emoji | CustomEmoji | None</code>  <code>property</code>","text":"<p>Return the icon of this database as file or emoji.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_db","title":"<code>is_db: bool</code>  <code>property</code>","text":"<p>Return whether the object is a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Return whether the database is empty.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_inline","title":"<code>is_inline: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the database is inline.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_wiki","title":"<code>is_wiki: bool</code>  <code>property</code>","text":"<p>Return whether the database is a wiki.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.query","title":"<code>query: Query</code>  <code>property</code>","text":"<p>Return a Query object to build and execute a database query.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.schema","title":"<code>schema: type[Schema]</code>  <code>property</code> <code>writable</code>","text":"<p>Schema of the database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.title","title":"<code>title: str | Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the title of this database as rich text.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__bool__","title":"<code>__bool__() -&gt; bool</code>","text":"<p>Overwrite default behaviour.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of pages in this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.create_page","title":"<code>create_page(**kwargs: Any) -&gt; Page</code>","text":"<p>Create a page with properties according to the schema within the corresponding database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.delete","title":"<code>delete() -&gt; Self</code>","text":"<p>Delete this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.get_all_pages","title":"<code>get_all_pages() -&gt; View</code>","text":"<p>Retrieve all pages and return a view.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.reload","title":"<code>reload(*, rebind_schema: bool = True) -&gt; Self</code>","text":"<p>Reload this database.</p> <p>If <code>rebind_schema</code> is <code>True</code>, the schema will be rebound to the current database. Otherwise, the schema will set to the reflected schema of the current database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.restore","title":"<code>restore() -&gt; Self</code>","text":"<p>Restore this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the reference to this database as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Divider","title":"<code>Divider(*args: Any, **kwargs: Any)</code>","text":"<p>Divider block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Divider.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Embed","title":"<code>Embed(url: str, *, caption: str | None = None)</code>","text":"<p>Embed block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Embed.url","title":"<code>url: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the URL of the embedded item.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Embed.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji","title":"<code>Emoji(emoji: str)</code>","text":"<p>Unicode emoji object which behaves like str.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return the name of the emoji.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.obj_ref","title":"<code>obj_ref = objs.EmojiObject.build(emoji)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Equation","title":"<code>Equation(latex: str)</code>","text":"<p>Equation block.</p> <p>LaTeX equation in display mode, e.g. <code>$$ \\mathrm{E=mc^2} $$</code>, but without the <code>$$</code> signs.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Equation.latex","title":"<code>latex: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the LaTeX expression of the equation.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Equation.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the LaTeX expression of the equation as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.ExternalFile","title":"<code>ExternalFile(*, url: str, name: str | None = None, caption: str | None = None)</code>","text":"<p>Information about a file that is hosted externally, i.e. not by Notion.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.ExternalFile.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ExternalFile.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ExternalFile.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File","title":"<code>File(file: AnyFile, *, name: str | None = None, caption: str | None = None)</code>","text":"<p>File block.</p> <p>Note</p> <p>Only the caption and name can be modified, the file object is read-only. Note that only the file name not the file suffix can be modified, the suffix is determined initially by the url.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.File.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the name of the file.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.File.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the file link as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.FileUploadStatus","title":"<code>FileUploadStatus</code>","text":"<p>Status of a file upload.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.FileUploadStatus.EXPIRED","title":"<code>EXPIRED = 'expired'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.FileUploadStatus.FAILED","title":"<code>FAILED = 'failed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.FileUploadStatus.PENDING","title":"<code>PENDING = 'pending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.FileUploadStatus.UPLOADED","title":"<code>UPLOADED = 'uploaded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Heading1","title":"<code>Heading1(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 1 block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Heading1.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Heading2","title":"<code>Heading2(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 2 block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Heading2.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Heading3","title":"<code>Heading3(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 3 block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Heading3.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Image","title":"<code>Image(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Image block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Image.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the image as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.LinkPreview","title":"<code>LinkPreview(url: str)</code>","text":"<p>Link preview block.</p> <p>Not Supported</p> <p>The <code>link_preview</code> block can only be returned as part of a response. The Notion API does not support creating or appending <code>link_preview</code> blocks.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.LinkPreview.url","title":"<code>url: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.LinkPreview.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.LinkToPage","title":"<code>LinkToPage(page: Page)</code>","text":"<p>Link to page block.</p> <p>Note</p> <p>Updating a link to page block is not supported by the Notion API. Use <code>.replace(new_block)</code> instead.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.LinkToPage.page","title":"<code>page: Page</code>  <code>property</code> <code>writable</code>","text":"<p>Return the page this block links to.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.LinkToPage.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>\"Return the link to page block as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.NotionFile","title":"<code>NotionFile(*, url: str, name: str | None = None, caption: str | None = None)</code>","text":"<p>Information about a file that is hosted by Notion.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.NotionFile.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NotionFile.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NotionFile.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat","title":"<code>NumberFormat</code>","text":"<p>Number formats for numbers.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.ARGENTINE_PESO","title":"<code>ARGENTINE_PESO = 'argentine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.AUSTRALIAN_DOLLAR","title":"<code>AUSTRALIAN_DOLLAR = 'australian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.BAHT","title":"<code>BAHT = 'baht'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.CANADIAN_DOLLAR","title":"<code>CANADIAN_DOLLAR = 'canadian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.CHILEAN_PESO","title":"<code>CHILEAN_PESO = 'chilean_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.COLOMBIAN_PESO","title":"<code>COLOMBIAN_PESO = 'colombian_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DANISH_KRONE","title":"<code>DANISH_KRONE = 'danish_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DIRHAM","title":"<code>DIRHAM = 'dirham'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DOLLAR","title":"<code>DOLLAR = 'dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.EURO","title":"<code>EURO = 'euro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.FORINT","title":"<code>FORINT = 'forint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.FRANC","title":"<code>FRANC = 'franc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.HONG_KONG_DOLLAR","title":"<code>HONG_KONG_DOLLAR = 'hong_kong_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.KORUNA","title":"<code>KORUNA = 'koruna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.KRONA","title":"<code>KRONA = 'krona'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.LEU","title":"<code>LEU = 'leu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.LIRA","title":"<code>LIRA = 'lira'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.MEXICAN_PESO","title":"<code>MEXICAN_PESO = 'mexican_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NEW_TAIWAN_DOLLAR","title":"<code>NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NEW_ZEALAND_DOLLAR","title":"<code>NEW_ZEALAND_DOLLAR = 'new_zealand_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NORWEGIAN_KRONE","title":"<code>NORWEGIAN_KRONE = 'norwegian_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NUMBER_WITH_COMMAS","title":"<code>NUMBER_WITH_COMMAS = 'number_with_commas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.PERCENT","title":"<code>PERCENT = 'percent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.PHILIPPINE_PESO","title":"<code>PHILIPPINE_PESO = 'philippine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.POUND","title":"<code>POUND = 'pound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RAND","title":"<code>RAND = 'rand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.REAL","title":"<code>REAL = 'real'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RINGGIT","title":"<code>RINGGIT = 'ringgit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RIYAL","title":"<code>RIYAL = 'riyal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUBLE","title":"<code>RUBLE = 'ruble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUPEE","title":"<code>RUPEE = 'rupee'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUPIAH","title":"<code>RUPIAH = 'rupiah'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.SHEKEL","title":"<code>SHEKEL = 'shekel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.URUGUAYAN_PESO","title":"<code>URUGUAYAN_PESO = 'uruguayan_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.WON","title":"<code>WON = 'won'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.YEN","title":"<code>YEN = 'yen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.YUAN","title":"<code>YUAN = 'yuan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.ZLOTY","title":"<code>ZLOTY = 'zloty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberedItem","title":"<code>NumberedItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Numbered list item.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.NumberedItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option","title":"<code>Option(name: str, *, color: Color | str | UnsetType = Unset)</code>","text":"<p>Option for select &amp; multi-select property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.color","title":"<code>color: Color</code>  <code>property</code>","text":"<p>Color of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.description","title":"<code>description: str</code>  <code>property</code>","text":"<p>Description of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>ID of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup","title":"<code>OptionGroup(group_type: OptionGroupType | str, options: list[Option])</code>","text":"<p>Group of options for status property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option group.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.options","title":"<code>options: list[Option]</code>  <code>property</code>","text":"<p>Options within this option group.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroup.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.SelectGroup, /, *, options: list[Option] | None = None) -&gt; OptionGroup</code>  <code>classmethod</code>","text":"<p>Convienence constructor for the group of options.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroupType","title":"<code>OptionGroupType</code>","text":"<p>Option group type of the Status property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroupType.COMPLETE","title":"<code>COMPLETE = 'complete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroupType.IN_PROGRESS","title":"<code>IN_PROGRESS = 'in_progress'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionGroupType.TO_DO","title":"<code>TO_DO = 'to_do'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.OptionNS","title":"<code>OptionNS</code>","text":"<p>Option namespace to simplify working with (Multi-)Select options.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionNS.to_list","title":"<code>to_list() -&gt; list[Option]</code>  <code>classmethod</code>","text":"<p>Convert the enum to a list as needed by the (Multi)Select property types.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PDF","title":"<code>PDF(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>PDF block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PDF.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the PDF as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page","title":"<code>Page(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion page.</p> <p>Attributes:</p> Name Type Description <code>props</code> <code>PagePropertiesNS</code> <p>accessor for all page properties</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.comments","title":"<code>comments: Discussion</code>  <code>property</code>","text":"<p>Return the discussion thread of this page.</p> <p>A page can only have a single discussion thread in contrast to inline comments.</p> <p>Note</p> <p>This functionality requires that your integration was granted read comment capabilities.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.cover","title":"<code>cover: ExternalFile | NotionFile | None</code>  <code>property</code> <code>writable</code>","text":"<p>Cover of the page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.icon","title":"<code>icon: NotionFile | ExternalFile | Emoji | CustomEmoji | None</code>  <code>property</code> <code>writable</code>","text":"<p>Icon of the page, i.e. emojis, Notion's icons, or custom images.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.in_db","title":"<code>in_db: bool</code>  <code>property</code>","text":"<p>Return True if this page is located in a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.is_locked","title":"<code>is_locked: bool</code>  <code>property</code>","text":"<p>Return whether the page is locked for editing.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.is_page","title":"<code>is_page: bool</code>  <code>property</code>","text":"<p>Return whether the object is a page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.parent_db","title":"<code>parent_db: Database | None</code>  <code>property</code>","text":"<p>If this page is located in a database return the database or None otherwise.</p> <p>This is a convenience method to avoid the need to check and cast the type of the parent.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.props","title":"<code>props: PagePropertiesNS</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.public_url","title":"<code>public_url: str | None</code>  <code>property</code>","text":"<p>Return the public URL of this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.subdbs","title":"<code>subdbs: list[Database]</code>  <code>property</code>","text":"<p>Return all contained databases within this page</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.subpages","title":"<code>subpages: list[Page]</code>  <code>property</code>","text":"<p>Return all contained pages within this page</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.title","title":"<code>title: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Title of the page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.delete","title":"<code>delete() -&gt; Self</code>","text":"<p>Delete this page.</p> <p>Warning</p> <p>Deleting a page will also delete all child pages and child databases recursively. If these objects are already cached in the session, they will not be updated. Use <code>session.cache.clear()</code> to clear the cache or call <code>reload()</code> on them.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.get_property","title":"<code>get_property(prop_name: str) -&gt; Any</code>","text":"<p>Directly retrieve the property value from the API.</p> <p>Use this method only if you want to retrieve a specific property value that might have been updated on the server side without reloading the whole page. In all other cases, use the <code>props</code> namespace of the page to avoid unnecessary API calls.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.reload","title":"<code>reload() -&gt; Self</code>","text":"<p>Reload this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.restore","title":"<code>restore() -&gt; Self</code>","text":"<p>Restore this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.show","title":"<code>show(*, simple: bool | None = None) -&gt; None</code>","text":"<p>Show the content of the page, rendered in JupyterLab</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.to_html","title":"<code>to_html(*, raw: bool = False) -&gt; str</code>","text":"<p>Return the content of the page as HTML.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of the page as Markdown.</p> <p>Note</p> <p>This will not include nested blocks, i.e. the children of top-level blocks.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.Page) -&gt; Self</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Paragraph","title":"<code>Paragraph(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Paragraph block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PropType","title":"<code>PropType</code>","text":"<p>Namespace class of all property types of a database for easier access.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Checkbox","title":"<code>Checkbox = Checkbox</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.CreatedBy","title":"<code>CreatedBy = CreatedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.CreatedTime","title":"<code>CreatedTime = CreatedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Date","title":"<code>Date = Date</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Email","title":"<code>Email = Email</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Files","title":"<code>Files = Files</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Formula","title":"<code>Formula = Formula</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.ID","title":"<code>ID = ID</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.LastEditedBy","title":"<code>LastEditedBy = LastEditedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.LastEditedTime","title":"<code>LastEditedTime = LastEditedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.MultiSelect","title":"<code>MultiSelect = MultiSelect</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Number","title":"<code>Number = Number</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Person","title":"<code>Person = Person</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Phone","title":"<code>Phone = Phone</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Relation","title":"<code>Relation = Relation</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Rollup","title":"<code>Rollup = Rollup</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Select","title":"<code>Select = Select</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Status","title":"<code>Status = Status</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Text","title":"<code>Text = Text</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Title","title":"<code>Title = Title</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.URL","title":"<code>URL = URL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PropType.Verification","title":"<code>Verification = Verification</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property","title":"<code>Property(name: str | None = None, **kwargs: Any)</code>","text":"<p>Base class for Notion property objects.</p> <p>A property defines the name and type of a property in a database, e.g. number, date, text, etc.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.allowed_at_creation","title":"<code>allowed_at_creation = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If the Notion API allows to create a new database with a property of this type</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.attr_name","title":"<code>attr_name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the Python attribute name of the property in the schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.description","title":"<code>description: str | None</code>  <code>property</code>","text":"<p>Return the description of this property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.id","title":"<code>id: str | None</code>  <code>property</code>","text":"<p>Return identifier of this property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return name of this property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.obj_ref","title":"<code>obj_ref = obj_api_type.build(**kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.prop_value","title":"<code>prop_value: type[PropertyValue]</code>  <code>property</code>","text":"<p>Return the corresponding property value of this property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.readonly","title":"<code>readonly: bool</code>  <code>property</code>","text":"<p>Return if this property is read-only.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.__new__","title":"<code>__new__(*args: Any, **kwargs: Any) -&gt; Property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Property.delete","title":"<code>delete() -&gt; None</code>","text":"<p>Delete this property from the schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Property.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: GO_co) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Wrap the object reference for this property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Quote","title":"<code>Quote(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Quote block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Quote.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.SList","title":"<code>SList</code>","text":"<p>A list that holds often only a single element.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SList.item","title":"<code>item() -&gt; T</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Schema","title":"<code>Schema</code>","text":"<p>Base class for the schema of a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.__init_subclass__","title":"<code>__init_subclass__(db_title: str | None = None, db_id: str | None = None, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return the schema in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.assert_consistency_with","title":"<code>assert_consistency_with(other_schema: type[Schema], *, during_init: bool = False) -&gt; None</code>  <code>classmethod</code>","text":"<p>Assert that this schema is consistent with another schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.bind_db","title":"<code>bind_db(db: Database | None = None) -&gt; None</code>  <code>classmethod</code>","text":"<p>Bind this schema to the corresponding database for back-reference and vice versa.</p> <p>If <code>None</code> (default) is passed, search for the database using <code>db_id</code> or <code>db_title</code> and bind it to this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.create","title":"<code>create(**kwargs: Any) -&gt; Page</code>  <code>classmethod</code>","text":"<p>Create a page using this schema with a bound database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_db","title":"<code>get_db() -&gt; Database</code>  <code>classmethod</code>","text":"<p>Get the database that is bound to this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_prop","title":"<code>get_prop(prop_name: str, *, default: object = Unset) -&gt; Property | T</code>  <code>classmethod</code>","text":"<pre><code>get_prop(\n    prop_name: str, *, default: UnsetType = ...\n) -&gt; Property\n</code></pre><pre><code>get_prop(prop_name: str, *, default: T) -&gt; Property | T\n</code></pre> <p>Get a specific property from this schema assuming that property names are unique.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_props","title":"<code>get_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all properties of this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_ro_props","title":"<code>get_ro_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all read-only properties of this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_rw_props","title":"<code>get_rw_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all writeable properties of this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.get_title_prop","title":"<code>get_title_prop() -&gt; Property</code>  <code>classmethod</code>","text":"<p>Returns the property holding the title of the pages.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.has_prop","title":"<code>has_prop(prop_name: str) -&gt; bool</code>  <code>classmethod</code>","text":"<p>Check if a property exists in this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.is_bound","title":"<code>is_bound() -&gt; bool</code>  <code>classmethod</code>","text":"<p>Determines if the schema is bound to a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.show","title":"<code>show(*, simple: bool | None = None) -&gt; None</code>  <code>classmethod</code>","text":"<p>Show the schema as html or as simple table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.to_dict","title":"<code>to_dict() -&gt; dict[str, Property]</code>  <code>classmethod</code>","text":"<p>Convert this schema to a dictionary of property names and corresponding types.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Schema.to_pydantic_model","title":"<code>to_pydantic_model(*, with_ro_props: bool = False) -&gt; type[SchemaModel]</code>  <code>classmethod</code>","text":"<p>Return a Pydantic model of this schema for validation.</p> <p>This is useful for instance when writing a web API that receives data that should be validated before it is passed to Ultimate Notion. The actual values are converted to <code>PropertyValue</code> and thus <code>value</code> needs to be called to retrieve the actual Python type.</p> <p>If <code>with_ro_props</code> is set to <code>True</code>, read-only properties are included in the model.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SelfRef","title":"<code>SelfRef</code>","text":"<p>Target schema for self-referencing database relations.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SelfRef._","title":"<code>_ = Title('title')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session","title":"<code>Session(cfg: Config | None = None, *, client: notion_client.Client | None = None, **kwargs: Any)</code>","text":"<p>A session for the Notion API.</p> <p>The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>Config | None</code> <p>configuration object</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Arguments for the Notion SDK Client</p> <code>{}</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.api","title":"<code>api: NotionAPI = NotionAPI(self.client)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.cache","title":"<code>cache: dict[UUID, DataObject | User] = {}</code>  <code>class-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.client","title":"<code>client: notion_client.Client = create_notion_client(cfg, **kwargs) if client is None else client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__enter__","title":"<code>__enter__() -&gt; Session</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__exit__","title":"<code>__exit__(exc_type: type[BaseException], exc_value: BaseException, traceback: TracebackType) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.all_users","title":"<code>all_users() -&gt; list[User]</code>","text":"<p>Retrieve all users of this workspace.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.close","title":"<code>close() -&gt; None</code>","text":"<p>Close the session and release resources.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_db","title":"<code>create_db(parent: Page, *, schema: type[Schema] | None = None, title: str | None = None, inline: bool = False) -&gt; Database</code>","text":"<p>Create a new database within a page.</p> <p>In case a title and a schema ware provided, title overrides the schema's <code>db_title</code> attribute if it exists.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_dbs","title":"<code>create_dbs(parents: Page | list[Page], schemas: list[type[Schema]]) -&gt; list[Database]</code>","text":"<p>Create new databases in the right order in case there a relations between them.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_page","title":"<code>create_page(parent: Page | Database, title: Text | str | None = None, blocks: Sequence[Block] | None = None) -&gt; Page</code>","text":"<p>Create a new page in a <code>parent</code> page or database with a given <code>title</code>.</p> <p>The <code>blocks</code> are optional and can be used to create a page with content right away. Note that some nested blocks may not be supported by the API and must be created separately, i.e. with an <code>append</code> call to a given block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_active","title":"<code>get_active() -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or None.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_block","title":"<code>get_block(block_ref: UUID | str, *, use_cache: bool = True) -&gt; Block</code>","text":"<p>Retrieve a single block by an object reference.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_db","title":"<code>get_db(db_ref: UUID | str, *, use_cache: bool = True) -&gt; Database</code>","text":"<p>Retrieve Notion database by uuid</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create","title":"<code>get_or_create(*args: Any, **kwargs: Any) -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or create a new session.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create_db","title":"<code>get_or_create_db(parent: Page, schema: type[Schema]) -&gt; Database</code>","text":"<p>Get or create the database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create_page","title":"<code>get_or_create_page(parent: Page | Database, title: str | None = None) -&gt; Page</code>","text":"<p>Get an existing page or create a new one if it doesn't exist.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_page","title":"<code>get_page(page_ref: UUID | str, *, use_cache: bool = True) -&gt; Page</code>","text":"<p>Retrieve a page by uuid.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_user","title":"<code>get_user(user_ref: UUID | str, *, use_cache: bool = True, raise_on_unknown: bool = True) -&gt; User</code>","text":"<p>Get a user by uuid.</p> <p>In case the user is not found and <code>raise_on_unknown</code> is <code>False</code>, an <code>User</code> object is returned with the name <code>Unknown User</code>, where the property <code>is_unknown</code> is set to <code>True</code>.</p> <p>Warning</p> <p>Trying to retrieve yourself, i.e. the bot integration, only works if <code>use_cache</code> is true, since the low-level api, i.e. <code>api.users.retrieve()</code> does not work for the bot integration. Better use <code>whoami()</code> to get the bot integration user object.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.import_url","title":"<code>import_url(url: str, file_name: str, *, block: bool = True) -&gt; UploadedFile</code>","text":"<p>Import a file from a URL.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.is_closed","title":"<code>is_closed() -&gt; bool</code>","text":"<p>Determine if the session is closed or not.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.list_uploads","title":"<code>list_uploads(filter: FileUploadStatus | None = None) -&gt; list[UploadedFile]</code>","text":"<p>List all uploaded files and optionally filter by status.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.raise_for_status","title":"<code>raise_for_status() -&gt; None</code>","text":"<p>Confirm that the session is active and raise otherwise.</p> <p>Raises SessionError if there is a problem, otherwise returns None.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_db","title":"<code>search_db(db_name: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Database]</code>","text":"<p>Search a database by name or return all if <code>db_name</code> is None.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str | None</code> <p>name/title of the database, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted databases in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_page","title":"<code>search_page(title: str | None = None, *, exact: bool = True, reverse: bool = False) -&gt; SList[Page]</code>","text":"<p>Search a page by name. Deleted pages, i.e. in trash, are not included in the search.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>title of the page, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_user","title":"<code>search_user(name: str) -&gt; SList[User]</code>","text":"<p>Search a user by name.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.upload","title":"<code>upload(file: BinaryIO, *, file_name: str | None = None, mime_type: str | None = None) -&gt; UploadedFile</code>","text":"<p>Upload a file to Notion.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.whoami","title":"<code>whoami() -&gt; Bot</code>","text":"<p>Return the integration as bot object.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock","title":"<code>SyncedBlock(blocks: Block | Sequence[Block])</code>","text":"<p>Synced block - either original or synced.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock.is_original","title":"<code>is_original: bool</code>  <code>property</code>","text":"<p>Return if this block is the original block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock.is_synced","title":"<code>is_synced: bool</code>  <code>property</code>","text":"<p>Return if this block is synced from another block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock.create_synced","title":"<code>create_synced() -&gt; SyncedBlock</code>","text":"<p>Return the synced block for appending.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock.get_original","title":"<code>get_original() -&gt; SyncedBlock</code>","text":"<p>Return the original block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.SyncedBlock.to_markdown","title":"<code>to_markdown(*, with_comment: bool = True) -&gt; str</code>","text":"<p>Return the content of this synced block as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table","title":"<code>Table(n_rows: int, n_cols: int, *, header_col: bool = False, header_row: bool = False)</code>","text":"<p>Table block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.children","title":"<code>children: tuple[TableRow, ...]</code>  <code>property</code>","text":"<p>Return all rows of the table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.has_header_col","title":"<code>has_header_col: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the table has a header column.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.has_header_row","title":"<code>has_header_row: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the table has a header row.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.shape","title":"<code>shape: tuple[int, int]</code>  <code>property</code>","text":"<p>Return the shape of the table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.width","title":"<code>width: int</code>  <code>property</code>","text":"<p>Return the width, i.e. number of columns, of the table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.__getitem__","title":"<code>__getitem__(index: int | tuple[int, int]) -&gt; Text | TableRow | None</code>","text":"<pre><code>__getitem__(index: int) -&gt; TableRow\n</code></pre><pre><code>__getitem__(index: tuple[int, int]) -&gt; Text | None\n</code></pre>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.__setitem__","title":"<code>__setitem__(index: int | tuple[int, int], value: str | Sequence[str | None] | None) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Table.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Table.append_row","title":"<code>append_row(values: Sequence[str]) -&gt; Self</code>","text":"<p>Append a new row to the table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.insert_row","title":"<code>insert_row(index: int, values: Sequence[str]) -&gt; Self</code>","text":"<p>Insert a new row at the given index.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Table.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the table as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.TableOfContents","title":"<code>TableOfContents(*, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Table of Contents block.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.TableOfContents.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.TableRow","title":"<code>TableRow(*cells: str | None)</code>","text":"<p>Table row block behaving like a tuple.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.TableRow.__new__","title":"<code>__new__(*cells: str | None) -&gt; TableRow</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.TableRow.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the row as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.TableRow.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.TableRow) -&gt; TableRow</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ToDoItem","title":"<code>ToDoItem(text: str, *, checked: bool = False, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>ToDo list item.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.ToDoItem.checked","title":"<code>checked: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ToDoItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ToggleItem","title":"<code>ToggleItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Toggle list item.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.ToggleItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User","title":"<code>User(*args: Any, **kwargs: Any)</code>","text":"<p>User object for persons, bots and unknown users.</p> <p>Unknown users are users, which no longer participate in the workspace or were revoked access. They are represented by their ID and have the name <code>Unknown User</code>.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.avatar_url","title":"<code>avatar_url: str | None</code>  <code>property</code>","text":"<p>Return the avatar URL of this user.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.id","title":"<code>id: UUID</code>  <code>property</code>","text":"<p>Return the ID of this user.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.is_bot","title":"<code>is_bot: bool</code>  <code>property</code>","text":"<p>Return True if this user is a bot.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.is_person","title":"<code>is_person: bool</code>  <code>property</code>","text":"<p>Return True if this user is a person.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.is_unknown","title":"<code>is_unknown: bool</code>  <code>property</code>","text":"<p>Return True if this user is an unknown user.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.name","title":"<code>name: str | None</code>  <code>property</code>","text":"<p>Return the name of this user.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.VState","title":"<code>VState</code>","text":"<p>Verification states for pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.VState.UNVERIFIED","title":"<code>UNVERIFIED = 'unverified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.VState.VERIFIED","title":"<code>VERIFIED = 'verified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Video","title":"<code>Video(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Video block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Video.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the video as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.get_active_session","title":"<code>get_active_session() -&gt; Session</code>","text":"<p>Return the current active session or raise an exception.</p> <p>Avoids cyclic imports when used within the package itself. For internal use mostly.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.join","title":"<code>join(texts: Sequence[str], *, delim: str = ' ') -&gt; Text</code>","text":"<p>Join multiple str objects, including Text, into a single Text object with a given delimeter.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.math","title":"<code>math(expression: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT) -&gt; Text</code>","text":"<p>Create a Text that holds a formula.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.mention","title":"<code>mention(target: User | Page | Database | CustomEmoji | objs.DateTimeOrRange, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT) -&gt; Text</code>","text":"<p>Create a Text that mentions another object.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.prop","title":"<code>prop(prop_name: str) -&gt; PageProperty</code>","text":"<p>Create a property object.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.text","title":"<code>text(text: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color | BGColor | None = None, href: str | None = None) -&gt; Text</code>","text":"<p>Create a rich text Text object from a normal string with formatting.</p> <p>Note</p> <p>With the <code>color</code> parameter the font color or the background color can be set. Unfortunately Notion's API does not allow to set both at the same time like in the Notion UI.</p> <p>Warning</p> <p>If a <code>Text</code> object is passed, the original formatting will be lost!</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.url","title":"<code>url(url: str, *, name: str | None = None, caption: str | None = None) -&gt; NotionFile | ExternalFile</code>","text":"<p>Create a NotionFile or ExternalFile based on the URL.</p> <p>A name and caption can be provided and will be used as default values, e.g. in a File block.</p>"},{"location":"reference/ultimate_notion/blocks/","title":"Blocks","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks","title":"<code>blocks</code>","text":"<p>Blocks that make up the content of a page.</p> <p>Following blocks can be nested, i.e. they can contain children:</p> <ul> <li>Paragraph</li> <li>Headings if toggleable (*)</li> <li>Quote</li> <li>Callout</li> <li>BulletedItem</li> <li>NumberedItem</li> <li>ToDoItem</li> <li>ToggleItem</li> <li>Column within a Columns object (*)</li> <li>Table as list of TableRow objects (*)</li> <li>Synced Block</li> <li>Template (read-only)</li> </ul> <p>Blocks with (*) don't have an official <code>children</code> field in the Notion API call but can still contain children using the <code>append</code> method. They can also be created offline and populated with children offline before being pushed to Notion. This is a technical detail and should not affect the user experience.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.B_co","title":"<code>B_co = TypeVar('B_co', bound=(obj_blocks.Block), default=(obj_blocks.Block), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DO_co","title":"<code>DO_co = TypeVar('DO_co', bound=(obj_blocks.DataObject), default=(obj_blocks.DataObject), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.FT","title":"<code>FT = TypeVar('FT', bound=(obj_blocks.FileBase))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.HT","title":"<code>HT = TypeVar('HT', bound=(obj_blocks.Heading))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.MAX_BLOCKS_PER_REQUEST","title":"<code>MAX_BLOCKS_PER_REQUEST = 1000</code>  <code>module-attribute</code>","text":"<p>The maximum number of blocks that can be created/updated/deleted in one API request.</p> <p>Source: https://developers.notion.com/reference/request-limits#limits-for-property-values</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.MAX_BLOCK_CHILDREN","title":"<code>MAX_BLOCK_CHILDREN = 100</code>  <code>module-attribute</code>","text":"<p>\"The maximum number of block children that can be appended in one API call.</p> <p>Source: https://developers.notion.com/reference/patch-block-children</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.MAX_NESTING_LEVEL","title":"<code>MAX_NESTING_LEVEL = 2</code>  <code>module-attribute</code>","text":"<p>The maximum nesting level of blocks in Notion for one append call.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.MIN_COLS","title":"<code>MIN_COLS = 2</code>  <code>module-attribute</code>","text":"<p>Minimum number of columns when creating a column block to structure a page.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TB","title":"<code>TB = TypeVar('TB', bound=(obj_blocks.ColoredTextBlock))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TB_co","title":"<code>TB_co = TypeVar('TB_co', bound=(obj_blocks.TextBlock), default=(obj_blocks.TextBlock), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Audio","title":"<code>Audio(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Audio block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Audio.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the audio as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block","title":"<code>Block(*args: Any, **kwargs: Any)</code>","text":"<p>Abstract Notion block.</p> <p>Parent class of all block types.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.discussions","title":"<code>discussions: tuple[Discussion, ...]</code>  <code>property</code>","text":"<p>Return comments of this block as list of discussions, i.e. threads of comments.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.parent","title":"<code>parent: Block | Page | None</code>  <code>property</code>","text":"<p>Return the parent block or page, or None if not accessible.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.__eq__","title":"<code>__eq__(other: Any | Block) -&gt; bool</code>","text":"<p>Compare blocks by their content, not by their metadata like id, timestamp etc.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.insert_after","title":"<code>insert_after(blocks: Block | Sequence[Block]) -&gt; None</code>","text":"<p>Insert a block or several blocks after this block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.reload","title":"<code>reload() -&gt; Self</code>","text":"<p>Reload the block from the API.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.replace","title":"<code>replace(blocks: Block | Sequence[Block]) -&gt; None</code>","text":"<p>Replace this block with another block or blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Bookmark","title":"<code>Bookmark(url: str, *, caption: str | None = None)</code>","text":"<p>Bookmark block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Bookmark.url","title":"<code>url: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the URL of the bookmark.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Bookmark.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Breadcrumb","title":"<code>Breadcrumb(*args: Any, **kwargs: Any)</code>","text":"<p>Breadcrumb block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Breadcrumb.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.BulletedItem","title":"<code>BulletedItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Bulleted list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.BulletedItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Callout","title":"<code>Callout(text: str, *, color: Color | BGColor = Color.DEFAULT, icon: AnyFile | str | Emoji | CustomEmoji = '\ud83d\udca1')</code>","text":"<p>Callout block.</p> <p>Note</p> <p>The default icon is an electric light bulb, i.e. \ud83d\udca1. Currently it is not supported by the Notion API to have a callout block without an icon.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Callout.icon","title":"<code>icon: NotionFile | ExternalFile | Emoji | CustomEmoji</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Callout.get_default_icon","title":"<code>get_default_icon() -&gt; Emoji</code>  <code>staticmethod</code>","text":"<p>Return the default icon of a callout block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Callout.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.CaptionMixin","title":"<code>CaptionMixin(*args: Any, **kwargs: Any)</code>","text":"<p>Mixin for objects that can have captions.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.CaptionMixin.caption","title":"<code>caption: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the caption of the code block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildDatabase","title":"<code>ChildDatabase()</code>","text":"<p>Child database block.</p> <p>This block is used to represent a database if it is a child of e.g. a page. We try to resolve it via the API to get the actual database object. This does not work if it is a <code>linked database</code> as mentioned in the Notion API docs: https://developers.notion.com/reference/retrieve-a-database</p> <p>Note</p> <p>To create a child database block as an end-user, create a new database with the corresponding parent. This block is used only internally.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildDatabase.db","title":"<code>db: Database</code>  <code>property</code>","text":"<p>Return the actual Database object.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildDatabase.title","title":"<code>title: str | None</code>  <code>property</code>","text":"<p>Return the title of the child database</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildDatabase.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the child database as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildPage","title":"<code>ChildPage()</code>","text":"<p>Child page block.</p> <p>Note</p> <p>To create a child page block, create a new page with the corresponding parent. This block is used only internally.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildPage.page","title":"<code>page: Page</code>  <code>property</code>","text":"<p>Return the actual Page object.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildPage.title","title":"<code>title: str | None</code>  <code>property</code>","text":"<p>Return the title of the child page.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildPage.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildrenMixin","title":"<code>ChildrenMixin(*args: Any, **kwargs: Any)</code>","text":"<p>Mixin for data objects that can have children</p> <p>Note that we don't use the <code>children</code> property of some Notion objects, e.g. paragraph, quote, etc., as not every object has this property, e.g. a page or toggleable heading. The <code>children</code> property is mostly used to send a nested batch of blocks with children to Notion in one API call. It cannot be trusted though that the <code>children</code> property is always up-to-date, e.g. when blocks are appended as the Notion API often doesn't send the <code>children</code> property back in the response.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildrenMixin.children","title":"<code>children: tuple[Block, ...]</code>  <code>property</code>","text":"<p>Return the children of this block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildrenMixin.append","title":"<code>append(blocks: Block | Sequence[Block], *, after: Block | None = None, sync: bool | None = None) -&gt; Self</code>","text":"<p>Append a block or a sequence of blocks to the content of this block.</p> <p>If this block is already in Notion, the blocks are appended directly to Notion, otherwise they are prepared to be appended in one batch call, later. Note that explicitely defining <code>sync</code> will not affect the append behaviour itself but will raise an error if it is not what was expected, e.g. <code>sync=True</code> when this block is not yet in Notion.</p> <p>Parameters:</p> Name Type Description Default <code>blocks</code> <code>Block | Sequence[Block]</code> <p>A block or a sequence of blocks to append.</p> required <code>after</code> <code>Block | None</code> <p>A block to append the new blocks after.</p> <code>None</code> <code>sync</code> <code>bool | None</code> <p>Whether to sync the changes with Notion directly or in one batch call later.   If <code>sync = None</code> (default), the blocks are appended directly if this block is already in Notion,   otherwise they are prepared to be appended in one batch call, later.</p> <code>None</code>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Code","title":"<code>Code(text: str, *, language: str | CodeLang = CodeLang.PLAIN_TEXT, caption: str | None = None)</code>","text":"<p>Code block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Code.language","title":"<code>language: CodeLang</code>  <code>property</code> <code>writable</code>","text":"<p>Return the programming language of the code block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Code.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the code content of this block as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ColoredTextBlock","title":"<code>ColoredTextBlock(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Abstract Text block with color.</p> <p>Parent class of all text block types with color.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ColoredTextBlock.color","title":"<code>color: Color | BGColor</code>  <code>property</code> <code>writable</code>","text":"<p>Return the color of the text block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Column","title":"<code>Column()</code>","text":"<p>Column block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Column.width_ratio","title":"<code>width_ratio: float | None</code>  <code>property</code>","text":"<p>Return the width ratio of this column.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Column.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of this column as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns","title":"<code>Columns(columns: int | Sequence[float | int])</code>","text":"<p>Columns block holding multiple <code>Column</code> blocks.</p> <p>This block is used to create a layout with multiple columns in a single page. Either specify the number of columns as an integer or provide a sequence of width ratios, which can be positive integers or floats.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns.width_ratios","title":"<code>width_ratios: tuple[float | None, ...]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the width ratios of the columns.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns.__getitem__","title":"<code>__getitem__(index: int) -&gt; Column</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns.add_column","title":"<code>add_column(index: int | None = None) -&gt; Self</code>","text":"<p>Add a new column to this block of columns at the given index.</p> <p>The index must be between 0 and the number of columns (inclusive). If no index is given, the new column is added at the end.</p> <p>To specify the width ratio of the new column, use the <code>width_ratios</code> property.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns.append","title":"<code>append(blocks: Block | Sequence[Block], *, after: Block | None = None, sync: bool | None = None) -&gt; Self</code>","text":"<p>Append a block or a sequence of blocks to the content of this block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Columns.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of all columns as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.CommentMixin","title":"<code>CommentMixin(*args: Any, **kwargs: Any)</code>","text":"<p>Mixin for objects that can have comments and discussions.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject","title":"<code>DataObject(*args: Any, **kwargs: Any)</code>","text":"<p>The base type for all data-related types, i.e, pages, databases and blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.block_url","title":"<code>block_url: str</code>  <code>property</code>","text":"<p>Return the URL of the block.</p> <p>Note</p> <p>Databases and pages are also considered blocks in Notion but they also have a long-form URL. Use the <code>url</code> property to get the long-form URL.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.has_children","title":"<code>has_children: bool</code>  <code>property</code>","text":"<p>Return whether the object has children.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.is_deleted","title":"<code>is_deleted: bool</code>  <code>property</code>","text":"<p>Return wether the object is in trash.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.last_edited_by","title":"<code>last_edited_by: User</code>  <code>property</code>","text":"<p>Return the user who last edited the block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.delete","title":"<code>delete() -&gt; Self</code>","text":"<p>Delete the block.</p> <p>Pages and databases are moved to the trash, blocks are deleted permanently.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.to_markdown","title":"<code>to_markdown() -&gt; str</code>  <code>abstractmethod</code>","text":"<p>Return the content of the block as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Divider","title":"<code>Divider(*args: Any, **kwargs: Any)</code>","text":"<p>Divider block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Divider.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Embed","title":"<code>Embed(url: str, *, caption: str | None = None)</code>","text":"<p>Embed block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Embed.url","title":"<code>url: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the URL of the embedded item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Embed.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Equation","title":"<code>Equation(latex: str)</code>","text":"<p>Equation block.</p> <p>LaTeX equation in display mode, e.g. <code>$$ \\mathrm{E=mc^2} $$</code>, but without the <code>$$</code> signs.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Equation.latex","title":"<code>latex: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the LaTeX expression of the equation.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Equation.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the LaTeX expression of the equation as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.File","title":"<code>File(file: AnyFile, *, name: str | None = None, caption: str | None = None)</code>","text":"<p>File block.</p> <p>Note</p> <p>Only the caption and name can be modified, the file object is read-only. Note that only the file name not the file suffix can be modified, the suffix is determined initially by the url.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.File.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the name of the file.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.File.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the file link as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.FileBaseBlock","title":"<code>FileBaseBlock(file: AnyFile, *, caption: str | None = None, name: str | None = None)</code>","text":"<p>Abstract Block for file-based blocks.</p> <p>Parent class of all file-based block types.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.FileBaseBlock.file_info","title":"<code>file_info: AnyFile</code>  <code>property</code>","text":"<p>Return the file information of this block as a copy.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.FileBaseBlock.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of the file.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading","title":"<code>Heading(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Abstract Heading block.</p> <p>Parent class of all heading block types.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading.toggleable","title":"<code>toggleable: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the heading is toggleable.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading.append","title":"<code>append(blocks: Block | Sequence[Block], *, after: Block | None = None, sync: bool | None = None) -&gt; Self</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading1","title":"<code>Heading1(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 1 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading1.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading2","title":"<code>Heading2(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 2 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading2.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading3","title":"<code>Heading3(text: str, *, color: Color | BGColor = Color.DEFAULT, toggleable: bool = False)</code>","text":"<p>Heading 3 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading3.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Image","title":"<code>Image(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Image block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Image.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the image as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkPreview","title":"<code>LinkPreview(url: str)</code>","text":"<p>Link preview block.</p> <p>Not Supported</p> <p>The <code>link_preview</code> block can only be returned as part of a response. The Notion API does not support creating or appending <code>link_preview</code> blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkPreview.url","title":"<code>url: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkPreview.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkToPage","title":"<code>LinkToPage(page: Page)</code>","text":"<p>Link to page block.</p> <p>Note</p> <p>Updating a link to page block is not supported by the Notion API. Use <code>.replace(new_block)</code> instead.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkToPage.page","title":"<code>page: Page</code>  <code>property</code> <code>writable</code>","text":"<p>Return the page this block links to.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkToPage.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>\"Return the link to page block as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.NumberedItem","title":"<code>NumberedItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Numbered list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.NumberedItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.PDF","title":"<code>PDF(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>PDF block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.PDF.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the PDF as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Paragraph","title":"<code>Paragraph(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Paragraph block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ParentBlock","title":"<code>ParentBlock(*args: Any, **kwargs: Any)</code>","text":"<p>A block that holds children blocks, mainly used for type checking.</p> <p>If there was no block like that, mypy would narrow a <code>Block | Page</code> object down to a Page object if we check for <code>isinstance(i, ChildrenMixin)</code> as Page inherits from ChildrenMixin and Block not. This is not what we want.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ParentBlock.__eq__","title":"<code>__eq__(other: Any) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ParentBlock.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ParentBlock.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: B_co) -&gt; Self</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Quote","title":"<code>Quote(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Quote block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Quote.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock","title":"<code>SyncedBlock(blocks: Block | Sequence[Block])</code>","text":"<p>Synced block - either original or synced.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.is_original","title":"<code>is_original: bool</code>  <code>property</code>","text":"<p>Return if this block is the original block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.is_synced","title":"<code>is_synced: bool</code>  <code>property</code>","text":"<p>Return if this block is synced from another block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.create_synced","title":"<code>create_synced() -&gt; SyncedBlock</code>","text":"<p>Return the synced block for appending.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.get_original","title":"<code>get_original() -&gt; SyncedBlock</code>","text":"<p>Return the original block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.to_markdown","title":"<code>to_markdown(*, with_comment: bool = True) -&gt; str</code>","text":"<p>Return the content of this synced block as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table","title":"<code>Table(n_rows: int, n_cols: int, *, header_col: bool = False, header_row: bool = False)</code>","text":"<p>Table block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.children","title":"<code>children: tuple[TableRow, ...]</code>  <code>property</code>","text":"<p>Return all rows of the table.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.has_header_col","title":"<code>has_header_col: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the table has a header column.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.has_header_row","title":"<code>has_header_row: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the table has a header row.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.shape","title":"<code>shape: tuple[int, int]</code>  <code>property</code>","text":"<p>Return the shape of the table.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.width","title":"<code>width: int</code>  <code>property</code>","text":"<p>Return the width, i.e. number of columns, of the table.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.__getitem__","title":"<code>__getitem__(index: int | tuple[int, int]) -&gt; Text | TableRow | None</code>","text":"<pre><code>__getitem__(index: int) -&gt; TableRow\n</code></pre><pre><code>__getitem__(index: tuple[int, int]) -&gt; Text | None\n</code></pre>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.__setitem__","title":"<code>__setitem__(index: int | tuple[int, int], value: str | Sequence[str | None] | None) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.append_row","title":"<code>append_row(values: Sequence[str]) -&gt; Self</code>","text":"<p>Append a new row to the table.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.insert_row","title":"<code>insert_row(index: int, values: Sequence[str]) -&gt; Self</code>","text":"<p>Insert a new row at the given index.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the table as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableOfContents","title":"<code>TableOfContents(*, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Table of Contents block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableOfContents.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableRow","title":"<code>TableRow(*cells: str | None)</code>","text":"<p>Table row block behaving like a tuple.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableRow.__new__","title":"<code>__new__(*cells: str | None) -&gt; TableRow</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableRow.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the row as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableRow.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.TableRow) -&gt; TableRow</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Template","title":"<code>Template()</code>","text":"<p>Template block.</p> <p>Deprecated</p> <p>As of March 27, 2023 creation of template blocks will no longer be supported.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Template.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the template content as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TextBlock","title":"<code>TextBlock(text: str)</code>","text":"<p>Abstract Text block.</p> <p>Parent class of all text block types.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TextBlock.rich_text","title":"<code>rich_text: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the text content of this text block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TextBlock.__str__","title":"<code>__str__() -&gt; str</code>","text":"<p>Return the text content of this block as string.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TextBlock.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the text content of this block as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToDoItem","title":"<code>ToDoItem(text: str, *, checked: bool = False, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>ToDo list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToDoItem.checked","title":"<code>checked: bool</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToDoItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToggleItem","title":"<code>ToggleItem(text: str, *, color: Color | BGColor = Color.DEFAULT)</code>","text":"<p>Toggle list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToggleItem.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Unsupported","title":"<code>Unsupported()</code>","text":"<p>Unsupported block in the API.</p> <p>Some blocks like buttons, AI blocks, or templates are not supported by the Notion API. They will be returned as <code>Unsupported</code> blocks when fetched, but cannot be created or modified.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Unsupported.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return a placeholder for unsupported blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Video","title":"<code>Video(file: AnyFile, *, caption: str | None = None)</code>","text":"<p>Video block.</p> <p>Note</p> <p>Only the caption can be modified, the URL is read-only.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Video.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the video as Markdown.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.traverse_blocks","title":"<code>traverse_blocks(blocks: Sequence[Block]) -&gt; Iterator[Block]</code>","text":"<p>Recursively traverse blocks and their children in depth-first order.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.wrap_icon","title":"<code>wrap_icon(icon_obj: objs.FileObject | objs.EmojiObject | objs.CustomEmojiObject) -&gt; NotionFile | ExternalFile | CustomEmoji | Emoji</code>","text":"<p>Wrap the icon object into the corresponding class.</p>"},{"location":"reference/ultimate_notion/cli/","title":"Cli","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli","title":"<code>cli</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.app","title":"<code>app = typer.Typer(name=f'Ultimate Notion {__version__}', help='\ud83d\ude80 The ultimate Python client for Notion!')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel","title":"<code>LogLevel</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel.CRITICAL","title":"<code>CRITICAL = 'critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel.DEBUG","title":"<code>DEBUG = 'debug'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel.INFO","title":"<code>INFO = 'info'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.LogLevel.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.config","title":"<code>config() -&gt; None</code>","text":"<p>Display the current configuration file path and contents</p>"},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.info","title":"<code>info() -&gt; None</code>","text":"<p>Display information about the Notion integration</p>"},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.main","title":"<code>main(log_level: Annotated[LogLevel, typer.Option(help='Log level')] = LogLevel.WARNING) -&gt; None</code>","text":"<p>Shared options for all commands</p>"},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.setup_logging","title":"<code>setup_logging(log_level: LogLevel) -&gt; None</code>","text":"<p>Setup basic logging</p>"},{"location":"reference/ultimate_notion/cli/#ultimate_notion.cli.upload","title":"<code>upload(file_name: Annotated[str, typer.Argument(help='Path to the file to upload')], notion_page: Annotated[str, typer.Argument(help='Page name or UUID to upload the file to')]) -&gt; None</code>","text":"<p>Upload a file to a Notion page and append it as a block.</p> <p>The file will be uploaded to Notion and appended to the specified page. The block type is automatically determined based on the file extension: - Images (.png, .jpg, .jpeg, .gif, .webp, etc.) \u2192 Image block - Videos (.mp4, .avi, .mov, .wmv, etc.) \u2192 Video block - PDFs (.pdf) \u2192 PDF block - All other files \u2192 File block</p> <p>The page can be specified either by name or by UUID. If specified by name, the name must be unique (exact match).</p>"},{"location":"reference/ultimate_notion/comment/","title":"Comment","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment","title":"<code>comment</code>","text":"<p>Comments and discussions for pages, blocks, and databases.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment","title":"<code>Comment(*args: Any, **kwargs: Any)</code>","text":"<p>A comment on a page, block, or database behaving like a normal string.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment.discussion_id","title":"<code>discussion_id: UUID</code>  <code>property</code>","text":"<p>The ID of the discussion thread that this comment belongs to.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment.text","title":"<code>text: Text | None</code>  <code>property</code>","text":"<p>The text of the comment.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment.user","title":"<code>user: User</code>  <code>property</code>","text":"<p>The user who created the comment.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Comment.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion","title":"<code>Discussion(comments: Sequence[Comment], *, parent: DataObject)</code>","text":"<p>A list of comments, i.e. a discussion thread.</p>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion.__getitem__","title":"<code>__getitem__(idx: int | slice) -&gt; Comment | Sequence[Comment]</code>","text":"<pre><code>__getitem__(idx: int) -&gt; Comment\n</code></pre><pre><code>__getitem__(idx: slice) -&gt; Sequence[Comment]\n</code></pre>"},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion.__len__","title":"<code>__len__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/comment/#ultimate_notion.comment.Discussion.append","title":"<code>append(text: str) -&gt; Self</code>","text":"<p>Add a comment to the discussion.</p> <p>Note</p> <p>This functionality requires that your integration was granted insert comment capabilities.</p>"},{"location":"reference/ultimate_notion/config/","title":"Config","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config","title":"<code>config</code>","text":"<p>Handling the configuration for all adapters</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.DEFAULT_CFG","title":"<code>DEFAULT_CFG = f'# Configuration for Ultimate Notion## * Non-absolute paths are always relative to the directory of this file.# * You can use environment variables in the format ${env:VAR_NAME} or ${env:VAR_NAME|DEFAULT_VALUE}.[ultimate_notion]sync_state_dir = \"sync_states\"debug = \"${env:{ENV_ULTIMATE_NOTION_DEBUG}|false}\"token = \"${env:{ENV_NOTION_TOKEN}}\"[google]client_secret_json = \"client_secret.json\"token_json = \"token.json\"'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.DEFAULT_ULTIMATE_NOTION_CFG_PATH","title":"<code>DEFAULT_ULTIMATE_NOTION_CFG_PATH: str = '.ultimate-notion/config.toml'</code>  <code>module-attribute</code>","text":"<p>Default path within $HOME to the configuration file of Ultimate Notion</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.ENV_NOTION_TOKEN","title":"<code>ENV_NOTION_TOKEN = 'NOTION_TOKEN'</code>  <code>module-attribute</code>","text":"<p>Name of the environment variable to look up the Notion token</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.ENV_ULTIMATE_NOTION_CFG","title":"<code>ENV_ULTIMATE_NOTION_CFG: str = 'ULTIMATE_NOTION_CONFIG'</code>  <code>module-attribute</code>","text":"<p>Name of the environment variable to look up the path for the config</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.ENV_ULTIMATE_NOTION_DEBUG","title":"<code>ENV_ULTIMATE_NOTION_DEBUG = 'ULTIMATE_NOTION_DEBUG'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config","title":"<code>Config</code>","text":"<p>Main configuration object.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.google","title":"<code>google: GoogleCfg | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.ultimate_notion","title":"<code>ultimate_notion: UNOCfg</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.google_convert_path","title":"<code>google_convert_path(value: GoogleCfg | None, info: ValidationInfo) -&gt; GoogleCfg | None</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.uno_convert_path","title":"<code>uno_convert_path(value: UNOCfg, info: ValidationInfo) -&gt; UNOCfg</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg","title":"<code>GoogleCfg</code>","text":"<p>Configuration related to the Google API.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg.client_secret_json","title":"<code>client_secret_json: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg.token_json","title":"<code>token_json: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg","title":"<code>UNOCfg</code>","text":"<p>Configuration related to Ultimate Notion itself.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.cfg_path","title":"<code>cfg_path: FilePath</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.debug","title":"<code>debug: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.sync_state_dir","title":"<code>sync_state_dir: Path = Path('sync_states')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.token","title":"<code>token: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.activate_debug_mode","title":"<code>activate_debug_mode() -&gt; None</code>","text":"<p>Activates debug mode by setting up logging and notifying the user.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_cfg","title":"<code>get_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_cfg_file","title":"<code>get_cfg_file() -&gt; Path</code>","text":"<p>Determines the path of the config file.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_or_create_cfg","title":"<code>get_or_create_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object or creates it if it doesn't exist yet.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.resolve_env_value","title":"<code>resolve_env_value(value: str) -&gt; str</code>","text":"<p>Resolves environment variable values in the format ${env:VAR_NAME|DEFAULT_VALUE}.</p>"},{"location":"reference/ultimate_notion/core/","title":"Core","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core","title":"<code>core</code>","text":"<p>Core classes and functions for the Ultimate Notion API.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.GT_co","title":"<code>GT_co = TypeVar('GT_co', bound=(obj_core.GenericObject), default=(obj_core.GenericObject), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NE_co","title":"<code>NE_co = TypeVar('NE_co', bound=(obj_core.NotionEntity), default=(obj_core.NotionEntity), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NO_co","title":"<code>NO_co = TypeVar('NO_co', bound=(obj_core.NotionObject), default=(obj_core.NotionObject), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Workspace","title":"<code>Workspace: Final = _Workspace.ROOT</code>  <code>module-attribute</code>","text":"<p>This represents the actual root workspace in Notion.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.WorkspaceType","title":"<code>WorkspaceType: TypeAlias = Literal[_Workspace.ROOT]</code>  <code>module-attribute</code>","text":"<p>This represents the type of the root workspace in Notion for type hinting.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity","title":"<code>NotionEntity(*args: Any, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.ancestors","title":"<code>ancestors: tuple[NotionEntity, ...]</code>  <code>property</code>","text":"<p>Return all ancestors from the workspace to the actual record (excluding).</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.created_by","title":"<code>created_by: User</code>  <code>property</code>","text":"<p>Return the user who created the block.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.created_time","title":"<code>created_time: dt.datetime</code>  <code>property</code>","text":"<p>Return the time when the block was created.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.id","title":"<code>id: UUID</code>  <code>property</code>","text":"<p>Return the ID of the entity.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.is_db","title":"<code>is_db: bool</code>  <code>property</code>","text":"<p>Return whether the object is a database.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.is_page","title":"<code>is_page: bool</code>  <code>property</code>","text":"<p>Return whether the object is a page.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.last_edited_time","title":"<code>last_edited_time: dt.datetime</code>  <code>property</code>","text":"<p>Return the time when the block was last edited.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.parent","title":"<code>parent: NotionEntity | WorkspaceType | None</code>  <code>property</code>","text":"<p>Return the parent Notion entity, Workspace if the workspace is the parent, or None if not accessible.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionEntity.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionObject","title":"<code>NotionObject(*args: Any, **kwargs: Any)</code>","text":"<p>A top-level Notion API resource.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionObject.id","title":"<code>id: UUID | str</code>  <code>property</code>","text":"<p>Return the ID of the block.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.NotionObject.in_notion","title":"<code>in_notion: bool</code>  <code>property</code>","text":"<p>Return whether the block was created in Notion.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper","title":"<code>Wrapper(*args: Any, **kwargs: Any)</code>","text":"<p>Convert objects from the obj-based API to the high-level API and vice versa.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper.obj_ref","title":"<code>obj_ref: GT_co</code>  <code>property</code> <code>writable</code>","text":"<p>Return the low-level Notion-API object reference.</p> <p>This is just the answer of the Notion API as a Pydantic model.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper.__init_subclass__","title":"<code>__init_subclass__(wraps: type[GT_co], **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper.__new__","title":"<code>__new__(*args: Any, **kwargs: Any) -&gt; Self</code>","text":""},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper.__pydantic_serializer__","title":"<code>__pydantic_serializer__() -&gt; SchemaSerializer</code>","text":"<p>Return the Pydantic serializers for this object.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.Wrapper.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: GT_co) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Wraps low-level <code>obj_ref</code> from Notion API into a high-level (hl) object of Ultimate Notion.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.get_active_session","title":"<code>get_active_session() -&gt; Session</code>","text":"<p>Return the current active session or raise an exception.</p> <p>Avoids cyclic imports when used within the package itself. For internal use mostly.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.get_repr","title":"<code>get_repr(obj: Any, /, *, name: Any = None, desc: Any = None) -&gt; str</code>","text":"<p>Default representation, i.e. <code>repr(...)</code>, used by us for consistency.</p>"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core.get_url","title":"<code>get_url(object_id: UUID | str) -&gt; str</code>","text":"<p>Return the URL for the object with the given id.</p>"},{"location":"reference/ultimate_notion/database/","title":"Database","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","title":"<code>database</code>","text":"<p>Functionality for working with Notion databases.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","title":"<code>Database(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion database.</p> <p>This object always represents an original database, not a linked database.</p> <p>API reference: https://developers.notion.com/docs/working-with-databases</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","title":"<code>cover: AnyFile | None</code>  <code>property</code>","text":"<p>Return the cover of this database as file.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","title":"<code>description: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the description of this database as rich text.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","title":"<code>icon: AnyFile | Emoji | CustomEmoji | None</code>  <code>property</code>","text":"<p>Return the icon of this database as file or emoji.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_db","title":"<code>is_db: bool</code>  <code>property</code>","text":"<p>Return whether the object is a database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Return whether the database is empty.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","title":"<code>is_inline: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Return whether the database is inline.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_wiki","title":"<code>is_wiki: bool</code>  <code>property</code>","text":"<p>Return whether the database is a wiki.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.query","title":"<code>query: Query</code>  <code>property</code>","text":"<p>Return a Query object to build and execute a database query.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.schema","title":"<code>schema: type[Schema]</code>  <code>property</code> <code>writable</code>","text":"<p>Schema of the database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","title":"<code>title: str | Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the title of this database as rich text.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__bool__","title":"<code>__bool__() -&gt; bool</code>","text":"<p>Overwrite default behaviour.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of pages in this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.create_page","title":"<code>create_page(**kwargs: Any) -&gt; Page</code>","text":"<p>Create a page with properties according to the schema within the corresponding database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.delete","title":"<code>delete() -&gt; Self</code>","text":"<p>Delete this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.get_all_pages","title":"<code>get_all_pages() -&gt; View</code>","text":"<p>Retrieve all pages and return a view.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.reload","title":"<code>reload(*, rebind_schema: bool = True) -&gt; Self</code>","text":"<p>Reload this database.</p> <p>If <code>rebind_schema</code> is <code>True</code>, the schema will be rebound to the current database. Otherwise, the schema will set to the reflected schema of the current database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.restore","title":"<code>restore() -&gt; Self</code>","text":"<p>Restore this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the reference to this database as Markdown.</p>"},{"location":"reference/ultimate_notion/emoji/","title":"Emoji","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji","title":"<code>emoji</code>","text":"<p>Dealing with emoji objects of the Notion API.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.TO","title":"<code>TO = TypeVar('TO', bound=(objs.TypedObject))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji","title":"<code>CustomEmoji()</code>","text":"<p>Custom emoji object which behaves like str.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji.id","title":"<code>id: UUID</code>  <code>property</code>","text":"<p>Return the ID of this custom emoji.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return the name of this custom emoji.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of this custom emoji.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.CustomEmoji.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.Emoji","title":"<code>Emoji(emoji: str)</code>","text":"<p>Unicode emoji object which behaves like str.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.Emoji.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return the name of the emoji.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.Emoji.obj_ref","title":"<code>obj_ref = objs.EmojiObject.build(emoji)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.Emoji.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.Emoji.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.EmojiBase","title":"<code>EmojiBase(*args: Any, **kwargs: Any)</code>","text":"<p>Base class for emoji objects, which behave like str.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.EmojiBase.name","title":"<code>name: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the name of the emoji.</p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.EmojiBase.to_code","title":"<code>to_code: str</code>  <code>property</code>","text":"<p>Represent the emoji as :shortcode:, e.g. </p>"},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.EmojiBase.__eq__","title":"<code>__eq__(other: Any) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/emoji/#ultimate_notion.emoji.EmojiBase.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/errors/","title":"Errors","text":""},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors","title":"<code>errors</code>","text":"<p>Errors/exceptions of the Ultimate Notion API.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.EmptyDBError","title":"<code>EmptyDBError</code>","text":"<p>A special exception that tells us that a database is empty during probing.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.EmptyListError","title":"<code>EmptyListError</code>","text":"<p>Custom exception for an empty list in SList.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.FilterQueryError","title":"<code>FilterQueryError</code>","text":"<p>An exception that is raised when a filter query is invalid.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.InvalidAPIUsageError","title":"<code>InvalidAPIUsageError</code>","text":"<p>Raised when the API is used in an invalid way.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.MultipleItemsError","title":"<code>MultipleItemsError</code>","text":"<p>Custom exception for a list with multiple items in SList.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.PropertyError","title":"<code>PropertyError</code>","text":"<p>Raised when there is an issue with a property in the schema.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.ReadOnlyPropertyError","title":"<code>ReadOnlyPropertyError</code>","text":"<p>Raised when an attempt is made to write to a write-protected property.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.RelationError","title":"<code>RelationError</code>","text":"<p>Error if a Relation cannot be initialised.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.RollupError","title":"<code>RollupError</code>","text":"<p>Error if definition of rollup is wrong.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.SchemaError","title":"<code>SchemaError</code>","text":"<p>Raised when there are issues with the schema of a database.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.SchemaNotBoundError","title":"<code>SchemaNotBoundError(schema: type[Schema])</code>","text":"<p>Raised when the schema is not bound to a database.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.SchemaNotBoundError.schema","title":"<code>schema = schema</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.SessionError","title":"<code>SessionError</code>","text":"<p>Raised when there are issues with the Notion session.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.UltimateNotionError","title":"<code>UltimateNotionError</code>","text":"<p>Base class for all exceptions in this package.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.UnknownDatabaseError","title":"<code>UnknownDatabaseError</code>","text":"<p>Raised when the database is unknown.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.UnknownPageError","title":"<code>UnknownPageError</code>","text":"<p>Raised when the page is unknown.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.UnknownUserError","title":"<code>UnknownUserError</code>","text":"<p>Raised when the user is unknown.</p>"},{"location":"reference/ultimate_notion/errors/#ultimate_notion.errors.UnsetError","title":"<code>UnsetError</code>","text":"<p>Raised when an unset value is accessed before being initialized by the Notion API.</p>"},{"location":"reference/ultimate_notion/file/","title":"File","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file","title":"<code>file</code>","text":"<p>Dealing with file infos of the Notion API.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.FO_co","title":"<code>FO_co = TypeVar('FO_co', bound=(objs.FileObject), default=(objs.FileObject), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.MAX_FILE_SIZE","title":"<code>MAX_FILE_SIZE = 20000000</code>  <code>module-attribute</code>","text":"<p>Maximum file size for single part upload. It's 5MB only for the free plan</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.NOTION_HOSTED_DOMAIN","title":"<code>NOTION_HOSTED_DOMAIN = 'secure.notion-static.com'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile","title":"<code>AnyFile(*args: Any, **kwargs: Any)</code>","text":"<p>Information about a web resource e.g. for the files property.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile.caption","title":"<code>caption: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the caption of the file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile.name","title":"<code>name: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the name of the file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.AnyFile.__str__","title":"<code>__str__() -&gt; str</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.ExternalFile","title":"<code>ExternalFile(*, url: str, name: str | None = None, caption: str | None = None)</code>","text":"<p>Information about a file that is hosted externally, i.e. not by Notion.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.ExternalFile.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.ExternalFile.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.ExternalFile.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.NotionFile","title":"<code>NotionFile(*, url: str, name: str | None = None, caption: str | None = None)</code>","text":"<p>Information about a file that is hosted by Notion.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.NotionFile.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.NotionFile.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.NotionFile.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile","title":"<code>UploadedFile()</code>","text":"<p>Information about a file that has been uploaded to Notion.</p> <p>Note</p> <p>This class is used to represent files that have been uploaded to Notion. After it has been used, e.g. to change a cover or add a file block, it will be converted to a <code>NotionFile</code> (i.e. <code>objs.HostedFile</code>), when read again from the API.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.content_length","title":"<code>content_length: int | None</code>  <code>property</code>","text":"<p>Return the content length of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.content_type","title":"<code>content_type: str | None</code>  <code>property</code>","text":"<p>Return the content type of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.expiry_time","title":"<code>expiry_time: pnd.DateTime | None</code>  <code>property</code>","text":"<p>Return the expiry time of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.file_import_result","title":"<code>file_import_result: objs.FileImportSuccess | objs.FileImportError | None</code>  <code>property</code>","text":"<p>Return the file import result of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.file_name","title":"<code>file_name: str | None</code>  <code>property</code>","text":"<p>Return the file name of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.id","title":"<code>id: UUID</code>  <code>property</code>","text":"<p>Return the ID of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.obj_file_upload","title":"<code>obj_file_upload: objs.FileUpload</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.poll_interval","title":"<code>poll_interval: float = 1.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.status","title":"<code>status: FileUploadStatus</code>  <code>property</code>","text":"<p>Return the status of the uploaded file.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.from_file_upload","title":"<code>from_file_upload(file_upload: objs.FileUpload) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create an UploadedFile instance from a FileUpload object.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.update_status","title":"<code>update_status() -&gt; Self</code>","text":"<p>Update the uploaded file information.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.UploadedFile.wait_until_uploaded","title":"<code>wait_until_uploaded() -&gt; Self</code>","text":"<p>Wait until the uploaded file is fully processed.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.get_file_size","title":"<code>get_file_size(file: BinaryIO) -&gt; int</code>","text":"<p>Get the size of a file in bytes.</p> <p>This function preserves the current file position.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>BinaryIO</code> <p>The binary file object to measure</p> required <p>Returns:</p> Type Description <code>int</code> <p>The size of the file in bytes</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.get_mime_type","title":"<code>get_mime_type(file: BinaryIO) -&gt; str</code>","text":"<p>Detect the MIME type of a file.</p> <p>This function preserves the current file position.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>BinaryIO</code> <p>The binary file object to analyze</p> required <p>Returns:</p> Type Description <code>str</code> <p>The detected MIME type, or 'application/octet-stream' if unknown</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.is_notion_hosted","title":"<code>is_notion_hosted(url: str) -&gt; bool</code>","text":"<p>Check if the URL is hosted on Notion.</p>"},{"location":"reference/ultimate_notion/file/#ultimate_notion.file.url","title":"<code>url(url: str, *, name: str | None = None, caption: str | None = None) -&gt; NotionFile | ExternalFile</code>","text":"<p>Create a NotionFile or ExternalFile based on the URL.</p> <p>A name and caption can be provided and will be used as default values, e.g. in a File block.</p>"},{"location":"reference/ultimate_notion/markdown/","title":"Markdown","text":""},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown","title":"<code>markdown</code>","text":"<p>Functionality for working with Markdown in Notion.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.MD_STYLES","title":"<code>MD_STYLES = ('bold', 'italic', 'strikethrough', 'code', 'link')</code>  <code>module-attribute</code>","text":"<p>Markdown styles supported by Notion.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.MD_STYLE_MAP","title":"<code>MD_STYLE_MAP = {'bold': '**', 'italic': '*', 'strikethrough': '~~', 'code': '`'}</code>  <code>module-attribute</code>","text":"<p>Mapping from markdown style to markdown symbol.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.render_md","title":"<code>render_md = get_md_renderer()</code>  <code>module-attribute</code>","text":"<p>Convert Markdown to HTML.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.get_md_renderer","title":"<code>get_md_renderer() -&gt; Callable[[str], str]</code>","text":"<p>Create a markdown renderer.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.md_comment","title":"<code>md_comment(text: str) -&gt; str</code>","text":"<p>Create a markdown comment.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.md_spans","title":"<code>md_spans(rich_texts: Sequence[RichTextBase]) -&gt; NDArray[np.int_]</code>","text":"<p>Convert rich text to markdown spans.</p> <p>An span is a sequence of rich texts with the same markdown style expressed as a row in the returned array. The value k of the j-th array column corresponds to the length of the current span richt_texts[j-k:j].</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.rich_texts_to_markdown","title":"<code>rich_texts_to_markdown(rich_texts: Sequence[RichTextBase]) -&gt; str</code>","text":"<p>Convert a list of rich texts to markdown.</p>"},{"location":"reference/ultimate_notion/markdown/#ultimate_notion.markdown.sorted_md_spans","title":"<code>sorted_md_spans(md_spans: NDArray[np.int_]) -&gt; Iterator[tuple[int, int, str]]</code>","text":"<p>Sort the spans of the given markdown spans in the right order.</p> <p>We have to iterate from the smallest spans to the largest spans and from left to right.</p>"},{"location":"reference/ultimate_notion/option/","title":"Option","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option","title":"<code>option</code>","text":"<p>Functionality for general Notion objects like texts, files, options, etc.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option","title":"<code>Option(name: str, *, color: Color | str | UnsetType = Unset)</code>","text":"<p>Option for select &amp; multi-select property.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.color","title":"<code>color: Color</code>  <code>property</code>","text":"<p>Color of the option.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.description","title":"<code>description: str</code>  <code>property</code>","text":"<p>Description of the option.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>ID of the option.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.Option.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup","title":"<code>OptionGroup(group_type: OptionGroupType | str, options: list[Option])</code>","text":"<p>Group of options for status property.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option group.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.options","title":"<code>options: list[Option]</code>  <code>property</code>","text":"<p>Options within this option group.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionGroup.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.SelectGroup, /, *, options: list[Option] | None = None) -&gt; OptionGroup</code>  <code>classmethod</code>","text":"<p>Convienence constructor for the group of options.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionNS","title":"<code>OptionNS</code>","text":"<p>Option namespace to simplify working with (Multi-)Select options.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionNS.to_list","title":"<code>to_list() -&gt; list[Option]</code>  <code>classmethod</code>","text":"<p>Convert the enum to a list as needed by the (Multi)Select property types.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionNSType","title":"<code>OptionNSType</code>","text":"<p>Metaclass to implement <code>len</code> for type <code>OptionNS</code> itself, not an instance of it.</p>"},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.OptionNSType.__len__","title":"<code>__len__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/option/#ultimate_notion.option.check_for_updates","title":"<code>check_for_updates(old: list[Option], new: list[Option]) -&gt; dict[str, list[str]]</code>","text":"<p>Check if two lists of options contain updates.</p> <p>Returns which attributes have changed for each option. This is mainly used to check if options have changed when updating a select or multi-select property as this is not supported by the Notion API.</p>"},{"location":"reference/ultimate_notion/page/","title":"Page","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","title":"<code>page</code>","text":"<p>Functionality around Notion pages.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","title":"<code>Page(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion page.</p> <p>Attributes:</p> Name Type Description <code>props</code> <code>PagePropertiesNS</code> <p>accessor for all page properties</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.comments","title":"<code>comments: Discussion</code>  <code>property</code>","text":"<p>Return the discussion thread of this page.</p> <p>A page can only have a single discussion thread in contrast to inline comments.</p> <p>Note</p> <p>This functionality requires that your integration was granted read comment capabilities.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.cover","title":"<code>cover: ExternalFile | NotionFile | None</code>  <code>property</code> <code>writable</code>","text":"<p>Cover of the page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.icon","title":"<code>icon: NotionFile | ExternalFile | Emoji | CustomEmoji | None</code>  <code>property</code> <code>writable</code>","text":"<p>Icon of the page, i.e. emojis, Notion's icons, or custom images.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.in_db","title":"<code>in_db: bool</code>  <code>property</code>","text":"<p>Return True if this page is located in a database.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.is_locked","title":"<code>is_locked: bool</code>  <code>property</code>","text":"<p>Return whether the page is locked for editing.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.is_page","title":"<code>is_page: bool</code>  <code>property</code>","text":"<p>Return whether the object is a page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.parent_db","title":"<code>parent_db: Database | None</code>  <code>property</code>","text":"<p>If this page is located in a database return the database or None otherwise.</p> <p>This is a convenience method to avoid the need to check and cast the type of the parent.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.props","title":"<code>props: PagePropertiesNS</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.public_url","title":"<code>public_url: str | None</code>  <code>property</code>","text":"<p>Return the public URL of this database.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.subdbs","title":"<code>subdbs: list[Database]</code>  <code>property</code>","text":"<p>Return all contained databases within this page</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.subpages","title":"<code>subpages: list[Page]</code>  <code>property</code>","text":"<p>Return all contained pages within this page</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","title":"<code>title: Text | None</code>  <code>property</code> <code>writable</code>","text":"<p>Title of the page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>Return the URL of this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.delete","title":"<code>delete() -&gt; Self</code>","text":"<p>Delete this page.</p> <p>Warning</p> <p>Deleting a page will also delete all child pages and child databases recursively. If these objects are already cached in the session, they will not be updated. Use <code>session.cache.clear()</code> to clear the cache or call <code>reload()</code> on them.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.get_property","title":"<code>get_property(prop_name: str) -&gt; Any</code>","text":"<p>Directly retrieve the property value from the API.</p> <p>Use this method only if you want to retrieve a specific property value that might have been updated on the server side without reloading the whole page. In all other cases, use the <code>props</code> namespace of the page to avoid unnecessary API calls.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.reload","title":"<code>reload() -&gt; Self</code>","text":"<p>Reload this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.restore","title":"<code>restore() -&gt; Self</code>","text":"<p>Restore this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.show","title":"<code>show(*, simple: bool | None = None) -&gt; None</code>","text":"<p>Show the content of the page, rendered in JupyterLab</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_html","title":"<code>to_html(*, raw: bool = False) -&gt; str</code>","text":"<p>Return the content of the page as HTML.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of the page as Markdown.</p> <p>Note</p> <p>This will not include nested blocks, i.e. the children of top-level blocks.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.Page) -&gt; Self</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS","title":"<code>PagePropertiesNS(page: Page, schema: type[Schema] | None)</code>","text":"<p>Namespace of the properties of a page as defined in the schema of the database.</p> <p>This defines the <code>.props</code> namespace of a page <code>page</code> and updates the content on the Notion server side in case of an assignment. Access the properties with <code>page.props.property_name</code> or <code>page.props['Property Name']</code>. You can also convert it to a dictionary with <code>dict(page.props)</code>.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__getattr__","title":"<code>__getattr__(attr_name: str) -&gt; Any</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__getitem__","title":"<code>__getitem__(prop_name: str) -&gt; Any</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__iter__","title":"<code>__iter__() -&gt; Iterator[str]</code>","text":"<p>Iterator of property names.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of properties.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__setattr__","title":"<code>__setattr__(attr_name: str, value: Any) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__setitem__","title":"<code>__setitem__(prop_name: str, value: Any) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PagePropertiesNS.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.is_db_guard","title":"<code>is_db_guard(obj: NotionEntity | WorkspaceType | None) -&gt; TypeIs[Database]</code>","text":"<p>Return whether the object is a database as type guard.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.is_page_guard","title":"<code>is_page_guard(obj: NotionEntity | WorkspaceType | None) -&gt; TypeIs[Page]</code>","text":"<p>Return whether the object is a page as type guard.</p>"},{"location":"reference/ultimate_notion/props/","title":"Props","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props","title":"<code>props</code>","text":"<p>Page property values especially for pages within databases. The names of the properties reflect the name in the Notion UI.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PV_co","title":"<code>PV_co = TypeVar('PV_co', bound=(obj_props.PropertyValue), default=(obj_props.PropertyValue), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Button","title":"<code>Button(values: Any | Sequence[Any])</code>","text":"<p>Button property value.</p> <p>This is a read-only property that represents a button in a database.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Button.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Button.value","title":"<code>value: None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Button.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Button.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Checkbox","title":"<code>Checkbox(values: Any | Sequence[Any])</code>","text":"<p>Simple checkbox type; represented as a boolean.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Checkbox.value","title":"<code>value: bool | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy","title":"<code>CreatedBy(values: Any | Sequence[Any])</code>","text":"<p>Created-by property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy.value","title":"<code>value: User</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime","title":"<code>CreatedTime(values: Any | Sequence[Any])</code>","text":"<p>Created-time property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime.value","title":"<code>value: pnd.DateTime</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date","title":"<code>Date(dt_spec: str | DateTimeOrRange)</code>","text":"<p>Date(-time) property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.obj_ref","title":"<code>obj_ref = obj_props.Date.build(dt_spec)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.value","title":"<code>value: DateTimeOrRange | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Email","title":"<code>Email(values: Any | Sequence[Any])</code>","text":"<p>Email property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Email.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Files","title":"<code>Files(files: AnyFile | Sequence[AnyFile])</code>","text":"<p>Files property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Files.value","title":"<code>value: list[AnyFile]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula","title":"<code>Formula(values: Any | Sequence[Any])</code>","text":"<p>Formula property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.value","title":"<code>value: str | float | int | DateTimeOrRange | None</code>  <code>property</code>","text":"<p>Return the result value of the formula.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.value_type","title":"<code>value_type: FormulaType | None</code>  <code>property</code>","text":"<p>Return the type of the formula result.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID","title":"<code>ID(values: Any | Sequence[Any])</code>","text":"<p>Unique ID property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.number","title":"<code>number: int</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.prefix","title":"<code>prefix: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.value","title":"<code>value: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy","title":"<code>LastEditedBy(values: Any | Sequence[Any])</code>","text":"<p>Last-edited-by property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy.value","title":"<code>value: User</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime","title":"<code>LastEditedTime(values: Any | Sequence[Any])</code>","text":"<p>Last-edited-time property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime.value","title":"<code>value: pnd.DateTime</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect","title":"<code>MultiSelect(options: str | Option | Sequence[str | Option])</code>","text":"<p>Multi-select property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect.value","title":"<code>value: list[Option] | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number","title":"<code>Number(values: Any | Sequence[Any])</code>","text":"<p>Number property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.value","title":"<code>value: int | float | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Person","title":"<code>Person(users: User | Sequence[User])</code>","text":"<p>Person/People property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Person.value","title":"<code>value: list[User]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Phone","title":"<code>Phone(values: Any | Sequence[Any])</code>","text":"<p>Phone property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Phone.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Place","title":"<code>Place(values: Any | Sequence[Any])</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Place</code> property.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Place.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Place.value","title":"<code>value: None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Place.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Place.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue","title":"<code>PropertyValue(values: Any | Sequence[Any])</code>","text":"<p>Base class for Notion property values.</p> <p>Used to map high-level objects to low-level Notion-API objects</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.id","title":"<code>id: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.readonly","title":"<code>readonly: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.value","title":"<code>value: Any</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the actual Python value object of this property.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__init_subclass__","title":"<code>__init_subclass__(wraps: type[PV_co], **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations","title":"<code>Relations(pages: Page | Sequence[Page])</code>","text":"<p>Relation property values.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations.value","title":"<code>value: list[Page]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup","title":"<code>Rollup(values: Any | Sequence[Any])</code>","text":"<p>Rollup property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.value","title":"<code>value: float | int | DateTimeOrRange | list[Any] | None</code>  <code>property</code>","text":"<p>Return the result value of the rollup.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.value_type","title":"<code>value_type: RollupType | None</code>  <code>property</code>","text":"<p>Return the type of the rollup result.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select","title":"<code>Select(option: str | Option)</code>","text":"<p>Single select property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select.value","title":"<code>value: Option | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status","title":"<code>Status(option: str | Option)</code>","text":"<p>Status property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status.value","title":"<code>value: Option | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text","title":"<code>Text(text: str)</code>","text":"<p>Rich text property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text.value","title":"<code>value: rt.Text</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title","title":"<code>Title(text: str)</code>","text":"<p>Title property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title.value","title":"<code>value: rt.Text</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.URL","title":"<code>URL(values: Any | Sequence[Any])</code>","text":"<p>URL property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.URL.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification","title":"<code>Verification(values: Any | Sequence[Any])</code>","text":"<p>Verification property value of pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.date","title":"<code>date: pnd.DateTime | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.state","title":"<code>state: VState</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.value","title":"<code>value: Self</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.verified_by","title":"<code>verified_by: User | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/query/","title":"Query","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query","title":"<code>query</code>","text":"<p>Query the database for pages.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.And","title":"<code>And</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.And.terms","title":"<code>terms: list[Condition]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.And.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.And.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition","title":"<code>Condition</code>","text":"<p>Base class for filter query conditions.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.is_method","title":"<code>is_method: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__and__","title":"<code>__and__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__iand__","title":"<code>__iand__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__ior__","title":"<code>__ior__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__or__","title":"<code>__or__(other: Condition) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__repr__","title":"<code>__repr__() -&gt; str</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Condition.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Contains","title":"<code>Contains</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Contains.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Contains.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Contains.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.ContainsNot","title":"<code>ContainsNot</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.ContainsNot.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.DateCondition","title":"<code>DateCondition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.DateCondition.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.DateCondition.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.DateCondition.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.EndsWith","title":"<code>EndsWith</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.EndsWith.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Equals","title":"<code>Equals</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Equals.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Equals.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.EqualsNot","title":"<code>EqualsNot</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.EqualsNot.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.GreaterThan","title":"<code>GreaterThan</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.GreaterThan.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.GreaterThanOrEqualTo","title":"<code>GreaterThanOrEqualTo</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.GreaterThanOrEqualTo.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.InEquality","title":"<code>InEquality</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.InEquality.__repr__","title":"<code>__repr__() -&gt; str</code>  <code>abstractmethod</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.InEquality.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsEmpty","title":"<code>IsEmpty</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsEmpty.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsEmpty.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsEmpty.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsNotEmpty","title":"<code>IsNotEmpty</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.IsNotEmpty.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.LessThan","title":"<code>LessThan</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.LessThan.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.LessThanOrEqualTo","title":"<code>LessThanOrEqualTo</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.LessThanOrEqualTo.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.NextMonth","title":"<code>NextMonth</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.NextWeek","title":"<code>NextWeek</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.NextYear","title":"<code>NextYear</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Or","title":"<code>Or</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Or.terms","title":"<code>terms: list[Condition]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Or.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Or.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty","title":"<code>PageProperty</code>","text":"<p>Represents a property of a page.</p> <p>Note</p> <p>We override some magic methods to allow for more natural query building in an unorthodox way. Be aware that for instance the comparison operator == will not return boolean values but instances of the corresponding condition classes.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.any","title":"<code>any: RollupArrayProperty</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.every","title":"<code>every: RollupArrayProperty</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.none","title":"<code>none: RollupArrayProperty</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.sort","title":"<code>sort: SortDirection = Field(default=(SortDirection.ASCENDING))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__eq__","title":"<code>__eq__(other: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__ge__","title":"<code>__ge__(value: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__gt__","title":"<code>__gt__(value: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__le__","title":"<code>__le__(value: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__lt__","title":"<code>__lt__(value: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__ne__","title":"<code>__ne__(other: Any) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.asc","title":"<code>asc() -&gt; Self</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.contains","title":"<code>contains(value: str | User | Page | Option) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.desc","title":"<code>desc() -&gt; Self</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.does_not_contain","title":"<code>does_not_contain(value: str | User | Page | Option) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.ends_with","title":"<code>ends_with(value: str) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.is_empty","title":"<code>is_empty() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.is_not_empty","title":"<code>is_not_empty() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.next_month","title":"<code>next_month() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.next_week","title":"<code>next_week() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.next_year","title":"<code>next_year() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.past_month","title":"<code>past_month() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.past_week","title":"<code>past_week() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.past_year","title":"<code>past_year() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.starts_with","title":"<code>starts_with(value: str) -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PageProperty.this_week","title":"<code>this_week() -&gt; Condition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PastMonth","title":"<code>PastMonth</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PastWeek","title":"<code>PastWeek</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PastYear","title":"<code>PastYear</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PropertyCondition","title":"<code>PropertyCondition</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PropertyCondition.prop","title":"<code>prop: PageProperty</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.PropertyCondition.value","title":"<code>value: Any</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query","title":"<code>Query(database: Database)</code>","text":"<p>A query object to filter and sort pages in a database.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.database","title":"<code>database: Database = database</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.execute","title":"<code>execute() -&gt; View</code>","text":"<p>Execute the query and return the resulting pages as a view.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.filter","title":"<code>filter(expr: Condition) -&gt; Query</code>","text":"<p>Filter the query by the given properties.</p> <p>Note</p> <p>The filter is applied as an AND operation with the existing filter.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.Query.sort","title":"<code>sort(*props: PageProperty | str) -&gt; Query</code>","text":"<p>Sort the query by the given properties and directions.</p> <p>Note</p> <p>The order of the properties is important. The first property is the primary sort, the second is the secondary sort, and so on. Calling this method multiple times will overwrite the previous sorts.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.RollupArrayProperty","title":"<code>RollupArrayProperty</code>","text":"<p>Represents a rollup array property of a page.</p>"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.RollupArrayProperty.quantifier","title":"<code>quantifier: ArrayQuantifier</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.RollupArrayProperty.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.StartsWith","title":"<code>StartsWith</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.StartsWith.is_method","title":"<code>is_method: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.StartsWith.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.StartsWith.create_obj_ref","title":"<code>create_obj_ref(db: Database) -&gt; obj_query.QueryFilter</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.ThisWeek","title":"<code>ThisWeek</code>","text":""},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.prop","title":"<code>prop(prop_name: str) -&gt; PageProperty</code>","text":"<p>Create a property object.</p>"},{"location":"reference/ultimate_notion/rich_text/","title":"Rich text","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text","title":"<code>rich_text</code>","text":"<p>Utilities for working with plain &amp; rich texts in Notion.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RTBO_co","title":"<code>RTBO_co = TypeVar('RTBO_co', bound=(objs.RichTextBaseObject), default=(objs.RichTextBaseObject), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Math","title":"<code>Math(expression: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT, href: str | None = None)</code>","text":"<p>An inline equation object.</p> <p>A LaTeX equation in inline mode, e.g. <code>$ \\mathrm{E=mc^2} $</code>, but without the <code>$</code> signs.</p> <p>Note</p> <p>Only used internally. Use the <code>math</code> function instead, to create proper <code>Text</code> object.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Mention","title":"<code>Mention(target: User | Page | Database | CustomEmoji | objs.DateTimeOrRange, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT)</code>","text":"<p>A Mention object.</p> <p>Note</p> <p>Only used internally. Use the <code>mention</code> function instead, to create proper <code>RichText</code> object.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Mention.obj_ref","title":"<code>obj_ref = objs.DateRange.build(target).build_mention(style=annotations)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Mention.type","title":"<code>type: str</code>  <code>property</code>","text":"<p>Type of the mention, e.g. user, page, etc.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RichText","title":"<code>RichText(text: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color | BGColor | None = None, href: str | None = None)</code>","text":"<p>A RichText object defining a formatted text fragment.</p> <p>Note</p> <p>Only used internally. Use <code>Text</code> instead or the <code>text</code> function (recommended).</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RichTextBase","title":"<code>RichTextBase(*args: Any, href: str | None, **kwargs: Any)</code>","text":"<p>Super class for text, equation and mentions of various kinds.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RichTextBase.is_equation","title":"<code>is_equation: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RichTextBase.is_mention","title":"<code>is_mention: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.RichTextBase.is_text","title":"<code>is_text: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text","title":"<code>Text(text: str)</code>","text":"<p>User-facing class holding several RichTextsBase objects.</p> <p>Rather use the constructor function <code>text</code> to create a <code>Text</code> object from a normal string with formatting.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.mentions","title":"<code>mentions: tuple[Mention, ...]</code>  <code>property</code>","text":"<p>Return all mentions in the text.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.obj_ref","title":"<code>obj_ref: list[objs.RichTextBaseObject]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.rich_texts","title":"<code>rich_texts: tuple[RichTextBase, ...]</code>  <code>property</code>","text":"<p>Return the rich texts as immutable tuple.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.__add__","title":"<code>__add__(other: str) -&gt; Text</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.from_markdown","title":"<code>from_markdown(text: str) -&gt; Text</code>  <code>classmethod</code>","text":"<p>Create RichTextList by parsing the markdown.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.from_plain_text","title":"<code>from_plain_text(text: str) -&gt; Text</code>  <code>classmethod</code>","text":"<p>Create RichTextList from plain text.</p> <p>This method is a more explicit alias for the default constructor.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.to_html","title":"<code>to_html() -&gt; str</code>","text":"<p>Return rich text as HTML.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Convert the list of RichText objects to markdown.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.to_plain_text","title":"<code>to_plain_text() -&gt; str</code>","text":"<p>Return rich text as plain text</p> <p>This method is a more explicit variant then just using the object.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.Text.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_refs: list[objs.RichTextBaseObject] | None) -&gt; Self</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.camel_case","title":"<code>camel_case(string: str) -&gt; str</code>","text":"<p>Make a Python identifier in CamelCase.</p> <p>Attention: This may result in an empty string and a CamelCase sting will be capitalized!</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.chunky","title":"<code>chunky(text: str, length: int = MAX_TEXT_OBJECT_SIZE) -&gt; Iterator[str]</code>","text":"<p>Break the given <code>text</code> into chunks of at most <code>length</code> size.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.decapitalize","title":"<code>decapitalize(string: str) -&gt; str</code>","text":"<p>Inverse of <code>capitalize</code>.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.html_img","title":"<code>html_img(url: str, size: float) -&gt; str</code>","text":"<p>Create a img tag in HTML.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.is_url","title":"<code>is_url(string: str) -&gt; bool</code>","text":"<p>Check if a string is a valid URL.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.join","title":"<code>join(texts: Sequence[str], *, delim: str = ' ') -&gt; Text</code>","text":"<p>Join multiple str objects, including Text, into a single Text object with a given delimeter.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.math","title":"<code>math(expression: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT) -&gt; Text</code>","text":"<p>Create a Text that holds a formula.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.mention","title":"<code>mention(target: User | Page | Database | CustomEmoji | objs.DateTimeOrRange, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color = Color.DEFAULT) -&gt; Text</code>","text":"<p>Create a Text that mentions another object.</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.python_identifier","title":"<code>python_identifier(string: str) -&gt; str</code>","text":"<p>Make a valid Python identifier.</p> <p>This will remove any leading characters that are not valid and change all invalid interior sequences to underscore.</p> <p>Attention: This may result in an empty string!</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.snake_case","title":"<code>snake_case(string: str) -&gt; str</code>","text":"<p>Make a Python identifier in snake_case.</p> <p>Attention: This may result in an empty string!</p>"},{"location":"reference/ultimate_notion/rich_text/#ultimate_notion.rich_text.text","title":"<code>text(text: str, *, bold: bool = False, italic: bool = False, strikethrough: bool = False, code: bool = False, underline: bool = False, color: Color | BGColor | None = None, href: str | None = None) -&gt; Text</code>","text":"<p>Create a rich text Text object from a normal string with formatting.</p> <p>Note</p> <p>With the <code>color</code> parameter the font color or the background color can be set. Unfortunately Notion's API does not allow to set both at the same time like in the Notion UI.</p> <p>Warning</p> <p>If a <code>Text</code> object is passed, the original formatting will be lost!</p>"},{"location":"reference/ultimate_notion/schema/","title":"Schema","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema","title":"<code>schema</code>","text":"<p>Functionality around defining a database schema.</p> <p>Currently only normal databases, no wiki databases, can be created [1]. Neither the <code>Unique ID</code> nor <code>Status</code> nor the <code>Verfication</code> page property can be set as a database property in a custom Schema when creating the database.</p> <p>[1] https://developers.notion.com/docs/working-with-databases#wiki-databases</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema--design-principles","title":"Design Principles","text":"<p>A schema is a subclass of <code>Schema</code> that holds <code>Property</code> objects, which define the name and the type of the property, e.g. <code>Text</code>, <code>Number</code>.</p> <p>The source of truth is always the <code>obj_ref</code> and a <code>Property</code> holds only auxilliary information if actually needed. Since the object references <code>obj_ref</code> must always point to the actual <code>obj_api.blocks.Database.properties</code> value if the schema is bound to a database, the method <code>_set_obj_refs</code> rewires this when a schema is used to create a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.GO_co","title":"<code>GO_co = TypeVar('GO_co', bound=PropertyGO, default=PropertyGO, covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyGO","title":"<code>PropertyGO: TypeAlias = obj_schema.Property[obj_core.GenericObject]</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Button","title":"<code>Button(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a button property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Button.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Checkbox","title":"<code>Checkbox(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a checkbox property in database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedBy","title":"<code>CreatedBy(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines the created-by property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedTime","title":"<code>CreatedTime(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines the created-time property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Date","title":"<code>Date(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a date property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.DefaultSchema","title":"<code>DefaultSchema</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.DefaultSchema.name","title":"<code>name = Title('Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Email","title":"<code>Email(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines an e-mail property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Files","title":"<code>Files(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a files property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Formula","title":"<code>Formula(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a formula property in a database.</p> <p>Currently the formula expression cannot reference other formula properties, e.g. <code>prop(\"other formula\")</code> This is a limitation of the Notion API.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Formula.formula","title":"<code>formula: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the formula of this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID","title":"<code>ID(name: str | None = None, *, prefix: str | None = None)</code>","text":"<p>Defines a unique ID property in a database.</p> <p>Note</p> <p>The prefix of the ID will be capitalized by Notion automatically. If no prefix is provided, Notion will assign one automatically. If a prefix is provided, the prefix itself must be unique in the workspace.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID.prefix","title":"<code>prefix: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the prefix of the unique ID.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedBy","title":"<code>LastEditedBy(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines the last-edited-by property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedTime","title":"<code>LastEditedTime(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines the last-edited-time property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect","title":"<code>MultiSelect(name: str | None = None, *, options: list[Option] | type[OptionNS])</code>","text":"<p>Defines a multi-select property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect.options","title":"<code>options: list[Option]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the options of this multi-select property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number","title":"<code>Number(name: str | None = None, *, format: NumberFormat | str = NumberFormat.NUMBER)</code>","text":"<p>Defines a number property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number.format","title":"<code>format: NumberFormat</code>  <code>property</code> <code>writable</code>","text":"<p>Return the number format of this number property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Person","title":"<code>Person(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a person/people property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Phone","title":"<code>Phone(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a phone number property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Place","title":"<code>Place(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a place property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Place.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType","title":"<code>PropType</code>","text":"<p>Namespace class of all property types of a database for easier access.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Checkbox","title":"<code>Checkbox = Checkbox</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.CreatedBy","title":"<code>CreatedBy = CreatedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.CreatedTime","title":"<code>CreatedTime = CreatedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Date","title":"<code>Date = Date</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Email","title":"<code>Email = Email</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Files","title":"<code>Files = Files</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Formula","title":"<code>Formula = Formula</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.ID","title":"<code>ID = ID</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.LastEditedBy","title":"<code>LastEditedBy = LastEditedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.LastEditedTime","title":"<code>LastEditedTime = LastEditedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.MultiSelect","title":"<code>MultiSelect = MultiSelect</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Number","title":"<code>Number = Number</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Person","title":"<code>Person = Person</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Phone","title":"<code>Phone = Phone</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Relation","title":"<code>Relation = Relation</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Rollup","title":"<code>Rollup = Rollup</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Select","title":"<code>Select = Select</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Status","title":"<code>Status = Status</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Text","title":"<code>Text = Text</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Title","title":"<code>Title = Title</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.URL","title":"<code>URL = URL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropType.Verification","title":"<code>Verification = Verification</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property","title":"<code>Property(name: str | None = None, **kwargs: Any)</code>","text":"<p>Base class for Notion property objects.</p> <p>A property defines the name and type of a property in a database, e.g. number, date, text, etc.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.allowed_at_creation","title":"<code>allowed_at_creation = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If the Notion API allows to create a new database with a property of this type</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.attr_name","title":"<code>attr_name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return the Python attribute name of the property in the schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.description","title":"<code>description: str | None</code>  <code>property</code>","text":"<p>Return the description of this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.id","title":"<code>id: str | None</code>  <code>property</code>","text":"<p>Return identifier of this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return name of this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.obj_ref","title":"<code>obj_ref = obj_api_type.build(**kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.prop_value","title":"<code>prop_value: type[PropertyValue]</code>  <code>property</code>","text":"<p>Return the corresponding property value of this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.readonly","title":"<code>readonly: bool</code>  <code>property</code>","text":"<p>Return if this property is read-only.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.__new__","title":"<code>__new__(*args: Any, **kwargs: Any) -&gt; Property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.delete","title":"<code>delete() -&gt; None</code>","text":"<p>Delete this property from the schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: GO_co) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Wrap the object reference for this property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation","title":"<code>Relation(name: str | None = None, *, schema: type[Schema] | None = None, two_way_prop: Relation | str | None = None)</code>","text":"<p>Relation to another database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.is_self_ref","title":"<code>is_self_ref: bool</code>  <code>property</code>","text":"<p>Determines if this relation is self referencing the same schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.is_two_way","title":"<code>is_two_way: bool</code>  <code>property</code>","text":"<p>Determine if this relation is a two-way relation.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.obj_ref","title":"<code>obj_ref: obj_schema.Relation</code>  <code>property</code> <code>writable</code>","text":"<p>Initialize the low-level object references for this relation.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.schema","title":"<code>schema: type[Schema]</code>  <code>property</code> <code>writable</code>","text":"<p>Schema of the relation database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.two_way_prop","title":"<code>two_way_prop: Property | None</code>  <code>property</code> <code>writable</code>","text":"<p>Return the target property object of a two-way relation.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup","title":"<code>Rollup(name: str | None = None, *, relation: Relation, rollup: Property, calculate: AggFunc | str = AggFunc.SHOW_ORIGINAL)</code>","text":"<p>Defines the rollup property in a database.</p> <p>If the relation propery is a self-referencing relation, i.e. <code>uno.PropType.Relation(uno.SelfRef)</code> in the schema, then the <code>property</code> must be a <code>str</code> of the corresponding property name.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup.calculate","title":"<code>calculate: AggFunc</code>  <code>property</code>","text":"<p>Return the aggregation function of the rollup.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup.is_self_ref","title":"<code>is_self_ref: bool</code>  <code>property</code>","text":"<p>Determines if this rollup is self-referencing the same schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup.relation_prop","title":"<code>relation_prop: Relation</code>  <code>property</code>","text":"<p>Return the relation property object of the rollup.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup.rollup_prop","title":"<code>rollup_prop: Property</code>  <code>property</code>","text":"<p>Return the rollup property object of the rollup.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema","title":"<code>Schema</code>","text":"<p>Base class for the schema of a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.__init_subclass__","title":"<code>__init_subclass__(db_title: str | None = None, db_id: str | None = None, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return the schema in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.assert_consistency_with","title":"<code>assert_consistency_with(other_schema: type[Schema], *, during_init: bool = False) -&gt; None</code>  <code>classmethod</code>","text":"<p>Assert that this schema is consistent with another schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.bind_db","title":"<code>bind_db(db: Database | None = None) -&gt; None</code>  <code>classmethod</code>","text":"<p>Bind this schema to the corresponding database for back-reference and vice versa.</p> <p>If <code>None</code> (default) is passed, search for the database using <code>db_id</code> or <code>db_title</code> and bind it to this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.create","title":"<code>create(**kwargs: Any) -&gt; Page</code>  <code>classmethod</code>","text":"<p>Create a page using this schema with a bound database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_db","title":"<code>get_db() -&gt; Database</code>  <code>classmethod</code>","text":"<p>Get the database that is bound to this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_prop","title":"<code>get_prop(prop_name: str, *, default: object = Unset) -&gt; Property | T</code>  <code>classmethod</code>","text":"<pre><code>get_prop(\n    prop_name: str, *, default: UnsetType = ...\n) -&gt; Property\n</code></pre><pre><code>get_prop(prop_name: str, *, default: T) -&gt; Property | T\n</code></pre> <p>Get a specific property from this schema assuming that property names are unique.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_props","title":"<code>get_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all properties of this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_ro_props","title":"<code>get_ro_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all read-only properties of this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_rw_props","title":"<code>get_rw_props() -&gt; list[Property]</code>  <code>classmethod</code>","text":"<p>Get all writeable properties of this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.get_title_prop","title":"<code>get_title_prop() -&gt; Property</code>  <code>classmethod</code>","text":"<p>Returns the property holding the title of the pages.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.has_prop","title":"<code>has_prop(prop_name: str) -&gt; bool</code>  <code>classmethod</code>","text":"<p>Check if a property exists in this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.is_bound","title":"<code>is_bound() -&gt; bool</code>  <code>classmethod</code>","text":"<p>Determines if the schema is bound to a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.show","title":"<code>show(*, simple: bool | None = None) -&gt; None</code>  <code>classmethod</code>","text":"<p>Show the schema as html or as simple table.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.to_dict","title":"<code>to_dict() -&gt; dict[str, Property]</code>  <code>classmethod</code>","text":"<p>Convert this schema to a dictionary of property names and corresponding types.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Schema.to_pydantic_model","title":"<code>to_pydantic_model(*, with_ro_props: bool = False) -&gt; type[SchemaModel]</code>  <code>classmethod</code>","text":"<p>Return a Pydantic model of this schema for validation.</p> <p>This is useful for instance when writing a web API that receives data that should be validated before it is passed to Ultimate Notion. The actual values are converted to <code>PropertyValue</code> and thus <code>value</code> needs to be called to retrieve the actual Python type.</p> <p>If <code>with_ro_props</code> is set to <code>True</code>, read-only properties are included in the model.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaModel","title":"<code>SchemaModel</code>","text":"<p>Base Pydantic model for schemas to validate pages within a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaModel.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True, extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaModel.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaModel.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>Convert the Pydantic model to a dictionary.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType","title":"<code>SchemaType</code>","text":"<p>Metaclass for the schema of a database.</p> <p>This makes the schema class itself more user-friendly by providing a <code>__magic__</code> methods, e.g. letting it behave like a dictionary for the properties although it is a class, not an instance.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__delitem__","title":"<code>__delitem__(prop_name: str) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__getattr__","title":"<code>__getattr__(name: str) -&gt; Property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__getitem__","title":"<code>__getitem__(prop_name: str) -&gt; Property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__iter__","title":"<code>__iter__() -&gt; Iterator[Property]</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__len__","title":"<code>__len__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__new__","title":"<code>__new__(metacls, name: str, bases: tuple[type, ...], namespace: dict[str, object], **kwargs: Any) -&gt; SchemaType</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__setattr__","title":"<code>__setattr__(name: str, value: Any) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__setitem__","title":"<code>__setitem__(prop_name: str, prop_type: Property) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaType.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Select","title":"<code>Select(name: str | None = None, *, options: list[Option] | type[OptionNS])</code>","text":"<p>Defines a select property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Select.options","title":"<code>options: list[Option]</code>  <code>property</code> <code>writable</code>","text":"<p>Return the options of this select property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SelfRef","title":"<code>SelfRef</code>","text":"<p>Target schema for self-referencing database relations.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SelfRef._","title":"<code>_ = Title('title')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status","title":"<code>Status(name: str | None = None, *, to_do: list[Option] | type[OptionNS] | None = None, in_progress: list[Option] | type[OptionNS] | None = None, complete: list[Option] | type[OptionNS] | None = None)</code>","text":"<p>Defines a status property in a database.</p> <p>The Notion API doesn't allow to create a property of this type. Sending it to the API with options and option groups defined results in an error about the existence of the keys <code>options</code> and <code>groups</code> and removing them creates a database with the property missing... ignorance is bliss.</p> <p>Also the Status configuration is not mentioned as a [Property Schema Object])https://developers.notion.com/reference/property-schema-object).</p> <p>It can still be used to check a schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.groups","title":"<code>groups: list[OptionGroup]</code>  <code>property</code>","text":"<p>Return the option groups of this status property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.options","title":"<code>options: list[Option]</code>  <code>property</code>","text":"<p>Return the options of this status property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text","title":"<code>Text(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a text property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title","title":"<code>Title(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines the mandatory title property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.URL","title":"<code>URL(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a URL property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification","title":"<code>Verification(name: str | None = None, **kwargs: Any)</code>","text":"<p>Defines a unique ID property in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/","title":"Session","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","title":"<code>session</code>","text":"<p>Functionality to initialize a Notion Session.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","title":"<code>Session(cfg: Config | None = None, *, client: notion_client.Client | None = None, **kwargs: Any)</code>","text":"<p>A session for the Notion API.</p> <p>The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>Config | None</code> <p>configuration object</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Arguments for the Notion SDK Client</p> <code>{}</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.api","title":"<code>api: NotionAPI = NotionAPI(self.client)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.cache","title":"<code>cache: dict[UUID, DataObject | User] = {}</code>  <code>class-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.client","title":"<code>client: notion_client.Client = create_notion_client(cfg, **kwargs) if client is None else client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","title":"<code>__enter__() -&gt; Session</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","title":"<code>__exit__(exc_type: type[BaseException], exc_value: BaseException, traceback: TracebackType) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.all_users","title":"<code>all_users() -&gt; list[User]</code>","text":"<p>Retrieve all users of this workspace.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","title":"<code>close() -&gt; None</code>","text":"<p>Close the session and release resources.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_db","title":"<code>create_db(parent: Page, *, schema: type[Schema] | None = None, title: str | None = None, inline: bool = False) -&gt; Database</code>","text":"<p>Create a new database within a page.</p> <p>In case a title and a schema ware provided, title overrides the schema's <code>db_title</code> attribute if it exists.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_dbs","title":"<code>create_dbs(parents: Page | list[Page], schemas: list[type[Schema]]) -&gt; list[Database]</code>","text":"<p>Create new databases in the right order in case there a relations between them.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_page","title":"<code>create_page(parent: Page | Database, title: Text | str | None = None, blocks: Sequence[Block] | None = None) -&gt; Page</code>","text":"<p>Create a new page in a <code>parent</code> page or database with a given <code>title</code>.</p> <p>The <code>blocks</code> are optional and can be used to create a page with content right away. Note that some nested blocks may not be supported by the API and must be created separately, i.e. with an <code>append</code> call to a given block.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_active","title":"<code>get_active() -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or None.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_block","title":"<code>get_block(block_ref: UUID | str, *, use_cache: bool = True) -&gt; Block</code>","text":"<p>Retrieve a single block by an object reference.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","title":"<code>get_db(db_ref: UUID | str, *, use_cache: bool = True) -&gt; Database</code>","text":"<p>Retrieve Notion database by uuid</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create","title":"<code>get_or_create(*args: Any, **kwargs: Any) -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or create a new session.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create_db","title":"<code>get_or_create_db(parent: Page, schema: type[Schema]) -&gt; Database</code>","text":"<p>Get or create the database.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create_page","title":"<code>get_or_create_page(parent: Page | Database, title: str | None = None) -&gt; Page</code>","text":"<p>Get an existing page or create a new one if it doesn't exist.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","title":"<code>get_page(page_ref: UUID | str, *, use_cache: bool = True) -&gt; Page</code>","text":"<p>Retrieve a page by uuid.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","title":"<code>get_user(user_ref: UUID | str, *, use_cache: bool = True, raise_on_unknown: bool = True) -&gt; User</code>","text":"<p>Get a user by uuid.</p> <p>In case the user is not found and <code>raise_on_unknown</code> is <code>False</code>, an <code>User</code> object is returned with the name <code>Unknown User</code>, where the property <code>is_unknown</code> is set to <code>True</code>.</p> <p>Warning</p> <p>Trying to retrieve yourself, i.e. the bot integration, only works if <code>use_cache</code> is true, since the low-level api, i.e. <code>api.users.retrieve()</code> does not work for the bot integration. Better use <code>whoami()</code> to get the bot integration user object.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.import_url","title":"<code>import_url(url: str, file_name: str, *, block: bool = True) -&gt; UploadedFile</code>","text":"<p>Import a file from a URL.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.is_closed","title":"<code>is_closed() -&gt; bool</code>","text":"<p>Determine if the session is closed or not.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.list_uploads","title":"<code>list_uploads(filter: FileUploadStatus | None = None) -&gt; list[UploadedFile]</code>","text":"<p>List all uploaded files and optionally filter by status.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","title":"<code>raise_for_status() -&gt; None</code>","text":"<p>Confirm that the session is active and raise otherwise.</p> <p>Raises SessionError if there is a problem, otherwise returns None.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","title":"<code>search_db(db_name: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Database]</code>","text":"<p>Search a database by name or return all if <code>db_name</code> is None.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str | None</code> <p>name/title of the database, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted databases in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_page","title":"<code>search_page(title: str | None = None, *, exact: bool = True, reverse: bool = False) -&gt; SList[Page]</code>","text":"<p>Search a page by name. Deleted pages, i.e. in trash, are not included in the search.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>title of the page, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_user","title":"<code>search_user(name: str) -&gt; SList[User]</code>","text":"<p>Search a user by name.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.upload","title":"<code>upload(file: BinaryIO, *, file_name: str | None = None, mime_type: str | None = None) -&gt; UploadedFile</code>","text":"<p>Upload a file to Notion.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.whoami","title":"<code>whoami() -&gt; Bot</code>","text":"<p>Return the integration as bot object.</p>"},{"location":"reference/ultimate_notion/user/","title":"User","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user","title":"<code>user</code>","text":"<p>Functions and classes for working with users in Notion.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.U_co","title":"<code>U_co = TypeVar('U_co', bound=(objs.User), default=(objs.User), covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Bot","title":"<code>Bot(*args: Any, **kwargs: Any)</code>","text":"<p>A user that represents a bot.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Bot.is_bot","title":"<code>is_bot: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Bot.workspace_info","title":"<code>workspace_info: WorkSpaceInfo</code>  <code>property</code>","text":"<p>Return the workspace info of this bot, if available.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Person","title":"<code>Person(*args: Any, **kwargs: Any)</code>","text":"<p>A user that represents a person.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Person.email","title":"<code>email: str | None</code>  <code>property</code>","text":"<p>Return the e-mail address of this user, if available.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.Person.is_person","title":"<code>is_person: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.UnknownUser","title":"<code>UnknownUser(*args: Any, **kwargs: Any)</code>","text":"<p>A user that is unknown, i.e. no longer part of the workspace.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.UnknownUser.is_unknown","title":"<code>is_unknown: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.UnknownUser.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User","title":"<code>User(*args: Any, **kwargs: Any)</code>","text":"<p>User object for persons, bots and unknown users.</p> <p>Unknown users are users, which no longer participate in the workspace or were revoked access. They are represented by their ID and have the name <code>Unknown User</code>.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.avatar_url","title":"<code>avatar_url: str | None</code>  <code>property</code>","text":"<p>Return the avatar URL of this user.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.id","title":"<code>id: UUID</code>  <code>property</code>","text":"<p>Return the ID of this user.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_bot","title":"<code>is_bot: bool</code>  <code>property</code>","text":"<p>Return True if this user is a bot.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_person","title":"<code>is_person: bool</code>  <code>property</code>","text":"<p>Return True if this user is a person.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_unknown","title":"<code>is_unknown: bool</code>  <code>property</code>","text":"<p>Return True if this user is an unknown user.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.name","title":"<code>name: str | None</code>  <code>property</code>","text":"<p>Return the name of this user.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.WorkSpaceInfo","title":"<code>WorkSpaceInfo</code>","text":"<p>Workspace information for a bot user.</p>"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.WorkSpaceInfo.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/","title":"Utils","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","title":"<code>utils</code>","text":"<p>Additional utilities that fit nowhere else.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.DateTimeOrRange","title":"<code>DateTimeOrRange: TypeAlias = dt.datetime | dt.date | pnd.Interval[pnd.DateTime] | pnd.Interval[pnd.Date]</code>  <code>module-attribute</code>","text":"<p>A type alias for various date, date time and interval representations.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.KT","title":"<code>KT = TypeVar('KT')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.PT","title":"<code>PT = TypeVar('PT', bound=BaseModel)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.VT","title":"<code>VT = TypeVar('VT')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","title":"<code>SList</code>","text":"<p>A list that holds often only a single element.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","title":"<code>item() -&gt; T</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.StoredRetvalsFunctor","title":"<code>StoredRetvalsFunctor(func: Callable[P, T])</code>","text":"<p>A decorator that stores the return values of a function for later use.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.StoredRetvalsFunctor.retvals","title":"<code>retvals: list[T] = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.StoredRetvalsFunctor.__call__","title":"<code>__call__(*args: P.args, **kwargs: P.kwargs) -&gt; T</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.StoredRetvalsFunctor.__get__","title":"<code>__get__(obj: Any, objtype: type | None = None) -&gt; Self | types.MethodType</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.convert_md_to_py","title":"<code>convert_md_to_py(path: Path | str, *, target_path: Path | str | None = None) -&gt; None</code>","text":"<p>Converts a Markdown file to a py file by extracting all python codeblocks</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>Path to the Markdown file to convert</p> required <code>target_path</code> <code>Path | str | None</code> <p>Path to save the new Python file. If not provided, the new file will be the same file with .py</p> <code>None</code> <p>Warning</p> <p>If a file with the same name already exists, it will be overwritten.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.deepcopy_with_sharing","title":"<code>deepcopy_with_sharing(obj: T, shared_attributes: Sequence[str], memo: dict[int, Any] | None = None) -&gt; T</code>","text":"<p>Like <code>deepcopy</code> but specified attributes are shared.</p> <p>Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>T</code> <p>some object to copy</p> required <code>shared_attributes</code> <code>Sequence[str]</code> <p>A list of strings identifying the attributes that should be shared instead of copied.</p> required <code>memo</code> <code>dict[int, Any] | None</code> <p>dictionary passed into deepcopy. Ignore this argument if not calling from within deepcopy.</p> <code>None</code> <p>Example</p> <pre><code>class A(object):\n    def __init__(self):\n        self.copy_me = []\n        self.share_me = []\n\n    def __deepcopy__(self, memo):\n        return deepcopy_with_sharing(\n            self, shared_attribute_names=['share_me'], memo=memo\n        )\n\n\na = A()\nb = deepcopy(a)\nassert a.copy_me is not b.copy_me\nassert a.share_me is b.share_me\n\nc = deepcopy(b)\nassert c.copy_me is not b.copy_me\nassert c.share_me is b.share_me\n</code></pre> <p>Original from https://stackoverflow.com/a/24621200</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff","title":"<code>dict_diff(dct1: Mapping[KT, VT], dct2: Mapping[KT, VT]) -&gt; tuple[list[KT], list[KT], dict[KT, tuple[VT, VT]]]</code>","text":"<p>Returns the added keys, removed keys and keys of changed values of both dictionaries.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff_str","title":"<code>dict_diff_str(dct1: Mapping[KT, VT], dct2: Mapping[KT, VT]) -&gt; tuple[list[str], list[str], list[str]]</code>","text":"<p>Returns the added keys, removed keys and keys of changed values of both dictionaries.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_index","title":"<code>find_index(elem: Any, lst: list[Any]) -&gt; int | None</code>","text":"<p>Find the index of the element in the list or return <code>None</code>.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_indices","title":"<code>find_indices(elements: NDArray[np.int_] | Sequence[Any], total_set: NDArray[np.int_] | Sequence[Any]) -&gt; NDArray[np.int_]</code>","text":"<p>Finds the indices of the elements in the total set.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.flatten","title":"<code>flatten(nested_list: Sequence[Sequence[T]]) -&gt; list[T]</code>","text":"<p>Flatten a nested list.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_dt_str","title":"<code>is_dt_str(dt_str: str) -&gt; bool</code>","text":"<p>Check if the given string is a valid datetime string.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","title":"<code>is_notebook() -&gt; bool</code>","text":"<p>Determine if we are running within a Jupyter notebook.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_stable_release","title":"<code>is_stable_release() -&gt; bool</code>","text":"<p>Return whether the current version is a stable release.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_stable_version","title":"<code>is_stable_version(version_str: str) -&gt; bool</code>","text":"<p>Return whether the given version is a stable release.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.parse_dt_str","title":"<code>parse_dt_str(dt_str: str) -&gt; DateTimeOrRange</code>","text":"<p>Parse typical Notion date/datetime/interval strings to pendulum objects.</p> <p>If no timezone is provided assume local timezone and convert everything else to UTC for consistency.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.pydantic_apply","title":"<code>pydantic_apply(obj: PT, func: Callable[[Any, Any], Any]) -&gt; PT</code>","text":"<p>Apply a function to all fields, i.e. (name, value), of a Pydantic model recursively.</p> <p>The transformed model is returned as a copy, leaving the original model unchanged.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.pydantic_to_toml","title":"<code>pydantic_to_toml(model: BaseModel) -&gt; str</code>","text":"<p>Convert a Pydantic model to a TOML string.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.rank","title":"<code>rank(arr: NDArray[np.int_]) -&gt; NDArray[np.int_]</code>","text":"<p>Returns the rank of the elements in the array and gives the same rank to equal elements.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.rec_apply","title":"<code>rec_apply(func: Callable[[Any], Any], obj: Any) -&gt; Any</code>","text":"<p>Recursively applies a function <code>func</code> to all elements in a nested structure.</p> <ul> <li>Applies <code>func</code> to every non-container element.</li> <li>Recurses into lists, tuples and dicts.</li> <li>Strings are treated as atomic elements and are not considered containers.</li> </ul> <p>Example</p> <p>rows = [[1, 2], [3, [4, 5]]] result = recursive_apply(rows, lambda x: x * 2) print(result)  # [[2, 4], [6, [8, 10]]]</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.safe_list_get","title":"<code>safe_list_get(lst: Sequence[T], idx: int, *, default: T | None = None) -&gt; T | None</code>","text":"<p>Get the element at the index of the list or return the default value.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.set_attr_none","title":"<code>set_attr_none(obj: PT, attr_paths: str | Sequence[str] | None, *, inplace: bool = False, missing_ok: bool = False) -&gt; PT</code>","text":"<p>Set the attributes given by a potentially nested path to None.</p> <p><code>None</code> attributes will be removed during serialization by default.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.store_retvals","title":"<code>store_retvals(func: Callable[P, T]) -&gt; StoredRetvalsFunctor[P, T]</code>","text":"<p>Decorator storing the return values as function attribute for later cleanups.</p> <p>This can be used for instance in a generator like this: <pre><code>@pytest.fixture\ndef create_blank_db(notion, test_area):\n    @store_retvals\n    def nested_func(db_name):\n        db = notion.databases.create(\n            parent=test_area,\n            title=db_name,\n            schema={\n                'Name': schema.Title(),\n            },\n        )\n        return db\n\n    yield nested_func\n\n    # clean up by deleting the db of each prior call\n    for db in nested_func.retvals:\n        notion.databases.delete(db)\n</code></pre></p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.str_hash","title":"<code>str_hash(*args: str, n_chars: int = 16) -&gt; str</code>","text":"<p>Hashes string arguments to a n-character string.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.temp_attr","title":"<code>temp_attr(obj: object, **kwargs: Any) -&gt; Generator[None, None, None]</code>","text":"<p>Temporarily sets multiple attributes of an object to specified values, and restores their original values after the context exits.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>object</code> <p>The object whose attributes will be modified.</p> required <code>**kwargs</code> <code>Any</code> <p>The attributes and their temporary values to modify.</p> <code>{}</code>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.temp_timezone","title":"<code>temp_timezone(tz: str | pnd.Timezone) -&gt; Iterator[None]</code>","text":"<p>Temporarily set the local timezone to the given timezone. Mostly used by unit tests.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.to_pendulum","title":"<code>to_pendulum(dt_spec: str | DateTimeOrRange) -&gt; DateTimeOrRange</code>","text":"<p>Convert a datetime or date object to a pendulum object.</p>"},{"location":"reference/ultimate_notion/view/","title":"View","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","title":"<code>view</code>","text":"<p>View representing the result of a Query.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","title":"<code>View(database: Database, pages: Sequence[Page], query: Query)</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","title":"<code>columns: list[str]</code>  <code>property</code>","text":"<p>Columns/properties of the database view aligned with the elements of a row.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","title":"<code>database = database</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.default_limit","title":"<code>default_limit = 10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_icon","title":"<code>has_icon: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_id","title":"<code>has_id: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","title":"<code>has_index: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Is this view empty?</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__bool__","title":"<code>__bool__() -&gt; bool</code>","text":"<p>Overwrite default behaviour.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__getitem__","title":"<code>__getitem__(idx: int | slice) -&gt; Page | Sequence[Page]</code>","text":"<pre><code>__getitem__(idx: int) -&gt; Page\n</code></pre><pre><code>__getitem__(idx: slice) -&gt; Sequence[Page]\n</code></pre>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__iter__","title":"<code>__iter__() -&gt; Iterator[Page]</code>","text":"<p>Iterate over the pages in the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__len__","title":"<code>__len__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.apply","title":"<code>apply(func: Callable[[Page], T]) -&gt; list[T]</code>","text":"<p>Apply function to all pages in view.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[Page], T]</code> <p>function taking a Page as input</p> required"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>","text":"<p>Return the view in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","title":"<code>clone() -&gt; View</code>","text":"<p>Clone the current view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.filter","title":"<code>filter() -&gt; View</code>","text":"<p>Filter the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.get_page","title":"<code>get_page(idx: int) -&gt; Page</code>","text":"<p>Retrieve a page by index of the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.get_row","title":"<code>get_row(idx: int) -&gt; tuple[Any, ...]</code>","text":"<p>Retrieve a row, i.e. all properties of a page defined by an index.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.head","title":"<code>head(num: int) -&gt; View</code>","text":"<p>Keep only the first <code>num</code> elements in view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","title":"<code>limit(num: int) -&gt; View</code>","text":"<p>Alias for <code>head</code></p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reload","title":"<code>reload() -&gt; View</code>","text":"<p>Reload all pages by re-executing the query that generated the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reset","title":"<code>reset() -&gt; View</code>","text":"<p>Reset the view, i.e. remove filtering, index and sorting.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reverse","title":"<code>reverse() -&gt; View</code>","text":"<p>Reverse the order of the rows.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.search_page","title":"<code>search_page(name: str) -&gt; SList[Page]</code>","text":"<p>Retrieve a page from this view by name</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.select","title":"<code>select(*cols: str) -&gt; View</code>","text":"<p>Select columns for the view</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.show","title":"<code>show(*, simple: bool | None = None) -&gt; None</code>","text":"<p>Show the database as human-readable table.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.sort","title":"<code>sort() -&gt; View</code>","text":"<p>Sort the view with respect to some columns.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.tail","title":"<code>tail(num: int) -&gt; View</code>","text":"<p>Keep only the last <code>num</code> elements in view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pages","title":"<code>to_pages() -&gt; list[Page]</code>","text":"<p>Convert the view to a simple list of pages.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pandas","title":"<code>to_pandas() -&gt; pd.DataFrame</code>","text":"<p>Convert the view to a Pandas dataframe.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_polars","title":"<code>to_polars() -&gt; pl.DataFrame</code>","text":"<p>Convert the view to a Polars dataframe.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pydantic","title":"<code>to_pydantic() -&gt; list[BaseModel]</code>","text":"<p>Convert the view to a list of Pydantic models.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_rows","title":"<code>to_rows() -&gt; list[tuple[Any, ...]]</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_icon","title":"<code>with_icon(name: str = 'icon') -&gt; View</code>","text":"<p>Show icons in HTML output.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_id","title":"<code>with_id(name: str = 'id') -&gt; View</code>","text":"<p>Add an id column to the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","title":"<code>with_index(name: str = 'index') -&gt; View</code>","text":"<p>Add an index column to the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_icon","title":"<code>without_icon() -&gt; View</code>","text":"<p>Don't show icons in HTML output.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_id","title":"<code>without_id() -&gt; View</code>","text":"<p>Remove id column from the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","title":"<code>without_index() -&gt; View</code>","text":"<p>Remove index column from the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.cmplx_to_str","title":"<code>cmplx_to_str(obj: Wrapper) -&gt; Wrapper | str</code>","text":"<p>Convert complex objects to a string representation.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.prop_type_to_polars","title":"<code>prop_type_to_polars(prop_valtype: Property | PropertyValue) -&gt; pl.DataType</code>","text":"<p>Convert a Notion property type to a Polars data type.</p>"},{"location":"reference/ultimate_notion/adapters/","title":"Adapters","text":""},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters","title":"<code>adapters</code>","text":"<p>All adapters for the Ultimate Notion project connecting it to other services.</p>"},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters.__all__","title":"<code>__all__ = ['get_cfg']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters.get_cfg","title":"<code>get_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/","title":"Sync","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync","title":"<code>sync</code>","text":"<p>Utilities to synchronize other services with Notion.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ID","title":"<code>ID: TypeAlias = str</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.all_tasks","title":"<code>all_tasks: set[SyncTask] = set()</code>  <code>module-attribute</code>","text":"<p>All tasks that have been created so far.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ConflictMode","title":"<code>ConflictMode</code>","text":"<p>Conflict resolution modes.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ConflictMode.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ConflictMode.NEWER","title":"<code>NEWER = 'newer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ConflictMode.NOTION","title":"<code>NOTION = 'notion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.ConflictMode.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.State","title":"<code>State</code>","text":"<p>The state of a sync task.</p> <p>The state holds the synced objects and their attributes as a dictionary of Notion attributes.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.State.ids","title":"<code>ids: dict[ID, ID] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maps Notion object ids to other object ids.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.State.objs","title":"<code>objs: dict[ID, dict[str, Any]] = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dictionary of Notion objects synced with other service and indexed by their ids.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask","title":"<code>SyncTask(name: str, attr_map: dict[str, str], conflict_mode: ConflictMode | str = ConflictMode.NEWER)</code>","text":"<p>A task to be performed during a sync.</p> <p>This is an abstract base class to allow for different kinds of sync tasks.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.attr_map","title":"<code>attr_map = attr_map</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.conflict_mode","title":"<code>conflict_mode = conflict_mode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.name","title":"<code>name = name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.state_path","title":"<code>state_path = get_cfg().ultimate_notion.sync_state_dir / f'{name}.pickle'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.__await__","title":"<code>__await__() -&gt; Generator[Any, None, None]</code>","text":"<p>Delegate the await to the call method</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.__call__","title":"<code>__call__() -&gt; None</code>  <code>async</code>","text":"<p>Run the task as scheduled.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.get_notion_objects","title":"<code>get_notion_objects() -&gt; list[Any]</code>  <code>abstractmethod</code>","text":"<p>Get all Notion objects to sync.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.get_other_objects","title":"<code>get_other_objects() -&gt; list[Any]</code>  <code>abstractmethod</code>","text":"<p>Get all other objects to sync.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.in_total","title":"<code>in_total(times: int) -&gt; Self</code>","text":"<p>Schedule the task to run a total of so many times.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.initial_sync","title":"<code>initial_sync(notion_objs: dict[ID, Any], other_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Make the initial state.</p> <p>This is a two-way sync, i.e. the objects are compared and the differences are resolved.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_create_obj","title":"<code>notion_create_obj(**kwargs: Any) -&gt; Any</code>  <code>abstractmethod</code>","text":"<p>Create a new page.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_delete_obj","title":"<code>notion_delete_obj(obj: Any) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Delete the page.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_hash","title":"<code>notion_hash(obj: Any) -&gt; str</code>  <code>abstractmethod</code>","text":"<p>Get the hash of the Notion object for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_id","title":"<code>notion_id(obj: Any) -&gt; ID</code>  <code>abstractmethod</code>","text":"<p>Get the id of the Notion object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_timestamp","title":"<code>notion_timestamp(obj: Any) -&gt; datetime</code>  <code>abstractmethod</code>","text":"<p>Get the timestamp of the Notion object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_to_dict","title":"<code>notion_to_dict(obj: Any) -&gt; dict[str, Any]</code>  <code>abstractmethod</code>","text":"<p>Convert a Notion object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.notion_update_obj","title":"<code>notion_update_obj(obj: Any, attr: str, value: Any) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Set an attribute of the Notion object, e.g. page.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_create_obj","title":"<code>other_create_obj(**kwargs: Any) -&gt; Any</code>  <code>abstractmethod</code>","text":"<p>Create a new other object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_delete_obj","title":"<code>other_delete_obj(obj: Any) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Delete the other object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_hash","title":"<code>other_hash(obj: Any) -&gt; str</code>  <code>abstractmethod</code>","text":"<p>Get the hash of the other object for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_id","title":"<code>other_id(obj: Any) -&gt; ID</code>  <code>abstractmethod</code>","text":"<p>Get the id of the other object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_timestamp","title":"<code>other_timestamp(obj: Any) -&gt; datetime</code>  <code>abstractmethod</code>","text":"<p>Get the timestamp of the other object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_to_dict","title":"<code>other_to_dict(obj: Any) -&gt; dict[str, Any]</code>  <code>abstractmethod</code>","text":"<p>Convert another object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.other_update_obj","title":"<code>other_update_obj(obj: Any, attr: str, value: Any) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Set an attribute of the other object.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.resolve_conflict","title":"<code>resolve_conflict(notion_obj: Any, other_obj: Any, notion_attr: str, other_attr: str) -&gt; Any</code>","text":"<p>Resolve a conflict between two objects on an attribute.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.run_every","title":"<code>run_every(hours: int = 0, minutes: int = 0, seconds: int = 0) -&gt; Self</code>","text":"<p>Schedule the task to run every so many seconds.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.run_once","title":"<code>run_once() -&gt; Self</code>","text":""},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.schedule","title":"<code>schedule() -&gt; Self</code>","text":"<p>Apply the task.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync","title":"<code>sync(state: State | None) -&gt; State</code>","text":"<p>The actual sync operation.</p> <p>The state holds the synced objects and their attributes as a dictionary of Notion attributes.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync_notion_created","title":"<code>sync_notion_created(state: State, notion_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Sync an object not in the state and created in Notion.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync_notion_deleted","title":"<code>sync_notion_deleted(state: State, notion_objs: dict[ID, Any], other_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Sync an object in the state that was deleted in Notion.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync_other_created","title":"<code>sync_other_created(state: State, other_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Sync an object not in the state and created in other service.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync_other_deleted","title":"<code>sync_other_deleted(state: State, notion_objs: dict[ID, Any], other_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Sync an object in the state that was deleted in the other service.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.SyncTask.sync_state_changes","title":"<code>sync_state_changes(state: State, notion_objs: dict[ID, Any], other_objs: dict[ID, Any]) -&gt; State</code>","text":"<p>Sync changes with respect to the state and update the state.</p> <p>This is a three-way sync, i.e. the objects are compared to the state as base and the differences are resolved.</p>"},{"location":"reference/ultimate_notion/adapters/sync/#ultimate_notion.adapters.sync.run_all_tasks","title":"<code>run_all_tasks(*, debug: bool | None = None) -&gt; None</code>","text":"<p>Run all scheduled tasks.</p>"},{"location":"reference/ultimate_notion/adapters/google/","title":"Google","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google","title":"<code>google</code>","text":"<p>Google adapters.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.__all__","title":"<code>__all__ = ['GTasksClient', 'SyncGTasks']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient","title":"<code>GTasksClient(config: Config | None = None, *, read_only: bool = False)</code>","text":"<p>Google API to easily handle Google Tasks.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.read_only","title":"<code>read_only: bool = read_only</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.resource","title":"<code>resource: Resource = self._build_resource()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.__enter__","title":"<code>__enter__() -&gt; GTasksClient</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.__exit__","title":"<code>__exit__(exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.all_tasklists","title":"<code>all_tasklists(max_results: int | None = None) -&gt; list[GTaskList]</code>","text":"<p>Returns a list of all task lists.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.close","title":"<code>close() -&gt; None</code>","text":"<p>Closes the client.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.create_tasklist","title":"<code>create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Creates a new task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.get_or_create_tasklist","title":"<code>get_or_create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Returns the task list with the given title or creates it if it doesn't exist yet.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.get_tasklist","title":"<code>get_tasklist(tasklist_id: str = '@default') -&gt; GTaskList</code>","text":"<p>Returns the task list with the given ID.</p> <p>If no ID is given, the default task list is returned.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.recreate_token","title":"<code>recreate_token() -&gt; None</code>","text":"<p>Recreate the current token using the scopes given at initialization.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.search_tasklist","title":"<code>search_tasklist(title: str) -&gt; SList[GTaskList]</code>","text":"<p>Returns the task list with the given title.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks","title":"<code>SyncGTasks(*, notion_db: Database, tasklist: GTaskList, completed_col: Property | str, completed_val: Any, not_completed_val: Any, due_col: Property | str, name: str = 'SyncGTasks', conflict_mode: ConflictMode = ConflictMode.NEWER)</code>","text":"<p>Syncs a Notion database with a Google Tasks task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.completed_col","title":"<code>completed_col = completed_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.completed_val","title":"<code>completed_val = completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.due_col","title":"<code>due_col = due_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.not_completed_val","title":"<code>not_completed_val = not_completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_db","title":"<code>notion_db = notion_db</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.tasklist","title":"<code>tasklist = tasklist</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.title_col","title":"<code>title_col = self.notion_db.schema.get_title_prop().name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.get_notion_objects","title":"<code>get_notion_objects() -&gt; list[Page]</code>","text":"<p>Get all pages from database.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.get_other_objects","title":"<code>get_other_objects() -&gt; list[GTask]</code>","text":"<p>Get all Google Taks from Tasklist.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_create_obj","title":"<code>notion_create_obj(**kwargs: Any) -&gt; Page</code>","text":"<p>Create a new page.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_delete_obj","title":"<code>notion_delete_obj(obj: Page) -&gt; None</code>","text":"<p>Delete the page.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_hash","title":"<code>notion_hash(obj: Page) -&gt; str</code>","text":"<p>Get the hash of the Notion page for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_id","title":"<code>notion_id(obj: Page) -&gt; ID</code>","text":"<p>Get the ID of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_timestamp","title":"<code>notion_timestamp(obj: Page) -&gt; datetime</code>","text":"<p>Get the timestamp of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_to_dict","title":"<code>notion_to_dict(obj: Page) -&gt; dict[str, Any]</code>","text":"<p>Convert a Notion object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.notion_update_obj","title":"<code>notion_update_obj(obj: Page, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the Notion object, e.g. page.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_create_obj","title":"<code>other_create_obj(**kwargs: Any) -&gt; GTask</code>","text":"<p>Create a new other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_delete_obj","title":"<code>other_delete_obj(obj: GTask) -&gt; None</code>","text":"<p>Delete the other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_hash","title":"<code>other_hash(obj: GTask) -&gt; str</code>","text":"<p>Get the hash of the other object for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_id","title":"<code>other_id(obj: GTask) -&gt; ID</code>","text":"<p>Get the ID of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_timestamp","title":"<code>other_timestamp(obj: GTask) -&gt; datetime</code>","text":"<p>Get the timestamp of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_to_dict","title":"<code>other_to_dict(obj: GTask) -&gt; dict[str, Any]</code>","text":"<p>Convert another object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.SyncGTasks.other_update_obj","title":"<code>other_update_obj(obj: GTask, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/","title":"Tasks","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks","title":"<code>tasks</code>","text":"<p>Google Tasks API adapters.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.__all__","title":"<code>__all__ = ['GTasksClient', 'SyncGTasks']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient","title":"<code>GTasksClient(config: Config | None = None, *, read_only: bool = False)</code>","text":"<p>Google API to easily handle Google Tasks.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.read_only","title":"<code>read_only: bool = read_only</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.resource","title":"<code>resource: Resource = self._build_resource()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.__enter__","title":"<code>__enter__() -&gt; GTasksClient</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.__exit__","title":"<code>__exit__(exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.all_tasklists","title":"<code>all_tasklists(max_results: int | None = None) -&gt; list[GTaskList]</code>","text":"<p>Returns a list of all task lists.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.close","title":"<code>close() -&gt; None</code>","text":"<p>Closes the client.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.create_tasklist","title":"<code>create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Creates a new task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.get_or_create_tasklist","title":"<code>get_or_create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Returns the task list with the given title or creates it if it doesn't exist yet.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.get_tasklist","title":"<code>get_tasklist(tasklist_id: str = '@default') -&gt; GTaskList</code>","text":"<p>Returns the task list with the given ID.</p> <p>If no ID is given, the default task list is returned.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.recreate_token","title":"<code>recreate_token() -&gt; None</code>","text":"<p>Recreate the current token using the scopes given at initialization.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.search_tasklist","title":"<code>search_tasklist(title: str) -&gt; SList[GTaskList]</code>","text":"<p>Returns the task list with the given title.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks","title":"<code>SyncGTasks(*, notion_db: Database, tasklist: GTaskList, completed_col: Property | str, completed_val: Any, not_completed_val: Any, due_col: Property | str, name: str = 'SyncGTasks', conflict_mode: ConflictMode = ConflictMode.NEWER)</code>","text":"<p>Syncs a Notion database with a Google Tasks task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.completed_col","title":"<code>completed_col = completed_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.completed_val","title":"<code>completed_val = completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.due_col","title":"<code>due_col = due_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.not_completed_val","title":"<code>not_completed_val = not_completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_db","title":"<code>notion_db = notion_db</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.tasklist","title":"<code>tasklist = tasklist</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.title_col","title":"<code>title_col = self.notion_db.schema.get_title_prop().name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.get_notion_objects","title":"<code>get_notion_objects() -&gt; list[Page]</code>","text":"<p>Get all pages from database.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.get_other_objects","title":"<code>get_other_objects() -&gt; list[GTask]</code>","text":"<p>Get all Google Taks from Tasklist.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_create_obj","title":"<code>notion_create_obj(**kwargs: Any) -&gt; Page</code>","text":"<p>Create a new page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_delete_obj","title":"<code>notion_delete_obj(obj: Page) -&gt; None</code>","text":"<p>Delete the page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_hash","title":"<code>notion_hash(obj: Page) -&gt; str</code>","text":"<p>Get the hash of the Notion page for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_id","title":"<code>notion_id(obj: Page) -&gt; ID</code>","text":"<p>Get the ID of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_timestamp","title":"<code>notion_timestamp(obj: Page) -&gt; datetime</code>","text":"<p>Get the timestamp of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_to_dict","title":"<code>notion_to_dict(obj: Page) -&gt; dict[str, Any]</code>","text":"<p>Convert a Notion object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.notion_update_obj","title":"<code>notion_update_obj(obj: Page, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the Notion object, e.g. page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_create_obj","title":"<code>other_create_obj(**kwargs: Any) -&gt; GTask</code>","text":"<p>Create a new other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_delete_obj","title":"<code>other_delete_obj(obj: GTask) -&gt; None</code>","text":"<p>Delete the other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_hash","title":"<code>other_hash(obj: GTask) -&gt; str</code>","text":"<p>Get the hash of the other object for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_id","title":"<code>other_id(obj: GTask) -&gt; ID</code>","text":"<p>Get the ID of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_timestamp","title":"<code>other_timestamp(obj: GTask) -&gt; datetime</code>","text":"<p>Get the timestamp of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_to_dict","title":"<code>other_to_dict(obj: GTask) -&gt; dict[str, Any]</code>","text":"<p>Convert another object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.SyncGTasks.other_update_obj","title":"<code>other_update_obj(obj: GTask, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/","title":"Client","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client","title":"<code>client</code>","text":"<p>Client for Google Tasks API.</p> <p>Follow this quickstart guide to enable the API and create the necessary credentials: https://developers.google.com/tasks/quickstart/python</p> <p>Official Python API documentation: https://googleapis.github.io/google-api-python-client/docs/dyn/tasks_v1.html Official REST documentation: https://developers.google.com/tasks/reference/rest</p> <p>Danger</p> <p>The Google Task API does not support setting time information for due dates. Thus, the time information of a datetime object is truncated and a pure date is obtained. https://issuetracker.google.com/issues/128979662</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.DEFAULT_LIST_ID_LEN","title":"<code>DEFAULT_LIST_ID_LEN = 32</code>  <code>module-attribute</code>","text":"<p>Length of the ID of the Google default tasklist.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.MAX_RESULTS_PER_PAGE","title":"<code>MAX_RESULTS_PER_PAGE = 100</code>  <code>module-attribute</code>","text":"<p>Maximum number of results per page when fetching all tasks.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject","title":"<code>GObject(resource: Resource, **data: Any)</code>","text":"<p>Representation of a general Google Object from the Tasks API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.etag","title":"<code>etag: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.id","title":"<code>id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.kind","title":"<code>kind: Kind</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.model_config","title":"<code>model_config = ConfigDict(extra=('ignore' if is_stable_release() else 'forbid'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.self_link","title":"<code>self_link: HttpUrl = Field(..., alias='selfLink')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.title_","title":"<code>title_: str = Field(..., alias='title')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.updated","title":"<code>updated: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GObject.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask","title":"<code>GTask(resource: Resource, **data: Any)</code>","text":"<p>Representation of a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.children","title":"<code>children: list[GTask]</code>  <code>property</code>","text":"<p>Returns the children of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.completed_at","title":"<code>completed_at: datetime | None = Field(alias='completed', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.due","title":"<code>due: datetime | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the due date of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.due_","title":"<code>due_: datetime | None = Field(alias='due', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.hidden","title":"<code>hidden: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.is_completed","title":"<code>is_completed: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Returns whether this task is completed.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.is_deleted","title":"<code>is_deleted: bool = Field(alias='deleted', default=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.kind","title":"<code>kind: Literal[Kind.TASK]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.links","title":"<code>links: list[Link] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.notes","title":"<code>notes: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the notes of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.notes_","title":"<code>notes_: str | None = Field(alias='notes', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.parent","title":"<code>parent: GTask | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the parent task of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.parent_id","title":"<code>parent_id: str | None = Field(alias='parent', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.position","title":"<code>position: int</code>  <code>property</code>","text":"<p>Returns the position of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.position_","title":"<code>position_: str = Field(alias='position')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.status","title":"<code>status: Status = Status.NEEDS_ACTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.tasklist","title":"<code>tasklist: GTaskList</code>  <code>property</code>","text":"<p>Returns the task list this task belongs to.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.tasklist_id","title":"<code>tasklist_id: str</code>  <code>property</code>","text":"<p>Returns the task list this task belongs to.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the title of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.web_view_link","title":"<code>web_view_link: HttpUrl = Field(alias='webViewLink')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.delete","title":"<code>delete() -&gt; GTask</code>","text":"<p>Deletes this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.position_after","title":"<code>position_after(previous: GTask | None = None) -&gt; GTask</code>","text":"<p>Moves this task to the behind the given task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTask.reload","title":"<code>reload() -&gt; GTask</code>","text":"<p>Reloads this task from the API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList","title":"<code>GTaskList(resource: Resource, **data: Any)</code>","text":"<p>Representation of a Google Task List.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.is_default","title":"<code>is_default: bool</code>  <code>property</code>","text":"<p>Is this the default task list?</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.is_empty","title":"<code>is_empty: bool</code>  <code>property</code>","text":"<p>Is this task list empty?</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.kind","title":"<code>kind: Literal[Kind.TASK_LIST]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the title of this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.__bool__","title":"<code>__bool__() -&gt; bool</code>","text":"<p>Overwrite default behaviour.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.__iter__","title":"<code>__iter__() -&gt; Iterator[GTask]</code>","text":"<p>Returns an iterator over all tasks in this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.__len__","title":"<code>__len__() -&gt; int</code>","text":"<p>Return the number of tasks in this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.all_tasks","title":"<code>all_tasks(*, show_deleted: bool = False) -&gt; list[GTask]</code>","text":"<p>Returns a list of all tasks, completed or not, in this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.create_task","title":"<code>create_task(title: str, due: date | datetime | None = None) -&gt; GTask</code>","text":"<p>Creates a new task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.delete","title":"<code>delete() -&gt; None</code>","text":"<p>Deletes this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.get_task","title":"<code>get_task(task_id: str) -&gt; GTask</code>","text":"<p>Returns the task with the given ID.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTaskList.reload","title":"<code>reload() -&gt; GTaskList</code>","text":"<p>Reloads this task list from the API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient","title":"<code>GTasksClient(config: Config | None = None, *, read_only: bool = False)</code>","text":"<p>Google API to easily handle Google Tasks.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.read_only","title":"<code>read_only: bool = read_only</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.resource","title":"<code>resource: Resource = self._build_resource()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.__enter__","title":"<code>__enter__() -&gt; GTasksClient</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.__exit__","title":"<code>__exit__(exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.all_tasklists","title":"<code>all_tasklists(max_results: int | None = None) -&gt; list[GTaskList]</code>","text":"<p>Returns a list of all task lists.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.close","title":"<code>close() -&gt; None</code>","text":"<p>Closes the client.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.create_tasklist","title":"<code>create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Creates a new task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.get_or_create_tasklist","title":"<code>get_or_create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Returns the task list with the given title or creates it if it doesn't exist yet.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.get_tasklist","title":"<code>get_tasklist(tasklist_id: str = '@default') -&gt; GTaskList</code>","text":"<p>Returns the task list with the given ID.</p> <p>If no ID is given, the default task list is returned.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.recreate_token","title":"<code>recreate_token() -&gt; None</code>","text":"<p>Recreate the current token using the scopes given at initialization.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.GTasksClient.search_tasklist","title":"<code>search_tasklist(title: str) -&gt; SList[GTaskList]</code>","text":"<p>Returns the task list with the given title.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Kind","title":"<code>Kind</code>","text":"<p>Representation of the different kinds of Google Objects.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Kind.TASK","title":"<code>TASK = 'tasks#task'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Kind.TASK_LIST","title":"<code>TASK_LIST = 'tasks#taskList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Link","title":"<code>Link</code>","text":"<p>Representation of a link in a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Link.Link","title":"<code>Link: HttpUrl</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Link.description","title":"<code>description: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Link.model_config","title":"<code>model_config = ConfigDict(extra=('ignore' if is_stable_release() else 'forbid'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Link.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Scope","title":"<code>Scope</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Scope.TASKS_RO","title":"<code>TASKS_RO = 'https://www.googleapis.com/auth/tasks.readonly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Allows read-only access to Google Tasks</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Scope.TASKS_RW","title":"<code>TASKS_RW = 'https://www.googleapis.com/auth/tasks'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Allows read/write access to Google Tasks</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Status","title":"<code>Status</code>","text":"<p>Representation of the different statuses of a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Status.COMPLETED","title":"<code>COMPLETED = 'completed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.Status.NEEDS_ACTION","title":"<code>NEEDS_ACTION = 'needsAction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/client/#ultimate_notion.adapters.google.tasks.client.assert_datetime","title":"<code>assert_datetime(dt: date | datetime | None) -&gt; datetime | None</code>","text":"<p>Asserts that the given object is a datetime object or None.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/","title":"Sync","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync","title":"<code>sync</code>","text":"<p>Syncs a Notion database with a Google Tasks task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks","title":"<code>SyncGTasks(*, notion_db: Database, tasklist: GTaskList, completed_col: Property | str, completed_val: Any, not_completed_val: Any, due_col: Property | str, name: str = 'SyncGTasks', conflict_mode: ConflictMode = ConflictMode.NEWER)</code>","text":"<p>Syncs a Notion database with a Google Tasks task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.completed_col","title":"<code>completed_col = completed_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.completed_val","title":"<code>completed_val = completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.due_col","title":"<code>due_col = due_col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.not_completed_val","title":"<code>not_completed_val = not_completed_val</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_db","title":"<code>notion_db = notion_db</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.tasklist","title":"<code>tasklist = tasklist</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.title_col","title":"<code>title_col = self.notion_db.schema.get_title_prop().name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.get_notion_objects","title":"<code>get_notion_objects() -&gt; list[Page]</code>","text":"<p>Get all pages from database.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.get_other_objects","title":"<code>get_other_objects() -&gt; list[GTask]</code>","text":"<p>Get all Google Taks from Tasklist.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_create_obj","title":"<code>notion_create_obj(**kwargs: Any) -&gt; Page</code>","text":"<p>Create a new page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_delete_obj","title":"<code>notion_delete_obj(obj: Page) -&gt; None</code>","text":"<p>Delete the page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_hash","title":"<code>notion_hash(obj: Page) -&gt; str</code>","text":"<p>Get the hash of the Notion page for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_id","title":"<code>notion_id(obj: Page) -&gt; ID</code>","text":"<p>Get the ID of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_timestamp","title":"<code>notion_timestamp(obj: Page) -&gt; datetime</code>","text":"<p>Get the timestamp of the Notion page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_to_dict","title":"<code>notion_to_dict(obj: Page) -&gt; dict[str, Any]</code>","text":"<p>Convert a Notion object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.notion_update_obj","title":"<code>notion_update_obj(obj: Page, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the Notion object, e.g. page.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_create_obj","title":"<code>other_create_obj(**kwargs: Any) -&gt; GTask</code>","text":"<p>Create a new other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_delete_obj","title":"<code>other_delete_obj(obj: GTask) -&gt; None</code>","text":"<p>Delete the other object.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_hash","title":"<code>other_hash(obj: GTask) -&gt; str</code>","text":"<p>Get the hash of the other object for object mapping/linking.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_id","title":"<code>other_id(obj: GTask) -&gt; ID</code>","text":"<p>Get the ID of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_timestamp","title":"<code>other_timestamp(obj: GTask) -&gt; datetime</code>","text":"<p>Get the timestamp of the Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_to_dict","title":"<code>other_to_dict(obj: GTask) -&gt; dict[str, Any]</code>","text":"<p>Convert another object to a dictionary.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/sync/#ultimate_notion.adapters.google.tasks.sync.SyncGTasks.other_update_obj","title":"<code>other_update_obj(obj: GTask, attr: str, value: Any) -&gt; None</code>","text":"<p>Set an attribute of the other object.</p>"},{"location":"reference/ultimate_notion/obj_api/","title":"Obj api","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api","title":"<code>obj_api</code>","text":"<p>Low-level object-oriented API for Notion.</p> <p>This subpackage provides an object-oriented API for Notion by wrapping the JSON-structured requests and responses of notion-sdk-py into Python objects using pydantic. Also paginated result lists by the API are resolved automatically.</p> <p>The code was taken originally from Notional by Jason Heddings and is MIT-licensed. Due to the Pydantic v2 migration and several other design changes, it was heavily refactored since then.</p>"},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.__all__","title":"<code>__all__ = ['NotionAPI', 'create_notion_client']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI","title":"<code>NotionAPI(client: NCClient)</code>","text":"<p>Object-based Notion API (pydantic) with all endpoints.</p>"},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.blocks","title":"<code>blocks = BlocksEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.client","title":"<code>client = client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.comments","title":"<code>comments = CommentsEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.databases","title":"<code>databases = DatabasesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.pages","title":"<code>pages = PagesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.search","title":"<code>search = SearchEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.uploads","title":"<code>uploads = UploadsEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.NotionAPI.users","title":"<code>users = UsersEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api.create_notion_client","title":"<code>create_notion_client(cfg: Config, **kwargs: Any) -&gt; notion_client.Client</code>","text":"<p>Create a Notion client with the given authentication token.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/","title":"Blocks","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks","title":"<code>blocks</code>","text":"<p>Wrapper for Notion API blocks.</p> <p>Blocks are the base for all Notion content.</p> <p>For validation the Pydantic model fields specify if a field is optional or not. Some fields are always set, e.g. <code>id</code>, when retrieving an object but must not be set when sending the object to the Notion API in order to create the object. To model this behavior, the default sentinel value <code>Unset</code> is used for those objects, e.g. <pre><code>class SelectOption(GenericObject)\n    id: str | UnsetType = Unset\n</code></pre> Be aware that this is important when updating to differentiate between the actual set values from default/unset values.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CTB_co","title":"<code>CTB_co = TypeVar('CTB_co', bound=ColoredTextBlockTypeData, default=ColoredTextBlockTypeData, covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.GO_co","title":"<code>GO_co = TypeVar('GO_co', bound=GenericObject, default=GenericObject, covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TB_co","title":"<code>TB_co = TypeVar('TB_co', bound=TextBlockTypeData, default=TextBlockTypeData, covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Audio","title":"<code>Audio</code>","text":"<p>An audio block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Audio.audio","title":"<code>audio: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block","title":"<code>Block</code>","text":"<p>A standard block object in Notion.</p> <p>Note</p> <p>The equality and hash implementation only considers the content of the block, i.e., the <code>type</code> and the actual type data, but ignores meta fields like <code>id</code>, <code>created_time</code>, <code>last_edited_time</code>, etc.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block.__eq__","title":"<code>__eq__(other: Any) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark","title":"<code>Bookmark</code>","text":"<p>A bookmark block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.bookmark","title":"<code>bookmark: BookmarkTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.build","title":"<code>build(url: str, caption: list[RichTextBaseObject]) -&gt; Bookmark</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BookmarkTypeData","title":"<code>BookmarkTypeData</code>","text":"<p>Type data for <code>Bookmark</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BookmarkTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb","title":"<code>Breadcrumb</code>","text":"<p>A breadcrumb block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb.breadcrumb","title":"<code>breadcrumb: BreadcrumbTypeData = Field(default_factory=BreadcrumbTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BreadcrumbTypeData","title":"<code>BreadcrumbTypeData</code>","text":"<p>Type data for <code>Breadcrumb</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem","title":"<code>BulletedListItem</code>","text":"<p>A bulleted list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem.bulleted_list_item","title":"<code>bulleted_list_item: BulletedListItemTypeData = Field(default_factory=BulletedListItemTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItemTypeData","title":"<code>BulletedListItemTypeData</code>","text":"<p>Type data for <code>BulletedListItem</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItemTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout","title":"<code>Callout</code>","text":"<p>A callout block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout.callout","title":"<code>callout: CalloutTypeData = Field(default_factory=CalloutTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CalloutTypeData","title":"<code>CalloutTypeData</code>","text":"<p>Type data for <code>Callout</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CalloutTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CalloutTypeData.icon","title":"<code>icon: SerializeAsAny[FileObject] | EmojiObject | CustomEmojiObject | UnsetType | None = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CaptionMixin","title":"<code>CaptionMixin</code>","text":"<p>Mixin for blocks having a caption.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CaptionMixin.caption","title":"<code>caption: list[SerializeAsAny[RichTextBaseObject]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase","title":"<code>ChildDatabase</code>","text":"<p>A child database block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase.child_database","title":"<code>child_database: ChildDatabaseTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabaseTypeData","title":"<code>ChildDatabaseTypeData</code>","text":"<p>Type data for <code>ChildDatabase</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabaseTypeData.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage","title":"<code>ChildPage</code>","text":"<p>A child page block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage.child_page","title":"<code>child_page: ChildPageTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPageTypeData","title":"<code>ChildPageTypeData</code>","text":"<p>Type data for <code>ChildPage</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPageTypeData.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code","title":"<code>Code</code>","text":"<p>A code block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.code","title":"<code>code: CodeTypeData = Field(default_factory=CodeTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CodeTypeData","title":"<code>CodeTypeData</code>","text":"<p>Type data for <code>Code</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.CodeTypeData.language","title":"<code>language: CodeLang = CodeLang.PLAIN_TEXT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColoredTextBlock","title":"<code>ColoredTextBlock</code>","text":"<p>A standard abstract text block object in Notion with color.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColoredTextBlockTypeData","title":"<code>ColoredTextBlockTypeData</code>","text":"<p>Type data for <code>TextBlock</code> with color.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColoredTextBlockTypeData.color","title":"<code>color: Color | BGColor = Color.DEFAULT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column","title":"<code>Column</code>","text":"<p>A column block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.column","title":"<code>column: ColumnTypeData = Field(default_factory=ColumnTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.build","title":"<code>build(width_ratio: float | None = None) -&gt; Column</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList","title":"<code>ColumnList</code>","text":"<p>A column list block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList.column_list","title":"<code>column_list: ColumnListTypeData = Field(default_factory=ColumnListTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnListTypeData","title":"<code>ColumnListTypeData</code>","text":"<p>Type data for <code>ColumnList</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnListTypeData.children","title":"<code>children: list[Column] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnTypeData","title":"<code>ColumnTypeData</code>","text":"<p>Type data for <code>Column</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnTypeData.width_ratio","title":"<code>width_ratio: float | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject","title":"<code>DataObject</code>","text":"<p>The base type for all Notion objects that hold actual data.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.archived","title":"<code>archived: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.has_children","title":"<code>has_children: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.in_trash","title":"<code>in_trash: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.last_edited_by","title":"<code>last_edited_by: UserRef | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database","title":"<code>Database</code>","text":"<p>A database record type.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.cover","title":"<code>cover: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.description","title":"<code>description: list[SerializeAsAny[RichTextBaseObject]] | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.icon","title":"<code>icon: SerializeAsAny[FileObject] | EmojiObject | CustomEmojiObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.is_inline","title":"<code>is_inline: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.properties","title":"<code>properties: dict[str, SerializeAsAny[Property]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.public_url","title":"<code>public_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.title","title":"<code>title: list[SerializeAsAny[RichTextBaseObject]] | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.url","title":"<code>url: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider","title":"<code>Divider</code>","text":"<p>A divider block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider.divider","title":"<code>divider: DividerTypeData = Field(default_factory=DividerTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DividerTypeData","title":"<code>DividerTypeData</code>","text":"<p>Type data for <code>Divider</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed","title":"<code>Embed</code>","text":"<p>An embed block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.embed","title":"<code>embed: EmbedTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.build","title":"<code>build(url: str, caption: list[RichTextBaseObject]) -&gt; Embed</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.EmbedTypeData","title":"<code>EmbedTypeData</code>","text":"<p>Type data for <code>Embed</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.EmbedTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation","title":"<code>Equation</code>","text":"<p>An equation block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation.equation","title":"<code>equation: EquationTypeData = Field(default_factory=EquationTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.EquationTypeData","title":"<code>EquationTypeData</code>","text":"<p>Type data for <code>Equation</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.EquationTypeData.expression","title":"<code>expression: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File","title":"<code>File</code>","text":"<p>A file block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File.file","title":"<code>file: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.FileBase","title":"<code>FileBase</code>","text":"<p>A abstract block referencing a FileObject.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading","title":"<code>Heading</code>","text":"<p>Abstract Heading block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1","title":"<code>Heading1</code>","text":"<p>A heading_1 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1.heading_1","title":"<code>heading_1: HeadingTypeData = Field(default_factory=HeadingTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2","title":"<code>Heading2</code>","text":"<p>A heading_2 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2.heading_2","title":"<code>heading_2: HeadingTypeData = Field(default_factory=HeadingTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3","title":"<code>Heading3</code>","text":"<p>A heading_3 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3.heading_3","title":"<code>heading_3: HeadingTypeData = Field(default_factory=HeadingTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.HeadingTypeData","title":"<code>HeadingTypeData</code>","text":"<p>Type data for <code>Heading</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.HeadingTypeData.is_toggleable","title":"<code>is_toggleable: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image","title":"<code>Image</code>","text":"<p>An image block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image.image","title":"<code>image: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview","title":"<code>LinkPreview</code>","text":"<p>A link_preview block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.link_preview","title":"<code>link_preview: LinkPreviewTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreviewTypeData","title":"<code>LinkPreviewTypeData</code>","text":"<p>Type data for <code>LinkPreview</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreviewTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage","title":"<code>LinkToPage</code>","text":"<p>A link_to_page block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage.link_to_page","title":"<code>link_to_page: SerializeAsAny[ParentRef]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem","title":"<code>NumberedListItem</code>","text":"<p>A numbered list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem.numbered_list_item","title":"<code>numbered_list_item: NumberedListItemTypeData = Field(default_factory=NumberedListItemTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItemTypeData","title":"<code>NumberedListItemTypeData</code>","text":"<p>Type data for <code>NumberedListItem</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItemTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF","title":"<code>PDF</code>","text":"<p>A pdf block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF.pdf","title":"<code>pdf: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page","title":"<code>Page</code>","text":"<p>A standard Notion page object.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.cover","title":"<code>cover: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.icon","title":"<code>icon: SerializeAsAny[FileObject] | EmojiObject | CustomEmojiObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.is_locked","title":"<code>is_locked: bool | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.properties","title":"<code>properties: dict[str, PropertyValue]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.public_url","title":"<code>public_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.title","title":"<code>title: list[RichTextBaseObject]</code>  <code>property</code>","text":"<p>Retrieve the title of the page from page properties.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.url","title":"<code>url: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph","title":"<code>Paragraph</code>","text":"<p>A paragraph block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph.paragraph","title":"<code>paragraph: ParagraphTypeData = Field(default_factory=ParagraphTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ParagraphTypeData","title":"<code>ParagraphTypeData</code>","text":"<p>Type data for <code>Paragraph</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ParagraphTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote","title":"<code>Quote</code>","text":"<p>A quote block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote.quote","title":"<code>quote: QuoteTypeData = Field(default_factory=QuoteTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.QuoteTypeData","title":"<code>QuoteTypeData</code>","text":"<p>Type data for <code>Quote</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.QuoteTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock","title":"<code>SyncedBlock</code>","text":"<p>A synced_block block in Notion - either original or synced.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.synced_block","title":"<code>synced_block: SyncedBlockTypeData = Field(default_factory=SyncedBlockTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.serialize_for_api","title":"<code>serialize_for_api() -&gt; dict[str, Any]</code>","text":"<p>Serialize the object for sending it to the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlockTypeData","title":"<code>SyncedBlockTypeData</code>","text":"<p>Type data for <code>SyncedBlock</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlockTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlockTypeData.synced_from","title":"<code>synced_from: BlockRef | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table","title":"<code>Table</code>","text":"<p>A table block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.table","title":"<code>table: TableTypeData = Field(default_factory=TableTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents","title":"<code>TableOfContents</code>","text":"<p>A table_of_contents block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents.table_of_contents","title":"<code>table_of_contents: TableOfContentsTypeData = Field(default_factory=TableOfContentsTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContentsTypeData","title":"<code>TableOfContentsTypeData</code>","text":"<p>Type data for <code>TableOfContents</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContentsTypeData.color","title":"<code>color: Color | BGColor = Color.DEFAULT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow","title":"<code>TableRow</code>","text":"<p>A table_row block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.table_row","title":"<code>table_row: TableRowTypeData = Field(default_factory=TableRowTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.build","title":"<code>build(n_cells: int) -&gt; TableRow</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRowTypeData","title":"<code>TableRowTypeData</code>","text":"<p>Type data for <code>TableRow</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRowTypeData.cells","title":"<code>cells: list[list[SerializeAsAny[RichTextBaseObject]]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableTypeData","title":"<code>TableTypeData</code>","text":"<p>Type data for <code>Table</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableTypeData.children","title":"<code>children: list[TableRow] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableTypeData.has_column_header","title":"<code>has_column_header: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableTypeData.has_row_header","title":"<code>has_row_header: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableTypeData.table_width","title":"<code>table_width: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template","title":"<code>Template</code>","text":"<p>A template block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template.template","title":"<code>template: TemplateTypeData = Field(default_factory=TemplateTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TemplateTypeData","title":"<code>TemplateTypeData</code>","text":"<p>Type data for <code>Template</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TemplateTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock","title":"<code>TextBlock</code>","text":"<p>A standard abstract text block object in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlockTypeData","title":"<code>TextBlockTypeData</code>","text":"<p>Type data for <code>TextBlock</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlockTypeData.rich_text","title":"<code>rich_text: Annotated[list[SerializeAsAny[RichTextBaseObject]], AfterValidator(normalize_text_objs), Field(default_factory=list)]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo","title":"<code>ToDo</code>","text":"<p>A todo list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.to_do","title":"<code>to_do: ToDoTypeData = Field(default_factory=ToDoTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDoTypeData","title":"<code>ToDoTypeData</code>","text":"<p>Type data for <code>ToDo</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDoTypeData.checked","title":"<code>checked: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDoTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle","title":"<code>Toggle</code>","text":"<p>A toggle list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle.toggle","title":"<code>toggle: ToggleTypeData = Field(default_factory=ToggleTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToggleTypeData","title":"<code>ToggleTypeData</code>","text":"<p>Type data for <code>Toggle</code> block.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToggleTypeData.children","title":"<code>children: list[SerializeAsAny[Block]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock","title":"<code>UnsupportedBlock</code>","text":"<p>A placeholder for unsupported blocks in the API.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock.unsupported","title":"<code>unsupported: UnsupportedBlockTypeData = Field(default_factory=UnsupportedBlockTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlockTypeData","title":"<code>UnsupportedBlockTypeData</code>","text":"<p>Type data for <code>UnsupportedBlock</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video","title":"<code>Video</code>","text":"<p>A video block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video.video","title":"<code>video: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.normalize_text_objs","title":"<code>normalize_text_objs(rt_objs: list[RichTextBaseObject]) -&gt; list[RichTextBaseObject]</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/","title":"Core","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core","title":"<code>core</code>","text":"<p>Base classes for working with the Notion API.</p> <p>Warning</p> <p>To have proper type checking and inference, covariant type parameters are sometimes used even though    they may violate the LSP (Liskov Substitution Principle) in some cases. This was done to improve the usability    and flexibility of the API, allowing for more intuitive code while still maintaining type safety.    Especially in this complex class hierarchy, Pydantic, which is heavily used in the API, relies on these    covariant type parameters to function correctly. As an alternative approach, Protocol classes were tried,    but they introduced their own complexities and limitations.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.BASE_URL_PATTERN","title":"<code>BASE_URL_PATTERN = 'https://(www.)?notion.so/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.BLOCK_URL_LONG_RE","title":"<code>BLOCK_URL_LONG_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;username&gt;.*)/(?P&lt;title&gt;.*)-(?P&lt;page_id&gt;{UUID_PATTERN})\\#(?P&lt;block_id&gt;{UUID_PATTERN})$', flags=(re.IGNORECASE | re.VERBOSE))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.PAGE_URL_LONG_RE","title":"<code>PAGE_URL_LONG_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;title&gt;.*)-(?P&lt;page_id&gt;{UUID_PATTERN})$', flags=(re.IGNORECASE | re.VERBOSE))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.PAGE_URL_SHORT_RE","title":"<code>PAGE_URL_SHORT_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;page_id&gt;{UUID_PATTERN})$', flags=(re.IGNORECASE | re.VERBOSE))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TO_co","title":"<code>TO_co = TypeVar('TO_co', covariant=True, default=Any)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UUID_PATTERN","title":"<code>UUID_PATTERN = '[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UUID_RE","title":"<code>UUID_RE = re.compile(f'^(?P&lt;id&gt;{UUID_PATTERN})$')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.Unset","title":"<code>Unset: UnsetType = UnsetType()</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject","title":"<code>GenericObject</code>","text":"<p>The base for all API objects.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.model_config","title":"<code>model_config = ConfigDict(extra=('ignore' if is_stable_release() else 'forbid'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.__eq__","title":"<code>__eq__(other: Any) -&gt; bool</code>","text":"<p>Compare two objects for equality by comparing all their fields.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Compute a hash value for the object by hashing all its fields.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.build","title":"<code>build(*args: Any, **kwargs: Any) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Use the standard constructur to build the instance. Will be overwritten for more complex types.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.serialize_for_api","title":"<code>serialize_for_api() -&gt; dict[str, Any]</code>","text":"<p>Serialize the object for sending it to the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.update","title":"<code>update(**data: Any) -&gt; None</code>","text":"<p>Update the internal attributes with new data in place.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity","title":"<code>NotionEntity</code>","text":"<p>A materialized entity, which was created by a user.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity.created_by","title":"<code>created_by: UserRef | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity.created_time","title":"<code>created_time: datetime | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity.id","title":"<code>id: UUID | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity.last_edited_time","title":"<code>last_edited_time: datetime | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionEntity.parent","title":"<code>parent: SerializeAsAny[ParentRef] | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject","title":"<code>NotionObject</code>","text":"<p>A top-level Notion API resource.</p> <p>Many objects in the Notion API follow a standard pattern with a <code>object</code> property, which defines the general object type, e.g. <code>page</code>, <code>database</code>, <code>user</code>, <code>block</code>, ...</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.object","title":"<code>object: str = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>object</code> is a string that identifies the general object type, e.g. <code>page</code>, <code>database</code>, <code>user</code>, <code>block</code>, ...</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.request_id","title":"<code>request_id: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>request_id</code> is a UUID that is used to track requests in the Notion API</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__init_subclass__","title":"<code>__init_subclass__(*, object: str | None = None, **kwargs: Any) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__pydantic_init_subclass__","title":"<code>__pydantic_init_subclass__(*, object: str | None = None, **kwargs: Any) -&gt; None</code>  <code>classmethod</code>","text":"<p>Update <code>GenericObject</code> defaults for the named object.</p> <p>Needed since <code>model_fields</code> are not available during init_subclass See: pydantic/pydantic#5369</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject","title":"<code>TypedObject</code>","text":"<p>A type-referenced object.</p> <p>Many objects in the Notion API follow a standard pattern with a <code>type</code> property followed by additional data. These objects must specify a <code>type</code> attribute to ensure that the correct object is created.</p> <p>For example, this contains a nested 'detail' object:</p> <pre><code>data = {\n    type: \"detail\",\n    ...\n    detail: {\n        ...\n    }\n}\n</code></pre>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.type","title":"<code>type: str = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>type</code> is a string that identifies the specific object type, e.g. <code>heading_1</code>, <code>paragraph</code>, <code>equation</code>, ...</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.value","title":"<code>value: TO_co</code>  <code>property</code> <code>writable</code>","text":"<p>Return the nested object.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__init_subclass__","title":"<code>__init_subclass__(*, type: str | None = None, polymorphic_base: bool = False, **kwargs: Any) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__pydantic_init_subclass__","title":"<code>__pydantic_init_subclass__(*, type: str | None = None, **kwargs: Any) -&gt; None</code>  <code>classmethod</code>","text":"<p>Register the subtypes of the TypedObject subclass.</p> <p>This is needed since <code>model_fields</code> is not available during init_subclass. See: pydantic/pydantic#5369</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UniqueObject","title":"<code>UniqueObject</code>","text":"<p>A Notion object that has a unique ID.</p> <p>This is the base class for all Notion objects that have a unique identifier, i.e. <code>id</code>.</p> <p>Warning</p> <p>The <code>id</code> field is only set when the object is sent or retrieved from the API, not when created locally.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UniqueObject.id","title":"<code>id: UUID | str | UnsetType = Field(union_mode='left_to_right', default=Unset)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>id</code> is an <code>UUID</code> if possible or a string (possibly not unique) depending on the object</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType","title":"<code>UnsetType</code>","text":"<p>Sentinel type for missing default values.</p> <p>A sentinel type for indicating that a value is unset or missing for cases when <code>None</code> has another meaning. In the Notion API, <code>None</code> is also used to delete properties, so a way to represent \"no value\" explicitly is needed.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType.__slots__","title":"<code>__slots__ = ()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType.unset_marker","title":"<code>unset_marker: bool = Field(default=True, exclude=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType.__new__","title":"<code>__new__(*args: Any, **kwargs: Any) -&gt; UnsetType</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.UnsetType.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.extract_id","title":"<code>extract_id(text: str) -&gt; str | None</code>","text":"<p>Examine the given text to find a valid Notion object ID.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.is_unset","title":"<code>is_unset(v: Any) -&gt; TypeIs[UnsetType]</code>","text":"<p>Check if the given value is unset.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.raise_unset","title":"<code>raise_unset(obj: T | UnsetType) -&gt; T</code>","text":"<pre><code>raise_unset(obj: UnsetType) -&gt; NoReturn\n</code></pre><pre><code>raise_unset(obj: T) -&gt; T\n</code></pre> <p>Raise an error if the object is unset.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/","title":"Endpoints","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints","title":"<code>endpoints</code>","text":"<p>Provides an object-based Notion API with all endpoints.</p> <p>This pydantic based API is often referred to as <code>api</code> while the low-level API of the Notion Client SDK library is referred to as <code>raw_api</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint","title":"<code>BlocksEndpoint(*args: Any, **kwargs: Any)</code>","text":"<p>Interface to the 'blocks' endpoint of the Notion API</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.children","title":"<code>children = BlocksEndpoint.ChildrenEndpoint(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.raw_api","title":"<code>raw_api: NCBlocksEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint","title":"<code>ChildrenEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'blocks/children' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.raw_api","title":"<code>raw_api: NCBlocksChildrenEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.append","title":"<code>append(parent: ParentRef | GenericObject | UUID | str, blocks: list[Block], *, after: Block | None = None) -&gt; tuple[list[Block], list[Block]]</code>","text":"<p>Add the given blocks as children of the specified parent.</p> <p>The blocks info of the passed blocks will be updated and returned as first part of a tuple. The second party of the tuple is an empty list or the updated blocks after the specified block if <code>after</code> was specified. Use this to update the blocks with the latest version from the server.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.list","title":"<code>list(parent: ParentRef | GenericObject | UUID | str) -&gt; Iterator[Block]</code>","text":"<p>Return all Blocks contained by the specified parent.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.delete","title":"<code>delete(block: Block | UUID | str) -&gt; Block</code>","text":"<p>Delete (archive) the specified Block.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.restore","title":"<code>restore(block: Block | UUID | str) -&gt; Block</code>","text":"<p>Restore (unarchive) the specified Block.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.retrieve","title":"<code>retrieve(block: Block | UUID | str) -&gt; Block</code>","text":"<p>Return the requested Block.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.update","title":"<code>update(block: Block) -&gt; None</code>","text":"<p>Update the block object on the server.</p> <p>The block info will be updated to the latest version from the server.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.CommentsEndpoint","title":"<code>CommentsEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'comments' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.CommentsEndpoint.raw_api","title":"<code>raw_api: NCCommentsEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.CommentsEndpoint.append","title":"<code>append(discussion_id: UUID | str, rich_text: list[RichTextBaseObject]) -&gt; Comment</code>","text":"<p>Append a comment to the specified discussion.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.CommentsEndpoint.create","title":"<code>create(page: Page | UUID | str, rich_text: list[RichTextBaseObject]) -&gt; Comment</code>","text":"<p>Create a comment on the specified Page.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.CommentsEndpoint.list","title":"<code>list(block: Block | Page | UUID | str) -&gt; Iterator[Comment]</code>","text":"<p>Return all comments on the specified page or block.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint","title":"<code>DatabasesEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the 'databases' endpoint of the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.raw_api","title":"<code>raw_api: NCDatabasesEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.create","title":"<code>create(parent: Page, schema: Mapping[str, Property], *, title: list[RichTextBaseObject] | None = None, inline: bool = False) -&gt; Database</code>","text":"<p>Add a database to the given Page parent.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.delete","title":"<code>delete(db: Database) -&gt; Database</code>","text":"<p>Delete (archive) the specified Database.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.query","title":"<code>query(db: Database | UUID | str) -&gt; DBQueryBuilder</code>","text":"<p>Initialize a new Query object with the target data class.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.restore","title":"<code>restore(db: Database) -&gt; Database</code>","text":"<p>Restore (unarchive) the specified Database.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.retrieve","title":"<code>retrieve(dbref: Database | str | UUID) -&gt; Database</code>","text":"<p>Return the Database with the given ID.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.update","title":"<code>update(db: Database, *, title: list[RichTextBaseObject] | None = None, description: list[RichTextBaseObject] | None = None, inline: bool | None = None, schema: Mapping[str, Property | RenameProp | None] | None = None) -&gt; None</code>","text":"<p>Update the Database object on the server.</p> <p>The database info will be updated to the latest version from the server.</p> <p>API reference: https://developers.notion.com/reference/update-a-database</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint","title":"<code>Endpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Baseclass of the Notion API endpoints.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint.api","title":"<code>api: NotionAPI</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI","title":"<code>NotionAPI(client: NCClient)</code>","text":"<p>Object-based Notion API (pydantic) with all endpoints.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.blocks","title":"<code>blocks = BlocksEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.client","title":"<code>client = client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.comments","title":"<code>comments = CommentsEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.databases","title":"<code>databases = DatabasesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.pages","title":"<code>pages = PagesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.search","title":"<code>search = SearchEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.uploads","title":"<code>uploads = UploadsEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.users","title":"<code>users = UsersEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint","title":"<code>PagesEndpoint(*args: Any, **kwargs: Any)</code>","text":"<p>Interface to the API 'pages' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.properties","title":"<code>properties = PagesEndpoint.PropertiesEndpoint(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.raw_api","title":"<code>raw_api: NCPagesEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint","title":"<code>PropertiesEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'pages/properties' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.raw_api","title":"<code>raw_api: NCPagesPropertiesEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.retrieve","title":"<code>retrieve(page: Page | UUID | str, property: PropertyValue | str) -&gt; Iterator[PropertyItem]</code>","text":"<p>Return the Property on a specific Page with the given ID</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.create","title":"<code>create(parent: ParentRef | Page | Database, title: Title | None = None, properties: dict[str, PropertyValue] | None = None, children: list[Block] | None = None) -&gt; Page</code>","text":"<p>Add a page to the given parent (Page or Database).</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.delete","title":"<code>delete(page: Page) -&gt; None</code>","text":"<p>Delete (archive) the specified Page.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.restore","title":"<code>restore(page: Page) -&gt; None</code>","text":"<p>Restore (unarchive) the specified Page.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.retrieve","title":"<code>retrieve(page: Page | UUID | str) -&gt; Page</code>","text":"<p>Return the requested Page.</p> <p>Warning</p> <p>This method will only retrieve up to 25 items per property. Use <code>pages.properties.retrieve</code> to retrieve all items of a specific property.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.set_attr","title":"<code>set_attr(page: Page, *, cover: FileObject | UnsetType | None = Unset, icon: FileObject | EmojiObject | CustomEmojiObject | UnsetType | None = Unset, in_trash: bool | UnsetType = Unset) -&gt; None</code>","text":"<p>Set specific page attributes (such as cover, icon, etc.) on the server.</p> <p><code>page</code> may be any suitable <code>PageRef</code> type.</p> <p>To remove an attribute, set its value to None.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.update","title":"<code>update(page: Page, **properties: PropertyValue) -&gt; None</code>","text":"<p>Update the Page object properties on the server.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint","title":"<code>SearchEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'search' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint.__call__","title":"<code>__call__(text: str | None = None) -&gt; SearchQueryBuilder</code>","text":"<p>Perform a search with the optional text</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint","title":"<code>UploadsEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'file uploads' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.raw_api","title":"<code>raw_api: NCFileUploadsEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.complete","title":"<code>complete(file_upload: FileUpload) -&gt; None</code>","text":"<p>Complete the file upload and update the file_upload object.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.create","title":"<code>create(name: str | None = None, n_parts: int | None = None, mode: FileUploadMode = FileUploadMode.SINGLE_PART, external_url: str | None = None, content_type: str | None = None) -&gt; FileUpload</code>","text":"<p>Create a file upload.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.list","title":"<code>list(status: FileUploadStatus | None = None, page_size: int = 100) -&gt; Iterator[FileUpload]</code>","text":"<p>Return all file uploads.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.retrieve","title":"<code>retrieve(upload_id: UUID | str) -&gt; FileUpload</code>","text":"<p>Return the FileUpload with the given ID.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UploadsEndpoint.send","title":"<code>send(file_upload: FileUpload, file: BinaryIO, part: int | None = None) -&gt; None</code>","text":"<p>Send a file upload and update the file_upload object.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint","title":"<code>UsersEndpoint(api: NotionAPI)</code>  <code>dataclass</code>","text":"<p>Interface to the API 'users' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.raw_api","title":"<code>raw_api: NCUsersEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.list","title":"<code>list() -&gt; Iterator[User]</code>","text":"<p>Return an iterator for all users in the workspace.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.me","title":"<code>me() -&gt; Bot</code>","text":"<p>Return the current bot User.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.retrieve","title":"<code>retrieve(user: User | UUID | str) -&gt; User</code>","text":"<p>Return the User with the given ID.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/","title":"Enums","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums","title":"<code>enums</code>","text":"<p>All definitions and enumerations</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc","title":"<code>AggFunc</code>","text":"<p>Aggregation functions for formulas.</p> <p>The categories naming corresonds mostly to the naming in the Notion App but also eliminates some inconsistencies. The first part of the tuple is the string used in the Notion API, the second part is an alias corresoinding to the defined category num.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.AVERAGE","title":"<code>AVERAGE = ('average', 'average')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_ALL","title":"<code>COUNT_ALL = ('count', 'count_all')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_CHECKED","title":"<code>COUNT_CHECKED = ('checked', 'count_checked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_EMPTY","title":"<code>COUNT_EMPTY = ('empty', 'count_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_NOT_EMPTY","title":"<code>COUNT_NOT_EMPTY = ('not_empty', 'count_not_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_PER_GROUP","title":"<code>COUNT_PER_GROUP = ('count_per_group', 'count_per_group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_UNCHECKED","title":"<code>COUNT_UNCHECKED = ('unchecked', 'count_unchecked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_UNIQUE_VALUES","title":"<code>COUNT_UNIQUE_VALUES = ('unique', 'count_unique_values')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_VALUES","title":"<code>COUNT_VALUES = ('count_values', 'count_values')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.DATE_RANGE","title":"<code>DATE_RANGE = ('date_range', 'date_range')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.EARLIEST_DATE","title":"<code>EARLIEST_DATE = ('earliest_date', 'earliest_date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.LATEST_DATE","title":"<code>LATEST_DATE = ('latest_date', 'latest_date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MAX","title":"<code>MAX = ('max', 'max')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MEDIAN","title":"<code>MEDIAN = ('median', 'median')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MIN","title":"<code>MIN = ('min', 'min')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_CHECKED","title":"<code>PERCENT_CHECKED = ('percent_checked', 'percent_checked')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_EMPTY","title":"<code>PERCENT_EMPTY = ('percent_empty', 'percent_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_NOT_EMPTY","title":"<code>PERCENT_NOT_EMPTY = ('percent_not_empty', 'percent_not_empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_PER_GROUP","title":"<code>PERCENT_PER_GROUP = ('percent_per_group', 'percent_per_group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.RANGE","title":"<code>RANGE = ('range', 'range')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SHOW_ORIGINAL","title":"<code>SHOW_ORIGINAL = ('show_original', 'show_original')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SHOW_UNIQUE","title":"<code>SHOW_UNIQUE = ('show_unique', 'show_unique')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SUM","title":"<code>SUM = ('sum', 'sum')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.alias","title":"<code>alias: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.__new__","title":"<code>__new__(value: str, alias: str = '') -&gt; AggFunc</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.from_alias","title":"<code>from_alias(alias: str) -&gt; AggFunc</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.ArrayQuantifier","title":"<code>ArrayQuantifier</code>","text":"<p>Array quantifiers for rollups.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.ArrayQuantifier.ANY","title":"<code>ANY = 'any'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.ArrayQuantifier.EVERY","title":"<code>EVERY = 'every'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.ArrayQuantifier.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor","title":"<code>BGColor</code>","text":"<p>Background colors for most textual blocks, e.g. paragraphs, callouts, etc.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.BLUE","title":"<code>BLUE = 'blue_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.BROWN","title":"<code>BROWN = 'brown_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.GRAY","title":"<code>GRAY = 'gray_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.GREEN","title":"<code>GREEN = 'green_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.ORANGE","title":"<code>ORANGE = 'orange_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.PINK","title":"<code>PINK = 'pink_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.PURPLE","title":"<code>PURPLE = 'purple_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.RED","title":"<code>RED = 'red_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.YELLOW","title":"<code>YELLOW = 'yellow_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang","title":"<code>CodeLang</code>","text":"<p>Coding languages for code blocks.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ABAP","title":"<code>ABAP = 'abap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ARDUINO","title":"<code>ARDUINO = 'arduino'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.BASH","title":"<code>BASH = 'bash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.BASIC","title":"<code>BASIC = 'basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.C","title":"<code>C = 'c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CLOJURE","title":"<code>CLOJURE = 'clojure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.COFFEESCRIPT","title":"<code>COFFEESCRIPT = 'coffeescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CPP","title":"<code>CPP = 'c++'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CSHARP","title":"<code>CSHARP = 'c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CSS","title":"<code>CSS = 'css'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DART","title":"<code>DART = 'dart'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DIFF","title":"<code>DIFF = 'diff'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DOCKER","title":"<code>DOCKER = 'docker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ELIXIR","title":"<code>ELIXIR = 'elixir'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ELM","title":"<code>ELM = 'elm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ERLANG","title":"<code>ERLANG = 'erlang'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FLOW","title":"<code>FLOW = 'flow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FORTRAN","title":"<code>FORTRAN = 'fortran'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FSHARP","title":"<code>FSHARP = 'f#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GHERKIN","title":"<code>GHERKIN = 'gherkin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GLSL","title":"<code>GLSL = 'glsl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GO","title":"<code>GO = 'go'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GRAPHQL","title":"<code>GRAPHQL = 'graphql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GROOVY","title":"<code>GROOVY = 'groovy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.HASKELL","title":"<code>HASKELL = 'haskell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.HTML","title":"<code>HTML = 'html'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JAVA","title":"<code>JAVA = 'java'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JAVASCRIPT","title":"<code>JAVASCRIPT = 'javascript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JULIA","title":"<code>JULIA = 'julia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.KOTLIN","title":"<code>KOTLIN = 'kotlin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LATEX","title":"<code>LATEX = 'latex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LESS","title":"<code>LESS = 'less'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LISP","title":"<code>LISP = 'lisp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LIVESCRIPT","title":"<code>LIVESCRIPT = 'livescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LUA","title":"<code>LUA = 'lua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MAKEFILE","title":"<code>MAKEFILE = 'makefile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MARKDOWN","title":"<code>MARKDOWN = 'markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MARKUP","title":"<code>MARKUP = 'markup'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MATLAB","title":"<code>MATLAB = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MERMAID","title":"<code>MERMAID = 'mermaid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MISC","title":"<code>MISC = 'java/c/c++/c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.NIX","title":"<code>NIX = 'nix'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.OBJECTIVE_C","title":"<code>OBJECTIVE_C = 'objective-c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.OCAML","title":"<code>OCAML = 'ocaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PASCAL","title":"<code>PASCAL = 'pascal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PERL","title":"<code>PERL = 'perl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PHP","title":"<code>PHP = 'php'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PLAIN_TEXT","title":"<code>PLAIN_TEXT = 'plain text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.POWERSHELL","title":"<code>POWERSHELL = 'powershell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PROLOG","title":"<code>PROLOG = 'prolog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PROTOBUF","title":"<code>PROTOBUF = 'protobuf'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PYTHON","title":"<code>PYTHON = 'python'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.R","title":"<code>R = 'r'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.REASON","title":"<code>REASON = 'reason'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.RUBY","title":"<code>RUBY = 'ruby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.RUST","title":"<code>RUST = 'rust'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SASS","title":"<code>SASS = 'sass'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCALA","title":"<code>SCALA = 'scala'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCHEME","title":"<code>SCHEME = 'scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCSS","title":"<code>SCSS = 'scss'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SHELL","title":"<code>SHELL = 'shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SQL","title":"<code>SQL = 'sql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SWIFT","title":"<code>SWIFT = 'swift'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.TOML","title":"<code>TOML = 'toml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.TYPESCRIPT","title":"<code>TYPESCRIPT = 'typescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VB_NET","title":"<code>VB_NET = 'vb.net'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VERILOG","title":"<code>VERILOG = 'verilog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VHDL","title":"<code>VHDL = 'vhdl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VISUAL_BASIC","title":"<code>VISUAL_BASIC = 'visual basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.WEBASSEMBLY","title":"<code>WEBASSEMBLY = 'webassembly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.XML","title":"<code>XML = 'xml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.YAML","title":"<code>YAML = 'yaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color","title":"<code>Color</code>","text":"<p>Basic colors</p> <p>DEFAULT is a light gray, which is the default color in the Notion App.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BLUE","title":"<code>BLUE = 'blue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BROWN","title":"<code>BROWN = 'brown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GRAY","title":"<code>GRAY = 'gray'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GREEN","title":"<code>GREEN = 'green'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.ORANGE","title":"<code>ORANGE = 'orange'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PINK","title":"<code>PINK = 'pink'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PURPLE","title":"<code>PURPLE = 'purple'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.RED","title":"<code>RED = 'red'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.YELLOW","title":"<code>YELLOW = 'yellow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadMode","title":"<code>FileUploadMode</code>","text":"<p>File upload modes.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadMode.EXTERNAL_URL","title":"<code>EXTERNAL_URL = 'external_url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadMode.MULTI_PART","title":"<code>MULTI_PART = 'multi_part'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadMode.SINGLE_PART","title":"<code>SINGLE_PART = 'single_part'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadStatus","title":"<code>FileUploadStatus</code>","text":"<p>Status of a file upload.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadStatus.EXPIRED","title":"<code>EXPIRED = 'expired'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadStatus.FAILED","title":"<code>FAILED = 'failed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadStatus.PENDING","title":"<code>PENDING = 'pending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FileUploadStatus.UPLOADED","title":"<code>UPLOADED = 'uploaded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType","title":"<code>FormulaType</code>","text":"<p>Formula types for formulas.</p> <p>The type of the formula as well as the mapping to the Notion API keyword when filtering in a query.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.BOOLEAN","title":"<code>BOOLEAN = ('boolean', 'checkbox')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.DATE","title":"<code>DATE = ('date', 'date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.NUMBER","title":"<code>NUMBER = ('number', 'number')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.STRING","title":"<code>STRING = ('string', 'string')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.formula_kwarg","title":"<code>formula_kwarg: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FormulaType.__new__","title":"<code>__new__(value: str, formula_kwarg: str = '') -&gt; FormulaType</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat","title":"<code>NumberFormat</code>","text":"<p>Number formats for numbers.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ARGENTINE_PESO","title":"<code>ARGENTINE_PESO = 'argentine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.AUSTRALIAN_DOLLAR","title":"<code>AUSTRALIAN_DOLLAR = 'australian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.BAHT","title":"<code>BAHT = 'baht'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CANADIAN_DOLLAR","title":"<code>CANADIAN_DOLLAR = 'canadian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CHILEAN_PESO","title":"<code>CHILEAN_PESO = 'chilean_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.COLOMBIAN_PESO","title":"<code>COLOMBIAN_PESO = 'colombian_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DANISH_KRONE","title":"<code>DANISH_KRONE = 'danish_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DIRHAM","title":"<code>DIRHAM = 'dirham'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DOLLAR","title":"<code>DOLLAR = 'dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.EURO","title":"<code>EURO = 'euro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FORINT","title":"<code>FORINT = 'forint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FRANC","title":"<code>FRANC = 'franc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.HONG_KONG_DOLLAR","title":"<code>HONG_KONG_DOLLAR = 'hong_kong_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KORUNA","title":"<code>KORUNA = 'koruna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KRONA","title":"<code>KRONA = 'krona'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LEU","title":"<code>LEU = 'leu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LIRA","title":"<code>LIRA = 'lira'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.MEXICAN_PESO","title":"<code>MEXICAN_PESO = 'mexican_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_TAIWAN_DOLLAR","title":"<code>NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_ZEALAND_DOLLAR","title":"<code>NEW_ZEALAND_DOLLAR = 'new_zealand_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NORWEGIAN_KRONE","title":"<code>NORWEGIAN_KRONE = 'norwegian_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER_WITH_COMMAS","title":"<code>NUMBER_WITH_COMMAS = 'number_with_commas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PERCENT","title":"<code>PERCENT = 'percent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PHILIPPINE_PESO","title":"<code>PHILIPPINE_PESO = 'philippine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.POUND","title":"<code>POUND = 'pound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RAND","title":"<code>RAND = 'rand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.REAL","title":"<code>REAL = 'real'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RINGGIT","title":"<code>RINGGIT = 'ringgit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RIYAL","title":"<code>RIYAL = 'riyal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUBLE","title":"<code>RUBLE = 'ruble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPEE","title":"<code>RUPEE = 'rupee'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPIAH","title":"<code>RUPIAH = 'rupiah'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.SHEKEL","title":"<code>SHEKEL = 'shekel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.URUGUAYAN_PESO","title":"<code>URUGUAYAN_PESO = 'uruguayan_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.WON","title":"<code>WON = 'won'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YEN","title":"<code>YEN = 'yen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YUAN","title":"<code>YUAN = 'yuan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ZLOTY","title":"<code>ZLOTY = 'zloty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.OptionGroupType","title":"<code>OptionGroupType</code>","text":"<p>Option group type of the Status property.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.OptionGroupType.COMPLETE","title":"<code>COMPLETE = 'complete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.OptionGroupType.IN_PROGRESS","title":"<code>IN_PROGRESS = 'in_progress'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.OptionGroupType.TO_DO","title":"<code>TO_DO = 'to_do'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType","title":"<code>RollupType</code>","text":"<p>Rollup types for rollups.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType.ARRAY","title":"<code>ARRAY = 'array'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType.DATE","title":"<code>DATE = 'date'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType.INCOMPLETE","title":"<code>INCOMPLETE = 'incomplete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.RollupType.UNSUPPORTED","title":"<code>UNSUPPORTED = 'unsupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.SortDirection","title":"<code>SortDirection</code>","text":"<p>Sort direction options.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.SortDirection.ASCENDING","title":"<code>ASCENDING = 'ascending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.SortDirection.DESCENDING","title":"<code>DESCENDING = 'descending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.TimestampKind","title":"<code>TimestampKind</code>","text":"<p>Possible timestamp types.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.TimestampKind.CREATED_TIME","title":"<code>CREATED_TIME = 'created_time'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.TimestampKind.LAST_EDITED_TIME","title":"<code>LAST_EDITED_TIME = 'last_edited_time'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState","title":"<code>VState</code>","text":"<p>Verification states for pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState.UNVERIFIED","title":"<code>UNVERIFIED = 'unverified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState.VERIFIED","title":"<code>VERIFIED = 'verified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/","title":"Iterator","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator","title":"<code>iterator</code>","text":"<p>Iterator classes for working with paginated API responses.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.MAX_PAGE_SIZE","title":"<code>MAX_PAGE_SIZE = 100</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.T","title":"<code>T = TypeVar('T', bound=NotionObject)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList","title":"<code>BlockList</code>","text":"<p>A list of Block objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList.block","title":"<code>block: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.CommentList","title":"<code>CommentList</code>","text":"<p>A list of Comment objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.CommentList.comment","title":"<code>comment: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.CommentList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator","title":"<code>EndpointIterator(endpoint: Callable[..., Any | Awaitable[Any]], *, pagination: Callable[..., Any | Awaitable[Any]] | None = None, model_validate: Callable[[Any], NotionObject] = ObjectList.model_validate)</code>","text":"<p>Functor to iterate over results from a potentially paginated API response.</p> <p>In most cases <code>notion_obj</code> should be <code>ObjectList</code>. For some endpoints, like <code>PropertiesEndpoint</code>, and endpoint returns a list of property items or s single property item. In this case, <code>model_validate</code> should be <code>TypeAdapter(PropertyItemList | PropertyItem).validate_python</code> or whatever you expect to be returned.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.has_more","title":"<code>has_more: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.next_cursor","title":"<code>next_cursor: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.page_num","title":"<code>page_num: int = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.total_items","title":"<code>total_items: int = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.__call__","title":"<code>__call__(**kwargs: Any) -&gt; Iterator[T]</code>","text":"<p>Return a generator for this endpoint using the given parameters.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.FileUploadList","title":"<code>FileUploadList</code>","text":"<p>A list of FileUpload objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.FileUploadList.file_upload","title":"<code>file_upload: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.FileUploadList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList","title":"<code>ObjectList</code>","text":"<p>A paginated list of objects returned by the Notion API.</p> <p>More details in the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.has_more","title":"<code>has_more: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.next_cursor","title":"<code>next_cursor: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.results","title":"<code>results: list[Annotated[NotionObject, BeforeValidator(convert_to_notion_obj)]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList","title":"<code>PageOrDatabaseList</code>","text":"<p>A list of Page or Database objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList.page_or_database","title":"<code>page_or_database: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList","title":"<code>PropertyItemList</code>","text":"<p>A paginated list of property items returned by the Notion API.</p> <p>Property item lists contain one or more pages of basic property items.  These types do not typically match the schema for corresponding property values.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.property_item","title":"<code>property_item: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.TypeData.id","title":"<code>id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.TypeData.model_config","title":"<code>model_config = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.TypeData.next_url","title":"<code>next_url: str | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.TypeData.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList","title":"<code>UserList</code>","text":"<p>A list of User objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList.user","title":"<code>user: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.convert_to_notion_obj","title":"<code>convert_to_notion_obj(data: dict[str, Any]) -&gt; Block | Page | Database | PropertyItem | User | GenericObject | FileUpload</code>","text":"<p>Convert a dictionary to the corresponding subtype of Notion Object.</p> <p>Used in the ObjectList below the convert the results from the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/","title":"Objects","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects","title":"<code>objects</code>","text":"<p>Wrapper for various Notion API objects like parents, mentions, emojis &amp; users.</p> <p>Similar to other records, these object provide access to the primitive data structure used in the Notion API.</p> <p>For validation the Pydantic model fields specify if a field is optional or not. Some fields are always set, e.g. <code>id</code>, when retrieving an object but must not be set when sending the object to the Notion API in order to create the object. To model this behavior, the default sentinel value <code>Unset</code> is used for those objects, e.g. <pre><code>class SelectOption(GenericObject)\n    id: str | UnsetType = Unset\n</code></pre> Be aware that this is important when updating to differentiate between the actual set values from default/unset values.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.GO_co","title":"<code>GO_co = TypeVar('GO_co', bound=GenericObject, default=GenericObject, covariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MAX_TEXT_OBJECT_SIZE","title":"<code>MAX_TEXT_OBJECT_SIZE = 2000</code>  <code>module-attribute</code>","text":"<p>The max text size according to the Notion API is 2000 characters.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.T","title":"<code>T = TypeVar('T', default=Any)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations","title":"<code>Annotations</code>","text":"<p>Style information for RichTextObject's.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.bold","title":"<code>bold: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.code","title":"<code>code: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.color","title":"<code>color: Color | BGColor | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.italic","title":"<code>italic: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.strikethrough","title":"<code>strikethrough: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.underline","title":"<code>underline: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef","title":"<code>BlockRef</code>","text":"<p>Reference a block.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.block_id","title":"<code>block_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.build","title":"<code>build(block_ref: Block | str | UUID) -&gt; BlockRef</code>  <code>classmethod</code>","text":"<p>Compose a BlockRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot","title":"<code>Bot</code>","text":"<p>Represents a Bot in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot.bot","title":"<code>bot: BotTypeData = Field(default_factory=BotTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BotTypeData","title":"<code>BotTypeData</code>","text":"<p>Type data for a <code>Bot</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BotTypeData.owner","title":"<code>owner: WorkspaceRef | MentionUser | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BotTypeData.workspace_limits","title":"<code>workspace_limits: WorkSpaceLimits = Field(default_factory=WorkSpaceLimits)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BotTypeData.workspace_name","title":"<code>workspace_name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment","title":"<code>Comment</code>","text":"<p>A Notion comment object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.discussion_id","title":"<code>discussion_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.display_name","title":"<code>display_name: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.rich_text","title":"<code>rich_text: list[RichTextBaseObject]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.TypeData.resolved_name","title":"<code>resolved_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Comment.TypeData.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CommentRef","title":"<code>CommentRef</code>","text":"<p>Reference a comment.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CommentRef.comment_id","title":"<code>comment_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CommentRef.build","title":"<code>build(comment_ref: Comment | str | UUID) -&gt; CommentRef</code>  <code>classmethod</code>","text":"<p>Compose a CommentRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObject","title":"<code>CustomEmojiObject</code>","text":"<p>A Notion custom emoji object.</p> <p>Within text a custom emoji is represented as a mention. For this reason there is no <code>MentionCustomEmoji</code> class, but the <code>CustomEmojiObject</code> itself can be used to build a mention object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObject.custom_emoji","title":"<code>custom_emoji: CustomEmojiObjectTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObject.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>","text":"<p>Build a mention object for this custom emoji.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObject.build_mention_from","title":"<code>build_mention_from(custom_emoji: CustomEmojiObject, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObjectTypeData","title":"<code>CustomEmojiObjectTypeData</code>","text":"<p>Type data for a <code>CustomEmojiObject</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObjectTypeData.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObjectTypeData.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.CustomEmojiObjectTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef","title":"<code>DatabaseRef</code>","text":"<p>Reference a database.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.database_id","title":"<code>database_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.build","title":"<code>build(db_ref: Database | str | UUID) -&gt; DatabaseRef</code>  <code>classmethod</code>","text":"<p>Compose a DatabaseRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange","title":"<code>DateRange</code>","text":"<p>A Notion date range, with an optional end date.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.end","title":"<code>end: dt.date | dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.start","title":"<code>start: dt.date | dt.datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.time_zone","title":"<code>time_zone: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.build","title":"<code>build(dt_spec: str | DateTimeOrRange) -&gt; DateRange</code>  <code>classmethod</code>","text":"<p>Compose a DateRange object from the given properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.to_pendulum","title":"<code>to_pendulum() -&gt; DateTimeOrRange</code>","text":"<p>Convert the DateRange to a pendulum object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject","title":"<code>EmojiObject</code>","text":"<p>A Notion emoji object.</p> <p>Within text an emoji is represented as unicode string.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.emoji","title":"<code>emoji: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.build","title":"<code>build(emoji: str) -&gt; EmojiObject</code>  <code>classmethod</code>","text":"<p>Compose an EmojiObject from the given emoji string.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject","title":"<code>EquationObject</code>","text":"<p>Notion equation element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.equation","title":"<code>equation: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.TypeData.expression","title":"<code>expression: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.build","title":"<code>build(expression: str, *, href: str | None = None, style: Annotations | None = None) -&gt; EquationObject</code>  <code>classmethod</code>","text":"<p>Compose a TextObject from the given properties.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>str</code> <p>expression</p> required <code>href</code> <code>str | None</code> <p>optional link for this object</p> <code>None</code> <code>style</code> <code>Annotations | None</code> <p>optional annotations for styling this text</p> <code>None</code>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile","title":"<code>ExternalFile</code>","text":"<p>A Notion external file object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.external","title":"<code>external: ExternalFileTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.build","title":"<code>build(url: str, *, name: str | None = None, caption: list[RichTextBaseObject] | None = None) -&gt; ExternalFile</code>  <code>classmethod</code>","text":"<p>Create a new <code>ExternalFile</code> from the given URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFileTypeData","title":"<code>ExternalFileTypeData</code>","text":"<p>Type data for <code>ExternalFile</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFileTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportError","title":"<code>FileImportError</code>","text":"<p>Result of a failed file import operation.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportError.error","title":"<code>error: FileImportTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportError.imported_time","title":"<code>imported_time: dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportSuccess","title":"<code>FileImportSuccess</code>","text":"<p>Result of a successful file import operation.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportSuccess.imported_time","title":"<code>imported_time: dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportSuccess.success","title":"<code>success: FileImportTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData","title":"<code>FileImportTypeData</code>","text":"<p>Type data for <code>FileImportSuccess</code> and <code>FileImportError</code>.</p> <p>For ease of use, the parameters of success and error are combined into a single class.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData.code","title":"<code>code: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData.message","title":"<code>message: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData.parameter","title":"<code>parameter: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData.status_code","title":"<code>status_code: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileImportTypeData.type","title":"<code>type: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject","title":"<code>FileObject</code>","text":"<p>A Notion file object.</p> <p>Depending on the context, a FileObject may require a name (such as in the <code>Files</code> property) or may have a caption, for instance when used within a File block, which makes the object hierarchy complex. Thus, we simply allow <code>name</code> and <code>caption</code> to be optional. It is the responsibility of the caller to set <code>name</code> if required by the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject.caption","title":"<code>caption: list[SerializeAsAny[RichTextBaseObject]] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload","title":"<code>FileUpload</code>","text":"<p>A Notion file upload object.</p> <p>This object is used to handle the process of uploading a file to Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.archived","title":"<code>archived: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.complete_url","title":"<code>complete_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.content_length","title":"<code>content_length: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.content_type","title":"<code>content_type: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.created_by","title":"<code>created_by: User</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.created_time","title":"<code>created_time: dt.datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.expiry_time","title":"<code>expiry_time: dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.file_import_result","title":"<code>file_import_result: FileImportSuccess | FileImportError | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.filename","title":"<code>filename: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.last_edited_time","title":"<code>last_edited_time: dt.datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.number_of_parts","title":"<code>number_of_parts: NumberOfParts | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.status","title":"<code>status: FileUploadStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.upload_url","title":"<code>upload_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.NumberOfParts","title":"<code>NumberOfParts</code>","text":"<p>Number of parts for the file upload.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.NumberOfParts.sent","title":"<code>sent: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileUpload.NumberOfParts.total","title":"<code>total: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile","title":"<code>HostedFile</code>","text":"<p>A Notion file object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile.file","title":"<code>file: HostedTypedata</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile.build","title":"<code>build(url: str, *, name: str | None = None, caption: list[RichTextBaseObject] | None = None, expiry_time: dt.datetime | None = None) -&gt; HostedFile</code>  <code>classmethod</code>","text":"<p>Create a new <code>HostedFile</code> from the given URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedTypedata","title":"<code>HostedTypedata</code>","text":"<p>Type data for <code>HostedFile</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedTypedata.expiry_time","title":"<code>expiry_time: dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedTypedata.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject","title":"<code>LinkObject</code>","text":"<p>Reference a URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.type","title":"<code>type: str = 'url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionBase","title":"<code>MentionBase</code>","text":"<p>Base class for typed <code>Mention</code> objects.</p> <p>Note that this class is different to <code>MentionMixin</code>, which is used to provide a <code>build_mention</code> method for objects that can be mentioned in Notion. Here, we have a class method to build a mention object from the target object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionBase.build_mention_from","title":"<code>build_mention_from(*args: Any, **kwargs: Any) -&gt; MentionObject</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Build a mention object for this type of mention from the actual target object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase","title":"<code>MentionDatabase</code>","text":"<p>Nested database information for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.database","title":"<code>database: SerializeAsAny[ObjectRef]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.build_mention_from","title":"<code>build_mention_from(db: Database, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate","title":"<code>MentionDate</code>","text":"<p>Nested date data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.date","title":"<code>date: DateRange</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.build_mention_from","title":"<code>build_mention_from(date_range: DateRange, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLink","title":"<code>MentionLink</code>","text":"<p>Nested url data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLink.link_mention","title":"<code>link_mention: MentionLinkTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLink.build_mention_from","title":"<code>build_mention_from(href: str, title: str, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a mention object for this type of mention from the actual target object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview","title":"<code>MentionLinkPreview</code>","text":"<p>Nested url data for <code>Mention</code> properties.</p> <p>Warning</p> <p>Link previews cannot be created via the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview.link_preview","title":"<code>link_preview: MentionLinkPreviewTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview.build_mention_from","title":"<code>build_mention_from(url: str, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a mention object for this type of mention from the actual target object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreviewTypeData","title":"<code>MentionLinkPreviewTypeData</code>","text":"<p>Type data for a <code>MentionLinkPreview</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreviewTypeData.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkTypeData","title":"<code>MentionLinkTypeData</code>","text":"<p>Type data for a <code>MentionLink</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkTypeData.href","title":"<code>href: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkTypeData.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionMixin","title":"<code>MentionMixin</code>","text":"<p>Mixin for objects that can be mentioned in Notion.</p> <p>This mixin adds a <code>build_mention</code> property to the object, which can be used to reference the object in a mention.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionMixin.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>  <code>abstractmethod</code>","text":"<p>Return a mention object for this object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject","title":"<code>MentionObject</code>","text":"<p>Notion mention element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject.mention","title":"<code>mention: SerializeAsAny[MentionBase]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage","title":"<code>MentionPage</code>","text":"<p>Nested page data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.page","title":"<code>page: SerializeAsAny[ObjectRef]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.build_mention_from","title":"<code>build_mention_from(page: Page, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate","title":"<code>MentionTemplate</code>","text":"<p>Nested template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate.template_mention","title":"<code>template_mention: SerializeAsAny[MentionTemplateData]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateData","title":"<code>MentionTemplateData</code>","text":"<p>Nested template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate","title":"<code>MentionTemplateDate</code>","text":"<p>Nested date template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate.template_mention_date","title":"<code>template_mention_date: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser","title":"<code>MentionTemplateUser</code>","text":"<p>Nested user template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser.template_mention_user","title":"<code>template_mention_user: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser","title":"<code>MentionUser</code>","text":"<p>Nested user data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.user","title":"<code>user: SerializeAsAny[User | UserRef]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.build_mention_from","title":"<code>build_mention_from(user: User, *, style: Annotations | None = None) -&gt; MentionObject</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectRef","title":"<code>ObjectRef</code>","text":"<p>A general-purpose object reference in the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectRef.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectRef.build","title":"<code>build(ref: ParentRef | GenericObject | UUID | str) -&gt; ObjectRef</code>  <code>classmethod</code>","text":"<p>Compose a reference to an object from the given reference.</p> <p>Strings may be either UUID's or URL's to Notion content.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef","title":"<code>PageRef</code>","text":"<p>Reference a page.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.page_id","title":"<code>page_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.build","title":"<code>build(page_ref: Page | str | UUID) -&gt; PageRef</code>  <code>classmethod</code>","text":"<p>Compose a PageRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ParentRef","title":"<code>ParentRef</code>","text":"<p>Reference another block as a parent.</p> <p>Notion API: Parent Object</p> <p>This class is simply a placeholder for the typed concrete *Ref classes.</p> <p>Callers should always instantiate the intended concrete versions.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person","title":"<code>Person</code>","text":"<p>Represents a Person in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person.person","title":"<code>person: PersonTypeData = Field(default_factory=PersonTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PersonTypeData","title":"<code>PersonTypeData</code>","text":"<p>Type data for a <code>Person</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PersonTypeData.email","title":"<code>email: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextBaseObject","title":"<code>RichTextBaseObject</code>","text":"<p>Base class for Notion rich text elements.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextBaseObject.annotations","title":"<code>annotations: Annotations | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextBaseObject.href","title":"<code>href: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextBaseObject.plain_text","title":"<code>plain_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup","title":"<code>SelectGroup</code>","text":"<p>Group of options for status objects.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.color","title":"<code>color: Color | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.id","title":"<code>id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.option_ids","title":"<code>option_ids: list[str] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption","title":"<code>SelectOption</code>","text":"<p>Options for select &amp; multi-select objects.</p> <p>Specifying no color will result in the default color being used, i.e. <code>Color.DEFAULT</code>, which is a light grey. Note that colors can't be changed after they are set.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.color","title":"<code>color: Color | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.description","title":"<code>description: list[RichTextBaseObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.id","title":"<code>id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":"<p>Compare SelectOption objects by all attributes except id.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Return a hash of the SelectOption based on name, color, and description.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.build","title":"<code>build(name: str, color: Color = Color.DEFAULT) -&gt; SelectOption</code>  <code>classmethod</code>","text":"<p>Create a <code>SelectOption</code> object from the given name and color.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject","title":"<code>TextObject</code>","text":"<p>Notion text element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.text","title":"<code>text: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.TypeData.content","title":"<code>content: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.TypeData.link","title":"<code>link: LinkObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.build","title":"<code>build(text: str, *, href: str | None = None, style: Annotations | None = None) -&gt; TextObject</code>  <code>classmethod</code>","text":"<p>Compose a TextObject from the given properties.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>the plain text of this object</p> required <code>href</code> <code>str | None</code> <p>optional link for this object</p> <code>None</code> <code>style</code> <code>Annotations | None</code> <p>optional annotations for styling this text</p> <code>None</code>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UnknownUser","title":"<code>UnknownUser</code>","text":"<p>Represents an unknown user in Notion.</p> <p>This is a unofficial placeholder for a user that is not recognized by the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UnknownUser.name","title":"<code>name: Literal['Unknown User'] = 'Unknown User'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UnknownUser.unknown","title":"<code>unknown: UnknownUserTypeData = Field(default_factory=UnknownUserTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UnknownUserTypeData","title":"<code>UnknownUserTypeData</code>","text":"<p>Type data for an <code>UnknownUser</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UploadedFile","title":"<code>UploadedFile</code>","text":"<p>A Notion uploaded file object. The result of completed FileUpload</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UploadedFile.file_upload","title":"<code>file_upload: UploadedFileTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UploadedFile.build","title":"<code>build(id: UUID) -&gt; UploadedFile</code>  <code>classmethod</code>","text":"<p>Create a new <code>UploadedFile</code> from the given ID.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UploadedFileTypeData","title":"<code>UploadedFileTypeData</code>","text":"<p>Type data for <code>UploadedFile</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UploadedFileTypeData.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User","title":"<code>User</code>","text":"<p>Represents a User in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.avatar_url","title":"<code>avatar_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.build_mention","title":"<code>build_mention(style: Annotations | None = None) -&gt; MentionObject</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserRef","title":"<code>UserRef</code>","text":"<p>Reference to a user, e.g. in <code>created_by</code>, <code>last_edited_by</code>, mentioning, etc.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserRef.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserRef.build","title":"<code>build(user_ref: User | str | UUID) -&gt; UserRef</code>  <code>classmethod</code>","text":"<p>Compose a PageRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkSpaceLimits","title":"<code>WorkSpaceLimits</code>","text":"<p>Limits for a Notion workspace.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkSpaceLimits.max_file_upload_size_in_bytes","title":"<code>max_file_upload_size_in_bytes: int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef","title":"<code>WorkspaceRef</code>","text":"<p>Reference the workspace.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef.workspace","title":"<code>workspace: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.get_uuid","title":"<code>get_uuid(obj: str | UUID | ParentRef | NotionObject | BlockRef) -&gt; UUID</code>","text":"<p>Retrieves a UUID from an object reference.</p> <p>Only meant for internal use.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.rich_text_to_str","title":"<code>rich_text_to_str(rich_texts: list[RichTextBaseObject]) -&gt; str</code>","text":"<p>Convert a list of rich texts to plain text.</p>"},{"location":"reference/ultimate_notion/obj_api/props/","title":"Props","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props","title":"<code>props</code>","text":"<p>Property values of a page in Notion directly mapped to Python objects.</p> <p><code>PropertyValue</code> objects are directly returned from the Notion API using the retrieve a page endpoint. They are used to represent the values of a page's properties. In contrast the <code>PropertyItem</code> objects are returned from the retrieve a page property item endpoint and differ from the <code>PropertyValue</code> objects by having a field <code>object = 'property_item'</code>. So they are considered proper objects in the Notion API instead of just types like the <code>PropertyValue</code> objects.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MAX_ITEMS_PER_PROPERTY","title":"<code>MAX_ITEMS_PER_PROPERTY = 25</code>  <code>module-attribute</code>","text":"<p>Maximum number of items rertrieved per property.</p> <p>Only a certain number of items for each property are retrieved by default. The high-level API will retrieve the rest on demand automatically.</p> <p>Source: https://developers.notion.com/reference/retrieve-a-page</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PAGINATED_PROP_VALS","title":"<code>PAGINATED_PROP_VALS = (RichText, Title, People, Relation, Rollup)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula","title":"<code>BooleanFormula</code>","text":"<p>A Notion boolean formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula.boolean","title":"<code>boolean: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Button","title":"<code>Button</code>","text":"<p>A Notion button property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Button.button","title":"<code>button: TypeData = Field(default_factory=TypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Button.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.ButtonPropertyItem","title":"<code>ButtonPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Button</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox","title":"<code>Checkbox</code>","text":"<p>Simple checkbox type; represented as a boolean.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox.checkbox","title":"<code>checkbox: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CheckboxPropertyItem","title":"<code>CheckboxPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Checkbox</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy","title":"<code>CreatedBy</code>","text":"<p>A Notion created-by property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy.created_by","title":"<code>created_by: SerializeAsAny[User]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedByPropertyItem","title":"<code>CreatedByPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>CreatedBy</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime","title":"<code>CreatedTime</code>","text":"<p>A Notion created-time property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime.created_time","title":"<code>created_time: dt.datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTimePropertyItem","title":"<code>CreatedTimePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>CreatedTime</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date","title":"<code>Date</code>","text":"<p>Notion complex date type - may include timestamp and/or be a date range.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.build","title":"<code>build(dt_spec: str | DateTimeOrRange) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a new Date from the native values.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula","title":"<code>DateFormula</code>","text":"<p>A Notion date formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DatePropertyItem","title":"<code>DatePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Date</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email","title":"<code>Email</code>","text":"<p>Notion email type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email.email","title":"<code>email: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.EmailPropertyItem","title":"<code>EmailPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Email</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files","title":"<code>Files</code>","text":"<p>Notion files type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files.files","title":"<code>files: list[SerializeAsAny[FileObject]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FilesPropertyItem","title":"<code>FilesPropertyItem</code>","text":"<p>A <code>FilesPropertyItem</code> returned by the Notion API containing the <code>Files</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula","title":"<code>Formula</code>","text":"<p>A Notion formula property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula.formula","title":"<code>formula: SerializeAsAny[FormulaResult] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaPropertyItem","title":"<code>FormulaPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Formula</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaResult","title":"<code>FormulaResult</code>","text":"<p>A Notion formula result.</p> <p>This object contains the result of the expression in the database properties.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy","title":"<code>LastEditedBy</code>","text":"<p>A Notion last-edited-by property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy.last_edited_by","title":"<code>last_edited_by: SerializeAsAny[User]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedByPropertyItem","title":"<code>LastEditedByPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>LastEditedBy</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime","title":"<code>LastEditedTime</code>","text":"<p>A Notion last-edited-time property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime.last_edited_time","title":"<code>last_edited_time: dt.datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTimePropertyItem","title":"<code>LastEditedTimePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>LastEditedTime</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect","title":"<code>MultiSelect</code>","text":"<p>Notion multi-select type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect.multi_select","title":"<code>multi_select: list[SelectOption] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelectPropertyItem","title":"<code>MultiSelectPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>MultiSelect</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number","title":"<code>Number</code>","text":"<p>Simple number type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula","title":"<code>NumberFormula</code>","text":"<p>A Notion number formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberPropertyItem","title":"<code>NumberPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Number</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People","title":"<code>People</code>","text":"<p>Notion people type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People.people","title":"<code>people: list[User] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PeoplePropertyItem","title":"<code>PeoplePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>People</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PeoplePropertyItem.people","title":"<code>people: User</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber","title":"<code>PhoneNumber</code>","text":"<p>Notion phone type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber.phone_number","title":"<code>phone_number: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumberPropertyItem","title":"<code>PhoneNumberPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>PhoneNumber</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Place","title":"<code>Place</code>","text":"<p>A Notion place property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Place.place","title":"<code>place: None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PlacePropertyItem","title":"<code>PlacePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Place</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyItem","title":"<code>PropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API.</p> <p>Basic property items have a similar schema to corresponding property values.</p> <p>Notion-API: https://developers.notion.com/reference/property-item-object</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyItem.id","title":"<code>id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue","title":"<code>PropertyValue</code>","text":"<p>Base class for Notion property values.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.id","title":"<code>id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.build","title":"<code>build(value: Any) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Build the property value from given value, e.g. native Python or nested type.</p> <p>In practice, this is like calling init with the corresponding keyword.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.serialize_for_api","title":"<code>serialize_for_api() -&gt; dict[str, Any]</code>","text":"<p>Serialize the object for sending it to the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation","title":"<code>Relation</code>","text":"<p>A Notion relation property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.has_more","title":"<code>has_more: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.relation","title":"<code>relation: list[ObjectRef] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.build","title":"<code>build(pages: Sequence[Page]) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Return a <code>Relation</code> property with the specified pages.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RelationPropertyItem","title":"<code>RelationPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing many <code>Relation</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RelationPropertyItem.relation","title":"<code>relation: ObjectRef</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText","title":"<code>RichText</code>","text":"<p>Notion rich text type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText.rich_text","title":"<code>rich_text: list[SerializeAsAny[RichTextBaseObject]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichTextPropertyItem","title":"<code>RichTextPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>RichText</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichTextPropertyItem.rich_text","title":"<code>rich_text: SerializeAsAny[RichTextBaseObject]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup","title":"<code>Rollup</code>","text":"<p>A Notion rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup.rollup","title":"<code>rollup: SerializeAsAny[RollupObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray","title":"<code>RollupArray</code>","text":"<p>A Notion rollup array property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray.array","title":"<code>array: list[SerializeAsAny[PropertyValue]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate","title":"<code>RollupDate</code>","text":"<p>A Notion rollup date property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupIncomplete","title":"<code>RollupIncomplete</code>","text":"<p>A Notion incomplete rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupIncomplete.incomplete","title":"<code>incomplete: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupIncomplete.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber","title":"<code>RollupNumber</code>","text":"<p>A Notion rollup number property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject","title":"<code>RollupObject</code>","text":"<p>A Notion rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject.function","title":"<code>function: AggFunc | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupPropertyItem","title":"<code>RollupPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Rollup</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupUnsupported","title":"<code>RollupUnsupported</code>","text":"<p>A Notion unsupported rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupUnsupported.unsupported","title":"<code>unsupported: TypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupUnsupported.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select","title":"<code>Select</code>","text":"<p>Notion select type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select.select","title":"<code>select: SelectOption | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.SelectPropertyItem","title":"<code>SelectPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Select</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status","title":"<code>Status</code>","text":"<p>Notion status property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status.status","title":"<code>status: SelectOption | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StatusPropertyItem","title":"<code>StatusPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Status</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula","title":"<code>StringFormula</code>","text":"<p>A Notion string formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula.string","title":"<code>string: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title","title":"<code>Title</code>","text":"<p>Notion title type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title.title","title":"<code>title: list[SerializeAsAny[RichTextBaseObject]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.TitlePropertyItem","title":"<code>TitlePropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Title</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.TitlePropertyItem.title","title":"<code>title: SerializeAsAny[RichTextBaseObject]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL","title":"<code>URL</code>","text":"<p>Notion URL type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL.url","title":"<code>url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URLPropertyItem","title":"<code>URLPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>URL</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID","title":"<code>UniqueID</code>","text":"<p>A Notion unique-id property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.unique_id","title":"<code>unique_id: TypeData = Field(default_factory=TypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.TypeData.number","title":"<code>number: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.TypeData.prefix","title":"<code>prefix: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueIDPropertyItem","title":"<code>UniqueIDPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>UniqueID</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification","title":"<code>Verification</code>","text":"<p>A Notion verification property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.verification","title":"<code>verification: TypeData = Field(default_factory=TypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.TypeData","title":"<code>TypeData</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.TypeData.date","title":"<code>date: dt.datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.TypeData.state","title":"<code>state: VState = VState.UNVERIFIED</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.TypeData.verified_by","title":"<code>verified_by: SerializeAsAny[User] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.TypeData.validate_enum_field","title":"<code>validate_enum_field(field: str) -&gt; VState</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.VerificationPropertyItem","title":"<code>VerificationPropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API containing the <code>Verification</code> property.</p>"},{"location":"reference/ultimate_notion/obj_api/query/","title":"Query","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query","title":"<code>query</code>","text":"<p>Provides an interactive query builder for Notion databases.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NCEndpointCall","title":"<code>NCEndpointCall: TypeAlias = Callable[..., Any | Awaitable[Any]]</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.T","title":"<code>T = TypeVar('T', bound=(Page | Database), default=(Page | Database))</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition","title":"<code>CheckboxCondition</code>","text":"<p>Represents checkbox criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.does_not_equal","title":"<code>does_not_equal: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.equals","title":"<code>equals: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter","title":"<code>CompoundFilter</code>","text":"<p>Represents a compound filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.and_","title":"<code>and_: list[SerializeAsAny[QueryFilter]] | None = Field(None, alias='and')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.model_config","title":"<code>model_config = ConfigDict(populate_by_name=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.or_","title":"<code>or_: list[SerializeAsAny[QueryFilter]] | None = Field(None, alias='or')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Condition","title":"<code>Condition</code>","text":"<p>Base class for all conditions in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter","title":"<code>CreatedTimeFilter</code>","text":"<p>Represents a created_time filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.created_time","title":"<code>created_time: DateCondition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.timestamp","title":"<code>timestamp: TimestampKind = TimestampKind.CREATED_TIME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQuery","title":"<code>DBQuery</code>","text":"<p>Query object in Notion for querying a database</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQuery.sorts","title":"<code>sorts: list[DBSort] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder","title":"<code>DBQueryBuilder(endpoint: NCEndpointCall, db_id: str)</code>","text":"<p>Query builder to query a database.</p> <p>Notion API: https://developers.notion.com/reference/post-search</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.query","title":"<code>query: DBQuery</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.execute","title":"<code>execute(**nc_params: int | str) -&gt; Iterator[Page]</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.filter","title":"<code>filter(condition: QueryFilter) -&gt; DBQueryBuilder</code>","text":"<p>Add the given filter to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.sort","title":"<code>sort(sort_orders: DBSort | list[DBSort]) -&gt; DBQueryBuilder</code>","text":"<p>Add the given sort elements to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort","title":"<code>DBSort</code>","text":"<p>Sort instruction when querying a database</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort.direction","title":"<code>direction: SortDirection</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition","title":"<code>DateCondition</code>","text":"<p>Represents date criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.after","title":"<code>after: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.before","title":"<code>before: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.equals","title":"<code>equals: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_month","title":"<code>next_month: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_week","title":"<code>next_week: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_year","title":"<code>next_year: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_after","title":"<code>on_or_after: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_before","title":"<code>on_or_before: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_month","title":"<code>past_month: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_week","title":"<code>past_week: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_year","title":"<code>past_year: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.this_week","title":"<code>this_week: EmptyObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.EmptyObject","title":"<code>EmptyObject</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition","title":"<code>FilesCondition</code>","text":"<p>Represents files criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition","title":"<code>FormulaCondition</code>","text":"<p>Represents formula criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.checkbox","title":"<code>checkbox: CheckboxCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.date","title":"<code>date: DateCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.number","title":"<code>number: NumberCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.string","title":"<code>string: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition","title":"<code>IdCondition</code>","text":"<p>Represents ID criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.does_not_equal","title":"<code>does_not_equal: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.equals","title":"<code>equals: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.greater_than","title":"<code>greater_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.greater_than_or_equal_to","title":"<code>greater_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.less_than","title":"<code>less_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.IdCondition.less_than_or_equal_to","title":"<code>less_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter","title":"<code>LastEditedTimeFilter</code>","text":"<p>Represents a last_edited_time filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.last_edited_time","title":"<code>last_edited_time: DateCondition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.timestamp","title":"<code>timestamp: TimestampKind = TimestampKind.LAST_EDITED_TIME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition","title":"<code>MultiSelectCondition</code>","text":"<p>Represents a multi_select criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.contains","title":"<code>contains: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.does_not_contain","title":"<code>does_not_contain: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition","title":"<code>NumberCondition</code>","text":"<p>Represents number criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.does_not_equal","title":"<code>does_not_equal: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.equals","title":"<code>equals: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than","title":"<code>greater_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than_or_equal_to","title":"<code>greater_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than","title":"<code>less_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than_or_equal_to","title":"<code>less_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition","title":"<code>PeopleCondition</code>","text":"<p>Represents people criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.contains","title":"<code>contains: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.does_not_contain","title":"<code>does_not_contain: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter","title":"<code>PropertyFilter</code>","text":"<p>Represents a database property filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.rollup","title":"<code>rollup: RollupCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query","title":"<code>Query</code>","text":"<p>Abstract query object in Notion for searching pages/databases and querying databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.filter","title":"<code>filter: SerializeAsAny[QueryFilter] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.page_size","title":"<code>page_size: int = MAX_PAGE_SIZE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.start_cursor","title":"<code>start_cursor: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.valid_page_size","title":"<code>valid_page_size(value: int) -&gt; int</code>  <code>classmethod</code>","text":"<p>Validate that the given page size meets the Notion API requirements</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder","title":"<code>QueryBuilder(endpoint: NCEndpointCall, query: Query, params: Mapping[str, str | None])</code>","text":"<p>General query builder for the Notion search &amp; database query API</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.endpoint","title":"<code>endpoint: NCEndpointCall = endpoint</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.params","title":"<code>params: dict[str, str] = {k: vfor (k, v) in (params.items()) if v is not None}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.query","title":"<code>query: Query = query</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.execute","title":"<code>execute(**nc_params: int | str) -&gt; Iterator[T]</code>","text":"<p>Execute the current query and return an iterator for the results.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryFilter","title":"<code>QueryFilter</code>","text":"<p>Base class for query filters.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition","title":"<code>RelationCondition</code>","text":"<p>Represents relation criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.contains","title":"<code>contains: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.does_not_contain","title":"<code>does_not_contain: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition","title":"<code>RollupArrayCondition</code>","text":"<p>Represents a rollup array filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.checkbox","title":"<code>checkbox: CheckboxCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.date","title":"<code>date: DateCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.files","title":"<code>files: FilesCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.formula","title":"<code>formula: FormulaCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.multi_select","title":"<code>multi_select: MultiSelectCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.number","title":"<code>number: NumberCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.people","title":"<code>people: PeopleCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.phone_number","title":"<code>phone_number: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.relation","title":"<code>relation: RelationCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.rich_text","title":"<code>rich_text: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.select","title":"<code>select: SelectCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupArrayCondition.unique_id","title":"<code>unique_id: IdCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition","title":"<code>RollupCondition</code>","text":"<p>Represents rollup criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition.any","title":"<code>any: RollupArrayCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition.date","title":"<code>date: DateCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition.every","title":"<code>every: RollupArrayCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition.none","title":"<code>none: RollupArrayCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RollupCondition.number","title":"<code>number: NumberCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter","title":"<code>SearchFilter</code>","text":"<p>Represents a search property filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQuery","title":"<code>SearchQuery</code>","text":"<p>Query object in Notion for searching pages &amp; databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQuery.sort","title":"<code>sort: SearchSort | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder","title":"<code>SearchQueryBuilder(endpoint: NCEndpointCall, text: str | None = None)</code>","text":"<p>Search query builder to search for pages and databases</p> <p>By default and not changed by <code>sort</code>, then the most recently edited results are returned first.</p> <p>Notion API: https://developers.notion.com/reference/post-search</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.query","title":"<code>query: SearchQuery</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.execute","title":"<code>execute(**nc_params: int | str) -&gt; Iterator[T]</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.filter","title":"<code>filter(*, page_only: bool = False, db_only: bool = False) -&gt; SearchQueryBuilder[T]</code>","text":"<p>Filter for pages or databases only</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.sort","title":"<code>sort(*, ascending: bool) -&gt; SearchQueryBuilder[T]</code>","text":"<p>Add the given sort elements to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort","title":"<code>SearchSort</code>","text":"<p>Sort instruction when searching for pages and databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort.direction","title":"<code>direction: SortDirection</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort.timestamp","title":"<code>timestamp: Literal[TimestampKind.LAST_EDITED_TIME]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition","title":"<code>SelectCondition</code>","text":"<p>Represents select criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.does_not_equal","title":"<code>does_not_equal: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.equals","title":"<code>equals: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition","title":"<code>TextCondition</code>","text":"<p>Represents text criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.contains","title":"<code>contains: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_contain","title":"<code>does_not_contain: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_equal","title":"<code>does_not_equal: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.ends_with","title":"<code>ends_with: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.equals","title":"<code>equals: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.starts_with","title":"<code>starts_with: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter","title":"<code>TimestampFilter</code>","text":"<p>Represents a timestamp filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter.timestamp","title":"<code>timestamp: TimestampKind</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/","title":"Schema","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema","title":"<code>schema</code>","text":"<p>Objects representing a database schema.</p> <p>Properties are used when</p> <ol> <li>a database with a specific schema is created,</li> <li>a database with a schema is retrieved.</li> </ol> <p>Unfortunately, the way a schema is defined in case of 1. and 2. is not consistent. In case 1., the property name is only defined as a key while in case 2. it is additionally defined as <code>name</code> attribute of the property object. We treat these two cases the same way when constructing the property objects. For this reason <code>name</code> is <code>Unset</code> by default.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.GO_co","title":"<code>GO_co = TypeVar('GO_co', bound=GenericObject, covariant=True, default=GenericObject)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Button","title":"<code>Button</code>","text":"<p>Button database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Button.button","title":"<code>button: ButtonTypeData = Field(default_factory=ButtonTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.ButtonTypeData","title":"<code>ButtonTypeData</code>","text":"<p>Type data for <code>Button</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox","title":"<code>Checkbox</code>","text":"<p>Defines the checkbox configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox.checkbox","title":"<code>checkbox: CheckboxTypeData = Field(default_factory=CheckboxTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CheckboxTypeData","title":"<code>CheckboxTypeData</code>","text":"<p>Type data for <code>Checkbox</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy","title":"<code>CreatedBy</code>","text":"<p>Defines the created-by configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy.created_by","title":"<code>created_by: CreatedByTypeData = Field(default_factory=CreatedByTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedByTypeData","title":"<code>CreatedByTypeData</code>","text":"<p>Type data for <code>CreatedBy</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime","title":"<code>CreatedTime</code>","text":"<p>Defines the created-time configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime.created_time","title":"<code>created_time: CreatedTimeTypeData = Field(default_factory=CreatedTimeTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTimeTypeData","title":"<code>CreatedTimeTypeData</code>","text":"<p>Type data for <code>CreatedTime</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date","title":"<code>Date</code>","text":"<p>Defines the date configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date.date","title":"<code>date: DateTypeData = Field(default_factory=DateTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DateTypeData","title":"<code>DateTypeData</code>","text":"<p>Type data for <code>Date</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation","title":"<code>DualPropertyRelation</code>","text":"<p>Defines a two-way relation configuration for a database property.</p> <p>If a two-way relation property X relates to Y then the two-way relation property Y relates to X.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.dual_property","title":"<code>dual_property: DualPropertyRelationTypeData = Field(default_factory=DualPropertyRelationTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.build_relation","title":"<code>build_relation(dbref: UUID) -&gt; Relation</code>  <code>classmethod</code>","text":"<p>Create a <code>dual_property</code> relation using the target database reference.</p> <p><code>dbref</code> must be either a string or UUID.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelationTypeData","title":"<code>DualPropertyRelationTypeData</code>","text":"<p>Type data for <code>DualPropertyRelation</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelationTypeData.synced_property_id","title":"<code>synced_property_id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelationTypeData.synced_property_name","title":"<code>synced_property_name: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelationTypeData.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":"<p>Compare DualPropertyRelation objects by all attributes except id.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelationTypeData.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Return a hash of the DualPropertyRelation TypeData based on synced_property_name.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email","title":"<code>Email</code>","text":"<p>Defines the email configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email.email","title":"<code>email: EmailTypeData = Field(default_factory=EmailTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.EmailTypeData","title":"<code>EmailTypeData</code>","text":"<p>Type data for <code>Email</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files","title":"<code>Files</code>","text":"<p>Defines the files configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files.files","title":"<code>files: FilesTypeData = Field(default_factory=FilesTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.FilesTypeData","title":"<code>FilesTypeData</code>","text":"<p>Type data for <code>Files</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula","title":"<code>Formula</code>","text":"<p>Defines the formula configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.formula","title":"<code>formula: FormulaTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.build","title":"<code>build(formula: str) -&gt; Formula</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.FormulaTypeData","title":"<code>FormulaTypeData</code>","text":"<p>Type data for <code>Formula</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.FormulaTypeData.expression","title":"<code>expression: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.FormulaTypeData.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":"<p>Compare Formula objects by all attributes except id.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.FormulaTypeData.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Return a hash of the Formula TypeData.</p> <p>Since eq always returns True due to API expression transformation, we use a constant hash to maintain consistency with equality.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy","title":"<code>LastEditedBy</code>","text":"<p>Defines the last-edited-by configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy.last_edited_by","title":"<code>last_edited_by: LastEditedByTypeData = Field(default_factory=LastEditedByTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedByTypeData","title":"<code>LastEditedByTypeData</code>","text":"<p>Type data for <code>LastEditedBy</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime","title":"<code>LastEditedTime</code>","text":"<p>Defines the last-edited-time configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime.last_edited_time","title":"<code>last_edited_time: LastEditedTimeTypeData = Field(default_factory=LastEditedTimeTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTimeTypeData","title":"<code>LastEditedTimeTypeData</code>","text":"<p>Type data for <code>LastEditedTime</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect","title":"<code>MultiSelect</code>","text":"<p>Defines the multi-select configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.multi_select","title":"<code>multi_select: MultiSelectTypeData = Field(default_factory=MultiSelectTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.build","title":"<code>build(options: list[SelectOption]) -&gt; MultiSelect</code>  <code>classmethod</code>","text":"<p>Create a <code>Select</code> object from the list of <code>SelectOption</code>'s.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelectTypeData","title":"<code>MultiSelectTypeData</code>","text":"<p>Type data for <code>MultiSelect</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelectTypeData.options","title":"<code>options: list[SelectOption] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number","title":"<code>Number</code>","text":"<p>Defines the number configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.number","title":"<code>number: NumberTypeData = Field(default_factory=NumberTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.build","title":"<code>build(format: NumberFormat) -&gt; Number</code>  <code>classmethod</code>","text":"<p>Create a <code>Number</code> object with the expected format.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberTypeData","title":"<code>NumberTypeData</code>","text":"<p>Type data for <code>Number</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberTypeData.format","title":"<code>format: NumberFormat = NumberFormat.NUMBER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberTypeData.validate_enum_field","title":"<code>validate_enum_field(field: str) -&gt; NumberFormat</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People","title":"<code>People</code>","text":"<p>Defines the people configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People.people","title":"<code>people: PeopleTypeData = Field(default_factory=PeopleTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PeopleTypeData","title":"<code>PeopleTypeData</code>","text":"<p>Type data for <code>People</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber","title":"<code>PhoneNumber</code>","text":"<p>Defines the phone number configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber.phone_number","title":"<code>phone_number: PhoneNumberTypeData = Field(default_factory=PhoneNumberTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumberTypeData","title":"<code>PhoneNumberTypeData</code>","text":"<p>Type data for <code>PhoneNumber</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Place","title":"<code>Place</code>","text":"<p>Defines the place configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Place.place","title":"<code>place: PlaceTypeData = Field(default_factory=PlaceTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PlaceTypeData","title":"<code>PlaceTypeData</code>","text":"<p>Type data for <code>Place</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Property","title":"<code>Property</code>","text":"<p>Base class for Notion property objects.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Property.description","title":"<code>description: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Property.id","title":"<code>id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Property.name","title":"<code>name: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation","title":"<code>PropertyRelation</code>","text":"<p>Defines common configuration for a property relation.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.data_source_id","title":"<code>data_source_id: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.database_id","title":"<code>database_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation","title":"<code>Relation</code>","text":"<p>Defines the relation configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation.relation","title":"<code>relation: SinglePropertyRelation | DualPropertyRelation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp","title":"<code>RenameProp</code>","text":"<p>Property to rename a property during a database update.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText","title":"<code>RichText</code>","text":"<p>Defines the rich text configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText.rich_text","title":"<code>rich_text: RichTextTypeData = Field(default_factory=RichTextTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichTextTypeData","title":"<code>RichTextTypeData</code>","text":"<p>Type data for <code>RichText</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup","title":"<code>Rollup</code>","text":"<p>Defines the rollup configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.rollup","title":"<code>rollup: RollupTypeData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.build","title":"<code>build(relation: str, property: str, function: AggFunc) -&gt; Rollup</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData","title":"<code>RollupTypeData</code>","text":"<p>Type data for <code>Rollup</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.function","title":"<code>function: AggFunc = AggFunc.COUNT_ALL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.relation_property_id","title":"<code>relation_property_id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.relation_property_name","title":"<code>relation_property_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.rollup_property_id","title":"<code>rollup_property_id: str | UnsetType = Unset</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.rollup_property_name","title":"<code>rollup_property_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.__eq__","title":"<code>__eq__(value: object) -&gt; bool</code>","text":"<p>Compare Rollup objects by all attributes except id.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Return a hash of the Rollup TypeData based on function and property names.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RollupTypeData.validate_enum_field","title":"<code>validate_enum_field(field: str) -&gt; AggFunc</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select","title":"<code>Select</code>","text":"<p>Defines the select configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.select","title":"<code>select: SelectTypeData = Field(default_factory=SelectTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.build","title":"<code>build(options: list[SelectOption]) -&gt; Select</code>  <code>classmethod</code>","text":"<p>Create a <code>Select</code> object from the list of <code>SelectOption</code>'s.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectTypeData","title":"<code>SelectTypeData</code>","text":"<p>Type data for <code>Select</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectTypeData.options","title":"<code>options: list[SelectOption] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation","title":"<code>SinglePropertyRelation</code>","text":"<p>Defines a one-way relation configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.single_property","title":"<code>single_property: SinglePropertyRelationTypeData = Field(default_factory=SinglePropertyRelationTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.build_relation","title":"<code>build_relation(dbref: UUID) -&gt; Relation</code>  <code>classmethod</code>","text":"<p>Create a <code>single_property</code> relation using the target database reference.</p> <p><code>dbref</code> must be either a string or UUID.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelationTypeData","title":"<code>SinglePropertyRelationTypeData</code>","text":"<p>Type data for <code>SinglePropertyRelation</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status","title":"<code>Status</code>","text":"<p>Defines the status configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status.status","title":"<code>status: StatusTypeData = Field(default_factory=StatusTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status.build","title":"<code>build(options: list[SelectOption], groups: list[SelectGroup]) -&gt; Status</code>  <code>classmethod</code>","text":"<p>Create a <code>Status</code> object from the list of <code>SelectOption</code>'s.</p> <p>Warning</p> <p>While a Status property can be built, it can only be used to check a schema, not to create a database having such a property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.StatusTypeData","title":"<code>StatusTypeData</code>","text":"<p>Type data for <code>Status</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.StatusTypeData.groups","title":"<code>groups: list[SelectGroup] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.StatusTypeData.options","title":"<code>options: list[SelectOption] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title","title":"<code>Title</code>","text":"<p>Defines the title configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title.title","title":"<code>title: TitleTypeData = Field(default_factory=TitleTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.TitleTypeData","title":"<code>TitleTypeData</code>","text":"<p>Type data for <code>Title</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL","title":"<code>URL</code>","text":"<p>Defines the URL configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL.url","title":"<code>url: URLTypeData = Field(default_factory=URLTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URLTypeData","title":"<code>URLTypeData</code>","text":"<p>Type data for <code>URL</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID","title":"<code>UniqueID</code>","text":"<p>Unique ID database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID.unique_id","title":"<code>unique_id: UniqueIDTypeData = Field(default_factory=UniqueIDTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID.build","title":"<code>build(prefix: str | None = None) -&gt; UniqueID</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueIDTypeData","title":"<code>UniqueIDTypeData</code>","text":"<p>Type data for <code>UniqueID</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueIDTypeData.prefix","title":"<code>prefix: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification","title":"<code>Verification</code>","text":"<p>Verfication database property of Wiki databases.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification.verification","title":"<code>verification: VerificationTypeData = Field(default_factory=VerificationTypeData)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.VerificationTypeData","title":"<code>VerificationTypeData</code>","text":"<p>Type data for <code>Verification</code>.</p>"},{"location":"reference/ultimate_notion/templates/","title":"Templates","text":""},{"location":"reference/ultimate_notion/templates/#ultimate_notion.templates","title":"<code>templates</code>","text":""},{"location":"reference/ultimate_notion/templates/#ultimate_notion.templates.get_template","title":"<code>get_template(name: str, relative_to: str | ModuleType = __name__) -&gt; string.Template</code>","text":"<p>Retrieve the template by name</p>"},{"location":"reference/ultimate_notion/templates/#ultimate_notion.templates.page_html","title":"<code>page_html(content: str, *, title: str = '') -&gt; str</code>","text":"<p>Wrap the content of the page as proper HTML for displaying.</p>"},{"location":"usage/cli/","title":"Command Line Interface","text":"<p>When Ultimate Notion is installed, a new command <code>uno</code> becomes available in your virtual environment. This command provides quick access to configuration and integration information.</p>"},{"location":"usage/cli/#usage","title":"Usage","text":"<p>The CLI currently supports the following operations:</p> <ul> <li>Configuration management - View your current configuration file location and contents</li> <li>Integration information - Display details about your Notion integration and environment</li> <li>File uploads - Upload files to Notion pages with automatic block type detection</li> <li>System diagnostics - Check version information and workspace details</li> </ul> <p>To see all available commands and options:</p> <pre><code>uno --help\n</code></pre> <p>Shell Auto-completion</p> <p>The CLI supports shell auto-completion for faster command entry. Install it with: <pre><code>uno --install-completion\n</code></pre></p>"},{"location":"usage/cli/#available-commands","title":"Available Commands","text":""},{"location":"usage/cli/#config","title":"<code>config</code>","text":"<p>Display the current configuration file path and contents:</p> <pre><code>uno config\n</code></pre>"},{"location":"usage/cli/#info","title":"<code>info</code>","text":"<p>Display information about your Notion integration, including version details and workspace information:</p> <pre><code>uno info\n</code></pre>"},{"location":"usage/cli/#upload","title":"<code>upload</code>","text":"<p>Upload a file to a Notion page and automatically append it as the appropriate block type:</p> <pre><code>uno upload &lt;file_path&gt; &lt;page_name_or_uuid&gt;\n</code></pre> <p>The command automatically detects the file type and creates the appropriate block:</p> <ul> <li>Images (<code>.png</code>, <code>.jpg</code>, <code>.jpeg</code>, <code>.gif</code>, <code>.webp</code>, etc.) \u2192 Image block</li> <li>Videos (<code>.mp4</code>, <code>.avi</code>, <code>.mov</code>, <code>.wmv</code>, etc.) \u2192 Video block</li> <li>Audio (<code>.mp3</code>, <code>.wav</code>, <code>.ogg</code>, <code>.m4a</code>, etc.) \u2192 Audio block</li> <li>PDFs (<code>.pdf</code>) \u2192 PDF block</li> <li>All other files \u2192 File block</li> </ul> <p>Check out all supported file types in the Notion docs.</p>"},{"location":"usage/cli/#examples","title":"Examples","text":"<p>Upload an image to a page by name:</p> <pre><code>uno upload screenshot.png \"My Project Notes\"\n</code></pre> <p>Upload a PDF to a page by UUID:</p> <pre><code>uno upload document.pdf 12345678-1234-1234-1234-123456789abc\n</code></pre> <p>Upload a video file:</p> <pre><code>uno upload demo.mp4 \"Product Demo Page\"\n</code></pre>"},{"location":"usage/cli/#options","title":"Options","text":"<p>The CLI supports a <code>--log-level</code> option to control output verbosity. Available levels are <code>critical</code>, <code>error</code>, <code>warning</code> (default), <code>info</code>, and <code>debug</code>.</p> <pre><code>uno --log-level debug info\n</code></pre> <p>Upload Command Logging</p> <p>The <code>upload</code> command shows detailed progress information when using <code>--log-level info</code> or <code>--log-level debug</code>. This includes file upload progress, page lookup details, and file URLs. By default, only success messages and errors are shown.</p> <pre><code>uno --log-level info upload document.pdf \"My Page\"\n</code></pre> <p>For detailed help on any command, use:</p> <pre><code>uno &lt;command&gt; --help\n</code></pre>"},{"location":"usage/configuration/","title":"Ultimate Notion configuration","text":"<p>Ultimate Notion uses a TOML configuration file to manage settings and authentication. There are two ways to provide your configuration:</p> <ol> <li>Environment variable: Set <code>ULTIMATE_NOTION_CONFIG</code> to point to your config file</li> <li>Default location:<ul> <li>macOS/Linux: <code>~/.ultimate-notion/config.toml</code></li> <li>Windows: <code>$HOME/.ultimate-notion/config.toml</code></li> </ul> </li> </ol>"},{"location":"usage/configuration/#creating-a-configuration-file","title":"Creating a configuration file","text":"<p>To create a default configuration file, run:</p> <pre><code>uno config\n</code></pre> <p>See the CLI documentation for more configuration commands.</p>"},{"location":"usage/configuration/#configuration-options","title":"Configuration options","text":"<p>The configuration file manages your Notion token and other settings. You can either:</p> <ul> <li>Set your token directly in the config file</li> <li>Use environment variables (recommended for security)</li> </ul>"},{"location":"usage/configuration/#default-configuration","title":"Default configuration","text":"<p>The default configuration file contains:</p> <pre><code>[ultimate_notion]\nsync_state_dir = \"sync_states\"\ndebug = \"${env:ULTIMATE_NOTION_DEBUG|false}\"\ntoken = \"${env:NOTION_TOKEN}\"\n\n[google]\nclient_secret_json = \"client_secret.json\"\ntoken_json = \"token.json\"\n</code></pre> <p>Let's examine each setting:</p> <p>Token (required): The <code>token</code> setting specifies your Notion integration token. You have two options:</p> <ul> <li>Environment variable (recommended): Set <code>export NOTION_TOKEN=\"ntn_your_token_here\"</code></li> <li>Direct in file: Replace <code>\"${env:NOTION_TOKEN}\"</code> with <code>\"ntn_your_token_here\"</code></li> </ul> <p>Using environment variables is more secure as it avoids storing sensitive tokens in files.</p> <p>Debug mode: The <code>debug</code> setting controls logging verbosity. Set to <code>true</code> for extensive debug information when reporting issues. You can either:</p> <ul> <li>Set environment variable: <code>export ULTIMATE_NOTION_DEBUG=true</code></li> <li>Edit config directly: <code>debug = true</code></li> </ul> <p>Environment variable syntax</p> <p>The <code>${env:VARIABLE_NAME|default}</code> format looks up environment variables. If the variable exists, its value is used; otherwise, the default after <code>|</code> is applied. If no default is provided and the variable is missing, configuration loading fails.</p> <p>Google Tasks integration: The <code>sync_state_dir</code> and <code>[google]</code> section are only needed for syncing Ultimate Notion databases with Google Tasks:</p> <ul> <li><code>sync_state_dir</code>: Directory for storing sync state files</li> <li><code>client_secret_json</code>: Google OAuth client secret file</li> <li><code>token_json</code>: Google OAuth token storage</li> </ul> <p>All non-absolute paths are relative to the config file directory (e.g., <code>token.json</code> will be in the same directory as <code>config.toml</code>).</p>"},{"location":"usage/db_advanced/","title":"Data models &amp; schemas","text":"<p>We'll create two simple databases with a relation quite similar to those described in the Notion docs. We'll have a database for customers and one for items, which customers can purchase.</p> <p>Let's first initialize a Notion session:</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()\n</code></pre>"},{"location":"usage/db_advanced/#declarative-way-of-defining-a-schema","title":"Declarative way of defining a schema","text":"<p>We start by defining the schema for our items in a truly Pythonic way. The schema should have three properties: the title property <code>Name</code> for the name of an item (e.g., \"Jeans\"), a size property <code>Size</code>, and of course a <code>Price</code> property in US Dollars. The size of a piece of clothing can be chosen from the options <code>S</code>, <code>M</code>, and <code>L</code>. We can directly translate this schema into Python code:</p> <pre><code>class Size(uno.OptionNS):\n    \"\"\"Namespace for the select options of our various sizes\"\"\"\n    S = uno.Option(name='S', color=uno.Color.GREEN)\n    M = uno.Option(name='M', color=uno.Color.YELLOW)\n    L = uno.Option(name='L', color=uno.Color.RED)\n\n\nclass Item(uno.Schema, db_title='Item DB'):\n    \"\"\"Database of all the items we sell\"\"\"\n    name = uno.PropType.Title('Name')\n    size = uno.PropType.Select('Size', options=Size)\n    price = uno.PropType.Number('Price', format=uno.NumberFormat.DOLLAR)\n</code></pre> <p>The <code>db_title</code> parameter in the schema definition is optional but highly recommended. When provided, it sets the default title for the database when calling <code>create_db()</code> without an explicit <code>title</code> argument. Also it allows you to relate your schema to an existing database.</p> <p>Alternatively, you can specify a <code>db_id</code> parameter to bind the schema to an existing database:</p> <pre><code>class Item(uno.Schema, db_id='550e8400-e29b-41d4-a716-446655440000'):\n    \"\"\"Database of all the items we sell\"\"\"\n    name = uno.PropType.Title('Name')\n    size = uno.PropType.Select('Size', options=Size)\n    price = uno.PropType.Number('Price', format=uno.NumberFormat.DOLLAR)\n</code></pre> <p>When <code>db_id</code> is provided, you can easily bind the schema to the existing database using <code>bind_db()</code> without having to manually search for it.If neither <code>db_id</code> nor <code>db_title</code> is provided, you'll need to pass a database object explicitly to <code>bind_db()</code> or provide a title when creating the database.</p> <p>Since a database needs to be a block within a page, we assume there is a page called <code>Tests</code> that is connected with this integration. We retrieve the object of this page and create the database with the page as parent:</p> <pre><code>root_page = notion.search_page('Tests', exact=True).item()\nitem_db = notion.create_db(parent=root_page, schema=Item)\n</code></pre> <p>Now we create a database for our customers and define a one-way Relation to the items:</p> <pre><code>class Customer(uno.Schema, db_title='Customer DB'):\n    \"\"\"Database of all our beloved customers\"\"\"\n    name = uno.PropType.Title('Name')\n    purchases = uno.PropType.Relation('Items Purchased', schema=Item)\n\ncustomer_db = notion.create_db(parent=root_page, schema=Customer)\n</code></pre> <p>Warning</p> <p>To create a database that has a relation to another database, the target database must already exist. Thus, the order of creating databases from schemas is important.</p> <p>All available database property types are provided by PropType, which is a namespace for the various property types defined in schema. Property types with the class variable <code>allowed_at_creation</code> set to <code>False</code> are currently not supported by the Notion API when creating a new database.</p>"},{"location":"usage/db_advanced/#programmatic-way-of-defining-a-schema","title":"Programmatic way of defining a schema","text":"<p>Besides the recommended declarative approach to define a schema, you can also choose a more classical programmatic approach. The main difference is that we first create a database with a default schema and then start adding new properties (i.e., columns) to it.</p> <pre><code>employee_db = notion.create_db(parent=root_page)\nemployee_db.title = 'Employee DB'\nemployee_db.description = 'Database holding all our employees'\n\nemployee_db.schema['Salary'] = uno.PropType.Number()\nemployee_db.schema.hiring_date = uno.PropType.Date('Hiring Date')\n\noptions = [uno.Option(name='Junior', color=uno.Color.GREEN),\n           uno.Option(name='Advanced', color=uno.Color.YELLOW),\n           uno.Option(name='Senior', color=uno.Color.RED)]\n\nemployee_db.schema['Level'] = uno.PropType.Select(options=options)\n</code></pre> <p>As shown above, there are two ways to add new properties:</p> <ol> <li>Dictionary item assignment of a PropType to the schema</li> <li>Property assignment of a PropType to the schema</li> </ol> <p>In the first case, a corresponding property <code>salary</code> of the schema will be created automatically.</p> <p>This also allows us to perform schema evolution by changing and updating columns:</p> <pre><code>employee_db.schema['Salary'] = uno.PropType.Formula(\n    formula='50000 + dateBetween(prop(\"Hiring Date\"), now(), \"years\")*1000'\n)\nemployee_db.schema['Level'].options = [\n    *options,\n    uno.Option(name='Partner', color=uno.Color.PINK)\n]\nemployee_db.schema.hiring_date = uno.PropType.Text()\nemployee_db.schema.hiring_date.name = 'Hiring Date as String'\nemployee_db.schema['Hiring Date as String'].name = 'Hiring Date'\nemployee_db.schema.hiring_date.attr_name = 'hiring_date_as_str'\nassert employee_db.schema.hiring_date_as_str == uno.PropType.Text()\n</code></pre> <p>This changes the salary property to a formula type, adds a partner level to the level property, changes the hiring date to a text type, and modifies its name. This is then followed by setting the name back using property access. It also shows how <code>attr_name</code> can be used to set the actual attribute name of the schema object to <code>hiring_date_as_str</code>.</p> <p>Of course, we can also delete properties:</p> <pre><code>del employee_db.schema['Salary']\nemployee_db.schema.hiring_date_as_str.delete()\n</code></pre> <p>Again using both the dictionary and the property approach.</p>"},{"location":"usage/db_advanced/#new-database-entries","title":"New database entries","text":"<p>Now that we have created those two databases, we can start filling them with entries either using the create_page method of the database object:</p> <pre><code>t_shirt = item_db.create_page(name='T-shirt', size=Size.L, price=17)\nkhaki_pants = item_db.create_page(name='Khaki pants', size=Size.M, price=25)\ntank_top = item_db.create_page(name='Tank top', size=Size.S, price=15)\n</code></pre> <p>or we can also directly use the create method of the schema if the schema is already bound (e.g., by using bind_db) to a database:</p> <pre><code>lovelace = Customer.create(name='Ada Lovelace', purchases=[tank_top])\nhertzfeld = Customer.create(name='Andy Herzfeld', purchases=[khaki_pants])\nengelbart = Customer.create(name='Doug Engelbart', purchases=[khaki_pants, t_shirt])\n</code></pre> <p>Info</p> <p>The keyword arguments are exactly the class variables from the page schemas <code>Item</code> and <code>Customer</code> above.</p> <p>This is how our two databases <code>item_db</code> and <code>customer_db</code> look in the Notion UI right now:</p> <p></p> <p></p> <p>Note</p> <p>The description of the databases corresponds to the docstring of the schema classes <code>Item</code> and <code>Customer</code>.</p>"},{"location":"usage/db_advanced/#fast-access-to-page-properties","title":"Fast access to page properties","text":"<p>The properties of a page, defined by the properties of the database the page resides in, can be easily accessed using the <code>.props</code> namespace:</p> <pre><code>assert lovelace.props.name == 'Ada Lovelace'\nassert engelbart.props.purchases == [khaki_pants, t_shirt]\n</code></pre> <p>This is especially useful when using a REPL with autocompletion like JupyterLab or IPython. As an alternative, bracket notation can also be used. This allows us to use the actual property names from the schema definition:</p> <pre><code>assert lovelace.props['Name'] == 'Ada Lovelace'\nassert engelbart.props['Items Purchased'] == [khaki_pants, t_shirt]\n</code></pre>"},{"location":"usage/db_advanced/#two-way-self-relations","title":"Two-way &amp; self relations","text":"<p>Notion also supports two-way relations and so does Ultimate Notion. Taking the same example as before, imagine that we also wanted to see directly which customers bought a specific item. In this case, the one-way relation <code>Items Purchased</code> from <code>Customer</code> needs to become a two-way relation. We can achieve this with a simple modification to both schemas:</p> <pre><code>class Item(uno.Schema, db_title='Item DB'):\n    \"\"\"Database of all the items we sell\"\"\"\n    name = uno.PropType.Title('Name')\n    size = uno.PropType.Select('Size', options=Size)\n    price = uno.PropType.Number('Price', format=uno.NumberFormat.DOLLAR)\n    bought_by = uno.PropType.Relation('Bought by')\n\nclass Customer(uno.Schema, db_title='Customer DB'):\n    \"\"\"Database of all our beloved customers\"\"\"\n    name = uno.PropType.Title('Name')\n    purchases = uno.PropType.Relation('Items Purchased', schema=Item, two_way_prop=Item.bought_by)\n</code></pre> <p>What happens here is that we first create a target relation property <code>bought_by</code> in <code>Item</code> by not specifying any other schema. Then in <code>Customer</code>, we define a two-way property by specifying not only the schema <code>Item</code> but also the property we want to synchronize with using the <code>two_way_prop</code> keyword.</p> <p>Let's delete the old databases and recreate them with our updated schemas and a few items:</p> <pre><code>item_db.delete(), customer_db.delete()\n\nitem_db = notion.create_db(parent=root_page, schema=Item)\ncustomer_db = notion.create_db(parent=root_page, schema=Customer)\n\nt_shirt = item_db.create_page(name='T-shirt', size=Size.L, price=17)\nlovelace = Customer.create(name='Ada Lovelace', purchases=[t_shirt])\nhertzfeld = Customer.create(name='Andy Herzfeld', purchases=[t_shirt])\n</code></pre> <p>and take a look at the two-way relation within <code>item_db</code>:</p> <p></p> <p>Assume now that we want to have a schema that references itself, for instance a simple task list where certain tasks can be subtasks of others:</p> <pre><code>class Task(uno.Schema, db_title='Task List'):\n    \"\"\"A really simple task list with subtasks\"\"\"\n    task = uno.PropType.Title('Task')\n    due_by = uno.PropType.Date('Due by')\n    parent = uno.PropType.Relation('Parent Task', schema=uno.SelfRef)\n\ntask_db = notion.create_db(parent=root_page, schema=Task)\n\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now()\n\nclean_house = Task.create(\n    task='Clean the house',\n    due_by=today + timedelta(weeks=4)\n)\nvacuum_room = Task.create(\n    task='Vacuum living room',\n    due_by=today + timedelta(weeks=1),\n    parent=clean_house\n)\ntidyup_kitchen = Task.create(\n    task='Tidy up kitchen',\n    due_by=today + timedelta(days=3),\n    parent=clean_house\n)\n</code></pre> <p>Warning</p> <p>Due to a bug in the Notion API, it's not possible to have a two-way self-referencing relation right now. Creating a two-way relation leads to the creation of a one-way relation. We check for that and fail.</p>"},{"location":"usage/db_introduction/","title":"Introduction to databases","text":"<p>Databases are one of the most versatile and powerful features of Notion. Working programmatically with your databases extends Notion's functionality infinitely, as you can use Python for all kinds of transformations, external data services, and much more. Ultimate Notion unleashes the full power of Python for use with Notion's databases. So let's see what we can do.</p>"},{"location":"usage/db_introduction/#searching-for-a-database","title":"Searching for a database","text":"<p>Assume we have a database called Contacts DB.</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()  # if NOTION_TOKEN is set in environment\n\ncontacts_dbs = notion.search_db('Contacts DB')\n\nassert [db.title for db in contacts_dbs] == ['Contacts DB']\n</code></pre> <p>The method <code>search_db</code> will always return a list, as Notion gives no guarantees that the title of a database is unique. Practically though, most users give databases unique names, and to accommodate this, the returned list provides a method <code>.item()</code>, which will return the item of a single-item list or raise an error otherwise. Another possibility is to retrieve the database by its unique ID.</p> <pre><code>contacts_db = notion.search_db('Contacts DB').item()\n# or in case the unique ID of the database is known\ncontacts_db = notion.get_db(contacts_db.id)\n</code></pre> <p>The Database object provides access to many attributes like title, icon, description, etc.</p> <pre><code>assert contacts_db.description == 'Database of all my contacts!'\n</code></pre>"},{"location":"usage/db_introduction/#creating-a-database-and-adding-pages","title":"Creating a database and adding pages","text":"<p>A simple database with the default columns <code>Name</code> for the title of pages and the Multi-select column <code>Tags</code> can be created using create_db. To tell Notion where to put the database, we have to provide an existing page. Let's assume we have a page called <code>Tests</code> that is shared with our integration:</p> <pre><code>root_page = notion.search_page('Tests').item()\nmy_db = notion.create_db(parent=root_page)\n</code></pre> <p>Using the <code>my_db</code> object, we can now set its attributes, e.g.:</p> <pre><code>my_db.title = 'My DB'\nmy_db.description = 'This is my database for cool Python libraries!'\n</code></pre> <p>Info</p> <p>Unfortunately, the Notion API does not support setting the icon or the cover of a database.</p> <p>We can now simply add a new page to this database and set some attributes:</p> <pre><code>new_page = my_db.create_page(name='Ultimate Notion')\nnew_page.description = 'Notes about Ultimate Notion'\nnew_page.icon = '\ud83d\ude80'\nnew_page.cover = uno.url('https://www.notion.so/images/page-cover/woodcuts_2.jpg')\n</code></pre> <p>This is how My DB looks right now.</p> <p></p> <p>But how can I figure out which keyword arguments to pass to create_page? For this, we can take a look at the schema of the database, which also allows us to create new pages in a neat way. As our database holds tools, we can express this by naming the variable for the schema accordingly. An example illustrates this:</p> <pre><code>Tool = my_db.schema\nTool.show()\n</code></pre> <p>This shows us that our database has two columns, <code>Name</code> and <code>Tags</code>, as well as the name of the arguments for create_page.</p> <pre><code>Name    Property     Attribute\n------  -----------  -----------\nTags    MultiSelect  tags\nName    Title        name\n</code></pre> <p>A new page can now also be created using <code>Tool</code>, i.e.:</p> <pre><code>new_tool = Tool.create(name='Ultimate Notion')\n</code></pre> <p>This is basically just an alias for create_page but can make your code much more expressive.</p>"},{"location":"usage/db_introduction/#viewing-the-pages-of-a-database","title":"Viewing the pages of a database","text":"<p>Assume we have a simple database listing tasks like this:</p> <p></p> <p>To access the tasks, i.e., the pages within this database, we can use the get_all_pages method to generate a View. It's as simple as:</p> <pre><code>task_db = notion.search_db('Task DB').item()\ntask_view = task_db.get_all_pages()\n</code></pre> <p>To get a quick overview of our tasks, we can use show. On the console, this will print:</p> <pre><code>Task                              Status       Priority    Urgency    Due Date\n--------------------------------  -----------  ----------  ---------  -------------------------\nClearing out the cellar           In Progress  \u2739 High      \ud83d\udd25 -3w6d   2025-07-23 21:10:00+00:00\nRun first Marathon                Done         \u2736 Low       \u2705         2025-08-05 11:00:00+00:00\nPay yearly utility bills          Blocked      \u2739 High      \ud83d\udd25 -1d     2025-08-18 16:10:00+00:00\nCall family                       Done         \u2736 Low       \u2705         2025-08-19 16:10:00+00:00\nComplete project report for work  In Progress  \u2737 Medium    \ud83d\udd50 3d      2025-08-23 16:10:00+00:00\nBuild tool with Ultimate Notion   In Progress  \u2736 Low       \ud83d\udd50 2w2d    2025-09-05 16:10:00+00:00\nClean the house                   In Progress  \u2736 Low       \ud83d\udd50 3w5d    2025-09-15 16:10:00+00:00\nRead book about procrastination   Backlog      \u2737 Medium    \ud83d\udd50 13w     2025-11-19 16:10:00+00:00\nPlan vacation                     Backlog      \u2739 High      \ud83d\udd50 18w     2025-12-24 16:10:00+00:00\n</code></pre> <p>or in JupyterLab this will be shown as:</p> <p></p> <p>Special columns for the index, the page's ID, and its icon can be activated using with_index, with_id, and with_icon, respectively:</p> <pre><code>task_view.with_index().with_id().with_icon()\n</code></pre> <p></p> <p>The index can now be used to retrieve a specific page with get_page, or we could just convert the whole view to a Pandas dataframe with to_pandas.</p>"},{"location":"usage/db_introduction/#working-with-views","title":"Working with views","text":"<p>Views help you set the stage for various operations like exporting with the help of the various <code>to_*</code> methods or applying a function to the contained pages using apply. With select, the view can be restricted to certain columns, whereas head (with alias limit) and tail can be used to restrict the number of rows in the view, e.g.:</p> <pre><code>task_view.select('Task', 'Status').head(3).show(simple=True)\n</code></pre> <pre><code>Task                      Status\n------------------------  -----------\nClearing out the cellar   In Progress\nRun first Marathon        Done\nPay yearly utility bills  Blocked\n</code></pre> <p>All methods return a new view without modifying the current one, which allows keeping different views at the same time. To reset the current view object, the reset method can be used. To reload the view, i.e., re-execute the query that led to the view, use reload.</p> <p>Find out more about the functionality of View by reading the API references, but keep in mind that some methods are just stubs.</p>"},{"location":"usage/db_querying/","title":"Querying databases","text":"<p>Notion provides sophisticated database capabilities similar to traditional relational databases, which are accessed with the help of the Structured Query Language (SQL).</p> <p>With the Relation property, you can express Foreign Key relationships and Joins, while the Rollup property allows aggregations like Group By operations in SQL. The two missing basic SQL query operations are the Where and Order By clauses, which correspond to filtering and sorting in Notion. These are especially useful in Notion when we want to retrieve specific pages from a database given some conditions on properties. Ultimate Notion provides a programmatic way, inspired by PySpark and Polars, to query Notion databases.</p> <p>We first create a Notion session and retrieve a page called <code>Tests</code>, which we assume to be connected to our Ultimate Notion integration:</p> <pre><code>import ultimate_notion as uno\nimport pendulum as pnd\n\nnotion = uno.Session.get_or_create()\nroot_page = notion.search_page('Tests', exact=True).item()\n</code></pre> <p>We create a database <code>Article</code> with properties name, topic, and release date. Then we populate the database with some pages:</p> <pre><code>class Topic(uno.OptionNS):\n    \"\"\"Namespace for topics of our articles\"\"\"\n    TECH = uno.Option(name='Tech', color=uno.Color.GREEN)\n    POLITICS = uno.Option(name='Politics', color=uno.Color.YELLOW)\n    FINANCE = uno.Option(name='Finance', color=uno.Color.RED)\n\n\nclass Article(uno.Schema, db_title='Article DB'):\n    \"\"\"Database of various articles\"\"\"\n    name = uno.PropType.Title('Name')\n    topic = uno.PropType.Select('Topic', options=Topic)\n    released = uno.PropType.Date('Released')\n\narticle_db = notion.create_db(parent=root_page, schema=Article)\n\nnum_of_articles = 18\nfor i in range(num_of_articles):\n    Article.create(\n        name=f'Article {i+1}',\n        topic=Topic.to_list()[i % len(Topic)],\n        released=pnd.now().subtract(years=i % len(Topic))\n    )\n</code></pre> <p>To query this database, we can retrieve a Query object from the attribute query of <code>article_db</code>. Calling the method execute of the Query object will retrieve all pages, which is equivalent to calling the method get_all_pages of <code>article_db</code> to get a View:</p> <pre><code>view_of_all_pages = article_db.query.execute()\nassert len(view_of_all_pages) == num_of_articles\n</code></pre>"},{"location":"usage/db_querying/#filtering-sorting","title":"Filtering &amp; sorting","text":"<p>The concept of filtering is really easy. We use a boolean condition to filter for the pages in a database that we want to retrieve. A basic term of a condition consists of a property and a boolean operation, e.g., <code>uno.prop('Name') == 'Article 1'</code>. We use prop to create a Property object, which we can then use for boolean operations like <code>==</code>, <code>contains(...)</code>, etc. Several conditions can be composed with the boolean operators <code>&amp;</code> for logical and as well as <code>|</code> for or.</p> <p>A simple example illustrates this. Assume that we want to retrieve all articles about the topic Tech that were released this week. We then want to sort those articles descending by their release date and ascending by their name, i.e., alphabetically sorted, to break ties. We can simply define the property condition as well as sorting directions and pass it to the Query object using its <code>filter</code> and <code>sort</code> methods, respectively:</p> <pre><code>condition = (uno.prop('Topic') == Topic.TECH) &amp; uno.prop('Released').this_week()\nsort_directions = uno.prop('Released').desc(), uno.prop('Name').asc()\n\npages = article_db.query.filter(condition).sort(*sort_directions).execute()\nassert len(pages) == num_of_articles / len(Topic)\n</code></pre> <p>Danger</p> <p>A common mistake is to forget the parentheses when using <code>&amp;</code> and <code>|</code> to compose several conditions. Due to the precedence rules for operators, e.g., <code>==</code>, <code>!=</code>, in Python, this may lead to an unexpected exception, e.g., <code>TypeError: unsupported operand type(s) for &amp;</code>, since <code>&amp;</code> operates on a property instead of a condition.</p> <p>Using the Notion UI to get the same result, we would define an Advanced filter on a view like this:</p> <p></p> <p>It should also be noted that the methods <code>filter</code> and <code>sort</code> of Query return a new Query object to make method chaining possible. This potentially allows calling <code>filter</code> and <code>sort</code> several times. When <code>filter</code> is called more than once, the newly passed condition is added to the existing condition using a logical and, i.e., <code>&amp;</code>. In case <code>sort</code> is called several times, the new sorting will override the existing one. It should also be noted that the default sort order is ascending and thus <code>asc()</code> can be omitted; only <code>desc()</code> needs to be called explicitly.</p> <p>For debugging your conditions, it is extremely helpful that you can just use <code>str</code> to get a human-readable expression of your condition:</p> <pre><code>cond = (uno.prop('Topic') == Topic.TECH) &amp; uno.prop('Released').this_week()\nassert str(cond) == \"(prop('Topic') == 'Tech') &amp; prop('Released').this_week()\"\n</code></pre>"},{"location":"usage/db_querying/#conditions-property-types","title":"Conditions &amp; property types","text":"<p>Not all conditions work with every property type. For instance, <code>this_week()</code> is obviously only meaningful if the property is of type Date. Whether the conditions and their corresponding property types match or not is evaluated when the query is executed, since only then do we have access to a database schema. Keep this in mind when constructing filter conditions, as a semantically correct condition can turn out to be wrong when the corresponding property types are also taken into account.</p> <p>In Notion, there are various classes of property types:</p> <ul> <li>string types, i.e., Text, Phone, E-Mail, URL, Title, as well as   Formula when the formula returns a string as formula type,</li> <li>number types, i.e., Number and Formula if the formula returns a number, as well as   Rollup if its aggregation function returns a number,</li> <li>boolean types, i.e., Checkbox and Formula if the formula returns true or false,</li> <li>date types, i.e., Date, CreatedTime, LastEditedTime, and Formula if the formula returns   a date, as well as Rollup if its aggregation function returns a date,</li> <li>categorical type, i.e., Select,</li> <li>multi-categorical types, i.e., MultiSelect, Relation, Person,</li> <li>files type, i.e., Files,</li> <li>id type, i.e., ID,</li> <li>array types, i.e., Rollup if it returns an array of any of the other types,   e.g., array of numbers, array of strings, etc., given its aggregation function and the corresponding   rollup property.</li> </ul> <p>The following table lists all condition operators and methods as well as their corresponding types to define conditions:</p> Condition Meaning Property Types <code>is_empty()</code> is empty string, number, (multi-)categorical, date, file <code>is_not_empty()</code> is not empty string, number, (multi-)categorical, date, file <code>==</code> equals string, number, id, boolean, categorical, date <code>!=</code> does not equal string, number, id, boolean, categorical <code>&lt;=</code> less than (or before) or equal number, id, date <code>&lt;</code> less than (or before) number, id, date <code>&gt;=</code> greater than (or after) or equal number, id, date <code>&gt;</code> greater than (or after) number, id, date <code>contains(...)</code> contains string, multi-categorical <code>does_not_contain(...)</code> does not contain string, multi-categorical <code>starts_with(...)</code> starts with substring string <code>ends_with(...)</code> ends with substring string <code>past_year()</code> within the past year date <code>past_month()</code> within the past month date <code>past_week()</code> within the past week date <code>this_week()</code> in this week date <code>next_week()</code> within next week date <code>next_month()</code> within next month date <code>next_year()</code> within next year date <code>none</code> no item fulfills condition array <code>any</code> any item fulfills condition array <code>every</code> every item fulfills condition array <p>Note that the array type works a little bit differently than the others. Imagine you have a rollup with aggregation <code>uno.AggFunc.SHOW_ORIGINAL</code> defined on a date property. The result of the rollup property will thus be a possibly empty array of dates. Imagine a database of readers with a <code>has_read</code> relation to our <code>Article</code> database in order to reference all articles that a reader has already read. We could now define a rollup, named <code>article dates</code>, on the <code>has_read</code> relation for the <code>released</code> property of the <code>Article</code> database with no aggregation, i.e., just showing the original values as elements of an array. The condition that filters for all readers having read at least one article that was released this week looks like this:</p> <pre><code>recent_article_readers_condition = uno.prop('article dates').any.this_week()\n</code></pre> <p>Appending an array quantifier, i.e., <code>none</code>, <code>any</code>, <code>every</code>, generates a RollupArrayProperty, which then expects one of the other condition operators and methods. The possible operators or methods depend on the type of the elements of the array.</p>"},{"location":"usage/file_upload/","title":"Uploading and importing files","text":"<p>Ultimate Notion provides comprehensive file upload functionality that allows you to upload local files to Notion and import files from external URLs. You can then use these uploaded files in various blocks like images, videos, PDFs, and generic file blocks. Check out the list of supported file types for upload.</p>"},{"location":"usage/file_upload/#overview","title":"Overview","text":"<p>Ultimate Notion supports two main methods for getting files into Notion:</p> <ol> <li>Local file upload - Upload files from your local system to Notion</li> <li>External URL import - Import files directly from external URLs</li> </ol> <p>Both methods return an UploadedFile object that can be used in file-based blocks.</p>"},{"location":"usage/file_upload/#local-file-upload","title":"Local File Upload","text":"<p>To upload a local file to Notion, use the <code>upload</code> method of a session:</p> <pre><code>import ultimate_notion as uno\n\nROOT_PAGE = 'Tests'  # page with connected Ultimate Notion integration\n\nnotion = uno.Session.get_or_create()\nroot_page = notion.search_page(ROOT_PAGE).item()\n\n# Upload a local file\nwith open('docs/assets/images/social-card.png', 'rb') as file:\n    uploaded_image = notion.upload(file=file, file_name='social_card.png')\n\n# Create a page and add the uploaded image\npage = notion.create_page(parent=root_page, title='File Upload Demo')\npage.append(uno.Image(uploaded_image, caption='An uploaded image'))\n</code></pre>"},{"location":"usage/file_upload/#file-size-limits-and-multi-part-upload","title":"File Size Limits and Multi-part Upload","text":"<p>Ultimate Notion automatically handles file size limitations and upload modes:</p> <ul> <li>Single-part upload: Files up to 20 MB are uploaded in a single request</li> <li>Multi-part upload: Files larger than 20 MB are automatically split into chunks and uploaded in multiple parts</li> </ul> <p>Note</p> <p>Notion's free plan has a 5 MB file size limit. The 20 MB threshold is for paid plans. Ultimate Notion automatically detects the appropriate upload mode based on file size.</p>"},{"location":"usage/file_upload/#file-name-detection","title":"File Name Detection","text":"<p>If you don't specify a <code>file_name</code>, Ultimate Notion will attempt to detect it from the file object:</p> <pre><code>with open('LICENSE.txt', 'rb') as file:\n    # File name 'LICENSE.txt' is automatically detected\n    uploaded_file = notion.upload(file=file)\n</code></pre>"},{"location":"usage/file_upload/#mime-type-detection","title":"MIME Type Detection","text":"<p>Ultimate Notion automatically detects MIME types for uploaded files using the <code>filetype</code> library. If the MIME type cannot be determined, it defaults to <code>text/plain</code> since Notion doesn't support <code>application/octet-stream</code>.</p>"},{"location":"usage/file_upload/#external-url-import","title":"External URL Import","text":"<p>You can import files directly from external URLs without downloading them locally first:</p> <pre><code># Import a file from an external URL\nurl = ('https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/1080/'\n       'Big_Buck_Bunny_1080_10s_20MB.mp4')\nimported_file = notion.import_url(url=url, file_name='bunny.mp4')\n\npage.append(uno.Video(imported_file, caption='Bunny movie \ud83d\udc30'))\n</code></pre>"},{"location":"usage/file_upload/#external-files-vs-uploaded-files","title":"External Files vs Uploaded Files","text":"<p>You can also work with external files without uploading them to Notion:</p> <pre><code># Create external file references\nexternal_image = uno.url(\n    'https://cdn.pixabay.com/photo/2019/08/06/09/16/flowers-4387827_1280.jpg'\n)\nexternal_pdf = uno.url(\n    'https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf',\n    name='External Document'\n)\n\npage.append([\n    uno.Image(external_image, caption='External image'),\n    uno.PDF(external_pdf, caption='External PDF'),\n])\n</code></pre> <p>Note</p> <p>External files are not stored in Notion and remain dependent on the external URL being accessible. Uploaded files are stored in Notion's infrastructure and remain available even if the original source is removed.</p>"},{"location":"usage/file_upload/#file-upload-status-and-expiry","title":"File Upload Status and Expiry","text":""},{"location":"usage/file_upload/#upload-status-tracking","title":"Upload Status Tracking","text":"<p>Uploaded files have a status that can be tracked using the FileUploadStatus enum:</p> <ul> <li><code>PENDING</code> - File upload is in progress</li> <li><code>UPLOADED</code> - File has been successfully uploaded and processed</li> <li><code>EXPIRED</code> - File upload expired before completion</li> <li><code>FAILED</code> - File upload failed</li> </ul> <p>You can check the status of an uploaded file:</p> <pre><code>print(f\"Upload status: {uploaded_image.status}\")\n</code></pre>"},{"location":"usage/file_upload/#expiry-time-warning","title":"Expiry Time Warning","text":"<p>File Upload Expiry</p> <p>Uploaded files have an expiry time! Within this expiry period, the uploaded file must be used (e.g., added to a page or block), or it will be automatically deleted by Notion. You can check the expiry time using the <code>expiry_time</code> attribute:</p> <pre><code>print(f\"File expires at: {uploaded_image.expiry_time}\")\n</code></pre>"},{"location":"usage/file_upload/#asynchronous-file-import","title":"Asynchronous File Import","text":""},{"location":"usage/file_upload/#non-blocking-import","title":"Non-blocking Import","text":"<p>The <code>import_url</code> method supports asynchronous operation. By default, it blocks until the import is complete, but you can make it non-blocking:</p> <pre><code># Non-blocking import - returns immediately\nvideo_file = notion.import_url(url=url, file_name='video.mp4', block=False)\nprint(f\"Import started, status: {video_file.status}\")  # Will likely be PENDING\n\n# Later, check if the import is complete\nvideo_file.update_status()\nif video_file.status == uno.FileUploadStatus.UPLOADED:\n    print(\"Import complete!\")\nelse:\n    print(f\"Still processing... Status: {video_file.status}\")\n</code></pre>"},{"location":"usage/file_upload/#waiting-for-completion","title":"Waiting for Completion","text":"<p>You can explicitly wait for an upload to complete:</p> <pre><code># Start non-blocking import\nlarge_video = notion.import_url(url=url, file_name='large_video.mp4', block=False)\n\n# Wait until upload is fully processed\nlarge_video.wait_until_uploaded()\nprint(\"File is now ready to use!\")\n\n# Now you can safely use it in blocks\npage.append(uno.Video(large_video, caption='Imported video'))\n</code></pre>"},{"location":"usage/file_upload/#managing-uploads","title":"Managing Uploads","text":""},{"location":"usage/file_upload/#listing-uploads","title":"Listing Uploads","text":"<p>You can list all uploads in your workspace and filter by status:</p> <pre><code># List all uploads\nall_uploads = notion.list_uploads()\n\n# Filter by status\npending_uploads = notion.list_uploads(filter=uno.FileUploadStatus.PENDING)\ncompleted_uploads = notion.list_uploads(filter=uno.FileUploadStatus.UPLOADED)\nfailed_uploads = notion.list_uploads(filter=uno.FileUploadStatus.FAILED)\n</code></pre>"},{"location":"usage/file_upload/#file-upload-information","title":"File Upload Information","text":"<p>Uploaded files provide detailed information:</p> <pre><code># Access file metadata\nprint(f\"File name: {uploaded_image.file_name}\")\nprint(f\"Content type: {uploaded_image.content_type}\")\nprint(f\"Content length: {uploaded_image.content_length}\")\nprint(f\"Expiry time: {uploaded_image.expiry_time}\")\nprint(f\"Status: {uploaded_image.status}\")\n\n# Check import result for URL imports\nif imported_file.file_import_result:\n    print(f\"Import result: {imported_file.file_import_result}\")\n</code></pre>"},{"location":"usage/file_upload/#complete-example","title":"Complete Example","text":"<p>Here's a complete example demonstrating various file upload features including async operations:</p> <pre><code>\"\"\"This example demonstrates how to upload files to Notion\"\"\"\n\nimport ultimate_notion as uno\n\nPARENT_PAGE = 'Tests'  # Defines the page where the demo should be created\n\n\nwith uno.Session() as notion:\n    parent = notion.search_page(PARENT_PAGE).item()\n    # Create a new page for our file upload demo\n    page = notion.create_page(parent=parent, title='File Upload Demo')\n\n    with open('docs/assets/images/social-card.png', 'rb') as file:\n        uploaded_image = notion.upload(file=file, file_name='social_card.png')\n\n    # Check expiry time and status\n    print(f'Uploaded image expires at: {uploaded_image.expiry_time}')\n    print(f'Upload status: {uploaded_image.status}')\n\n    # Add some introductory content and append the uploaded image.\n    page.append(\n        [\n            uno.Heading1('File Upload Example'),\n            uno.Image(\n                uploaded_image, caption='An uploaded image used as a demo'\n            ),\n        ]\n    )\n\n    # Import an external file using non-blocking mode\n    url = (\n        'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/1080/'\n        'Big_Buck_Bunny_1080_10s_20MB.mp4'\n    )\n    imported_file = notion.import_url(\n        url=url, file_name='bunny.mp4', block=False\n    )\n    print(f'Import started with status: {imported_file.status}')\n\n    # Wait for the import to complete\n    imported_file.wait_until_uploaded()\n    print(f'Import completed with status: {imported_file.status}')\n\n    page.append(uno.Video(imported_file, caption='Bunny movie \ud83d\udc30'))\n\n    # List uploads to see our files\n    all_uploads = notion.list_uploads()\n    print(f'Total uploads in workspace: {len(all_uploads)}')\n\n    completed_uploads = notion.list_uploads(\n        filter=uno.FileUploadStatus.UPLOADED\n    )\n    print(f'Completed uploads: {len(completed_uploads)}')\n</code></pre> <p>This example shows:</p> <ol> <li>Creating a demo page</li> <li>Uploading a local image file and checking its expiry time</li> <li>Adding the uploaded image to a page with a caption</li> <li>Importing a video from an external URL using non-blocking mode</li> <li>Waiting for the import to complete and checking status</li> <li>Adding the imported video to the page</li> <li>Listing and filtering uploads by status</li> </ol>"},{"location":"usage/getting_started/","title":"Getting started","text":""},{"location":"usage/getting_started/#installation","title":"Installation","text":"<p>To install Ultimate Notion, simply run:</p> <pre><code>pip install ultimate-notion\n</code></pre> <p>or to install all additional dependencies, use:</p> <pre><code>pip install 'ultimate-notion[all]'\n</code></pre> <p>Ultimate Notion requires Python 3.10 or higher. Depending on your system, you might need to use pyenv, conda, etc. to install a more recent version.</p>"},{"location":"usage/getting_started/#creating-an-integration","title":"Creating an integration","text":"<ol> <li>Open Notion and select a workspace</li> <li>Click \u2699 Settings in the left sidebar</li> <li>In the settings window, click Connections in the Workspace section at the bottom, not the one at the top</li> <li>Click \u2197 Develop or manage integrations at the bottom</li> </ol> <p>This takes you to the My integrations page. Now:</p> <ol> <li>Click + New integration</li> <li>Provide a name and select your workspace</li> <li>Optionally add a logo</li> <li>Select Internal as the integration type</li> <li>Click Save</li> </ol> <p></p> <p>After creation, you'll see a success popup. Click Configure integration settings to access your integration's preferences.</p>"},{"location":"usage/getting_started/#configuring-your-integration","title":"Configuring your integration","text":"<p>In the Configuration tab:</p> <ol> <li>Click Show next to Internal Integration Secret</li> <li>Copy and save the authentication token (starts with <code>ntn_</code>)</li> <li>Under Capabilities, grant all capabilities for maximum flexibility</li> <li>Click Save</li> </ol> <p></p> <p>This token will be used by Ultimate Notion for authentication and must be provided in the configuration.</p>"},{"location":"usage/getting_started/#granting-page-access","title":"Granting page access","text":"<p>Before granting access to pages, verify your integration appears in your workspace. Go to \u2699 Settings \u00bb Connections and confirm your integration is listed there. Note again, that there are two Connections entries in the sidebar. Click the one at the bottom.</p> <p>Your integration needs explicit access to pages. To grant access:</p> <ol> <li>Open any page in Notion</li> <li>Click the \u22ef menu in the upper right corner</li> <li>Select Connections</li> <li>Search for and select your integration</li> <li>Confirm access</li> </ol> <p></p> <p>Your integration now has access to this page and all its child pages.</p> <p>Alternatively, you can manage page access from \u2699 Settings \u00bb Connections in your workspace.</p>"},{"location":"usage/getting_started/#loading-a-notion-page","title":"Loading a Notion page","text":"<p>Test your integration with this code. Replace <code>PAGE_TITLE</code> with the title of a page you've granted access to:</p> <pre><code>\"\"\"This example demonstrates how to create an Ultimate Notion session\"\"\"\n\nimport ultimate_notion as uno\n\nPAGE_TITLE = 'Getting Started'\n\nwith uno.Session() as notion:\n    page = notion.search_page(PAGE_TITLE).item()\n    page.show()\n\n# Alternatively, without a context manager:\nnotion = uno.Session()\npage = notion.search_page(PAGE_TITLE).item()\npage.show()\nnotion.close()\n</code></pre> <p>Run the code to see the rendered output. In JupyterLab, you'll see formatted Markdown; in a terminal, you'll see plain text.</p> <p></p>"},{"location":"usage/getting_started/#understanding-notion-concepts","title":"Understanding Notion concepts","text":""},{"location":"usage/getting_started/#pages-and-blocks","title":"Pages and blocks","text":"<p>In Notion, everything is either a page or a block. A page contains blocks like headings, text, lists, tables, and quotes.</p> <p>If a page is deleted using Ultimate Notion, it is not deleted directly but moved to the trash can, i.e., \"\ud83d\uddd1\ufe0f Trash\" in the sidebar, for a period of 30 days before it is deleted.</p>"},{"location":"usage/getting_started/#databases","title":"Databases","text":"<p>A database is a special block type that can exist:</p> <ul> <li>Within a page (inline database)</li> <li>At the same level as pages (full-page database)</li> </ul> <p>Every database has a schema defined by a set of properties (columns) with specific types (text, number, URL, etc.) that impose structured data on every page within that database. Only pages contained in a database have properties.</p> <p>Besides the properties of pages contained in a database, every page has attributes such as title, cover, icon, or whether it is in the trash. The title attribute is special and will always be included as a property in the schema if the page is in a database. The property name of the title attribute can be customized. Think of the title property as a human-readable identifier, which does not have to be unique! This concept is important when relation properties are used between different databases, as the title property of a linked page will show up in the relation property of the other database.</p> <p>A special type of database is a wiki database that comes with a pre-defined schema, i.e., title, last-edited-time, owner, tags, verification.</p> <p>Warning</p> <p>Linked databases (marked with \u2197) aren't accessible via the API\u2014always work with the source database.</p>"},{"location":"usage/getting_started/#page-hierarchy-and-permissions","title":"Page hierarchy and permissions","text":"<p>Pages can contain other pages, creating a hierarchy:</p> <ul> <li>Parent page: Contains other pages</li> <li>Child pages: Contained within another page</li> <li>Root pages: Directly in the workspace</li> </ul> <p>Integration permissions inherit from parent pages, so granting access to a parent automatically includes all children.</p>"},{"location":"usage/getting_started/#identifiers","title":"Identifiers","text":"<p>Notion assigns a UUID (32-character identifier) to every page, block, user, and property. These UUIDs remain constant even when titles change.</p> <p>You can find page/database UUIDs by:</p> <ol> <li>Using Copy link from the \u00b7\u00b7\u00b7 menu</li> <li>Extracting from the URL: <code>https://www.notion.so/{TITLE}-{UUID}</code></li> </ol> <p>Notion also provides a shortened URL format: <code>https://notion.so/{UUID}</code></p>"},{"location":"usage/getting_started/#text-handling","title":"Text handling","text":"<p>Notion treats empty strings and unset values equivalently. Ultimate Notion returns <code>None</code> for empty strings to maintain consistency, but displays them as <code>\"\"</code> when converting objects to strings.</p>"},{"location":"usage/page_advanced/","title":"Creating and modifying pages","text":""},{"location":"usage/page_advanced/#creating-a-new-page","title":"Creating a new page","text":"<p>To create a new page, we first create a session and retrieve a root page, which will then hold our new page:</p> <pre><code>import ultimate_notion as uno\n\nROOT_PAGE = 'Tests'  # page with connected Ultimate Notion integration\nnotion = uno.Session.get_or_create()\n\nroot_page = notion.search_page(ROOT_PAGE).item()\n</code></pre> <p>Using <code>root_page</code>, we can simply create a new page with:</p> <pre><code>my_page = notion.create_page(parent=root_page, title='Autogenerated page')\n</code></pre> <p>Our new page is empty and we can check that with:</p> <pre><code>assert not my_page.children\n# or\nassert len(my_page.children) == 0\n</code></pre>"},{"location":"usage/page_advanced/#adding-content-to-a-page","title":"Adding content to a page","text":"<p>Our new page can now be populated with the typical Notion blocks from the blocks module. Let's create a heading 1 block and append it to our page:</p> <pre><code>h1 = uno.Heading1('My new page')\nmy_page.append(h1)\n</code></pre> <p>We can also append several blocks at once:</p> <pre><code>my_page.append([\n    uno.Paragraph('Some text...'),\n    uno.Code(\n        'SELECT * FROM MY_TABLE',\n        language=uno.CodeLang.SQL,\n        caption='SQL Query'\n        ),\n    uno.Quote(\n        '\"You know, for a mathematician, he did not have enough imagination. '\n        'But he has become a poet and now he is fine.\" - D. Hilbert',\n        color=uno.Color.BLUE\n        ),\n    uno.Callout(\n        'Ultimate Notion rocks!',\n        color=uno.BGColor.PURPLE,\n        icon=uno.Emoji('\ud83d\ude80')\n        ),\n    uno.Heading2('Showing off some more...'),\n    uno.BulletedItem('First bulleted item'),\n    uno.BulletedItem('Second bulleted item'),\n    uno.NumberedItem('First numbered item', color=uno.Color.RED),\n    uno.NumberedItem('Second numbered item', color=uno.Color.RED),\n    uno.ToDoItem('First checked Todo', checked=True),\n    uno.ToDoItem('Second open Todo'),\n    uno.ToggleItem('Toggle item'),\n    uno.Divider(),\n    uno.Heading3('Some more fancy stuff...'),\n    uno.TableOfContents(color=uno.Color.PINK),\n    uno.Breadcrumb(),\n    uno.Embed('https://www.youtube.com/watch?v=dQw4w9WgXcQ', caption='Rick'),\n    uno.Bookmark('https://www.youtube.com/watch?v=dQw4w9WgXcQ'),\n    uno.Equation(r'-1 = \\exp(i \\pi)'),\n    ]\n)\n</code></pre> <p>Let's say we have forgotten one block and want to add it at a specific position, i.e., <code>after</code> another block:</p> <pre><code>new_paragraph = uno.Paragraph('Some more text, which was added afterwards...')\nmy_page.append(new_paragraph, after=my_page.children[2])\n</code></pre> <p>As the block reference <code>new_paragraph</code> is automatically updated when appended to the page, we can also use it now as a reference to append a new block after it, e.g.:</p> <pre><code>another_paragraph = uno.Paragraph('Another paragraph...')\nmy_page.append(another_paragraph, after=new_paragraph)\n</code></pre> <p>Another possibility to insert a block after a certain other block is to use the <code>insert_after</code> method of a block itself. Let's say we want to add a divider after the block <code>another_paragraph</code>:</p> <pre><code>another_paragraph.insert_after(uno.Divider())\n</code></pre> <p>To delete a block from a page, we can just call <code>.delete()</code> on it:</p> <pre><code>another_paragraph.delete()\n</code></pre> <p>In some cases, you might rather want to replace a block with another block. For this we can use the <code>.replace</code> method of a block.</p> <pre><code>first_block = my_page.children[0]\nfirst_block.replace(uno.Heading1('Heading of my new page!'))\n</code></pre> <p>Also note that you can even pass a sequence of new blocks to <code>.insert_after</code> and <code>.replace</code>.</p> <p>Tip</p> <p>Python's walrus operator, i.e., <code>:=</code>, can be extremely useful when working with blocks that you want to reference later on. So instead of assigning new blocks to variables and passing them to <code>page.append(...)</code>, you could just write:</p> <pre><code>page = notion.create_page(parent=root_page, title='Another autogenerated page')\npage.append([\n    heading1 := uno.Heading1('My heading'),\n    paragraph := uno.Paragraph('My paragraph')\n])\nprint(paragraph.block_url)\n</code></pre> <p>Note</p> <p>For type hinting, use just Block for a general block, e.g.,</p> <pre><code>new_blocks: uno.Block = [uno.Heading1('New section'), uno.Divider(), uno.Paragraph('My paragraph')]\n</code></pre>"},{"location":"usage/page_advanced/#modifying-blocks","title":"Modifying blocks","text":"<p>Most properties of a block also provide setters, so you can just assign a new value to the property to modify it. Let's assume we first have to retrieve the page we created above and want to modify the first heading:</p> <pre><code>my_page = notion.get_page(my_page.id)  # or `notion.search_page(...).item()`\n\nheading = my_page.children[0]\nassert heading.color == uno.Color.DEFAULT\nheading.color = uno.BGColor.RED\nheading.rich_text = 'Red heading of my new page!'\n</code></pre> <p>Check the blocks module to see which properties can also be set. Ultimate Notion allows updating all properties that could also be updated via the update-a-block endpoint of the official Notion API.</p> <p>Our page now looks like this so far:</p> <p></p> <p>Bug</p> <p>Sometimes setting certain attributes, for instance the <code>color</code> property with a foreground color, i.e., <code>uno.Color</code>, can result in the default black text although the property is set correctly when checked in the Notion app. This seems to be a bug within the Notion backend itself.</p>"},{"location":"usage/page_advanced/#nested-blocks","title":"Nested blocks","text":"<p>A really useful feature of Notion blocks is that most of them can be nested. Therefore, some blocks, like paragraphs, quotes, toggleable headings, and so on, can have <code>children</code> and thus also have an <code>append</code> method, just like a page.</p> <p>Let's create a new page where we store various file types under a toggleable heading:</p> <pre><code>file_page = notion.create_page(parent=root_page, title='Page with nested blocks')\n\nheading = uno.Heading1('My files', toggleable=True)\nfile_page.append(heading)\n\nheading.append([\n    uno.File(\n        uno.url('https://www.google.de/robots.txt'),\n        name='robots.txt',\n        caption='Google Robots'\n        ),\n    uno.Image(\n        uno.url('https://cdn.pixabay.com/photo/2019/08/06/09/16/flowers-4387827_1280.jpg'),\n        caption='Path on meadow'\n        ),\n    uno.Video(\n        uno.url('https://www.youtube.com/watch?v=dQw4w9WgXcQ'),\n        caption='Rick Roll'\n        ),\n    uno.PDF(\n        uno.url('https://www.iktz-hd.de/fileadmin/user_upload/dummy.pdf'),\n        caption='Dummy PDF'\n        ),\n])\n</code></pre> <p>Info</p> <p>We can only add children blocks to a block that is already in Notion, i.e., was already appended to a page. You can also programmatically check that with the in_notion property of a block.</p>"},{"location":"usage/page_advanced/#columns-tables","title":"Columns &amp; tables","text":"<p>Assume that we want to structure our page a bit more using columns. We define a set of columns using the Columns block. This block now behaves like a list where each element represents a column. We can now just append to a column, e.g.:</p> <pre><code>page = notion.create_page(parent=root_page, title='Page with advanced blocks')\n\ncols = uno.Columns(2)\npage.append(cols)\n\ncols[0].append(uno.Paragraph('Column 1'))\ncols[1].append(uno.Paragraph('Column 2'))\n</code></pre> <p>Using the same concept, we can also create a table, but this time we specify the cells instead of columns. Creating a 4x6 table with 4 rows and 6 columns where the first row is a header row, and thus we set <code>header_row</code> to true. We can use indexing to assign either whole rows or specific cells:</p> <pre><code>table = uno.Table(4, 3, header_row=True, header_col=False)\ntable[0] = ('First name', 'Last name', 'Sports')\ntable[1, 0] = 'Florian'\ntable[1, 1] = 'Wilhelm'\ntable[1, 2] = 'Running and bicycling'\n\npage.append(table)\n</code></pre> <p>Note</p> <p>All cells of a table are initialized with an empty string. Therefore, to delete the content of a cell, you need to assign an empty string, i.e., <code>''</code>. For instance, to delete the first row after the header:</p> <pre><code>table[1] = ('', '', '')\n</code></pre> <p>To access all the rows, i.e., children of the table, we can use <code>children</code>:</p> <pre><code>rows = table.children\nassert isinstance(rows[0], uno.TableRow)\nassert isinstance(rows[0], tuple)\n</code></pre> <p>In order to access a single row or even a cell, we can use indexing like:</p> <pre><code>row = table[0]\ncell = table[0, 0]\nassert cell == 'First name'\n</code></pre> <p>When using only a row index, a <code>TableRow</code> object will be returned that is a subclass of <code>tuple</code> with special functionality. For instance, to delete a row from a table, you can call <code>delete</code>, e.g.:</p> <pre><code>row.delete()\n</code></pre> <p>Tables can be easily modified in various other ways using the <code>insert_row</code>, <code>append_row</code> methods as well as assigning to the <code>has_header_col</code> and <code>has_header_row</code> properties.</p>"},{"location":"usage/page_advanced/#advanced-blocks","title":"Advanced blocks","text":"<p>There are some additional more advanced blocks like links to a page and synced blocks. Let's take a look at those.</p> <p>Assume we have our \"Getting Started\" page and want to link to it from the page we just created above.</p> <pre><code>target_page = notion.search_page('Getting Started').item()\n\npage.append(uno.LinkToPage(target_page))\n</code></pre> <p>A synced block is a different kind of beast. We first have to define an original block, which acts as a container for other blocks that should be synced. Then we append various blocks to it and finally create a synced block, which will be synchronized with the content of the original block.</p> <pre><code>orig_block = uno.SyncedBlock(uno.Paragraph('This is a synced paragraph'))\npage.append(orig_block)\n\nsync_block = orig_block.create_synced()\npage.append(sync_block)\n</code></pre> <p>Now we have two paragraphs, with the second always reflecting the content of the first.</p>"},{"location":"usage/page_advanced/#working-with-texts","title":"Working with texts","text":"<p>So far we have passed to most blocks basic strings and only provided in some cases a color for the whole block. Notion allows much fancier formatting for texts, i.e., rich texts, but also inline formulas and mentions of various types. All this is supported via the Text object, which is a subclass of the ordinary <code>str</code> type. For your convenience, three different constructor functions, i.e., text, math, and mention, are provided that construct a Text object. An example illustrates this:</p> <pre><code>page = notion.create_page(parent=root_page, title='Page with fancy text')\n\nrt = uno.text('This is a ') + uno.text('bold', bold=True) + uno.text(' word.\\n')\nassert isinstance(rt, str)  # str with special capabilities!\nassert rt.to_markdown() == 'This is a **bold** word.\\n'\n\nrt += 'We can even add a normal string to it.\\n'\nrt += uno.text('Now some ') + uno.text('inline formula: ', color=uno.Color.RED)\nrt += uno.math(r'-1 = e^{i \\pi}') + '\\n'\nrt += uno.join([\n    uno.text('All', italic=True),\n    uno.text('possible', underline=True),\n    uno.text('formatting, ', color=uno.BGColor.PURPLE),\n    uno.text('is', code=True),\n    uno.text('it?', strikethrough=True),\n    uno.text('it not?', italic=True, bold=True)\n    ])\n\npage.append(uno.Paragraph(rt))\n</code></pre> <p>To achieve fancy formatting, we have to mix and match <code>Text</code> objects generated by text, mention, and math to compose the formatting we want.</p> <p>Warning</p> <p>Be cautious with the operator precedence of <code>+=</code> and <code>+</code> in the example above. While <code>rt += 'We can even add a normal string to it.\\n'</code> works since <code>rt</code> is of type <code>Text</code>, which supports this, <code>rt += 'We can even add a normal string to ' + uno.text('it.\\n')</code> would not work as we would first concatenate a <code>str</code> with a <code>Text</code> before we append it to a <code>Text</code>. A <code>str</code> object would ignore the additional formatting information in the <code>Text</code> object while concatenating.</p> <p>Let's see how we can mention a person, page, database or even a date.</p> <pre><code>from datetime import datetime\n\nperson = notion.search_user('Florian Wilhelm').item()\ndummy_db = notion.create_db(parent=root_page)\ndummy_db.title = 'Dummy DB'\nintro_page = notion.search_page('Getting Started').item()\nmy_date = datetime(1592, 3, 14)  # or better use the pendulum library\n\nrt = uno.join([\n    uno.mention(person),\n    uno.mention(dummy_db),\n    uno.mention(intro_page),\n    uno.mention(my_date)\n    ], delim=' : ')\npage.append(uno.Paragraph(rt))\n</code></pre> <p>Let's take a look at how our fancy text page looks in the end.</p> <p></p>"},{"location":"usage/page_advanced/#working-with-comments","title":"Working with comments","text":"<p>In Notion, there are two kinds of comments: page comments at the top of the page and inline comments, which are associated with a block within a page. Page comments are organized in a single discussion, i.e., thread of comments, whereas inline comments associated with a single block can have several discussions at once. Besides this structural difference, the capabilities provided by the Notion API also differ between page and inline comments. While you can read both kinds of comments and also append comments to existing discussions, you can only start new page discussions but not inline discussions.</p>"},{"location":"usage/page_advanced/#page-comments","title":"Page comments","text":"<p>We can get the single discussion thread of a page by calling the <code>comments</code> property of the page. This will return a Discussion container object for the page's Comments, which behaves like a list, so you can use indexing, get the length, etc. To create a new comment, we can just use the <code>append</code> method of the Discussion object. Here is an example:</p> <pre><code>new_page = notion.create_page(parent=root_page, title='Page with page comments')\ndiscussion = page.comments\n\nassert len(discussion) == 0\ndiscussion.append('My first page comment!')\n\nassert len(discussion) == 1\nassert discussion[0].text == 'My first page comment!'\n</code></pre>"},{"location":"usage/page_advanced/#inline-comments","title":"Inline comments","text":"<p>Since inline comments are organized in different discussion threads, we use the <code>discussions</code> property of a block to retrieve a list of Discussion container objects. We can now work with these discussions and append new comments. Here is an example:</p> <pre><code>page = notion.search_page('Comments').item()\nheading_block = page.children[0]\ndiscussion = heading_block.discussions[0]\ndiscussion.append('My first appended inline comment!')\n</code></pre>"},{"location":"usage/page_introduction/","title":"Introduction to pages","text":"<p>Pages are one of the most essential building blocks of Notion. A page has certain attributes such as a title, cover, icon, and whether it is deleted, i.e., in the trash, or not. Items within a database, or rows if you will, are just pages, and the schema of the database, that is the set of columns and their types, imposes properties on each contained page.</p> <p>Besides attributes and properties, a page also has content, consisting of blocks for text and everything you can choose in the Notion UI by hitting /. As a page can be contained in another page, we can have a parent and children relation between pages. Check out the Page object to find out more about accessing these functionalities.</p>"},{"location":"usage/page_introduction/#searching-for-a-page","title":"Searching for a page","text":"<p>To get started, assume we have a page called \"Getting Started\" that we want to access using Ultimate Notion.</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()  # if NOTION_TOKEN is set in environment\n\nintro_page = notion.search_page('Getting Started').item()\n</code></pre> <p>We can also display the content of the page within JupyterLab or even at the console with</p> <pre><code>intro_page.show()\n</code></pre> <p>In a Jupyter notebook, you would see</p> <p></p>"},{"location":"usage/page_introduction/#properties-of-a-page","title":"Properties of a page","text":"<p>The properties of a page can be accessed with the <code>props</code> attribute of each page object. Assume we have a page acting like a task in a database similar to the Task List example like this:</p> <p></p> <p>We search for <code>Task DB</code>, retrieve all pages in a View, and select the <code>Run first Marathon</code> page:</p> <pre><code>task_view = notion.search_db('Task DB').item().get_all_pages()\ntask = task_view.search_page('Run first Marathon').item()\n</code></pre> <p>Note</p> <p>As Notion rarely has any uniqueness guarantees, many methods return SList, i.e., Single-item List, a special list type for lists that typically hold a single item. An <code>SList</code> behaves exactly like a normal Python list except for the fact that it provides an additional item method to retrieve the single item or raise an exception otherwise.</p> <p>To check again for the date of the marathon, and also if we completed this task, we can use <code>props.col_name</code>, like</p> <pre><code>print(f'Task \"{task.title}\" was {task.props.status} on {task.props.due_date}')\n</code></pre> <p>to get the output:</p> <pre><code>Task \"Run first Marathon\" was Done on 2023-11-24 17:10:00+01:00\n</code></pre> <p>The actual property names like <code>status</code> and <code>due_date</code> can be easily found out by looking at the schema of the database holding our page, with:</p> <pre><code>task.parent_db.schema.show()\n</code></pre> <p>returning the actual column name, the property type and the Python attribute name within <code>props</code>:</p> <pre><code>Name      Property    Attribute\n--------  ----------  -----------\nUrgency   Formula     urgency\nDue Date  Date        due_date\nStatus    Select      status\nPriority  Select      priority\nTask      Title       task\n</code></pre> <p>It is also possible to access the property directly with the column name using the indexing operator <code>[column name]</code>, e.g.:</p> <pre><code>f'Task \"{task.title}\" was {task.props[\"Status\"]} on {task.props[\"Due Date\"]}'\n</code></pre>"},{"location":"usage/page_introduction/#working-with-properties","title":"Working with properties","text":"<p>The properties of a page provide access to the actual low-level Python objects like <code>int</code>, <code>float</code>, <code>datetime</code>, the <code>str</code> subtype RichText, and so on. There are a few exceptions though, like Select, MultiSelect, and Status, where an Option object gives you access to its name, color, and description.</p> <p>To change a page property, we can just assign a new value to the corresponding property, e.g.:</p> <pre><code>from datetime import datetime, timedelta\n\nold_due_date = task.props.due_date\n# assign a datetime Python object\nnew_due_date_dt = datetime(2024, 1, 1, 12, 0) + timedelta(days=7)\ntask.props.due_date = new_due_date_dt\nassert task.props.due_date.date() == new_due_date_dt.date()\n\n# reassign the old property value object\ntask.props.due_date = old_due_date\nassert task.props.due_date == old_due_date\n</code></pre> <p>Those changes will also be automatically reflected on the Notion server. So each assignment triggers an update web request.</p> <p>Here is an example of how to change the task status, which is a select property. First, we get the list of all options by accessing the corresponding property types with:</p> <pre><code>options = {opt.name: opt for opt in task.parent_db.schema.status.options}\n</code></pre> <p>This generates a dictionary of Option objects:</p> <pre><code>{'Backlog': &lt;Option: 'Backlog' at 0x13513d570&gt;,\n 'In Progress': &lt;Option: 'In Progress' at 0x13513d630&gt;,\n 'Blocked': &lt;Option: 'Blocked' at 0x13513d420&gt;,\n 'Done': &lt;Option: 'Done' at 0x1350fa140&gt;}\n</code></pre> <p>We now assign the <code>In Progress</code> option to our task with:</p> <pre><code>task.props.status = options['In Progress']\n</code></pre> <p>Alternatively, we could also just use the string:</p> <pre><code>task.props.status = 'Blocked'\n</code></pre> <p>Info</p> <p>The functionality around updating select/multi-select properties will be changed in the future to make the experience more user-friendly.</p>"}]}