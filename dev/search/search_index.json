{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u200b \u00b6 Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. Under Features you will find the current status of the implemented functionality. Ultimate Notion is distributed under the terms of the MIT license. This is a pre-alpha version! Don't use it! Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"About"},{"location":"#_1","text":"Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. Under Features you will find the current status of the implemented functionality. Ultimate Notion is distributed under the terms of the MIT license. This is a pre-alpha version! Don't use it!","title":"\u200b"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open [GitHub's code editor]. Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. !!! info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an [descriptive commit message] is highly recommended. In case of doubt, you can check the commit history with: ``` git log --graph --decorate --pretty=oneline --abbrev-commit --all ``` to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open [GitHub's code editor]. Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. !!! info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an [descriptive commit message] is highly recommended. In case of doubt, you can check the commit history with: ``` git log --graph --decorate --pretty=oneline --abbrev-commit --all ``` to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"features/","text":"Features \u00b6 Some of the feature listed here, loosely correspond to the features of the endpoints defined in the Notion API . Please note that a slightly different terminology is used. Since the term properties is highly overloaded, we call the properties of a database schema and refer to the individual properties as columns . With page properties , we denote only the properties of a page within a database that correspond to the columns of the schema. In contrast to that, the properties that every page has, e.g. title, icon, last edited by/time, etc., are called page attributes . Databases \u00b6 retrieve a database by ID search for a database by its title create a new database with a given schema, i.e. columns and their types delete/archive a database update a database schema, i.e. adding/removing columns or changing their types change the properties of database columns, e.g. name, formula of formula column, etc. read the database attributes like title, icon, etc. change database attributes like title, icon, etc. retrieve all containing pages of a database query with filters and sortings to retrieve only specific pages display the content of a database as a table, e.g. in Jupyter Lab create new pages with properties within the database respecting the schema Pages \u00b6 retrieve a page by ID search for a page by its title create a new page delete/archive a page reade page attributes like title, icon, etc. change page attributes like title, icon, etc. read page properties defined by a database schema change page properties navigate pages using references of parent and children read the blocks within a page add/remove and modify the blocks within a page view the content of a page as Markdown Blocks \u00b6 retrieve a block by ID navigate blocks using references of parent and children create blocks within a page or another block modify blocks Users \u00b6 retrieve a user by ID retrieve own bot user, i.e. self-identify retrieve all users read the attributes of a user Comments \u00b6 create a comment within a block or page retrieve comments of a block or page","title":"Features"},{"location":"features/#features","text":"Some of the feature listed here, loosely correspond to the features of the endpoints defined in the Notion API . Please note that a slightly different terminology is used. Since the term properties is highly overloaded, we call the properties of a database schema and refer to the individual properties as columns . With page properties , we denote only the properties of a page within a database that correspond to the columns of the schema. In contrast to that, the properties that every page has, e.g. title, icon, last edited by/time, etc., are called page attributes .","title":"Features"},{"location":"features/#databases","text":"retrieve a database by ID search for a database by its title create a new database with a given schema, i.e. columns and their types delete/archive a database update a database schema, i.e. adding/removing columns or changing their types change the properties of database columns, e.g. name, formula of formula column, etc. read the database attributes like title, icon, etc. change database attributes like title, icon, etc. retrieve all containing pages of a database query with filters and sortings to retrieve only specific pages display the content of a database as a table, e.g. in Jupyter Lab create new pages with properties within the database respecting the schema","title":"Databases"},{"location":"features/#pages","text":"retrieve a page by ID search for a page by its title create a new page delete/archive a page reade page attributes like title, icon, etc. change page attributes like title, icon, etc. read page properties defined by a database schema change page properties navigate pages using references of parent and children read the blocks within a page add/remove and modify the blocks within a page view the content of a page as Markdown","title":"Pages"},{"location":"features/#blocks","text":"retrieve a block by ID navigate blocks using references of parent and children create blocks within a page or another block modify blocks","title":"Blocks"},{"location":"features/#users","text":"retrieve a user by ID retrieve own bot user, i.e. self-identify retrieve all users read the attributes of a user","title":"Users"},{"location":"features/#comments","text":"create a comment within a block or page retrieve comments of a block or page","title":"Comments"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"ultimate_notion blocks database functions obj_api blocks core endpoints enums iterator objects props query schema util objects page props query schema session text utils view","title":"SUMMARY"},{"location":"reference/ultimate_notion/","text":"ultimate_notion \u00b6 Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro __all__ = [ '__version__' , 'Session' , 'PageSchema' , 'Column' , 'File' , 'Option' , 'Page' , 'RichText' , 'Database' ] module-attribute \u00b6 __version__ = version ( 'ultimate-notion' ) module-attribute \u00b6 Column ( name : str , type : PropertyType ) \u00b6 Column with a name and a certain Property Type for defining a Notion database schema This is implemented as a descriptor. Source code in src/ultimate_notion/schema.py def __init__ ( self , name : str , type : PropertyType ) -> None : # noqa: A002 self . _name = name self . _type = type attr_name : str property \u00b6 name : str property writable \u00b6 type : PropertyType property writable \u00b6 __set_name__ ( owner : type [ PageSchema ], name : str ) \u00b6 Source code in src/ultimate_notion/schema.py def __set_name__ ( self , owner : type [ PageSchema ], name : str ): self . _schema = owner self . _attr_name = name self . _type . prop_ref = self # link back to allow access to _schema, _py_name e.g. for relations Database ( obj_ref : T ) \u00b6 A Notion database This object always represents an original database, not a linked database. API reference: https://developers.notion.com/docs/working-with-databases Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref cover : File | None property \u00b6 description : RichText | None property writable \u00b6 Return the description of this database as rich text. icon : File | str | None property \u00b6 is_archived : bool property \u00b6 is_inline : bool property \u00b6 is_wiki : bool property \u00b6 Is this database a wiki database schema : type [ PageSchema ] property writable \u00b6 title : RichText | None property writable \u00b6 Return the title of this database as rich text. url : str property \u00b6 __repr__ () -> str \u00b6 Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return str ( self . title ) else : return 'Untitled' create_page ( ** kwargs ) -> Page \u00b6 Create a page with properties according to the schema within the corresponding database Source code in src/ultimate_notion/database.py def create_page ( self , ** kwargs ) -> Page : \"\"\"Create a page with properties according to the schema within the corresponding database\"\"\" schema_kwargs = { col . attr_name : col for col in self . schema . get_cols ()} if not set ( kwargs ) . issubset ( set ( schema_kwargs )): add_kwargs = set ( kwargs ) - set ( schema_kwargs ) msg = f \"kwargs { ', ' . join ( add_kwargs ) } not defined in schema\" raise SchemaError ( msg ) schema_dct = {} for kwarg , value in kwargs . items (): col = schema_kwargs [ kwarg ] prop_value_cls = col . type . prop_value # map schema to page property # ToDo: Check at that point in case of selectoption if the option is already defined in Schema! if prop_value_cls . readonly : raise ReadOnlyColumnError ( col ) prop_value = value if isinstance ( value , PropertyValue ) else prop_value_cls ( value ) schema_dct [ schema_kwargs [ kwarg ] . name ] = prop_value . obj_ref session = get_active_session () page = Page ( obj_ref = session . api . pages . create ( parent = self . obj_ref , properties = schema_dct )) return page delete () \u00b6 Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" session = get_active_session () session . api . blocks . delete ( self . id ) pages () -> View \u00b6 Return a view of all pages in the database Source code in src/ultimate_notion/database.py def pages ( self ) -> View : \"\"\"Return a view of all pages in the database\"\"\" # ToDo: Decide on also caching the view? or at least the pages within the view? session = get_active_session () query = session . api . databases . query ( self . id ) # ToDo: use self.query when implemented pages = [ Page ( page_obj ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query ) query () -> QueryBuilder \u00b6 Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self ) File ( url : str ) \u00b6 A web resource e.g. for the files property Source code in src/ultimate_notion/objects.py def __init__ ( self , url : str ) -> None : self . obj_ref = objs . ExternalFile . build ( url = url , name = url ) obj_ref : objs . FileObject = objs . ExternalFile . build ( url = url , name = url ) instance-attribute \u00b6 Option ( * args , ** kwargs ) \u00b6 Option for select & multi-select property Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) name : str property \u00b6 Name of the option __repr__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : return self . name Page ( obj_ref ) \u00b6 Source code in src/ultimate_notion/page.py def __init__ ( self , obj_ref ): super () . __init__ ( obj_ref ) self . props = self . _create_prop_attrs () database : Database | None property \u00b6 If this page is located in a database return the database or None otherwise icon : str property \u00b6 props : PageProperties = self . _create_prop_attrs () instance-attribute \u00b6 title : Title property \u00b6 Title of the page __repr__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title . value } ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return str ( self . title ) delete () \u00b6 Source code in src/ultimate_notion/page.py def delete ( self ): session = get_active_session () session . api . pages . delete ( self . obj_ref ) markdown () -> str \u00b6 Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" raise NotImplementedError show ( * , display = None ) \u00b6 Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md PageSchema \u00b6 Base class for the schema of a database. db_title : RichText | None instance-attribute \u00b6 __init_subclass__ ( db_title : RichText | str | None , ** kwargs : Any ) \u00b6 Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , db_title : RichText | str | None , ** kwargs : Any ): db_title = RichText . from_plain_text ( db_title ) if db_title is not None else None cls . db_title = db_title super () . __init_subclass__ ( ** kwargs ) bind_db ( db : Database ) classmethod \u00b6 Bind the PageSchema to the corresponding database for back-reference Source code in src/ultimate_notion/schema.py @classmethod def bind_db ( cls , db : Database ): \"\"\"Bind the PageSchema to the corresponding database for back-reference\"\"\" cls . _database = db cls . _set_obj_refs () create ( ** kwargs ) -> Page classmethod \u00b6 Create a page using this schema with a bound database Source code in src/ultimate_notion/schema.py @classmethod def create ( cls , ** kwargs ) -> Page : \"\"\"Create a page using this schema with a bound database\"\"\" return cls . get_db () . create_page ( ** kwargs ) from_dict ( schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema classmethod \u00b6 Creation of a schema from a dictionary for easy support of dynamically created schemas Source code in src/ultimate_notion/schema.py @classmethod def from_dict ( cls , schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema : \"\"\"Creation of a schema from a dictionary for easy support of dynamically created schemas\"\"\" # ToDo: Implement raise NotImplementedError get_col ( col_name : str ) -> Column classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_col ( cls , col_name : str ) -> Column : return SList ([ col for col in cls . get_cols () if col . name == col_name ]) . item () get_cols () -> list [ Column ] classmethod \u00b6 Return all columns of this schema Source code in src/ultimate_notion/schema.py @classmethod def get_cols ( cls ) -> list [ Column ]: \"\"\"Return all columns of this schema\"\"\" return [ col for col in cls . __dict__ . values () if isinstance ( col , Column )] get_db () -> Database classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_db ( cls ) -> Database : if cls . is_bound () and cls . _database : return cls . _database else : raise SchemaNotBoundError ( cls ) get_title_prop () -> Column classmethod \u00b6 Returns the title property Source code in src/ultimate_notion/schema.py @classmethod def get_title_prop ( cls ) -> Column : \"\"\"Returns the title property\"\"\" return SList ( col for col in cls . get_cols () if isinstance ( col . type , Title )) . item () is_bound () -> bool classmethod \u00b6 Returns if the schema is bound to a database Source code in src/ultimate_notion/schema.py @classmethod def is_bound ( cls ) -> bool : \"\"\"Returns if the schema is bound to a database\"\"\" return cls . _database is not None is_consistent_with ( other_schema : type [ PageSchema ]) -> bool classmethod \u00b6 Is this schema consistent with another ignoring backward relations if not in other schema Source code in src/ultimate_notion/schema.py @classmethod def is_consistent_with ( cls , other_schema : type [ PageSchema ]) -> bool : \"\"\"Is this schema consistent with another ignoring backward relations if not in other schema\"\"\" own_schema_dct = cls . to_dict () other_schema_dct = other_schema . to_dict () if own_schema_dct == other_schema_dct : # backward relation was initialized in the other schema return True other_schema_no_backrels_dct = { name : prop_type for name , prop_type in other_schema_dct . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } if other_schema_no_backrels_dct == own_schema_dct : # backward relation was not yet initialised in the other schema (during the creation of the data model) return True return False show ( tablefmt : str | None ) -> str classmethod \u00b6 Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/schema.py @classmethod def show ( cls , tablefmt : str | None ) -> str : \"\"\"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' headers = [ 'Name' , 'Property' , 'Attribute' ] rows = [] for col in cls . get_cols (): rows . append (( col . name , col . type , col . attr_name )) return tabulate ( rows , headers = headers , tablefmt = tablefmt ) to_dict () -> dict [ str , PropertyType ] classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { col . name : col . type for col in cls . get_cols ()} RichText ( * args , _factory_method : bool = False ) \u00b6 User-facing class holding several RichTexts Source code in src/ultimate_notion/objects.py def __init__ ( self , * args , _factory_method : bool = False ): if _factory_method : # avoids the automatic call after the implicit __new__ when calling default constructor super () . __init__ ( * args ) obj_ref : list [ objs . RichTextObject ] property \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/objects.py def __eq__ ( self , other : object ) -> bool : if isinstance ( other , str ): return str ( self ) == other elif isinstance ( other , RichText ): return str ( self ) == str ( other ) else : return NotImplemented __hash__ () \u00b6 Source code in src/ultimate_notion/objects.py def __hash__ ( self ): return hash ( str ( self )) __new__ ( plain_text : str , * , _factory_method : bool = False ) -> RichText \u00b6 Default constructor creates RichText object from a single plain text string argument Source code in src/ultimate_notion/objects.py def __new__ ( cls , plain_text : str , * , _factory_method : bool = False ) -> RichText : \"\"\"Default constructor creates RichText object from a single plain text string argument\"\"\" if _factory_method : return super () . __new__ ( cls ) else : return cls . from_plain_text ( plain_text ) __str__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : plain_text = self . to_plain_text () return plain_text if plain_text is not None else '' from_markdown ( text : str ) -> RichText classmethod \u00b6 Create RichTextList by parsing the markdown Source code in src/ultimate_notion/objects.py @classmethod def from_markdown ( cls , text : str ) -> RichText : \"\"\"Create RichTextList by parsing the markdown\"\"\" # ToDo: Implement # ToDo: Handle Equations and Mentions here accordingly raise NotImplementedError from_plain_text ( text : str | None ) -> RichText classmethod \u00b6 Create RichTextList from plain text Source code in src/ultimate_notion/objects.py @classmethod def from_plain_text ( cls , text : str | None ) -> RichText : \"\"\"Create RichTextList from plain text\"\"\" rich_texts : list [ RichTextBase ] = [] if text is not None : for part in chunky ( text ): rich_texts . append ( Text ( part )) return cls ( rich_texts , _factory_method = True ) to_markdown () -> str | None \u00b6 Convert the list of RichText objects to markdown Source code in src/ultimate_notion/objects.py def to_markdown ( self ) -> str | None : \"\"\"Convert the list of RichText objects to markdown\"\"\" # ToDo: Implement raise NotImplementedError to_plain_text () -> str | None \u00b6 Return rich text as plaintext Source code in src/ultimate_notion/objects.py def to_plain_text ( self ) -> str | None : \"\"\"Return rich text as plaintext\"\"\" if not self : # empty list return None return '' . join ( text . plain_text for text in self . obj_ref if text ) wrap_obj_ref ( obj_refs : list [ objs . RichTextObject ]) -> RichText classmethod \u00b6 Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_refs : list [ objs . RichTextObject ]) -> RichText : rich_texts = [ cast ( RichTextBase , RichTextBase . wrap_obj_ref ( obj_ref )) for obj_ref in obj_refs ] return cls ( rich_texts , _factory_method = True ) Session ( auth : str | None = None , ** kwargs : Any ) \u00b6 A session for the Notion API The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API. Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _initialize_once ( self ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . api = NotionAPI ( self . client ) _log . info ( 'Initialized Notion session' ) api : NotionAPI = NotionAPI ( self . client ) instance-attribute \u00b6 cache : dict [ UUID , DataObject | User ] = {} class-attribute \u00b6 client : notion_client . Client = notion_client . Client ( auth = auth , ** kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None Session . cache . clear () all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user ))) for user in self . api . users . as_list () ] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () Session . _active_session = None Session . cache . clear () create_db ( parent : Page , schema : type [ PageSchema ] | None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ] | None ) -> Database : \"\"\"Create a new database\"\"\" if schema : schema . _init_fwd_rels () schema_no_backrels_dct = { name : prop_type for name , prop_type in schema . to_dict () . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } schema_dct = { k : v . obj_ref for k , v in schema_no_backrels_dct . items ()} title = schema . db_title . obj_ref if schema . db_title is not None else None db_obj = self . api . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) else : schema_dct = {} db_obj = self . api . databases . create ( parent = parent . obj_ref , schema = schema_dct ) db : Database = Database ( obj_ref = db_obj ) if schema : db . schema = schema schema . _init_bwd_rels () self . cache [ db . id ] = db return db create_dbs ( parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ] \u00b6 Create new databases in the right order if there a relations between them Source code in src/ultimate_notion/session.py def create_dbs ( self , parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ]: \"\"\"Create new databases in the right order if there a relations between them\"\"\" # ToDo: Implement raise NotImplementedError create_page ( parent : Page , title : RichText | str | None = None ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : RichText | str | None = None ) -> Page : if title : title = Title ( title ) . obj_ref page = Page ( obj_ref = self . api . pages . create ( parent = parent . obj_ref , title = title )) self . cache [ page . id ] = page return page get_active () -> Session classmethod \u00b6 Return the current active session or None Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ) -> Session : \"\"\"Return the current active session or None\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg ) get_block ( block_ref : ObjRef ) \u00b6 Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . api . blocks . retrieve ( block_ref )) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notion database by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notion database by uuid\"\"\" db_uuid = get_uuid ( db_ref ) if db_uuid in self . cache : return cast ( Database , self . cache [ db_uuid ]) else : db = Database ( obj_ref = self . api . databases . retrieve ( db_uuid )) self . cache [ db . id ] = db return db get_or_create ( * args , ** kwargs ) -> Session classmethod \u00b6 Return the current active session or create a new session Source code in src/ultimate_notion/session.py @classmethod def get_or_create ( cls , * args , ** kwargs ) -> Session : \"\"\"Return the current active session or create a new session\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : return cls ( * args , ** kwargs ) get_or_create_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) \u00b6 Get or create the database Source code in src/ultimate_notion/session.py def get_or_create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" # ToDo: Implement raise NotImplementedError get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) if page_uuid in self . cache : return cast ( Page , self . cache [ page_uuid ]) else : page = Page ( obj_ref = self . api . pages . retrieve ( page_uuid )) self . cache [ page . id ] = page return page get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) if user_uuid in self . cache : return cast ( User , self . cache [ user_uuid ]) else : user = User . wrap_obj_ref ( self . _get_user ( user_uuid )) self . cache [ user . id ] = user return user raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err search_db ( db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( cast ( Database , self . cache . setdefault ( db . id , Database ( obj_ref = db ))) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( title : str | None = None , * , exact : bool = True ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( cast ( Page , self . cache . setdefault ( page . id , Page ( obj_ref = page ))) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title . value == title ) return pages whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" user = self . api . users . me () return cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user )))","title":"Reference"},{"location":"reference/ultimate_notion/#ultimate_notion","text":"Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","text":"","title":"__all__"},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","text":"","title":"__version__"},{"location":"reference/ultimate_notion/#ultimate_notion.Column","text":"Column with a name and a certain Property Type for defining a Notion database schema This is implemented as a descriptor. Source code in src/ultimate_notion/schema.py def __init__ ( self , name : str , type : PropertyType ) -> None : # noqa: A002 self . _name = name self . _type = type","title":"Column"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.attr_name","text":"","title":"attr_name"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.name","text":"","title":"name"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.type","text":"","title":"type"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.__set_name__","text":"Source code in src/ultimate_notion/schema.py def __set_name__ ( self , owner : type [ PageSchema ], name : str ): self . _schema = owner self . _attr_name = name self . _type . prop_ref = self # link back to allow access to _schema, _py_name e.g. for relations","title":"__set_name__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database","text":"A Notion database This object always represents an original database, not a linked database. API reference: https://developers.notion.com/docs/working-with-databases Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref","title":"Database"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.description","text":"Return the description of this database as rich text.","title":"description"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_archived","text":"","title":"is_archived"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_wiki","text":"Is this database a wiki database","title":"is_wiki"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.title","text":"Return the title of this database as rich text.","title":"title"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__repr__","text":"Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__str__","text":"Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return str ( self . title ) else : return 'Untitled'","title":"__str__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.create_page","text":"Create a page with properties according to the schema within the corresponding database Source code in src/ultimate_notion/database.py def create_page ( self , ** kwargs ) -> Page : \"\"\"Create a page with properties according to the schema within the corresponding database\"\"\" schema_kwargs = { col . attr_name : col for col in self . schema . get_cols ()} if not set ( kwargs ) . issubset ( set ( schema_kwargs )): add_kwargs = set ( kwargs ) - set ( schema_kwargs ) msg = f \"kwargs { ', ' . join ( add_kwargs ) } not defined in schema\" raise SchemaError ( msg ) schema_dct = {} for kwarg , value in kwargs . items (): col = schema_kwargs [ kwarg ] prop_value_cls = col . type . prop_value # map schema to page property # ToDo: Check at that point in case of selectoption if the option is already defined in Schema! if prop_value_cls . readonly : raise ReadOnlyColumnError ( col ) prop_value = value if isinstance ( value , PropertyValue ) else prop_value_cls ( value ) schema_dct [ schema_kwargs [ kwarg ] . name ] = prop_value . obj_ref session = get_active_session () page = Page ( obj_ref = session . api . pages . create ( parent = self . obj_ref , properties = schema_dct )) return page","title":"create_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.delete","text":"Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" session = get_active_session () session . api . blocks . delete ( self . id )","title":"delete()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.pages","text":"Return a view of all pages in the database Source code in src/ultimate_notion/database.py def pages ( self ) -> View : \"\"\"Return a view of all pages in the database\"\"\" # ToDo: Decide on also caching the view? or at least the pages within the view? session = get_active_session () query = session . api . databases . query ( self . id ) # ToDo: use self.query when implemented pages = [ Page ( page_obj ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query )","title":"pages()"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.query","text":"Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self )","title":"query()"},{"location":"reference/ultimate_notion/#ultimate_notion.File","text":"A web resource e.g. for the files property Source code in src/ultimate_notion/objects.py def __init__ ( self , url : str ) -> None : self . obj_ref = objs . ExternalFile . build ( url = url , name = url )","title":"File"},{"location":"reference/ultimate_notion/#ultimate_notion.File.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/#ultimate_notion.Option","text":"Option for select & multi-select property Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Option"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.name","text":"Name of the option","title":"name"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__repr__","text":"Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__str__","text":"Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Page","text":"Source code in src/ultimate_notion/page.py def __init__ ( self , obj_ref ): super () . __init__ ( obj_ref ) self . props = self . _create_prop_attrs ()","title":"Page"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.database","text":"If this page is located in a database return the database or None otherwise","title":"database"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.props","text":"","title":"props"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.title","text":"Title of the page","title":"title"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__repr__","text":"Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title . value } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__str__","text":"Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return str ( self . title )","title":"__str__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.delete","text":"Source code in src/ultimate_notion/page.py def delete ( self ): session = get_active_session () session . api . pages . delete ( self . obj_ref )","title":"delete()"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.markdown","text":"Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" raise NotImplementedError","title":"markdown()"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.show","text":"Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md","title":"show()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema","text":"Base class for the schema of a database.","title":"PageSchema"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.db_title","text":"","title":"db_title"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.__init_subclass__","text":"Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , db_title : RichText | str | None , ** kwargs : Any ): db_title = RichText . from_plain_text ( db_title ) if db_title is not None else None cls . db_title = db_title super () . __init_subclass__ ( ** kwargs )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.bind_db","text":"Bind the PageSchema to the corresponding database for back-reference Source code in src/ultimate_notion/schema.py @classmethod def bind_db ( cls , db : Database ): \"\"\"Bind the PageSchema to the corresponding database for back-reference\"\"\" cls . _database = db cls . _set_obj_refs ()","title":"bind_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.create","text":"Create a page using this schema with a bound database Source code in src/ultimate_notion/schema.py @classmethod def create ( cls , ** kwargs ) -> Page : \"\"\"Create a page using this schema with a bound database\"\"\" return cls . get_db () . create_page ( ** kwargs )","title":"create()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.from_dict","text":"Creation of a schema from a dictionary for easy support of dynamically created schemas Source code in src/ultimate_notion/schema.py @classmethod def from_dict ( cls , schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema : \"\"\"Creation of a schema from a dictionary for easy support of dynamically created schemas\"\"\" # ToDo: Implement raise NotImplementedError","title":"from_dict()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_col","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_col ( cls , col_name : str ) -> Column : return SList ([ col for col in cls . get_cols () if col . name == col_name ]) . item ()","title":"get_col()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_cols","text":"Return all columns of this schema Source code in src/ultimate_notion/schema.py @classmethod def get_cols ( cls ) -> list [ Column ]: \"\"\"Return all columns of this schema\"\"\" return [ col for col in cls . __dict__ . values () if isinstance ( col , Column )]","title":"get_cols()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_db","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_db ( cls ) -> Database : if cls . is_bound () and cls . _database : return cls . _database else : raise SchemaNotBoundError ( cls )","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_title_prop","text":"Returns the title property Source code in src/ultimate_notion/schema.py @classmethod def get_title_prop ( cls ) -> Column : \"\"\"Returns the title property\"\"\" return SList ( col for col in cls . get_cols () if isinstance ( col . type , Title )) . item ()","title":"get_title_prop()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.is_bound","text":"Returns if the schema is bound to a database Source code in src/ultimate_notion/schema.py @classmethod def is_bound ( cls ) -> bool : \"\"\"Returns if the schema is bound to a database\"\"\" return cls . _database is not None","title":"is_bound()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.is_consistent_with","text":"Is this schema consistent with another ignoring backward relations if not in other schema Source code in src/ultimate_notion/schema.py @classmethod def is_consistent_with ( cls , other_schema : type [ PageSchema ]) -> bool : \"\"\"Is this schema consistent with another ignoring backward relations if not in other schema\"\"\" own_schema_dct = cls . to_dict () other_schema_dct = other_schema . to_dict () if own_schema_dct == other_schema_dct : # backward relation was initialized in the other schema return True other_schema_no_backrels_dct = { name : prop_type for name , prop_type in other_schema_dct . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } if other_schema_no_backrels_dct == own_schema_dct : # backward relation was not yet initialised in the other schema (during the creation of the data model) return True return False","title":"is_consistent_with()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.show","text":"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/schema.py @classmethod def show ( cls , tablefmt : str | None ) -> str : \"\"\"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' headers = [ 'Name' , 'Property' , 'Attribute' ] rows = [] for col in cls . get_cols (): rows . append (( col . name , col . type , col . attr_name )) return tabulate ( rows , headers = headers , tablefmt = tablefmt )","title":"show()"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.to_dict","text":"Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { col . name : col . type for col in cls . get_cols ()}","title":"to_dict()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText","text":"User-facing class holding several RichTexts Source code in src/ultimate_notion/objects.py def __init__ ( self , * args , _factory_method : bool = False ): if _factory_method : # avoids the automatic call after the implicit __new__ when calling default constructor super () . __init__ ( * args )","title":"RichText"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__eq__","text":"Source code in src/ultimate_notion/objects.py def __eq__ ( self , other : object ) -> bool : if isinstance ( other , str ): return str ( self ) == other elif isinstance ( other , RichText ): return str ( self ) == str ( other ) else : return NotImplemented","title":"__eq__()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__hash__","text":"Source code in src/ultimate_notion/objects.py def __hash__ ( self ): return hash ( str ( self ))","title":"__hash__()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__new__","text":"Default constructor creates RichText object from a single plain text string argument Source code in src/ultimate_notion/objects.py def __new__ ( cls , plain_text : str , * , _factory_method : bool = False ) -> RichText : \"\"\"Default constructor creates RichText object from a single plain text string argument\"\"\" if _factory_method : return super () . __new__ ( cls ) else : return cls . from_plain_text ( plain_text )","title":"__new__()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__str__","text":"Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : plain_text = self . to_plain_text () return plain_text if plain_text is not None else ''","title":"__str__()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.from_markdown","text":"Create RichTextList by parsing the markdown Source code in src/ultimate_notion/objects.py @classmethod def from_markdown ( cls , text : str ) -> RichText : \"\"\"Create RichTextList by parsing the markdown\"\"\" # ToDo: Implement # ToDo: Handle Equations and Mentions here accordingly raise NotImplementedError","title":"from_markdown()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.from_plain_text","text":"Create RichTextList from plain text Source code in src/ultimate_notion/objects.py @classmethod def from_plain_text ( cls , text : str | None ) -> RichText : \"\"\"Create RichTextList from plain text\"\"\" rich_texts : list [ RichTextBase ] = [] if text is not None : for part in chunky ( text ): rich_texts . append ( Text ( part )) return cls ( rich_texts , _factory_method = True )","title":"from_plain_text()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.to_markdown","text":"Convert the list of RichText objects to markdown Source code in src/ultimate_notion/objects.py def to_markdown ( self ) -> str | None : \"\"\"Convert the list of RichText objects to markdown\"\"\" # ToDo: Implement raise NotImplementedError","title":"to_markdown()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.to_plain_text","text":"Return rich text as plaintext Source code in src/ultimate_notion/objects.py def to_plain_text ( self ) -> str | None : \"\"\"Return rich text as plaintext\"\"\" if not self : # empty list return None return '' . join ( text . plain_text for text in self . obj_ref if text )","title":"to_plain_text()"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.wrap_obj_ref","text":"Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_refs : list [ objs . RichTextObject ]) -> RichText : rich_texts = [ cast ( RichTextBase , RichTextBase . wrap_obj_ref ( obj_ref )) for obj_ref in obj_refs ] return cls ( rich_texts , _factory_method = True )","title":"wrap_obj_ref()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session","text":"A session for the Notion API The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API. Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _initialize_once ( self ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . api = NotionAPI ( self . client ) _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.api","text":"","title":"api"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.cache","text":"","title":"cache"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.client","text":"","title":"client"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None Session . cache . clear ()","title":"__exit__()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user ))) for user in self . api . users . as_list () ]","title":"all_users()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () Session . _active_session = None Session . cache . clear ()","title":"close()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ] | None ) -> Database : \"\"\"Create a new database\"\"\" if schema : schema . _init_fwd_rels () schema_no_backrels_dct = { name : prop_type for name , prop_type in schema . to_dict () . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } schema_dct = { k : v . obj_ref for k , v in schema_no_backrels_dct . items ()} title = schema . db_title . obj_ref if schema . db_title is not None else None db_obj = self . api . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) else : schema_dct = {} db_obj = self . api . databases . create ( parent = parent . obj_ref , schema = schema_dct ) db : Database = Database ( obj_ref = db_obj ) if schema : db . schema = schema schema . _init_bwd_rels () self . cache [ db . id ] = db return db","title":"create_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_dbs","text":"Create new databases in the right order if there a relations between them Source code in src/ultimate_notion/session.py def create_dbs ( self , parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ]: \"\"\"Create new databases in the right order if there a relations between them\"\"\" # ToDo: Implement raise NotImplementedError","title":"create_dbs()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_page","text":"Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : RichText | str | None = None ) -> Page : if title : title = Title ( title ) . obj_ref page = Page ( obj_ref = self . api . pages . create ( parent = parent . obj_ref , title = title )) self . cache [ page . id ] = page return page","title":"create_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_active","text":"Return the current active session or None Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ) -> Session : \"\"\"Return the current active session or None\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg )","title":"get_active()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_block","text":"Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . api . blocks . retrieve ( block_ref ))","title":"get_block()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_db","text":"Retrieve Notion database by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notion database by uuid\"\"\" db_uuid = get_uuid ( db_ref ) if db_uuid in self . cache : return cast ( Database , self . cache [ db_uuid ]) else : db = Database ( obj_ref = self . api . databases . retrieve ( db_uuid )) self . cache [ db . id ] = db return db","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create","text":"Return the current active session or create a new session Source code in src/ultimate_notion/session.py @classmethod def get_or_create ( cls , * args , ** kwargs ) -> Session : \"\"\"Return the current active session or create a new session\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : return cls ( * args , ** kwargs )","title":"get_or_create()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create_db","text":"Get or create the database Source code in src/ultimate_notion/session.py def get_or_create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" # ToDo: Implement raise NotImplementedError","title":"get_or_create_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) if page_uuid in self . cache : return cast ( Page , self . cache [ page_uuid ]) else : page = Page ( obj_ref = self . api . pages . retrieve ( page_uuid )) self . cache [ page . id ] = page return page","title":"get_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) if user_uuid in self . cache : return cast ( User , self . cache [ user_uuid ]) else : user = User . wrap_obj_ref ( self . _get_user ( user_uuid )) self . cache [ user . id ] = user return user","title":"get_user()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err","title":"raise_for_status()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( cast ( Database , self . cache . setdefault ( db . id , Database ( obj_ref = db ))) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( cast ( Page , self . cache . setdefault ( page . id , Page ( obj_ref = page ))) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title . value == title ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" user = self . api . users . me () return cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user )))","title":"whoami()"},{"location":"reference/ultimate_notion/blocks/","text":"blocks \u00b6 Core building blocks for pages and databases T = TypeVar ( 'T' , bound = obj_blocks . DataObject ) module-attribute \u00b6 Block ( obj_ref : T ) \u00b6 Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref DataObject ( obj_ref : T ) \u00b6 The base type for all data-related types, i.e, pages, databases and blocks Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref archived : bool property \u00b6 created_by property \u00b6 created_time : datetime property \u00b6 has_children : bool property \u00b6 id : UUID property \u00b6 last_edited_by property \u00b6 last_edited_time : datetime property \u00b6 obj_ref = obj_ref instance-attribute \u00b6 parent : DataObject | None property \u00b6 Return the parent record or None if the workspace is the parent parents : tuple [ DataObject , ... ] property \u00b6 Return all parents from the workspace to the actual record (excluding) url : str property \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/blocks.py def __eq__ ( self , other : object ) -> bool : if other is None : return False elif not isinstance ( other , DataObject ): msg = f 'Cannot compare { self . __class__ . __name__ } with { type ( other ) . __name__ } ' raise RuntimeError ( msg ) else : return self . id == other . id __hash__ () -> int \u00b6 Source code in src/ultimate_notion/blocks.py def __hash__ ( self ) -> int : return hash ( self . id )","title":"Blocks"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks","text":"Core building blocks for pages and databases","title":"blocks"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.T","text":"","title":"T"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block","text":"Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref","title":"Block"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject","text":"The base type for all data-related types, i.e, pages, databases and blocks Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref","title":"DataObject"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.parent","text":"Return the parent record or None if the workspace is the parent","title":"parent"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.parents","text":"Return all parents from the workspace to the actual record (excluding)","title":"parents"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.url","text":"","title":"url"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.__eq__","text":"Source code in src/ultimate_notion/blocks.py def __eq__ ( self , other : object ) -> bool : if other is None : return False elif not isinstance ( other , DataObject ): msg = f 'Cannot compare { self . __class__ . __name__ } with { type ( other ) . __name__ } ' raise RuntimeError ( msg ) else : return self . id == other . id","title":"__eq__()"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.__hash__","text":"Source code in src/ultimate_notion/blocks.py def __hash__ ( self ) -> int : return hash ( self . id )","title":"__hash__()"},{"location":"reference/ultimate_notion/database/","text":"database \u00b6 Functionality for working with Notion databases Database ( obj_ref : T ) \u00b6 A Notion database This object always represents an original database, not a linked database. API reference: https://developers.notion.com/docs/working-with-databases Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref cover : File | None property \u00b6 description : RichText | None property writable \u00b6 Return the description of this database as rich text. icon : File | str | None property \u00b6 is_archived : bool property \u00b6 is_inline : bool property \u00b6 is_wiki : bool property \u00b6 Is this database a wiki database schema : type [ PageSchema ] property writable \u00b6 title : RichText | None property writable \u00b6 Return the title of this database as rich text. url : str property \u00b6 __repr__ () -> str \u00b6 Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return str ( self . title ) else : return 'Untitled' create_page ( ** kwargs ) -> Page \u00b6 Create a page with properties according to the schema within the corresponding database Source code in src/ultimate_notion/database.py def create_page ( self , ** kwargs ) -> Page : \"\"\"Create a page with properties according to the schema within the corresponding database\"\"\" schema_kwargs = { col . attr_name : col for col in self . schema . get_cols ()} if not set ( kwargs ) . issubset ( set ( schema_kwargs )): add_kwargs = set ( kwargs ) - set ( schema_kwargs ) msg = f \"kwargs { ', ' . join ( add_kwargs ) } not defined in schema\" raise SchemaError ( msg ) schema_dct = {} for kwarg , value in kwargs . items (): col = schema_kwargs [ kwarg ] prop_value_cls = col . type . prop_value # map schema to page property # ToDo: Check at that point in case of selectoption if the option is already defined in Schema! if prop_value_cls . readonly : raise ReadOnlyColumnError ( col ) prop_value = value if isinstance ( value , PropertyValue ) else prop_value_cls ( value ) schema_dct [ schema_kwargs [ kwarg ] . name ] = prop_value . obj_ref session = get_active_session () page = Page ( obj_ref = session . api . pages . create ( parent = self . obj_ref , properties = schema_dct )) return page delete () \u00b6 Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" session = get_active_session () session . api . blocks . delete ( self . id ) pages () -> View \u00b6 Return a view of all pages in the database Source code in src/ultimate_notion/database.py def pages ( self ) -> View : \"\"\"Return a view of all pages in the database\"\"\" # ToDo: Decide on also caching the view? or at least the pages within the view? session = get_active_session () query = session . api . databases . query ( self . id ) # ToDo: use self.query when implemented pages = [ Page ( page_obj ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query ) query () -> QueryBuilder \u00b6 Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self )","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","text":"Functionality for working with Notion databases","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","text":"A Notion database This object always represents an original database, not a linked database. API reference: https://developers.notion.com/docs/working-with-databases Source code in src/ultimate_notion/blocks.py def __init__ ( self , obj_ref : T ): \"\"\"Reference to API object from the `obj_api` subpackage\"\"\" self . obj_ref = obj_ref","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","text":"Return the description of this database as rich text.","title":"description"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_archived","text":"","title":"is_archived"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_wiki","text":"Is this database a wiki database","title":"is_wiki"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","text":"Return the title of this database as rich text.","title":"title"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","text":"Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","text":"Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return str ( self . title ) else : return 'Untitled'","title":"__str__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.create_page","text":"Create a page with properties according to the schema within the corresponding database Source code in src/ultimate_notion/database.py def create_page ( self , ** kwargs ) -> Page : \"\"\"Create a page with properties according to the schema within the corresponding database\"\"\" schema_kwargs = { col . attr_name : col for col in self . schema . get_cols ()} if not set ( kwargs ) . issubset ( set ( schema_kwargs )): add_kwargs = set ( kwargs ) - set ( schema_kwargs ) msg = f \"kwargs { ', ' . join ( add_kwargs ) } not defined in schema\" raise SchemaError ( msg ) schema_dct = {} for kwarg , value in kwargs . items (): col = schema_kwargs [ kwarg ] prop_value_cls = col . type . prop_value # map schema to page property # ToDo: Check at that point in case of selectoption if the option is already defined in Schema! if prop_value_cls . readonly : raise ReadOnlyColumnError ( col ) prop_value = value if isinstance ( value , PropertyValue ) else prop_value_cls ( value ) schema_dct [ schema_kwargs [ kwarg ] . name ] = prop_value . obj_ref session = get_active_session () page = Page ( obj_ref = session . api . pages . create ( parent = self . obj_ref , properties = schema_dct )) return page","title":"create_page()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.delete","text":"Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" session = get_active_session () session . api . blocks . delete ( self . id )","title":"delete()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.pages","text":"Return a view of all pages in the database Source code in src/ultimate_notion/database.py def pages ( self ) -> View : \"\"\"Return a view of all pages in the database\"\"\" # ToDo: Decide on also caching the view? or at least the pages within the view? session = get_active_session () query = session . api . databases . query ( self . id ) # ToDo: use self.query when implemented pages = [ Page ( page_obj ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query )","title":"pages()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.query","text":"Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self )","title":"query()"},{"location":"reference/ultimate_notion/functions/","text":"functions \u00b6 Functionality for use by end users","title":"Functions"},{"location":"reference/ultimate_notion/functions/#ultimate_notion.functions","text":"Functionality for use by end users","title":"functions"},{"location":"reference/ultimate_notion/objects/","text":"objects \u00b6 Equation ( * args , ** kwargs ) \u00b6 An Equation object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) File ( url : str ) \u00b6 A web resource e.g. for the files property Source code in src/ultimate_notion/objects.py def __init__ ( self , url : str ) -> None : self . obj_ref = objs . ExternalFile . build ( url = url , name = url ) obj_ref : objs . FileObject = objs . ExternalFile . build ( url = url , name = url ) instance-attribute \u00b6 Mention ( * args , ** kwargs ) \u00b6 A Mention object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Option ( * args , ** kwargs ) \u00b6 Option for select & multi-select property Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) name : str property \u00b6 Name of the option __repr__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : return self . name RichText ( * args , _factory_method : bool = False ) \u00b6 User-facing class holding several RichTexts Source code in src/ultimate_notion/objects.py def __init__ ( self , * args , _factory_method : bool = False ): if _factory_method : # avoids the automatic call after the implicit __new__ when calling default constructor super () . __init__ ( * args ) obj_ref : list [ objs . RichTextObject ] property \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/objects.py def __eq__ ( self , other : object ) -> bool : if isinstance ( other , str ): return str ( self ) == other elif isinstance ( other , RichText ): return str ( self ) == str ( other ) else : return NotImplemented __hash__ () \u00b6 Source code in src/ultimate_notion/objects.py def __hash__ ( self ): return hash ( str ( self )) __new__ ( plain_text : str , * , _factory_method : bool = False ) -> RichText \u00b6 Default constructor creates RichText object from a single plain text string argument Source code in src/ultimate_notion/objects.py def __new__ ( cls , plain_text : str , * , _factory_method : bool = False ) -> RichText : \"\"\"Default constructor creates RichText object from a single plain text string argument\"\"\" if _factory_method : return super () . __new__ ( cls ) else : return cls . from_plain_text ( plain_text ) __str__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : plain_text = self . to_plain_text () return plain_text if plain_text is not None else '' from_markdown ( text : str ) -> RichText classmethod \u00b6 Create RichTextList by parsing the markdown Source code in src/ultimate_notion/objects.py @classmethod def from_markdown ( cls , text : str ) -> RichText : \"\"\"Create RichTextList by parsing the markdown\"\"\" # ToDo: Implement # ToDo: Handle Equations and Mentions here accordingly raise NotImplementedError from_plain_text ( text : str | None ) -> RichText classmethod \u00b6 Create RichTextList from plain text Source code in src/ultimate_notion/objects.py @classmethod def from_plain_text ( cls , text : str | None ) -> RichText : \"\"\"Create RichTextList from plain text\"\"\" rich_texts : list [ RichTextBase ] = [] if text is not None : for part in chunky ( text ): rich_texts . append ( Text ( part )) return cls ( rich_texts , _factory_method = True ) to_markdown () -> str | None \u00b6 Convert the list of RichText objects to markdown Source code in src/ultimate_notion/objects.py def to_markdown ( self ) -> str | None : \"\"\"Convert the list of RichText objects to markdown\"\"\" # ToDo: Implement raise NotImplementedError to_plain_text () -> str | None \u00b6 Return rich text as plaintext Source code in src/ultimate_notion/objects.py def to_plain_text ( self ) -> str | None : \"\"\"Return rich text as plaintext\"\"\" if not self : # empty list return None return '' . join ( text . plain_text for text in self . obj_ref if text ) wrap_obj_ref ( obj_refs : list [ objs . RichTextObject ]) -> RichText classmethod \u00b6 Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_refs : list [ objs . RichTextObject ]) -> RichText : rich_texts = [ cast ( RichTextBase , RichTextBase . wrap_obj_ref ( obj_ref )) for obj_ref in obj_refs ] return cls ( rich_texts , _factory_method = True ) RichTextBase ( * args , ** kwargs ) \u00b6 Super class for text, equation and mentions of various kinds Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Text ( * args , ** kwargs ) \u00b6 A Text object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) User ( * args , ** kwargs ) \u00b6 Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) avatar_url property \u00b6 email : str | None property \u00b6 id property \u00b6 is_bot : bool property \u00b6 is_person : bool property \u00b6 name property \u00b6 __eq__ ( other ) \u00b6 Source code in src/ultimate_notion/objects.py def __eq__ ( self , other ): return self . id == other . id __hash__ () -> int \u00b6 Source code in src/ultimate_notion/objects.py def __hash__ ( self ) -> int : return hash ( self . id ) __repr__ () -> str \u00b6 Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/objects.py def __str__ ( self ): return self . name wrap_obj_ref ( obj_ref : objs . User ) -> User classmethod \u00b6 Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_ref : objs . User ) -> User : self = cast ( User , cls . __new__ ( cls )) self . obj_ref = obj_ref return self","title":"Objects"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects","text":"","title":"objects"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Equation","text":"An Equation object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Equation"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File","text":"A web resource e.g. for the files property Source code in src/ultimate_notion/objects.py def __init__ ( self , url : str ) -> None : self . obj_ref = objs . ExternalFile . build ( url = url , name = url )","title":"File"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Mention","text":"A Mention object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Mention"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option","text":"Option for select & multi-select property Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Option"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.name","text":"Name of the option","title":"name"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.__repr__","text":"Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.__str__","text":"Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText","text":"User-facing class holding several RichTexts Source code in src/ultimate_notion/objects.py def __init__ ( self , * args , _factory_method : bool = False ): if _factory_method : # avoids the automatic call after the implicit __new__ when calling default constructor super () . __init__ ( * args )","title":"RichText"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__eq__","text":"Source code in src/ultimate_notion/objects.py def __eq__ ( self , other : object ) -> bool : if isinstance ( other , str ): return str ( self ) == other elif isinstance ( other , RichText ): return str ( self ) == str ( other ) else : return NotImplemented","title":"__eq__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__hash__","text":"Source code in src/ultimate_notion/objects.py def __hash__ ( self ): return hash ( str ( self ))","title":"__hash__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__new__","text":"Default constructor creates RichText object from a single plain text string argument Source code in src/ultimate_notion/objects.py def __new__ ( cls , plain_text : str , * , _factory_method : bool = False ) -> RichText : \"\"\"Default constructor creates RichText object from a single plain text string argument\"\"\" if _factory_method : return super () . __new__ ( cls ) else : return cls . from_plain_text ( plain_text )","title":"__new__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__str__","text":"Source code in src/ultimate_notion/objects.py def __str__ ( self ) -> str : plain_text = self . to_plain_text () return plain_text if plain_text is not None else ''","title":"__str__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.from_markdown","text":"Create RichTextList by parsing the markdown Source code in src/ultimate_notion/objects.py @classmethod def from_markdown ( cls , text : str ) -> RichText : \"\"\"Create RichTextList by parsing the markdown\"\"\" # ToDo: Implement # ToDo: Handle Equations and Mentions here accordingly raise NotImplementedError","title":"from_markdown()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.from_plain_text","text":"Create RichTextList from plain text Source code in src/ultimate_notion/objects.py @classmethod def from_plain_text ( cls , text : str | None ) -> RichText : \"\"\"Create RichTextList from plain text\"\"\" rich_texts : list [ RichTextBase ] = [] if text is not None : for part in chunky ( text ): rich_texts . append ( Text ( part )) return cls ( rich_texts , _factory_method = True )","title":"from_plain_text()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.to_markdown","text":"Convert the list of RichText objects to markdown Source code in src/ultimate_notion/objects.py def to_markdown ( self ) -> str | None : \"\"\"Convert the list of RichText objects to markdown\"\"\" # ToDo: Implement raise NotImplementedError","title":"to_markdown()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.to_plain_text","text":"Return rich text as plaintext Source code in src/ultimate_notion/objects.py def to_plain_text ( self ) -> str | None : \"\"\"Return rich text as plaintext\"\"\" if not self : # empty list return None return '' . join ( text . plain_text for text in self . obj_ref if text )","title":"to_plain_text()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.wrap_obj_ref","text":"Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_refs : list [ objs . RichTextObject ]) -> RichText : rich_texts = [ cast ( RichTextBase , RichTextBase . wrap_obj_ref ( obj_ref )) for obj_ref in obj_refs ] return cls ( rich_texts , _factory_method = True )","title":"wrap_obj_ref()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichTextBase","text":"Super class for text, equation and mentions of various kinds Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"RichTextBase"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Text","text":"A Text object Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Text"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User","text":"Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"User"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.email","text":"","title":"email"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.id","text":"","title":"id"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.is_bot","text":"","title":"is_bot"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.is_person","text":"","title":"is_person"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__eq__","text":"Source code in src/ultimate_notion/objects.py def __eq__ ( self , other ): return self . id == other . id","title":"__eq__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__hash__","text":"Source code in src/ultimate_notion/objects.py def __hash__ ( self ) -> int : return hash ( self . id )","title":"__hash__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__repr__","text":"Source code in src/ultimate_notion/objects.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__str__","text":"Source code in src/ultimate_notion/objects.py def __str__ ( self ): return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.wrap_obj_ref","text":"Source code in src/ultimate_notion/objects.py @classmethod def wrap_obj_ref ( cls , obj_ref : objs . User ) -> User : self = cast ( User , cls . __new__ ( cls )) self . obj_ref = obj_ref return self","title":"wrap_obj_ref()"},{"location":"reference/ultimate_notion/page/","text":"page \u00b6 Page object Page ( obj_ref ) \u00b6 Source code in src/ultimate_notion/page.py def __init__ ( self , obj_ref ): super () . __init__ ( obj_ref ) self . props = self . _create_prop_attrs () database : Database | None property \u00b6 If this page is located in a database return the database or None otherwise icon : str property \u00b6 props : PageProperties = self . _create_prop_attrs () instance-attribute \u00b6 title : Title property \u00b6 Title of the page __repr__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title . value } ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return str ( self . title ) delete () \u00b6 Source code in src/ultimate_notion/page.py def delete ( self ): session = get_active_session () session . api . pages . delete ( self . obj_ref ) markdown () -> str \u00b6 Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" raise NotImplementedError show ( * , display = None ) \u00b6 Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md PageProperties ( page : Page ) \u00b6 Properties of a page as defined in the schema of the database Access with the properties with .property_name or [\"Property Name\"] . Source code in src/ultimate_notion/page.py def __init__ ( self , page : Page ): self . _page = page self . _properties = page . obj_ref . properties __getitem__ ( prop_name : str ) -> PropertyValue \u00b6 Source code in src/ultimate_notion/page.py def __getitem__ ( self , prop_name : str ) -> PropertyValue : prop = self . _properties . get ( prop_name ) if prop is None : msg = f 'No such property: { prop_name } ' raise AttributeError ( msg ) return cast ( PropertyValue , PropertyValue . wrap_obj_ref ( obj_ref = prop )) __iter__ () \u00b6 Iterator of property names Source code in src/ultimate_notion/page.py def __iter__ ( self ): \"\"\"Iterator of property names\"\"\" yield from self . _properties . keys () __setitem__ ( prop_name : str , value : Any ) \u00b6 Source code in src/ultimate_notion/page.py def __setitem__ ( self , prop_name : str , value : Any ): db = self . _page . database if db is None : msg = f 'Trying to set a property but page { self . _page } is not bound to any database' raise RuntimeError ( msg ) if not isinstance ( value , PropertyValue ): # construct concrete PropertyValue using the schema prop_type = db . schema . to_dict ()[ prop_name ] value = prop_type . prop_value ( value ) # update the property on the server (which will update the local data) session = get_active_session () session . api . pages . update ( self . _page . obj_ref , ** { prop_name : value . obj_ref }) to_dict () -> dict [ str , PropertyValue ] \u00b6 All page properties as dictionary Source code in src/ultimate_notion/page.py def to_dict ( self ) -> dict [ str , PropertyValue ]: \"\"\"All page properties as dictionary\"\"\" return { prop_name : self [ prop_name ] for prop_name in self } PageProperty ( prop_name : str ) \u00b6 Property of a page implementing the descriptor protocol Source code in src/ultimate_notion/page.py def __init__ ( self , prop_name : str ): self . _prop_name = prop_name __get__ ( obj : PageProperties , type = None ) -> PropertyValue \u00b6 Source code in src/ultimate_notion/page.py def __get__ ( self , obj : PageProperties , type = None ) -> PropertyValue : # noqa: A002 return obj [ self . _prop_name ] __set__ ( obj : PageProperties , value ) \u00b6 Source code in src/ultimate_notion/page.py def __set__ ( self , obj : PageProperties , value ): obj [ self . _prop_name ] = value","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","text":"Page object","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","text":"Source code in src/ultimate_notion/page.py def __init__ ( self , obj_ref ): super () . __init__ ( obj_ref ) self . props = self . _create_prop_attrs ()","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.database","text":"If this page is located in a database return the database or None otherwise","title":"database"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.props","text":"","title":"props"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","text":"Title of the page","title":"title"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__repr__","text":"Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title . value } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__str__","text":"Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return str ( self . title )","title":"__str__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.delete","text":"Source code in src/ultimate_notion/page.py def delete ( self ): session = get_active_session () session . api . pages . delete ( self . obj_ref )","title":"delete()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.markdown","text":"Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" raise NotImplementedError","title":"markdown()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.show","text":"Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md","title":"show()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties","text":"Properties of a page as defined in the schema of the database Access with the properties with .property_name or [\"Property Name\"] . Source code in src/ultimate_notion/page.py def __init__ ( self , page : Page ): self . _page = page self . _properties = page . obj_ref . properties","title":"PageProperties"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__getitem__","text":"Source code in src/ultimate_notion/page.py def __getitem__ ( self , prop_name : str ) -> PropertyValue : prop = self . _properties . get ( prop_name ) if prop is None : msg = f 'No such property: { prop_name } ' raise AttributeError ( msg ) return cast ( PropertyValue , PropertyValue . wrap_obj_ref ( obj_ref = prop ))","title":"__getitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__iter__","text":"Iterator of property names Source code in src/ultimate_notion/page.py def __iter__ ( self ): \"\"\"Iterator of property names\"\"\" yield from self . _properties . keys ()","title":"__iter__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__setitem__","text":"Source code in src/ultimate_notion/page.py def __setitem__ ( self , prop_name : str , value : Any ): db = self . _page . database if db is None : msg = f 'Trying to set a property but page { self . _page } is not bound to any database' raise RuntimeError ( msg ) if not isinstance ( value , PropertyValue ): # construct concrete PropertyValue using the schema prop_type = db . schema . to_dict ()[ prop_name ] value = prop_type . prop_value ( value ) # update the property on the server (which will update the local data) session = get_active_session () session . api . pages . update ( self . _page . obj_ref , ** { prop_name : value . obj_ref })","title":"__setitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.to_dict","text":"All page properties as dictionary Source code in src/ultimate_notion/page.py def to_dict ( self ) -> dict [ str , PropertyValue ]: \"\"\"All page properties as dictionary\"\"\" return { prop_name : self [ prop_name ] for prop_name in self }","title":"to_dict()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty","text":"Property of a page implementing the descriptor protocol Source code in src/ultimate_notion/page.py def __init__ ( self , prop_name : str ): self . _prop_name = prop_name","title":"PageProperty"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty.__get__","text":"Source code in src/ultimate_notion/page.py def __get__ ( self , obj : PageProperties , type = None ) -> PropertyValue : # noqa: A002 return obj [ self . _prop_name ]","title":"__get__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty.__set__","text":"Source code in src/ultimate_notion/page.py def __set__ ( self , obj : PageProperties , value ): obj [ self . _prop_name ] = value","title":"__set__()"},{"location":"reference/ultimate_notion/props/","text":"props \u00b6 Page properties especially for pages within databases The names of the properties reflect the name in the Notion UI. T = TypeVar ( 'T' , bound = obj_props . PropertyValue ) module-attribute \u00b6 Checkbox ( values ) \u00b6 Simple checkbox type; represented as a boolean. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) CreatedBy ( values ) \u00b6 A Notion created-by property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 CreatedTime ( values ) \u00b6 A Notion created-time property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 Date ( start : datetime | date , end : datetime | date | None = None ) \u00b6 Date(-time) property value Source code in src/ultimate_notion/props.py def __init__ ( self , start : datetime | date , end : datetime | date | None = None ): self . obj_ref = obj_props . Date . build ( start , end ) obj_ref = obj_props . Date . build ( start , end ) instance-attribute \u00b6 value : DateType | None property \u00b6 Email ( values ) \u00b6 Notion email type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) Files ( files : File | list [ File ]) \u00b6 Notion files type. Source code in src/ultimate_notion/props.py def __init__ ( self , files : File | list [ File ]): if not isinstance ( files , list ): files = [ files ] super () . __init__ ( files ) Formula ( values ) \u00b6 A Notion formula property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 value : str | float | int | DateType | None property \u00b6 ID ( values ) \u00b6 A Notion unique ID property value Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 LastEditedBy ( values ) \u00b6 A Notion last-edited-by property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 LastEditedTime ( values ) \u00b6 A Notion last-edited-time property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 MultiSelect ( options : str | Option | list [ str | Option ]) \u00b6 Notion multi-select type. Source code in src/ultimate_notion/props.py def __init__ ( self , options : str | Option | list [ str | Option ]): if not isinstance ( options , list ): options = [ options ] options = [ Option ( option ) if isinstance ( option , str ) else option for option in options ] super () . __init__ ( options ) value : list [ Option ] | None property \u00b6 Number ( values ) \u00b6 Simple number property value Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) __add__ ( other ) \u00b6 Add the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __add__ ( self , other ): \"\"\"Add the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value + other_value ) __eq__ ( other ) \u00b6 Source code in src/ultimate_notion/props.py def __eq__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return self . value == other_value __float__ () \u00b6 Return the Number as a float . Source code in src/ultimate_notion/props.py def __float__ ( self ): \"\"\"Return the Number as a `float`.\"\"\" if self . obj_ref . number is None : msg = \"Cannot convert 'None' to float\" raise ValueError ( msg ) return float ( self . obj_ref . number ) __floordiv__ ( other ) \u00b6 Source code in src/ultimate_notion/props.py def __floordiv__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value // other_value ) __ge__ ( other ) \u00b6 Return True if this Number is greater-than-or-equal-to other . Source code in src/ultimate_notion/props.py def __ge__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than-or-equal-to `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value >= other_value __gt__ ( other ) \u00b6 Return True if this Number is greater-than other . Source code in src/ultimate_notion/props.py def __gt__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value > other_value __hash__ () -> int \u00b6 Source code in src/ultimate_notion/props.py def __hash__ ( self ) -> int : return hash ( self . value ) __iadd__ ( other ) \u00b6 Add the given value to this Number. Source code in src/ultimate_notion/props.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number += other . value else : self . obj_ref . number += other return self __ifloordiv__ ( other ) \u00b6 Divide the given value from this Number and floor Source code in src/ultimate_notion/props.py def __ifloordiv__ ( self , other ): \"\"\"Divide the given value from this Number and floor\"\"\" if isinstance ( other , Number ): self . obj_ref . number //= other . value else : self . obj_ref . number //= other return self __imul__ ( other ) \u00b6 Multiply the given value from this Number. Source code in src/ultimate_notion/props.py def __imul__ ( self , other ): \"\"\"Multiply the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number *= other . value else : self . obj_ref . number *= other return self __int__ () \u00b6 Return the Number as an int . Source code in src/ultimate_notion/props.py def __int__ ( self ): \"\"\"Return the Number as an `int`.\"\"\" if self . obj_ref . number is None : msg = \"Cannot convert 'None' to int\" raise ValueError ( msg ) return int ( self . obj_ref . number ) __isub__ ( other ) \u00b6 Subtract the given value from this Number. Source code in src/ultimate_notion/props.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number -= other . value else : self . obj_ref . number -= other return self __itruediv__ ( other ) \u00b6 Divide the given value from this Number. Source code in src/ultimate_notion/props.py def __itruediv__ ( self , other ): \"\"\"Divide the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number /= other . value else : self . obj_ref . number /= other return self __le__ ( other ) \u00b6 Return True if this Number is less-than-or-equal-to other . Source code in src/ultimate_notion/props.py def __le__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than-or-equal-to `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value <= other_value __lt__ ( other ) \u00b6 Return True if this Number is less-than other . Source code in src/ultimate_notion/props.py def __lt__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value < other_value __mul__ ( other ) \u00b6 Multiply the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __mul__ ( self , other ): \"\"\"Multiply the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value * other_value ) __sub__ ( other ) \u00b6 Subtract the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __sub__ ( self , other ): \"\"\"Subtract the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value - other_value ) __truediv__ ( other ) \u00b6 Source code in src/ultimate_notion/props.py def __truediv__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value / other_value ) People ( users : User | list [ User ]) \u00b6 Notion people type. Source code in src/ultimate_notion/props.py def __init__ ( self , users : User | list [ User ]): if not isinstance ( users , list ): users = [ users ] super () . __init__ ( users ) PhoneNumber ( values ) \u00b6 Notion phone type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) PropertyValue ( values ) \u00b6 Base class for Notion property values. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) id : str | None property \u00b6 readonly : bool = False class-attribute instance-attribute \u00b6 value : Any property \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/props.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PropertyValue ): return NotImplemented return self . obj_ref . type == other . obj_ref . type and self . obj_ref . value == self . obj_ref . value __init_subclass__ ( wraps : type [ T ], ** kwargs : Any ) \u00b6 Source code in src/ultimate_notion/props.py def __init_subclass__ ( cls , wraps : type [ T ], ** kwargs : Any ): super () . __init_subclass__ ( wraps = wraps , ** kwargs ) # at that time the model is not yet constructed, thus no direct field acces with .type. type_name = wraps . model_fields [ 'type' ] . get_default () cls . _type_value_map [ type_name ] = cls __repr__ () -> str \u00b6 Source code in src/ultimate_notion/props.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/props.py def __str__ ( self ) -> str : if isinstance ( self . value , RichText ): # note that `RichText` is also a list but implements it's own __str__ return str ( self . value ) if self . value else '' elif isinstance ( self . value , list ): # workaround as `str` on lists calls `repr` instead of `str` return ', ' . join ( str ( val ) for val in self . value ) else : return str ( self . value ) if self . value else '' Relations ( pages : Page | list [ Page ]) \u00b6 A Notion relation property value. Source code in src/ultimate_notion/props.py def __init__ ( self , pages : Page | list [ Page ]): if not isinstance ( pages , list ): pages = [ pages ] super () . __init__ ( pages ) value : list [ Page ] property \u00b6 Rollup ( values ) \u00b6 A Notion rollup property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6 value : str | float | int | DateType | list [ PropertyValue ] | None property \u00b6 Select ( option : str | Option ) \u00b6 Single select property value Source code in src/ultimate_notion/props.py def __init__ ( self , option : str | Option ): if isinstance ( option , str ): option = Option ( option ) super () . __init__ ( option ) value : Option | None property \u00b6 Status ( option : str | Option ) \u00b6 Status property value Source code in src/ultimate_notion/props.py def __init__ ( self , option : str | Option ): if isinstance ( option , str ): option = Option ( option ) super () . __init__ ( option ) value : str | None property \u00b6 Text ( text : str | RichText ) \u00b6 Rich text property value Source code in src/ultimate_notion/props.py def __init__ ( self , text : str | RichText ): if isinstance ( text , str ): text = RichText . from_plain_text ( text ) super () . __init__ ( text ) value : RichText property \u00b6 Title ( text : str | RichText ) \u00b6 Title property value Source code in src/ultimate_notion/props.py def __init__ ( self , text : str | RichText ): if isinstance ( text , str ): text = RichText . from_plain_text ( text ) super () . __init__ ( text ) value : RichText property \u00b6 URL ( values ) \u00b6 Notion URL type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) Verification ( values ) \u00b6 A verification property value of pages in wiki databases Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values ) readonly = True class-attribute instance-attribute \u00b6","title":"Props"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props","text":"Page properties especially for pages within databases The names of the properties reflect the name in the Notion UI.","title":"props"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.T","text":"","title":"T"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Checkbox","text":"Simple checkbox type; represented as a boolean. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Checkbox"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy","text":"A Notion created-by property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"CreatedBy"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime","text":"A Notion created-time property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"CreatedTime"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date","text":"Date(-time) property value Source code in src/ultimate_notion/props.py def __init__ ( self , start : datetime | date , end : datetime | date | None = None ): self . obj_ref = obj_props . Date . build ( start , end )","title":"Date"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Email","text":"Notion email type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Email"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Files","text":"Notion files type. Source code in src/ultimate_notion/props.py def __init__ ( self , files : File | list [ File ]): if not isinstance ( files , list ): files = [ files ] super () . __init__ ( files )","title":"Files"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula","text":"A Notion formula property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Formula"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID","text":"A Notion unique ID property value Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"ID"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy","text":"A Notion last-edited-by property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"LastEditedBy"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime","text":"A Notion last-edited-time property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"LastEditedTime"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect","text":"Notion multi-select type. Source code in src/ultimate_notion/props.py def __init__ ( self , options : str | Option | list [ str | Option ]): if not isinstance ( options , list ): options = [ options ] options = [ Option ( option ) if isinstance ( option , str ) else option for option in options ] super () . __init__ ( options )","title":"MultiSelect"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number","text":"Simple number property value Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Number"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__add__","text":"Add the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __add__ ( self , other ): \"\"\"Add the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value + other_value )","title":"__add__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__eq__","text":"Source code in src/ultimate_notion/props.py def __eq__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return self . value == other_value","title":"__eq__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__float__","text":"Return the Number as a float . Source code in src/ultimate_notion/props.py def __float__ ( self ): \"\"\"Return the Number as a `float`.\"\"\" if self . obj_ref . number is None : msg = \"Cannot convert 'None' to float\" raise ValueError ( msg ) return float ( self . obj_ref . number )","title":"__float__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__floordiv__","text":"Source code in src/ultimate_notion/props.py def __floordiv__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value // other_value )","title":"__floordiv__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__ge__","text":"Return True if this Number is greater-than-or-equal-to other . Source code in src/ultimate_notion/props.py def __ge__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than-or-equal-to `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value >= other_value","title":"__ge__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__gt__","text":"Return True if this Number is greater-than other . Source code in src/ultimate_notion/props.py def __gt__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value > other_value","title":"__gt__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__hash__","text":"Source code in src/ultimate_notion/props.py def __hash__ ( self ) -> int : return hash ( self . value )","title":"__hash__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__iadd__","text":"Add the given value to this Number. Source code in src/ultimate_notion/props.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number += other . value else : self . obj_ref . number += other return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__ifloordiv__","text":"Divide the given value from this Number and floor Source code in src/ultimate_notion/props.py def __ifloordiv__ ( self , other ): \"\"\"Divide the given value from this Number and floor\"\"\" if isinstance ( other , Number ): self . obj_ref . number //= other . value else : self . obj_ref . number //= other return self","title":"__ifloordiv__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__imul__","text":"Multiply the given value from this Number. Source code in src/ultimate_notion/props.py def __imul__ ( self , other ): \"\"\"Multiply the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number *= other . value else : self . obj_ref . number *= other return self","title":"__imul__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__int__","text":"Return the Number as an int . Source code in src/ultimate_notion/props.py def __int__ ( self ): \"\"\"Return the Number as an `int`.\"\"\" if self . obj_ref . number is None : msg = \"Cannot convert 'None' to int\" raise ValueError ( msg ) return int ( self . obj_ref . number )","title":"__int__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__isub__","text":"Subtract the given value from this Number. Source code in src/ultimate_notion/props.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number -= other . value else : self . obj_ref . number -= other return self","title":"__isub__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__itruediv__","text":"Divide the given value from this Number. Source code in src/ultimate_notion/props.py def __itruediv__ ( self , other ): \"\"\"Divide the given value from this Number.\"\"\" if isinstance ( other , Number ): self . obj_ref . number /= other . value else : self . obj_ref . number /= other return self","title":"__itruediv__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__le__","text":"Return True if this Number is less-than-or-equal-to other . Source code in src/ultimate_notion/props.py def __le__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than-or-equal-to `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value <= other_value","title":"__le__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__lt__","text":"Return True if this Number is less-than other . Source code in src/ultimate_notion/props.py def __lt__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than `other`.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return self . value < other_value","title":"__lt__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__mul__","text":"Multiply the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __mul__ ( self , other ): \"\"\"Multiply the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value * other_value )","title":"__mul__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__sub__","text":"Subtract the value of other and returns the result as a Number. Source code in src/ultimate_notion/props.py def __sub__ ( self , other ): \"\"\"Subtract the value of `other` and returns the result as a Number.\"\"\" other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value - other_value )","title":"__sub__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.__truediv__","text":"Source code in src/ultimate_notion/props.py def __truediv__ ( self , other ): other_value = other . value if isinstance ( other , Number ) else other return Number ( self . value / other_value )","title":"__truediv__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.People","text":"Notion people type. Source code in src/ultimate_notion/props.py def __init__ ( self , users : User | list [ User ]): if not isinstance ( users , list ): users = [ users ] super () . __init__ ( users )","title":"People"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PhoneNumber","text":"Notion phone type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"PhoneNumber"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue","text":"Base class for Notion property values. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"PropertyValue"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__eq__","text":"Source code in src/ultimate_notion/props.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PropertyValue ): return NotImplemented return self . obj_ref . type == other . obj_ref . type and self . obj_ref . value == self . obj_ref . value","title":"__eq__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__init_subclass__","text":"Source code in src/ultimate_notion/props.py def __init_subclass__ ( cls , wraps : type [ T ], ** kwargs : Any ): super () . __init_subclass__ ( wraps = wraps , ** kwargs ) # at that time the model is not yet constructed, thus no direct field acces with .type. type_name = wraps . model_fields [ 'type' ] . get_default () cls . _type_value_map [ type_name ] = cls","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__repr__","text":"Source code in src/ultimate_notion/props.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__str__","text":"Source code in src/ultimate_notion/props.py def __str__ ( self ) -> str : if isinstance ( self . value , RichText ): # note that `RichText` is also a list but implements it's own __str__ return str ( self . value ) if self . value else '' elif isinstance ( self . value , list ): # workaround as `str` on lists calls `repr` instead of `str` return ', ' . join ( str ( val ) for val in self . value ) else : return str ( self . value ) if self . value else ''","title":"__str__()"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations","text":"A Notion relation property value. Source code in src/ultimate_notion/props.py def __init__ ( self , pages : Page | list [ Page ]): if not isinstance ( pages , list ): pages = [ pages ] super () . __init__ ( pages )","title":"Relations"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup","text":"A Notion rollup property value. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Rollup"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select","text":"Single select property value Source code in src/ultimate_notion/props.py def __init__ ( self , option : str | Option ): if isinstance ( option , str ): option = Option ( option ) super () . __init__ ( option )","title":"Select"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status","text":"Status property value Source code in src/ultimate_notion/props.py def __init__ ( self , option : str | Option ): if isinstance ( option , str ): option = Option ( option ) super () . __init__ ( option )","title":"Status"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text","text":"Rich text property value Source code in src/ultimate_notion/props.py def __init__ ( self , text : str | RichText ): if isinstance ( text , str ): text = RichText . from_plain_text ( text ) super () . __init__ ( text )","title":"Text"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title","text":"Title property value Source code in src/ultimate_notion/props.py def __init__ ( self , text : str | RichText ): if isinstance ( text , str ): text = RichText . from_plain_text ( text ) super () . __init__ ( text )","title":"Title"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title.value","text":"","title":"value"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.URL","text":"Notion URL type. Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"URL"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification","text":"A verification property value of pages in wiki databases Source code in src/ultimate_notion/props.py def __init__ ( self , values ): if isinstance ( values , list ): values = [ value . obj_ref if isinstance ( value , Wrapper ) else value for value in values ] else : values = values . obj_ref if isinstance ( values , Wrapper ) else values super () . __init__ ( values )","title":"Verification"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.readonly","text":"","title":"readonly"},{"location":"reference/ultimate_notion/query/","text":"query \u00b6 QueryBuilder ( db : Database ) \u00b6 \"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError db = db instance-attribute \u00b6","title":"Query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query","text":"","title":"query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder","text":"\"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError","title":"QueryBuilder"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder.db","text":"","title":"db"},{"location":"reference/ultimate_notion/schema/","text":"schema \u00b6 Functionality around defining a database schema Currently only normal databases, no wiki databases, can be created [1]. Neither the Unique ID nor Status nor the Verfication page property can be set as a database column in a custom Schema when creating the database. [1] https://developers.notion.com/docs/working-with-databases#wiki-databases Design Principles \u00b6 A schema is a subclass of PageShema that holds Column objects with a name and an actual PropertyType , e.g. Text , Number . The source of truth is always the obj_ref and a PropertyType holds only auxilliary information if actually needed. Since the object references obj_ref must always point to the actual obj_api.blocks.Database.properties value if the schema is bound to an database, the method _remap_obj_refs rewires this when a schema is used to create a database. T = TypeVar ( 'T' , bound = obj_schema . PropertyType ) module-attribute \u00b6 Checkbox ( * args , ** kwargs ) \u00b6 Defines a checkbox column in database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Column ( name : str , type : PropertyType ) \u00b6 Column with a name and a certain Property Type for defining a Notion database schema This is implemented as a descriptor. Source code in src/ultimate_notion/schema.py def __init__ ( self , name : str , type : PropertyType ) -> None : # noqa: A002 self . _name = name self . _type = type attr_name : str property \u00b6 name : str property writable \u00b6 type : PropertyType property writable \u00b6 __set_name__ ( owner : type [ PageSchema ], name : str ) \u00b6 Source code in src/ultimate_notion/schema.py def __set_name__ ( self , owner : type [ PageSchema ], name : str ): self . _schema = owner self . _attr_name = name self . _type . prop_ref = self # link back to allow access to _schema, _py_name e.g. for relations CreatedBy ( * args , ** kwargs ) \u00b6 Defines the created-by column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) CreatedTime ( * args , ** kwargs ) \u00b6 Defines the created-time column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Date ( * args , ** kwargs ) \u00b6 Defines a date column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Email ( * args , ** kwargs ) \u00b6 Defines an e-mail column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Files ( * args , ** kwargs ) \u00b6 Defines a files column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Formula ( expression : str ) \u00b6 Defines a formula column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , expression : str ): # ToDo: Replace with call to `build` later super () . __init__ ( expression ) ID ( * args , ** kwargs ) \u00b6 Defines a unique ID column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) allowed_at_creation = False class-attribute instance-attribute \u00b6 LastEditedBy ( * args , ** kwargs ) \u00b6 Defines the last-edited-by column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) LastEditedTime ( * args , ** kwargs ) \u00b6 Defines the last-edited-time column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) MultiSelect ( options : list [ Option ]) \u00b6 Defines a multi-select column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , options : list [ Option ]): options = [ option . obj_ref for option in options ] super () . __init__ ( options ) Number ( number_format : NumberFormat ) \u00b6 Defines a number column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): super () . __init__ ( number_format ) PageSchema \u00b6 Base class for the schema of a database. db_title : RichText | None instance-attribute \u00b6 __init_subclass__ ( db_title : RichText | str | None , ** kwargs : Any ) \u00b6 Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , db_title : RichText | str | None , ** kwargs : Any ): db_title = RichText . from_plain_text ( db_title ) if db_title is not None else None cls . db_title = db_title super () . __init_subclass__ ( ** kwargs ) bind_db ( db : Database ) classmethod \u00b6 Bind the PageSchema to the corresponding database for back-reference Source code in src/ultimate_notion/schema.py @classmethod def bind_db ( cls , db : Database ): \"\"\"Bind the PageSchema to the corresponding database for back-reference\"\"\" cls . _database = db cls . _set_obj_refs () create ( ** kwargs ) -> Page classmethod \u00b6 Create a page using this schema with a bound database Source code in src/ultimate_notion/schema.py @classmethod def create ( cls , ** kwargs ) -> Page : \"\"\"Create a page using this schema with a bound database\"\"\" return cls . get_db () . create_page ( ** kwargs ) from_dict ( schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema classmethod \u00b6 Creation of a schema from a dictionary for easy support of dynamically created schemas Source code in src/ultimate_notion/schema.py @classmethod def from_dict ( cls , schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema : \"\"\"Creation of a schema from a dictionary for easy support of dynamically created schemas\"\"\" # ToDo: Implement raise NotImplementedError get_col ( col_name : str ) -> Column classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_col ( cls , col_name : str ) -> Column : return SList ([ col for col in cls . get_cols () if col . name == col_name ]) . item () get_cols () -> list [ Column ] classmethod \u00b6 Return all columns of this schema Source code in src/ultimate_notion/schema.py @classmethod def get_cols ( cls ) -> list [ Column ]: \"\"\"Return all columns of this schema\"\"\" return [ col for col in cls . __dict__ . values () if isinstance ( col , Column )] get_db () -> Database classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_db ( cls ) -> Database : if cls . is_bound () and cls . _database : return cls . _database else : raise SchemaNotBoundError ( cls ) get_title_prop () -> Column classmethod \u00b6 Returns the title property Source code in src/ultimate_notion/schema.py @classmethod def get_title_prop ( cls ) -> Column : \"\"\"Returns the title property\"\"\" return SList ( col for col in cls . get_cols () if isinstance ( col . type , Title )) . item () is_bound () -> bool classmethod \u00b6 Returns if the schema is bound to a database Source code in src/ultimate_notion/schema.py @classmethod def is_bound ( cls ) -> bool : \"\"\"Returns if the schema is bound to a database\"\"\" return cls . _database is not None is_consistent_with ( other_schema : type [ PageSchema ]) -> bool classmethod \u00b6 Is this schema consistent with another ignoring backward relations if not in other schema Source code in src/ultimate_notion/schema.py @classmethod def is_consistent_with ( cls , other_schema : type [ PageSchema ]) -> bool : \"\"\"Is this schema consistent with another ignoring backward relations if not in other schema\"\"\" own_schema_dct = cls . to_dict () other_schema_dct = other_schema . to_dict () if own_schema_dct == other_schema_dct : # backward relation was initialized in the other schema return True other_schema_no_backrels_dct = { name : prop_type for name , prop_type in other_schema_dct . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } if other_schema_no_backrels_dct == own_schema_dct : # backward relation was not yet initialised in the other schema (during the creation of the data model) return True return False show ( tablefmt : str | None ) -> str classmethod \u00b6 Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/schema.py @classmethod def show ( cls , tablefmt : str | None ) -> str : \"\"\"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' headers = [ 'Name' , 'Property' , 'Attribute' ] rows = [] for col in cls . get_cols (): rows . append (( col . name , col . type , col . attr_name )) return tabulate ( rows , headers = headers , tablefmt = tablefmt ) to_dict () -> dict [ str , PropertyType ] classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { col . name : col . type for col in cls . get_cols ()} People ( * args , ** kwargs ) \u00b6 Defines a people column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) PhoneNumber ( * args , ** kwargs ) \u00b6 Defines a phone number column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) PropertyType ( * args , ** kwargs ) \u00b6 Base class for Notion property objects. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) allowed_at_creation = True class-attribute instance-attribute \u00b6 obj_ref = obj_api_type . build ( * args , ** kwargs ) instance-attribute \u00b6 prop_ref : Column instance-attribute \u00b6 prop_value : type [ PropertyValue ] property \u00b6 Return the corresponding PropertyValue readonly : bool property \u00b6 Return if this property type is read-only __eq__ ( other : object ) \u00b6 Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ): if not isinstance ( other , PropertyType ): return NotImplemented return self . obj_ref . type == other . obj_ref . type and self . obj_ref . value == self . obj_ref . value __hash__ () -> int \u00b6 Source code in src/ultimate_notion/schema.py def __hash__ ( self ) -> int : return hash ( self . obj_ref . type ) + hash ( self . obj_ref . value ) __repr__ () -> str \u00b6 Source code in src/ultimate_notion/schema.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"<PropertyType: ' { cls_name } ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/schema.py def __str__ ( self ) -> str : return self . __class__ . __name__ ReadOnlyColumnError ( col : Column ) \u00b6 Raised when a read-only columns tries to be written to. Source code in src/ultimate_notion/schema.py def __init__ ( self , col : Column ): self . col = col msg = f \"Argument { col . attr_name } refers to the read-only column ' { col . name } ' of type { col . type } \" super () . __init__ ( msg ) col = col instance-attribute \u00b6 Relation ( schema : type [ PageSchema ] | None = None , * , two_way_prop : Column | None = None ) \u00b6 Relation to another database Source code in src/ultimate_notion/schema.py def __init__ ( self , schema : type [ PageSchema ] | None = None , * , two_way_prop : Column | None = None ): if two_way_prop and not schema : msg = '`schema` needs to be provided if `two_way_prop` is set' raise RuntimeError ( msg ) self . _schema = schema self . _two_way_prop = two_way_prop is_two_way : bool property \u00b6 schema : type [ PageSchema ] | None property \u00b6 Schema of the relation database two_way_prop : Column | None property \u00b6 make_obj_ref () \u00b6 Source code in src/ultimate_notion/schema.py def make_obj_ref ( self ): try : db = self . schema . get_db () except SchemaNotBoundError as e : msg = f \"A database with schema ' { self . schema . __name__ } ' needs to be created first!\" raise RelationError ( msg ) from e if self . two_way_prop : self . obj_ref = obj_schema . DualPropertyRelation . build ( db . id ) else : self . obj_ref = obj_schema . SinglePropertyRelation . build ( db . id ) RelationError ( message ) \u00b6 Error if a Relation cannot be initialised Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message ) Rollup ( relation : Column , property : Column , calculate : Function ) \u00b6 Defines the rollup column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , relation : Column , property : Column , calculate : Function ): # noqa: A002 if not isinstance ( relation . type , Relation ): msg = f 'Relation { relation } must be of type Relation' raise RollupError ( msg ) # ToDo: One could check here if property really is a property in the database where relation points to super () . __init__ ( relation . name , property . name , calculate ) RollupError ( message ) \u00b6 Error if definition of rollup is wrong Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message ) SchemaError ( message ) \u00b6 Raised when there are issues with the schema of a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message ) SchemaNotBoundError ( schema : type [ PageSchema ]) \u00b6 Raised when the schema is not bound to a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , schema : type [ PageSchema ]): self . schema = schema msg = f 'Schema { schema . __name__ } is not bound to any database' super () . __init__ ( msg ) schema = schema instance-attribute \u00b6 Select ( options : list [ Option ]) \u00b6 Defines a select column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , options : list [ Option ]): options = [ option . obj_ref for option in options ] super () . __init__ ( options ) Status ( * args , ** kwargs ) \u00b6 Defines a status column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) allowed_at_creation = False class-attribute instance-attribute \u00b6 Text ( * args , ** kwargs ) \u00b6 Defines a text column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Title ( * args , ** kwargs ) \u00b6 Defines the mandatory title column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) URL ( * args , ** kwargs ) \u00b6 Defines a URL column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) Verification ( * args , ** kwargs ) \u00b6 Defines a unique ID column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) allowed_at_creation = False class-attribute instance-attribute \u00b6","title":"Schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema","text":"Functionality around defining a database schema Currently only normal databases, no wiki databases, can be created [1]. Neither the Unique ID nor Status nor the Verfication page property can be set as a database column in a custom Schema when creating the database. [1] https://developers.notion.com/docs/working-with-databases#wiki-databases","title":"schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema--design-principles","text":"A schema is a subclass of PageShema that holds Column objects with a name and an actual PropertyType , e.g. Text , Number . The source of truth is always the obj_ref and a PropertyType holds only auxilliary information if actually needed. Since the object references obj_ref must always point to the actual obj_api.blocks.Database.properties value if the schema is bound to an database, the method _remap_obj_refs rewires this when a schema is used to create a database.","title":"Design Principles"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.T","text":"","title":"T"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Checkbox","text":"Defines a checkbox column in database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Checkbox"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column","text":"Column with a name and a certain Property Type for defining a Notion database schema This is implemented as a descriptor. Source code in src/ultimate_notion/schema.py def __init__ ( self , name : str , type : PropertyType ) -> None : # noqa: A002 self . _name = name self . _type = type","title":"Column"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.attr_name","text":"","title":"attr_name"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.name","text":"","title":"name"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.type","text":"","title":"type"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.__set_name__","text":"Source code in src/ultimate_notion/schema.py def __set_name__ ( self , owner : type [ PageSchema ], name : str ): self . _schema = owner self . _attr_name = name self . _type . prop_ref = self # link back to allow access to _schema, _py_name e.g. for relations","title":"__set_name__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedBy","text":"Defines the created-by column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"CreatedBy"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedTime","text":"Defines the created-time column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"CreatedTime"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Date","text":"Defines a date column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Date"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Email","text":"Defines an e-mail column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Email"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Files","text":"Defines a files column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Files"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Formula","text":"Defines a formula column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , expression : str ): # ToDo: Replace with call to `build` later super () . __init__ ( expression )","title":"Formula"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID","text":"Defines a unique ID column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"ID"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID.allowed_at_creation","text":"","title":"allowed_at_creation"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedBy","text":"Defines the last-edited-by column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"LastEditedBy"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedTime","text":"Defines the last-edited-time column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"LastEditedTime"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect","text":"Defines a multi-select column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , options : list [ Option ]): options = [ option . obj_ref for option in options ] super () . __init__ ( options )","title":"MultiSelect"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number","text":"Defines a number column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): super () . __init__ ( number_format )","title":"Number"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema","text":"Base class for the schema of a database.","title":"PageSchema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.db_title","text":"","title":"db_title"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.__init_subclass__","text":"Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , db_title : RichText | str | None , ** kwargs : Any ): db_title = RichText . from_plain_text ( db_title ) if db_title is not None else None cls . db_title = db_title super () . __init_subclass__ ( ** kwargs )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.bind_db","text":"Bind the PageSchema to the corresponding database for back-reference Source code in src/ultimate_notion/schema.py @classmethod def bind_db ( cls , db : Database ): \"\"\"Bind the PageSchema to the corresponding database for back-reference\"\"\" cls . _database = db cls . _set_obj_refs ()","title":"bind_db()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.create","text":"Create a page using this schema with a bound database Source code in src/ultimate_notion/schema.py @classmethod def create ( cls , ** kwargs ) -> Page : \"\"\"Create a page using this schema with a bound database\"\"\" return cls . get_db () . create_page ( ** kwargs )","title":"create()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.from_dict","text":"Creation of a schema from a dictionary for easy support of dynamically created schemas Source code in src/ultimate_notion/schema.py @classmethod def from_dict ( cls , schema_dct : dict [ str , PropertyType ], db_title : str | None = None ) -> PageSchema : \"\"\"Creation of a schema from a dictionary for easy support of dynamically created schemas\"\"\" # ToDo: Implement raise NotImplementedError","title":"from_dict()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_col","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_col ( cls , col_name : str ) -> Column : return SList ([ col for col in cls . get_cols () if col . name == col_name ]) . item ()","title":"get_col()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_cols","text":"Return all columns of this schema Source code in src/ultimate_notion/schema.py @classmethod def get_cols ( cls ) -> list [ Column ]: \"\"\"Return all columns of this schema\"\"\" return [ col for col in cls . __dict__ . values () if isinstance ( col , Column )]","title":"get_cols()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_db","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_db ( cls ) -> Database : if cls . is_bound () and cls . _database : return cls . _database else : raise SchemaNotBoundError ( cls )","title":"get_db()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_title_prop","text":"Returns the title property Source code in src/ultimate_notion/schema.py @classmethod def get_title_prop ( cls ) -> Column : \"\"\"Returns the title property\"\"\" return SList ( col for col in cls . get_cols () if isinstance ( col . type , Title )) . item ()","title":"get_title_prop()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.is_bound","text":"Returns if the schema is bound to a database Source code in src/ultimate_notion/schema.py @classmethod def is_bound ( cls ) -> bool : \"\"\"Returns if the schema is bound to a database\"\"\" return cls . _database is not None","title":"is_bound()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.is_consistent_with","text":"Is this schema consistent with another ignoring backward relations if not in other schema Source code in src/ultimate_notion/schema.py @classmethod def is_consistent_with ( cls , other_schema : type [ PageSchema ]) -> bool : \"\"\"Is this schema consistent with another ignoring backward relations if not in other schema\"\"\" own_schema_dct = cls . to_dict () other_schema_dct = other_schema . to_dict () if own_schema_dct == other_schema_dct : # backward relation was initialized in the other schema return True other_schema_no_backrels_dct = { name : prop_type for name , prop_type in other_schema_dct . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } if other_schema_no_backrels_dct == own_schema_dct : # backward relation was not yet initialised in the other schema (during the creation of the data model) return True return False","title":"is_consistent_with()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.show","text":"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/schema.py @classmethod def show ( cls , tablefmt : str | None ) -> str : \"\"\"Display the schema in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more tables formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' headers = [ 'Name' , 'Property' , 'Attribute' ] rows = [] for col in cls . get_cols (): rows . append (( col . name , col . type , col . attr_name )) return tabulate ( rows , headers = headers , tablefmt = tablefmt )","title":"show()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.to_dict","text":"Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { col . name : col . type for col in cls . get_cols ()}","title":"to_dict()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.People","text":"Defines a people column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"People"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PhoneNumber","text":"Defines a phone number column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"PhoneNumber"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType","text":"Base class for Notion property objects. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"PropertyType"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.allowed_at_creation","text":"","title":"allowed_at_creation"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.prop_ref","text":"","title":"prop_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.prop_value","text":"Return the corresponding PropertyValue","title":"prop_value"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.readonly","text":"Return if this property type is read-only","title":"readonly"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__eq__","text":"Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ): if not isinstance ( other , PropertyType ): return NotImplemented return self . obj_ref . type == other . obj_ref . type and self . obj_ref . value == self . obj_ref . value","title":"__eq__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__hash__","text":"Source code in src/ultimate_notion/schema.py def __hash__ ( self ) -> int : return hash ( self . obj_ref . type ) + hash ( self . obj_ref . value )","title":"__hash__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__repr__","text":"Source code in src/ultimate_notion/schema.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"<PropertyType: ' { cls_name } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__str__","text":"Source code in src/ultimate_notion/schema.py def __str__ ( self ) -> str : return self . __class__ . __name__","title":"__str__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ReadOnlyColumnError","text":"Raised when a read-only columns tries to be written to. Source code in src/ultimate_notion/schema.py def __init__ ( self , col : Column ): self . col = col msg = f \"Argument { col . attr_name } refers to the read-only column ' { col . name } ' of type { col . type } \" super () . __init__ ( msg )","title":"ReadOnlyColumnError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ReadOnlyColumnError.col","text":"","title":"col"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation","text":"Relation to another database Source code in src/ultimate_notion/schema.py def __init__ ( self , schema : type [ PageSchema ] | None = None , * , two_way_prop : Column | None = None ): if two_way_prop and not schema : msg = '`schema` needs to be provided if `two_way_prop` is set' raise RuntimeError ( msg ) self . _schema = schema self . _two_way_prop = two_way_prop","title":"Relation"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.is_two_way","text":"","title":"is_two_way"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.schema","text":"Schema of the relation database","title":"schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.two_way_prop","text":"","title":"two_way_prop"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.make_obj_ref","text":"Source code in src/ultimate_notion/schema.py def make_obj_ref ( self ): try : db = self . schema . get_db () except SchemaNotBoundError as e : msg = f \"A database with schema ' { self . schema . __name__ } ' needs to be created first!\" raise RelationError ( msg ) from e if self . two_way_prop : self . obj_ref = obj_schema . DualPropertyRelation . build ( db . id ) else : self . obj_ref = obj_schema . SinglePropertyRelation . build ( db . id )","title":"make_obj_ref()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.RelationError","text":"Error if a Relation cannot be initialised Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"RelationError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup","text":"Defines the rollup column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , relation : Column , property : Column , calculate : Function ): # noqa: A002 if not isinstance ( relation . type , Relation ): msg = f 'Relation { relation } must be of type Relation' raise RollupError ( msg ) # ToDo: One could check here if property really is a property in the database where relation points to super () . __init__ ( relation . name , property . name , calculate )","title":"Rollup"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.RollupError","text":"Error if definition of rollup is wrong Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"RollupError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaError","text":"Raised when there are issues with the schema of a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `SchemaError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SchemaError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaNotBoundError","text":"Raised when the schema is not bound to a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , schema : type [ PageSchema ]): self . schema = schema msg = f 'Schema { schema . __name__ } is not bound to any database' super () . __init__ ( msg )","title":"SchemaNotBoundError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaNotBoundError.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Select","text":"Defines a select column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , options : list [ Option ]): options = [ option . obj_ref for option in options ] super () . __init__ ( options )","title":"Select"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status","text":"Defines a status column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Status"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.allowed_at_creation","text":"","title":"allowed_at_creation"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text","text":"Defines a text column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Text"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title","text":"Defines the mandatory title column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Title"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.URL","text":"Defines a URL column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"URL"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification","text":"Defines a unique ID column in a database Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Verification"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification.allowed_at_creation","text":"","title":"allowed_at_creation"},{"location":"reference/ultimate_notion/session/","text":"session \u00b6 Session object ENV_NOTION_AUTH_TOKEN = 'NOTION_AUTH_TOKEN' module-attribute \u00b6 Session ( auth : str | None = None , ** kwargs : Any ) \u00b6 A session for the Notion API The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API. Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _initialize_once ( self ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . api = NotionAPI ( self . client ) _log . info ( 'Initialized Notion session' ) api : NotionAPI = NotionAPI ( self . client ) instance-attribute \u00b6 cache : dict [ UUID , DataObject | User ] = {} class-attribute \u00b6 client : notion_client . Client = notion_client . Client ( auth = auth , ** kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None Session . cache . clear () all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user ))) for user in self . api . users . as_list () ] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () Session . _active_session = None Session . cache . clear () create_db ( parent : Page , schema : type [ PageSchema ] | None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ] | None ) -> Database : \"\"\"Create a new database\"\"\" if schema : schema . _init_fwd_rels () schema_no_backrels_dct = { name : prop_type for name , prop_type in schema . to_dict () . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } schema_dct = { k : v . obj_ref for k , v in schema_no_backrels_dct . items ()} title = schema . db_title . obj_ref if schema . db_title is not None else None db_obj = self . api . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) else : schema_dct = {} db_obj = self . api . databases . create ( parent = parent . obj_ref , schema = schema_dct ) db : Database = Database ( obj_ref = db_obj ) if schema : db . schema = schema schema . _init_bwd_rels () self . cache [ db . id ] = db return db create_dbs ( parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ] \u00b6 Create new databases in the right order if there a relations between them Source code in src/ultimate_notion/session.py def create_dbs ( self , parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ]: \"\"\"Create new databases in the right order if there a relations between them\"\"\" # ToDo: Implement raise NotImplementedError create_page ( parent : Page , title : RichText | str | None = None ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : RichText | str | None = None ) -> Page : if title : title = Title ( title ) . obj_ref page = Page ( obj_ref = self . api . pages . create ( parent = parent . obj_ref , title = title )) self . cache [ page . id ] = page return page get_active () -> Session classmethod \u00b6 Return the current active session or None Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ) -> Session : \"\"\"Return the current active session or None\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg ) get_block ( block_ref : ObjRef ) \u00b6 Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . api . blocks . retrieve ( block_ref )) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notion database by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notion database by uuid\"\"\" db_uuid = get_uuid ( db_ref ) if db_uuid in self . cache : return cast ( Database , self . cache [ db_uuid ]) else : db = Database ( obj_ref = self . api . databases . retrieve ( db_uuid )) self . cache [ db . id ] = db return db get_or_create ( * args , ** kwargs ) -> Session classmethod \u00b6 Return the current active session or create a new session Source code in src/ultimate_notion/session.py @classmethod def get_or_create ( cls , * args , ** kwargs ) -> Session : \"\"\"Return the current active session or create a new session\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : return cls ( * args , ** kwargs ) get_or_create_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) \u00b6 Get or create the database Source code in src/ultimate_notion/session.py def get_or_create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" # ToDo: Implement raise NotImplementedError get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) if page_uuid in self . cache : return cast ( Page , self . cache [ page_uuid ]) else : page = Page ( obj_ref = self . api . pages . retrieve ( page_uuid )) self . cache [ page . id ] = page return page get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) if user_uuid in self . cache : return cast ( User , self . cache [ user_uuid ]) else : user = User . wrap_obj_ref ( self . _get_user ( user_uuid )) self . cache [ user . id ] = user return user raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err search_db ( db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( cast ( Database , self . cache . setdefault ( db . id , Database ( obj_ref = db ))) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( title : str | None = None , * , exact : bool = True ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( cast ( Page , self . cache . setdefault ( page . id , Page ( obj_ref = page ))) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title . value == title ) return pages whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" user = self . api . users . me () return cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user ))) SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","text":"Session object","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.ENV_NOTION_AUTH_TOKEN","text":"","title":"ENV_NOTION_AUTH_TOKEN"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","text":"A session for the Notion API The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API. Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _initialize_once ( self ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . api = NotionAPI ( self . client ) _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.api","text":"","title":"api"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.cache","text":"","title":"cache"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.client","text":"","title":"client"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None Session . cache . clear ()","title":"__exit__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user ))) for user in self . api . users . as_list () ]","title":"all_users()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () Session . _active_session = None Session . cache . clear ()","title":"close()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ] | None ) -> Database : \"\"\"Create a new database\"\"\" if schema : schema . _init_fwd_rels () schema_no_backrels_dct = { name : prop_type for name , prop_type in schema . to_dict () . items () if not ( isinstance ( prop_type , Relation ) and not prop_type . schema ) } schema_dct = { k : v . obj_ref for k , v in schema_no_backrels_dct . items ()} title = schema . db_title . obj_ref if schema . db_title is not None else None db_obj = self . api . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) else : schema_dct = {} db_obj = self . api . databases . create ( parent = parent . obj_ref , schema = schema_dct ) db : Database = Database ( obj_ref = db_obj ) if schema : db . schema = schema schema . _init_bwd_rels () self . cache [ db . id ] = db return db","title":"create_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_dbs","text":"Create new databases in the right order if there a relations between them Source code in src/ultimate_notion/session.py def create_dbs ( self , parents : Page | list [ Page ], schemas : list [ type [ PageSchema ]]) -> list [ Database ]: \"\"\"Create new databases in the right order if there a relations between them\"\"\" # ToDo: Implement raise NotImplementedError","title":"create_dbs()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_page","text":"Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : RichText | str | None = None ) -> Page : if title : title = Title ( title ) . obj_ref page = Page ( obj_ref = self . api . pages . create ( parent = parent . obj_ref , title = title )) self . cache [ page . id ] = page return page","title":"create_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_active","text":"Return the current active session or None Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ) -> Session : \"\"\"Return the current active session or None\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg )","title":"get_active()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_block","text":"Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . api . blocks . retrieve ( block_ref ))","title":"get_block()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","text":"Retrieve Notion database by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notion database by uuid\"\"\" db_uuid = get_uuid ( db_ref ) if db_uuid in self . cache : return cast ( Database , self . cache [ db_uuid ]) else : db = Database ( obj_ref = self . api . databases . retrieve ( db_uuid )) self . cache [ db . id ] = db return db","title":"get_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create","text":"Return the current active session or create a new session Source code in src/ultimate_notion/session.py @classmethod def get_or_create ( cls , * args , ** kwargs ) -> Session : \"\"\"Return the current active session or create a new session\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : return cls ( * args , ** kwargs )","title":"get_or_create()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create_db","text":"Get or create the database Source code in src/ultimate_notion/session.py def get_or_create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" # ToDo: Implement raise NotImplementedError","title":"get_or_create_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) if page_uuid in self . cache : return cast ( Page , self . cache [ page_uuid ]) else : page = Page ( obj_ref = self . api . pages . retrieve ( page_uuid )) self . cache [ page . id ] = page return page","title":"get_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) if user_uuid in self . cache : return cast ( User , self . cache [ user_uuid ]) else : user = User . wrap_obj_ref ( self . _get_user ( user_uuid )) self . cache [ user . id ] = user return user","title":"get_user()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err","title":"raise_for_status()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( cast ( Database , self . cache . setdefault ( db . id , Database ( obj_ref = db ))) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . api . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( cast ( Page , self . cache . setdefault ( page . id , Page ( obj_ref = page ))) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title . value == title ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" user = self . api . users . me () return cast ( User , self . cache . setdefault ( user . id , User . wrap_obj_ref ( user )))","title":"whoami()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.SessionError","text":"Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/text/","text":"text \u00b6 Utilities for working text, markdown & Rich Text in Notion. MAX_TEXT_OBJECT_SIZE = 2000 module-attribute \u00b6 camel_case ( string : str ) -> str \u00b6 Make a Python identifier in CamelCase. Attention: This may result in an empty string and a CamelCase sting will be capitalized! Source code in src/ultimate_notion/text.py def camel_case ( string : str ) -> str : \"\"\"Make a Python identifier in CamelCase. Attention: This may result in an empty string and a CamelCase sting will be capitalized! \"\"\" return '' . join ([ elem . capitalize () for elem in snake_case ( string ) . split ( '_' )]) chunky ( text : str , length : int = MAX_TEXT_OBJECT_SIZE ) -> Iterator [ str ] \u00b6 Break the given text into chunks of at most length size. Source code in src/ultimate_notion/text.py def chunky ( text : str , length : int = MAX_TEXT_OBJECT_SIZE ) -> Iterator [ str ]: \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length )) decapitalize ( string : str ) -> str \u00b6 Inverse of capitalize Source code in src/ultimate_notion/text.py def decapitalize ( string : str ) -> str : \"\"\"Inverse of capitalize\"\"\" if not string : return string return string [ 0 ] . lower () + string [ 1 :] python_identifier ( string : str ) -> str \u00b6 Make a valid Python identifier This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Attention: This may result in an empty string! Source code in src/ultimate_notion/text.py def python_identifier ( string : str ) -> str : \"\"\"Make a valid Python identifier This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Attention: This may result in an empty string! \"\"\" s = re . sub ( r '[^0-9a-zA-Z_]+' , '_' , string ) s = re . sub ( r '^[^a-zA-Z]+' , '' , s ) return s . rstrip ( '_' ) snake_case ( string : str ) -> str \u00b6 Make a Python identifier in snake_case. Attention: This may result in an empty string! Source code in src/ultimate_notion/text.py def snake_case ( string : str ) -> str : \"\"\"Make a Python identifier in snake_case. Attention: This may result in an empty string! \"\"\" return python_identifier ( string ) . lower ()","title":"Text"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text","text":"Utilities for working text, markdown & Rich Text in Notion.","title":"text"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.MAX_TEXT_OBJECT_SIZE","text":"","title":"MAX_TEXT_OBJECT_SIZE"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.camel_case","text":"Make a Python identifier in CamelCase. Attention: This may result in an empty string and a CamelCase sting will be capitalized! Source code in src/ultimate_notion/text.py def camel_case ( string : str ) -> str : \"\"\"Make a Python identifier in CamelCase. Attention: This may result in an empty string and a CamelCase sting will be capitalized! \"\"\" return '' . join ([ elem . capitalize () for elem in snake_case ( string ) . split ( '_' )])","title":"camel_case()"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.chunky","text":"Break the given text into chunks of at most length size. Source code in src/ultimate_notion/text.py def chunky ( text : str , length : int = MAX_TEXT_OBJECT_SIZE ) -> Iterator [ str ]: \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length ))","title":"chunky()"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.decapitalize","text":"Inverse of capitalize Source code in src/ultimate_notion/text.py def decapitalize ( string : str ) -> str : \"\"\"Inverse of capitalize\"\"\" if not string : return string return string [ 0 ] . lower () + string [ 1 :]","title":"decapitalize()"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.python_identifier","text":"Make a valid Python identifier This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Attention: This may result in an empty string! Source code in src/ultimate_notion/text.py def python_identifier ( string : str ) -> str : \"\"\"Make a valid Python identifier This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Attention: This may result in an empty string! \"\"\" s = re . sub ( r '[^0-9a-zA-Z_]+' , '_' , string ) s = re . sub ( r '^[^a-zA-Z]+' , '' , s ) return s . rstrip ( '_' )","title":"python_identifier()"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.snake_case","text":"Make a Python identifier in snake_case. Attention: This may result in an empty string! Source code in src/ultimate_notion/text.py def snake_case ( string : str ) -> str : \"\"\"Make a Python identifier in snake_case. Attention: This may result in an empty string! \"\"\" return python_identifier ( string ) . lower ()","title":"snake_case()"},{"location":"reference/ultimate_notion/utils/","text":"utils \u00b6 Additional utilities that fit nowhere else KT = TypeVar ( 'KT' ) module-attribute \u00b6 ObjRef : TypeAlias = UUID | str module-attribute \u00b6 Self = TypeVar ( 'Self' , bound = 'Wrapper[Any]' ) module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 VT = TypeVar ( 'VT' ) module-attribute \u00b6 SList \u00b6 A list that holds often only a single element item () -> T \u00b6 Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg ) Wrapper ( * args , ** kwargs ) \u00b6 Convert objects from the obj-based API to the high-level API and vice versa Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs ) obj_ref : T = obj_api_type . build ( * args , ** kwargs ) instance-attribute \u00b6 __init_subclass__ ( wraps : type [ T ], ** kwargs : Any ) \u00b6 Source code in src/ultimate_notion/utils.py def __init_subclass__ ( cls , wraps : type [ T ], ** kwargs : Any ): super () . __init_subclass__ ( ** kwargs ) cls . _obj_api_map [ wraps ] = cls __new__ ( * args , ** kwargs ) -> Wrapper \u00b6 Source code in src/ultimate_notion/utils.py def __new__ ( cls : type [ Wrapper ], * args , ** kwargs ) -> Wrapper : # Needed for wrap_obj_ref and its call to __new__ to work! return super () . __new__ ( cls ) wrap_obj_ref ( obj_ref : T ) -> Self classmethod \u00b6 Source code in src/ultimate_notion/utils.py @classmethod def wrap_obj_ref ( cls : type [ Self ], obj_ref : T ) -> Self : hl_cls = cls . _obj_api_map [ type ( obj_ref )] hl_obj = hl_cls . __new__ ( hl_cls ) hl_obj . obj_ref = obj_ref return cast ( Self , hl_obj ) deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ) \u00b6 Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone dict_diff ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ list [ KT ], list [ KT ], dict [ KT , tuple [ VT , VT ]]] \u00b6 Returns the added keys, removed keys and keys of changed values of both dictionaries Source code in src/ultimate_notion/utils.py def dict_diff ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ list [ KT ], list [ KT ], dict [ KT , tuple [ VT , VT ]]]: \"\"\"Returns the added keys, removed keys and keys of changed values of both dictionaries\"\"\" set1 , set2 = set ( dct1 . keys ()), set ( dct2 . keys ()) keys_added = list ( set2 - set1 ) keys_removed = list ( set1 - set2 ) values_changed = { key : ( dct1 [ key ], dct2 [ key ]) for key in set1 & set2 if dct1 [ key ] != dct2 [ key ]} return keys_added , keys_removed , values_changed dict_diff_str ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ str , str , str ] \u00b6 Returns the added keys, removed keys and keys of changed values of both dictionaries as strings for printing Source code in src/ultimate_notion/utils.py def dict_diff_str ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ str , str , str ]: \"\"\"Returns the added keys, removed keys and keys of changed values of both dictionaries as strings for printing\"\"\" keys_added , keys_removed , values_changed = dict_diff ( dct1 , dct2 ) keys_added_str = ', ' . join ([ str ( k ) for k in keys_added ]) or 'None' keys_removed_str = ', ' . join ([ str ( k ) for k in keys_removed ]) or 'None' keys_changed_str = ', ' . join ( f ' { k } : { v [ 0 ] } -> { v [ 1 ] } ' for k , v in values_changed . items ()) or 'None' return keys_added_str , keys_removed_str , keys_changed_str find_index ( elem : Any , lst : list [ Any ]) -> int | None \u00b6 Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem ) find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array \u00b6 Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result get_active_session () -> Session \u00b6 Return the current active session or raise an exception Avoids cyclic imports when used within the package itself. For internal use mostly. Source code in src/ultimate_notion/utils.py def get_active_session () -> Session : \"\"\"Return the current active session or raise an exception Avoids cyclic imports when used within the package itself. For internal use mostly. \"\"\" from ultimate_notion.session import Session return Session . get_active () get_uuid ( obj : str | UUID | objs . ParentRef | objs . NotionObject ) -> UUID \u00b6 Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : str | UUID | objs . ParentRef | objs . NotionObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return objs . ObjectReference . build ( obj ) . id is_notebook () -> bool \u00b6 Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter store_retvals ( func ) \u00b6 Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped","title":"Utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","text":"Additional utilities that fit nowhere else","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.KT","text":"","title":"KT"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.ObjRef","text":"","title":"ObjRef"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Self","text":"","title":"Self"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","text":"","title":"T"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.VT","text":"","title":"VT"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","text":"A list that holds often only a single element","title":"SList"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","text":"Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg )","title":"item()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper","text":"Convert objects from the obj-based API to the high-level API and vice versa Source code in src/ultimate_notion/utils.py def __init__ ( self , * args , ** kwargs ): obj_api_type = self . _obj_api_map_inv [ self . __class__ ] self . obj_ref = obj_api_type . build ( * args , ** kwargs )","title":"Wrapper"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.__init_subclass__","text":"Source code in src/ultimate_notion/utils.py def __init_subclass__ ( cls , wraps : type [ T ], ** kwargs : Any ): super () . __init_subclass__ ( ** kwargs ) cls . _obj_api_map [ wraps ] = cls","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.__new__","text":"Source code in src/ultimate_notion/utils.py def __new__ ( cls : type [ Wrapper ], * args , ** kwargs ) -> Wrapper : # Needed for wrap_obj_ref and its call to __new__ to work! return super () . __new__ ( cls )","title":"__new__()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.wrap_obj_ref","text":"Source code in src/ultimate_notion/utils.py @classmethod def wrap_obj_ref ( cls : type [ Self ], obj_ref : T ) -> Self : hl_cls = cls . _obj_api_map [ type ( obj_ref )] hl_obj = hl_cls . __new__ ( hl_cls ) hl_obj . obj_ref = obj_ref return cast ( Self , hl_obj )","title":"wrap_obj_ref()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.deepcopy_with_sharing","text":"Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone","title":"deepcopy_with_sharing()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff","text":"Returns the added keys, removed keys and keys of changed values of both dictionaries Source code in src/ultimate_notion/utils.py def dict_diff ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ list [ KT ], list [ KT ], dict [ KT , tuple [ VT , VT ]]]: \"\"\"Returns the added keys, removed keys and keys of changed values of both dictionaries\"\"\" set1 , set2 = set ( dct1 . keys ()), set ( dct2 . keys ()) keys_added = list ( set2 - set1 ) keys_removed = list ( set1 - set2 ) values_changed = { key : ( dct1 [ key ], dct2 [ key ]) for key in set1 & set2 if dct1 [ key ] != dct2 [ key ]} return keys_added , keys_removed , values_changed","title":"dict_diff()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff_str","text":"Returns the added keys, removed keys and keys of changed values of both dictionaries as strings for printing Source code in src/ultimate_notion/utils.py def dict_diff_str ( dct1 : dict [ KT , VT ], dct2 : dict [ KT , VT ]) -> tuple [ str , str , str ]: \"\"\"Returns the added keys, removed keys and keys of changed values of both dictionaries as strings for printing\"\"\" keys_added , keys_removed , values_changed = dict_diff ( dct1 , dct2 ) keys_added_str = ', ' . join ([ str ( k ) for k in keys_added ]) or 'None' keys_removed_str = ', ' . join ([ str ( k ) for k in keys_removed ]) or 'None' keys_changed_str = ', ' . join ( f ' { k } : { v [ 0 ] } -> { v [ 1 ] } ' for k , v in values_changed . items ()) or 'None' return keys_added_str , keys_removed_str , keys_changed_str","title":"dict_diff_str()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_index","text":"Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem )","title":"find_index()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_indices","text":"Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result","title":"find_indices()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_active_session","text":"Return the current active session or raise an exception Avoids cyclic imports when used within the package itself. For internal use mostly. Source code in src/ultimate_notion/utils.py def get_active_session () -> Session : \"\"\"Return the current active session or raise an exception Avoids cyclic imports when used within the package itself. For internal use mostly. \"\"\" from ultimate_notion.session import Session return Session . get_active ()","title":"get_active_session()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_uuid","text":"Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : str | UUID | objs . ParentRef | objs . NotionObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return objs . ObjectReference . build ( obj ) . id","title":"get_uuid()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","text":"Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter","title":"is_notebook()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.store_retvals","text":"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped","title":"store_retvals()"},{"location":"reference/ultimate_notion/view/","text":"view \u00b6 View representing the result of a Query ColType : TypeAlias = str | list [ str ] module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 View ( database : Database , pages : list [ Page ], query : QueryBuilder ) \u00b6 Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder ): self . database = database self . _query = query self . _title_col = database . schema . get_title_prop () . name self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset () columns : list [ str ] property \u00b6 Columns of the database view aligned with the elements of a row database = database instance-attribute \u00b6 has_icon : bool property \u00b6 has_id : bool property \u00b6 has_index : bool property \u00b6 __len__ () \u00b6 Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices ) __repr__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . database . title !s} ' at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show () apply ( func : Callable [[ Page ], T ]) -> list [ T ] \u00b6 Apply function to all pages in view Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()] clone () -> View \u00b6 Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ]) filter () \u00b6 Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError head ( num : int ) -> View \u00b6 Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view limit ( num : int ) -> View \u00b6 Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num ) page ( idx : int ) -> Page \u00b6 Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]] pages () -> list [ Page ] \u00b6 Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))] reload () -> View \u00b6 Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = self . database . _pages_from_query ( query = self . _query ) return view reset () -> View \u00b6 Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self reverse () -> View \u00b6 Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view row ( idx : int ) -> list [ Any ] \u00b6 Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page . props [ col ]) return row rows () -> list [ list [ Any ]] \u00b6 Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))] select ( cols : ColType , * more_cols : str ) -> View \u00b6 Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view show ( tablefmt : str | None = None ) -> str \u00b6 Display the view in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more table formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/view.py def show ( self , tablefmt : str | None = None ) -> str : \"\"\"Display the view in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more table formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" rows = self . rows () cols = self . columns if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' if tablefmt == 'html' : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = str ( tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' )) # str() as tabulate wraps the str else : html_str = str ( tabulate ( rows , headers = cols , tablefmt = 'html' )) # str() as tabulate wraps the str return html_str else : return tabulate ( rows , headers = cols , tablefmt = tablefmt ) sort () \u00b6 Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError tail ( num : int ) -> View \u00b6 Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view to_pandas () -> pd . DataFrame \u00b6 Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns ) with_icon ( name = 'icon' ) -> View \u00b6 Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view with_id ( name : str = 'id' ) -> View \u00b6 Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view with_index ( name = 'index' ) -> View \u00b6 Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view without_icon () -> View \u00b6 Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view without_id () -> View \u00b6 Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view without_index () -> View \u00b6 Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","text":"View representing the result of a Query","title":"view"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.ColType","text":"","title":"ColType"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.T","text":"","title":"T"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","text":"Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder ): self . database = database self . _query = query self . _title_col = database . schema . get_title_prop () . name self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset ()","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","text":"Columns of the database view aligned with the elements of a row","title":"columns"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","text":"","title":"database"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_icon","text":"","title":"has_icon"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_id","text":"","title":"has_id"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","text":"","title":"has_index"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__len__","text":"Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices )","title":"__len__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__repr__","text":"Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . database . title !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","text":"Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show ()","title":"__str__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.apply","text":"Apply function to all pages in view Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()]","title":"apply()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","text":"Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ])","title":"clone()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.filter","text":"Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError","title":"filter()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.head","text":"Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view","title":"head()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","text":"Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num )","title":"limit()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.page","text":"Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]]","title":"page()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.pages","text":"Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))]","title":"pages()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reload","text":"Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = self . database . _pages_from_query ( query = self . _query ) return view","title":"reload()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reset","text":"Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self","title":"reset()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reverse","text":"Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view","title":"reverse()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.row","text":"Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page . props [ col ]) return row","title":"row()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.rows","text":"Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))]","title":"rows()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.select","text":"Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view","title":"select()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.show","text":"Display the view in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more table formats under: astanin/python-tabulate#table-format Source code in src/ultimate_notion/view.py def show ( self , tablefmt : str | None = None ) -> str : \"\"\"Display the view in a given table format Some table formats: - plain: no pseudographics - simple: Pandoc's simple table, i.e. only dashes to separate header from content - github: GitHub flavored Markdown - simple_grid: uses dashes & pipes to separate cells - html: standard html markup Find more table formats under: https://github.com/astanin/python-tabulate#table-format \"\"\" rows = self . rows () cols = self . columns if tablefmt is None : tablefmt = 'html' if is_notebook () else 'simple' if tablefmt == 'html' : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = str ( tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' )) # str() as tabulate wraps the str else : html_str = str ( tabulate ( rows , headers = cols , tablefmt = 'html' )) # str() as tabulate wraps the str return html_str else : return tabulate ( rows , headers = cols , tablefmt = tablefmt )","title":"show()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.sort","text":"Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError","title":"sort()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.tail","text":"Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view","title":"tail()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pandas","text":"Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns )","title":"to_pandas()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_icon","text":"Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view","title":"with_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_id","text":"Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view","title":"with_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","text":"Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view","title":"with_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_icon","text":"Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view","title":"without_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_id","text":"Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view","title":"without_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","text":"Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view","title":"without_index()"},{"location":"reference/ultimate_notion/obj_api/","text":"obj_api \u00b6 The Notion API mapped to Python objects by Pydantic Most of this code is taken from Notional by Jason Heddings and is MIT-licensed.","title":"Obj api"},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api","text":"The Notion API mapped to Python objects by Pydantic Most of this code is taken from Notional by Jason Heddings and is MIT-licensed.","title":"obj_api"},{"location":"reference/ultimate_notion/obj_api/blocks/","text":"blocks \u00b6 Wrapper for Notion API blocks. Blocks are the base for all Notion content. Block \u00b6 A standard block object in Notion. Calling the block will expose the nested data in the object. Bookmark \u00b6 A bookmark block in Notion. bookmark : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Breadcrumb \u00b6 A breadcrumb block in Notion. breadcrumb : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 BulletedListItem \u00b6 A bulleted list item in Notion. bulleted_list_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Callout \u00b6 A callout block in Notion. callout : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 ChildDatabase \u00b6 A child database block in Notion. child_database : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 ChildPage \u00b6 A child page block in Notion. child_page : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Code \u00b6 A code block in Notion. code : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Column \u00b6 A column block in Notion. column : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 ColumnList \u00b6 A column list block in Notion. column_list : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 DataObject \u00b6 The base type for all Notion API records. archived : bool = False class-attribute instance-attribute \u00b6 created_by : UserRef = None class-attribute instance-attribute \u00b6 created_time : datetime = None class-attribute instance-attribute \u00b6 has_children : bool = False class-attribute instance-attribute \u00b6 id : UUID = None class-attribute instance-attribute \u00b6 last_edited_by : UserRef = None class-attribute instance-attribute \u00b6 last_edited_time : datetime = None class-attribute instance-attribute \u00b6 parent : SerializeAsAny [ ParentRef ] = None class-attribute instance-attribute \u00b6 Database \u00b6 A database record type. cover : FileObject | None = None class-attribute instance-attribute \u00b6 description : list [ RichTextObject ] = None class-attribute instance-attribute \u00b6 icon : SerializeAsAny [ FileObject ] | EmojiObject | None = None class-attribute instance-attribute \u00b6 is_inline : bool = False class-attribute instance-attribute \u00b6 properties : dict [ str , PropertyType ] = None class-attribute instance-attribute \u00b6 public_url : str | None = None class-attribute instance-attribute \u00b6 title : list [ RichTextObject ] = None class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 Divider \u00b6 A divider block in Notion. divider : Any = None class-attribute instance-attribute \u00b6 Embed \u00b6 An embed block in Notion. embed : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Equation \u00b6 An equation block in Notion. equation : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 File \u00b6 A file block in Notion. file : SerializeAsAny [ FileObject ] = None class-attribute instance-attribute \u00b6 Heading1 \u00b6 A heading_1 block in Notion. heading_1 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Heading2 \u00b6 A heading_2 block in Notion. heading_2 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Heading3 \u00b6 A heading_3 block in Notion. heading_3 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Image \u00b6 An image block in Notion. image : SerializeAsAny [ FileObject ] = None class-attribute instance-attribute \u00b6 LinkPreview \u00b6 A link_preview block in Notion. link_preview : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 LinkToPage \u00b6 A link_to_page block in Notion. link_to_page : SerializeAsAny [ ParentRef ] instance-attribute \u00b6 NumberedListItem \u00b6 A numbered list item in Notion. numbered_list_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 PDF \u00b6 A pdf block in Notion. pdf : SerializeAsAny [ FileObject ] = None class-attribute instance-attribute \u00b6 Page \u00b6 A standard Notion page object. cover : SerializeAsAny [ FileObject ] | None = None class-attribute instance-attribute \u00b6 icon : SerializeAsAny [ FileObject ] | EmojiObject | None = None class-attribute instance-attribute \u00b6 properties : dict [ str , PropertyValue ] = None class-attribute instance-attribute \u00b6 public_url : str | None = None class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 Paragraph \u00b6 A paragraph block in Notion. paragraph : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Quote \u00b6 A quote block in Notion. quote : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 SyncedBlock \u00b6 A synced_block block in Notion - either original or synced. synced_block : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Table \u00b6 A table block in Notion. table : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 TableOfContents \u00b6 A table_of_contents block in Notion. table_of_contents : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 TableRow \u00b6 A table_row block in Notion. table_row : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Template \u00b6 A template block in Notion. template : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 TextBlock \u00b6 A standard abstract text block object in Notion. ToDo \u00b6 A todo list item in Notion. to_do : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Toggle \u00b6 A toggle list item in Notion. toggle : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 UnsupportedBlock \u00b6 A placeholder for unsupported blocks in the API. unsupported : _NestedData | None = None class-attribute instance-attribute \u00b6 Video \u00b6 A video block in Notion. video : SerializeAsAny [ FileObject ] = None class-attribute instance-attribute \u00b6 WithChildrenMixin \u00b6 Mixin for blocks that support children blocks.","title":"Blocks"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks","text":"Wrapper for Notion API blocks. Blocks are the base for all Notion content.","title":"blocks"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block","text":"A standard block object in Notion. Calling the block will expose the nested data in the object.","title":"Block"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark","text":"A bookmark block in Notion.","title":"Bookmark"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.bookmark","text":"","title":"bookmark"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb","text":"A breadcrumb block in Notion.","title":"Breadcrumb"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb.breadcrumb","text":"","title":"breadcrumb"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem","text":"A bulleted list item in Notion.","title":"BulletedListItem"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem.bulleted_list_item","text":"","title":"bulleted_list_item"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout","text":"A callout block in Notion.","title":"Callout"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout.callout","text":"","title":"callout"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase","text":"A child database block in Notion.","title":"ChildDatabase"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase.child_database","text":"","title":"child_database"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage","text":"A child page block in Notion.","title":"ChildPage"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage.child_page","text":"","title":"child_page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code","text":"A code block in Notion.","title":"Code"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.code","text":"","title":"code"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column","text":"A column block in Notion.","title":"Column"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.column","text":"","title":"column"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList","text":"A column list block in Notion.","title":"ColumnList"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList.column_list","text":"","title":"column_list"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject","text":"The base type for all Notion API records.","title":"DataObject"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.parent","text":"","title":"parent"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database","text":"A database record type.","title":"Database"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.public_url","text":"","title":"public_url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider","text":"A divider block in Notion.","title":"Divider"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider.divider","text":"","title":"divider"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed","text":"An embed block in Notion.","title":"Embed"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.embed","text":"","title":"embed"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation","text":"An equation block in Notion.","title":"Equation"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation.equation","text":"","title":"equation"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File","text":"A file block in Notion.","title":"File"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File.file","text":"","title":"file"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1","text":"A heading_1 block in Notion.","title":"Heading1"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1.heading_1","text":"","title":"heading_1"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2","text":"A heading_2 block in Notion.","title":"Heading2"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2.heading_2","text":"","title":"heading_2"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3","text":"A heading_3 block in Notion.","title":"Heading3"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3.heading_3","text":"","title":"heading_3"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image","text":"An image block in Notion.","title":"Image"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image.image","text":"","title":"image"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview","text":"A link_preview block in Notion.","title":"LinkPreview"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.link_preview","text":"","title":"link_preview"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage","text":"A link_to_page block in Notion.","title":"LinkToPage"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage.link_to_page","text":"","title":"link_to_page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem","text":"A numbered list item in Notion.","title":"NumberedListItem"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem.numbered_list_item","text":"","title":"numbered_list_item"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF","text":"A pdf block in Notion.","title":"PDF"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF.pdf","text":"","title":"pdf"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page","text":"A standard Notion page object.","title":"Page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.public_url","text":"","title":"public_url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph","text":"A paragraph block in Notion.","title":"Paragraph"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph.paragraph","text":"","title":"paragraph"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote","text":"A quote block in Notion.","title":"Quote"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote.quote","text":"","title":"quote"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock","text":"A synced_block block in Notion - either original or synced.","title":"SyncedBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.synced_block","text":"","title":"synced_block"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table","text":"A table block in Notion.","title":"Table"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.table","text":"","title":"table"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents","text":"A table_of_contents block in Notion.","title":"TableOfContents"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents.table_of_contents","text":"","title":"table_of_contents"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow","text":"A table_row block in Notion.","title":"TableRow"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.table_row","text":"","title":"table_row"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template","text":"A template block in Notion.","title":"Template"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template.template","text":"","title":"template"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock","text":"A standard abstract text block object in Notion.","title":"TextBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo","text":"A todo list item in Notion.","title":"ToDo"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.to_do","text":"","title":"to_do"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle","text":"A toggle list item in Notion.","title":"Toggle"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle.toggle","text":"","title":"toggle"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock","text":"A placeholder for unsupported blocks in the API.","title":"UnsupportedBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock.unsupported","text":"","title":"unsupported"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video","text":"A video block in Notion.","title":"Video"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video.video","text":"","title":"video"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.WithChildrenMixin","text":"Mixin for blocks that support children blocks.","title":"WithChildrenMixin"},{"location":"reference/ultimate_notion/obj_api/core/","text":"core \u00b6 Base classes for working with the Notion API. logger = logging . getLogger ( __name__ ) module-attribute \u00b6 GenericObject \u00b6 The base for all API objects. As a general convention, data fields in lower case are defined by the Notion API. Properties in Title Case are provided for convenience. __setattr__ ( name , value ) \u00b6 Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not support property setters. See samuelcolvin/pydantic#1577 Source code in src/ultimate_notion/obj_api/core.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not support property setters. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( object = self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err build ( * args , ** kwargs ) classmethod \u00b6 Use the standard constructur to build the instance. Will be overridden for more complex types Source code in src/ultimate_notion/obj_api/core.py @classmethod def build ( cls , * args , ** kwargs ): \"\"\"Use the standard constructur to build the instance. Will be overridden for more complex types\"\"\" return cls ( * args , ** kwargs ) serialize_for_api () \u00b6 Serialize the object for sending it to the Notion API Source code in src/ultimate_notion/obj_api/core.py def serialize_for_api ( self ): \"\"\"Serialize the object for sending it to the Notion API\"\"\" # TODO: read-only fields should not be sent to the API # https://github.com/jheddings/notional/issues/9 # the API doesn't like \"undefined\" values... return self . model_dump ( mode = 'json' , exclude_none = True , by_alias = True ) update ( ** data ) \u00b6 Update the internal attributes with new data. Source code in src/ultimate_notion/obj_api/core.py def update ( self , ** data ): \"\"\"Update the internal attributes with new data.\"\"\" new_obj_dct = self . model_dump () new_obj_dct . update ( data ) new_obj = self . model_validate ( new_obj_dct ) for k , v in new_obj . model_dump ( exclude_defaults = True ) . items (): logger . debug ( 'updating object data -- %s => %s ' , k , v ) setattr ( self , k , getattr ( new_obj , k )) return self NotionObject \u00b6 A top-level Notion API resource. id : UUID = None class-attribute instance-attribute \u00b6 object : str instance-attribute \u00b6 request_id : UUID = None class-attribute instance-attribute \u00b6 __init_subclass__ ( object = None , ** kwargs ) \u00b6 Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , object = None , ** kwargs ): # noqa: A002 super () . __init_subclass__ ( ** kwargs ) __pydantic_init_subclass__ ( object = None , ** kwargs ) classmethod \u00b6 Update GenericObject defaults for the named object. Needed since model_fields are not available during init_subclass See: pydantic/pydantic#5369 Source code in src/ultimate_notion/obj_api/core.py @classmethod def __pydantic_init_subclass__ ( cls , object = None , ** kwargs ): # noqa: A002, PLW3201 \"\"\"Update `GenericObject` defaults for the named object. Needed since `model_fields` are not available during __init_subclass__ See: https://github.com/pydantic/pydantic/issues/5369 \"\"\" super () . __pydantic_init_subclass__ ( ** kwargs ) if object is not None : # if None we inherit 'object' from the base class cls . _set_field_default ( 'object' , default = object ) TypedObject \u00b6 A type-referenced object. Many objects in the Notion API follow a standard pattern with a 'type' property followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. For example, this contains a nested 'detail' object: data = { type: \"detail\", ... detail: { ... } } Calling the object provides direct access to the data stored in {type} . type : str instance-attribute \u00b6 value property \u00b6 Return the nested object __init_subclass__ ( * , type : str | None = None , polymorphic_base : bool = False , ** kwargs ) \u00b6 Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , * , type : str | None = None , polymorphic_base : bool = False , ** kwargs ): # noqa: A002 cls . _polymorphic_base = polymorphic_base super () . __init_subclass__ ( ** kwargs ) __pydantic_init_subclass__ ( type : str | None = None , ** kwargs ) classmethod \u00b6 Register the subtypes of the TypedObject subclass. Needed since model_fields are not available during init_subclass . See: pydantic/pydantic#5369 Source code in src/ultimate_notion/obj_api/core.py @classmethod def __pydantic_init_subclass__ ( cls , type : str | None = None , ** kwargs ): # noqa: A002, PLW3201 \"\"\"Register the subtypes of the TypedObject subclass. Needed since `model_fields` are not available during __init_subclass__. See: https://github.com/pydantic/pydantic/issues/5369 \"\"\" super () . __pydantic_init_subclass__ ( ** kwargs ) type_name = cls . __name__ if type is None else type cls . _register_type ( type_name )","title":"Core"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core","text":"Base classes for working with the Notion API.","title":"core"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject","text":"The base for all API objects. As a general convention, data fields in lower case are defined by the Notion API. Properties in Title Case are provided for convenience.","title":"GenericObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.__setattr__","text":"Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not support property setters. See samuelcolvin/pydantic#1577 Source code in src/ultimate_notion/obj_api/core.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not support property setters. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( object = self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err","title":"__setattr__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.build","text":"Use the standard constructur to build the instance. Will be overridden for more complex types Source code in src/ultimate_notion/obj_api/core.py @classmethod def build ( cls , * args , ** kwargs ): \"\"\"Use the standard constructur to build the instance. Will be overridden for more complex types\"\"\" return cls ( * args , ** kwargs )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.serialize_for_api","text":"Serialize the object for sending it to the Notion API Source code in src/ultimate_notion/obj_api/core.py def serialize_for_api ( self ): \"\"\"Serialize the object for sending it to the Notion API\"\"\" # TODO: read-only fields should not be sent to the API # https://github.com/jheddings/notional/issues/9 # the API doesn't like \"undefined\" values... return self . model_dump ( mode = 'json' , exclude_none = True , by_alias = True )","title":"serialize_for_api()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.update","text":"Update the internal attributes with new data. Source code in src/ultimate_notion/obj_api/core.py def update ( self , ** data ): \"\"\"Update the internal attributes with new data.\"\"\" new_obj_dct = self . model_dump () new_obj_dct . update ( data ) new_obj = self . model_validate ( new_obj_dct ) for k , v in new_obj . model_dump ( exclude_defaults = True ) . items (): logger . debug ( 'updating object data -- %s => %s ' , k , v ) setattr ( self , k , getattr ( new_obj , k )) return self","title":"update()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject","text":"A top-level Notion API resource.","title":"NotionObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.object","text":"","title":"object"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.request_id","text":"","title":"request_id"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__init_subclass__","text":"Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , object = None , ** kwargs ): # noqa: A002 super () . __init_subclass__ ( ** kwargs )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__pydantic_init_subclass__","text":"Update GenericObject defaults for the named object. Needed since model_fields are not available during init_subclass See: pydantic/pydantic#5369 Source code in src/ultimate_notion/obj_api/core.py @classmethod def __pydantic_init_subclass__ ( cls , object = None , ** kwargs ): # noqa: A002, PLW3201 \"\"\"Update `GenericObject` defaults for the named object. Needed since `model_fields` are not available during __init_subclass__ See: https://github.com/pydantic/pydantic/issues/5369 \"\"\" super () . __pydantic_init_subclass__ ( ** kwargs ) if object is not None : # if None we inherit 'object' from the base class cls . _set_field_default ( 'object' , default = object )","title":"__pydantic_init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject","text":"A type-referenced object. Many objects in the Notion API follow a standard pattern with a 'type' property followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. For example, this contains a nested 'detail' object: data = { type: \"detail\", ... detail: { ... } } Calling the object provides direct access to the data stored in {type} .","title":"TypedObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.value","text":"Return the nested object","title":"value"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__init_subclass__","text":"Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , * , type : str | None = None , polymorphic_base : bool = False , ** kwargs ): # noqa: A002 cls . _polymorphic_base = polymorphic_base super () . __init_subclass__ ( ** kwargs )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__pydantic_init_subclass__","text":"Register the subtypes of the TypedObject subclass. Needed since model_fields are not available during init_subclass . See: pydantic/pydantic#5369 Source code in src/ultimate_notion/obj_api/core.py @classmethod def __pydantic_init_subclass__ ( cls , type : str | None = None , ** kwargs ): # noqa: A002, PLW3201 \"\"\"Register the subtypes of the TypedObject subclass. Needed since `model_fields` are not available during __init_subclass__. See: https://github.com/pydantic/pydantic/issues/5369 \"\"\" super () . __pydantic_init_subclass__ ( ** kwargs ) type_name = cls . __name__ if type is None else type cls . _register_type ( type_name )","title":"__pydantic_init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/endpoints/","text":"endpoints \u00b6 Provides an object-based Notion API with all endpoints This pydantic based API is often referred to as just api while the low-level API of the Notion Client SDK library is just referred to as raw_api . logger = logging . getLogger ( __name__ ) module-attribute \u00b6 BlocksEndpoint ( * args , ** kwargs ) \u00b6 Notional interface to the API 'blocks' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs ) children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs ) instance-attribute \u00b6 raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. ChildrenEndpoint ( api : NotionAPI ) \u00b6 Notional interface to the API 'blocks/children' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. append ( parent , * blocks : Block ) \u00b6 Add the given blocks as children of the specified parent. The blocks info will be updated based on returned data. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def append ( self , parent , * blocks : Block ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be updated based on returned data. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference . build ( parent ) . id children = [ block . serialize_for_api () for block in blocks if block is not None ] logger . info ( 'Appending %d blocks to %s ...' , len ( children ), parent_id ) data = self . raw_api . append ( block_id = parent_id , children = children ) if 'results' in data : if len ( blocks ) == len ( data [ 'results' ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ 'results' ][ idx ] block . update ( ** result ) else : logger . warning ( 'Unable to update results; size mismatch' ) else : logger . warning ( 'Unable to update results; not provided' ) return parent as_list ( parent ) \u00b6 Return all Blocks contained by the specified parent. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def as_list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference . build ( parent ) . id logger . info ( 'Listing blocks for %s ...' , parent_id ) blocks = EndpointIterator ( endpoint = self . raw_api . list ) return blocks ( block_id = parent_id ) delete ( block ) \u00b6 Delete (archive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Deleting block :: %s ' , block_id ) data = self . raw_api . delete ( block_id ) return Block . model_validate ( data ) restore ( block ) \u00b6 Restore (unarchive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Restoring block :: %s ' , block_id ) data = self . raw_api . update ( block_id , archived = False ) return Block . model_validate ( data ) retrieve ( block ) \u00b6 Return the requested Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , block ): \"\"\"Return the requested Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Retrieving block :: %s ' , block_id ) data = self . raw_api . retrieve ( block_id ) return Block . model_validate ( data ) update ( block : Block ) \u00b6 Update the block content on the server. The block info will be updated to the latest version from the server. Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , block : Block ): \"\"\"Update the block content on the server. The block info will be updated to the latest version from the server. \"\"\" logger . info ( 'Updating block :: %s ' , block . id ) data = self . raw_api . update ( block . id . hex , ** block . serialize_for_api ()) return block . update ( ** data ) DatabasesEndpoint ( api : NotionAPI ) \u00b6 Notional interface to the API 'databases' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. create ( parent , schema : dict [ str , PropertyType ], title = None ) \u00b6 Add a database to the given Page parent. parent may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def create ( self , parent , schema : dict [ str , PropertyType ], title = None ): \"\"\"Add a database to the given Page parent. `parent` may be any suitable `PageRef` type. \"\"\" parent_ref = PageRef . build ( parent ) logger . info ( 'Creating database @ %s - %s ' , parent_ref . page_id , title ) request = self . _build_request ( parent_ref , schema , title ) data = self . raw_api . create ( ** request ) return Database . model_validate ( data ) delete ( dbref ) \u00b6 Delete (archive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , dbref ): \"\"\"Delete (archive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Deleting database :: %s ' , dbid ) return self . api . blocks . delete ( dbid ) query ( target ) \u00b6 Initialize a new Query object with the target data class. :param target: either a DatabaseRef type or an ORM class Source code in src/ultimate_notion/obj_api/endpoints.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a `DatabaseRef` type or an ORM class \"\"\" cls = None dbid = DatabaseRef . build ( target ) . database_id logger . info ( 'Initializing database query :: { %s } [ %s ]' , dbid , cls ) return QueryBuilder ( endpoint = self . raw_api . query , datatype = cls , database_id = dbid ) restore ( dbref ) \u00b6 Restore (unarchive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , dbref ): \"\"\"Restore (unarchive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Restoring database :: %s ' , dbid ) return self . api . blocks . restore ( dbid ) retrieve ( dbref ) \u00b6 Return the Database with the given ID. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , dbref ): \"\"\"Return the Database with the given ID. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Retrieving database :: %s ' , dbid ) data = self . raw_api . retrieve ( dbid ) return Database . model_validate ( data ) update ( db_ref : Database | str | UUID , title : list [ RichTextObject ] | None = None , description : list [ RichTextObject ] | None = None , schema : dict [ str , PropertyType ] | None = None ) \u00b6 Update the Database object on the server. The database info will be updated to the latest version from the server. API reference: https://developers.notion.com/reference/update-a-database Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , db_ref : Database | str | UUID , title : list [ RichTextObject ] | None = None , description : list [ RichTextObject ] | None = None , schema : dict [ str , PropertyType ] | None = None , ): \"\"\"Update the Database object on the server. The database info will be updated to the latest version from the server. API reference: https://developers.notion.com/reference/update-a-database \"\"\" dbid = DatabaseRef . build ( db_ref ) . database_id logger . info ( 'Updating database info :: %s ' , dbid ) request = self . _build_request ( schema = schema , title = title , description = description ) if request : # https://github.com/ramnes/notion-sdk-py/blob/main/notion_client/api_endpoints.py data = self . raw_api . update ( dbid , ** request ) if isinstance ( db_ref , Database ): db_ref = db_ref . update ( ** data ) return db_ref Endpoint ( api : NotionAPI ) \u00b6 Notional wrapper for the API endpoints. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api api = api instance-attribute \u00b6 NotionAPI ( client ) \u00b6 Object-based Notion API (pydantic) with all endpoints Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , client ): self . client = client self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = client instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 PagesEndpoint ( * args , ** kwargs ) \u00b6 Notional interface to the API 'pages' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `pages` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . properties = PagesEndpoint . PropertiesEndpoint ( * args , ** kwargs ) properties = PagesEndpoint . PropertiesEndpoint ( * args , ** kwargs ) instance-attribute \u00b6 raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. PropertiesEndpoint ( api : NotionAPI ) \u00b6 Notional interface to the API 'pages/properties' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. retrieve ( page_id , property_id ) \u00b6 Return the Property on a specific Page with the given ID. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , page_id , property_id ): \"\"\"Return the Property on a specific Page with the given ID.\"\"\" logger . info ( 'Retrieving property :: %s [ %s ]' , property_id , page_id ) data = self . raw_api . retrieve ( page_id , property_id ) # TODO should PropertyListItem return an iterator instead? return TypeAdapter ( PropertyItem | PropertyItemList ) . validate_python ( data ) create ( parent , title : Title | None = None , properties = None , children = None ) \u00b6 Add a page to the given parent (Page or Database). parent may be a ParentRef , Page , or Database object. Source code in src/ultimate_notion/obj_api/endpoints.py def create ( self , parent , title : Title | None = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database). `parent` may be a `ParentRef`, `Page`, or `Database` object. \"\"\" if parent is None : msg = \"'parent' must be provided\" raise ValueError ( msg ) if isinstance ( parent , Page ): parent = PageRef . build ( parent ) elif isinstance ( parent , Database ): parent = DatabaseRef . build ( parent ) elif not isinstance ( parent , ParentRef ): msg = \"Unsupported 'parent'\" raise ValueError ( msg ) request = { 'parent' : parent . serialize_for_api ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ 'title' ] = title request [ 'properties' ] = { name : prop . serialize_for_api () if prop is not None else None for name , prop in properties . items () } if children is not None : request [ 'children' ] = [ child . serialize_for_api () for child in children if child is not None ] logger . info ( 'Creating page :: %s => %s ' , parent , title ) data = self . raw_api . create ( ** request ) return Page . model_validate ( data ) delete ( page ) \u00b6 Delete (archive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set_attr ( page , archived = True ) restore ( page ) \u00b6 Restore (unarchive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set_attr ( page , archived = False ) retrieve ( page ) \u00b6 Return the requested Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , page ): \"\"\"Return the requested Page. `page` may be any suitable `PageRef` type. \"\"\" page_id = PageRef . build ( page ) . page_id logger . info ( 'Retrieving page :: %s ' , page_id ) data = self . raw_api . retrieve ( page_id ) # ToDo: would it make sense to (optionally) expand the full properties here? # e.g. call the PropertiesEndpoint to make sure all data is retrieved return Page . model_validate ( data ) set_attr ( page , * , cover = False , icon = False , archived = None ) \u00b6 Set specific page attributes (such as cover, icon, etc.) on the server. page may be any suitable PageRef type. To remove an attribute, set its value to None. Source code in src/ultimate_notion/obj_api/endpoints.py def set_attr ( self , page , * , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc.) on the server. `page` may be any suitable `PageRef` type. To remove an attribute, set its value to None. \"\"\" page_id = PageRef . build ( page ) . page_id props = {} if cover is None : logger . info ( 'Removing page cover :: %s ' , page_id ) props [ 'cover' ] = {} elif cover is not False : logger . info ( 'Setting page cover :: %s => %s ' , page_id , cover ) props [ 'cover' ] = cover . serialize_for_api () if icon is None : logger . info ( 'Removing page icon :: %s ' , page_id ) props [ 'icon' ] = {} elif icon is not False : logger . info ( 'Setting page icon :: %s => %s ' , page_id , icon ) props [ 'icon' ] = icon . serialize_for_api () if archived is False : logger . info ( 'Restoring page :: %s ' , page_id ) props [ 'archived' ] = False elif archived is True : logger . info ( 'Archiving page :: %s ' , page_id ) props [ 'archived' ] = True data = self . raw_api . update ( page_id . hex , ** props ) return page . update ( ** data ) update ( page : Page , ** properties ) \u00b6 Update the Page object properties on the server. An optional properties may be specified as \"name\" : PropertyValue pairs. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. The page info will be updated to the latest version from the server. Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , page : Page , ** properties ): \"\"\"Update the Page object properties on the server. An optional `properties` may be specified as `\"name\"`: `PropertyValue` pairs. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. The page info will be updated to the latest version from the server. \"\"\" logger . info ( 'Updating page info :: %s ' , page . id ) if not properties : properties = page . properties props = { name : value . serialize_for_api () if value is not None else None for name , value in properties . items ()} data = self . raw_api . update ( page . id . hex , properties = props ) return page . update ( ** data ) SearchEndpoint ( api : NotionAPI ) \u00b6 Notional interface to the API 'search' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api __call__ ( text = None ) \u00b6 Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in src/ultimate_notion/obj_api/endpoints.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ 'query' ] = text return QueryBuilder ( endpoint = self . api . client . search , ** params ) SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message..\"\"\" super () . __init__ ( message ) UsersEndpoint ( api : NotionAPI ) \u00b6 Notional interface to the API 'users' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api raw_api property \u00b6 Return the underlying endpoint in the Notion SDK. as_list () \u00b6 Return an iterator for all users in the workspace. Source code in src/ultimate_notion/obj_api/endpoints.py def as_list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" logger . info ( 'Listing known users...' ) users = EndpointIterator ( endpoint = self . raw_api . list ) return users () me () \u00b6 Return the current bot User. Source code in src/ultimate_notion/obj_api/endpoints.py def me ( self ): \"\"\"Return the current bot User.\"\"\" logger . info ( 'Retrieving current integration bot' ) data = self . raw_api . me () return User . model_validate ( data ) retrieve ( user_id ) \u00b6 Return the User with the given ID. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" logger . info ( 'Retrieving user :: %s ' , user_id ) data = self . raw_api . retrieve ( user_id ) return User . model_validate ( data )","title":"Endpoints"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints","text":"Provides an object-based Notion API with all endpoints This pydantic based API is often referred to as just api while the low-level API of the Notion Client SDK library is just referred to as raw_api .","title":"endpoints"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint","text":"Notional interface to the API 'blocks' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs )","title":"BlocksEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.children","text":"","title":"children"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint","text":"Notional interface to the API 'blocks/children' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"ChildrenEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.append","text":"Add the given blocks as children of the specified parent. The blocks info will be updated based on returned data. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def append ( self , parent , * blocks : Block ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be updated based on returned data. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference . build ( parent ) . id children = [ block . serialize_for_api () for block in blocks if block is not None ] logger . info ( 'Appending %d blocks to %s ...' , len ( children ), parent_id ) data = self . raw_api . append ( block_id = parent_id , children = children ) if 'results' in data : if len ( blocks ) == len ( data [ 'results' ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ 'results' ][ idx ] block . update ( ** result ) else : logger . warning ( 'Unable to update results; size mismatch' ) else : logger . warning ( 'Unable to update results; not provided' ) return parent","title":"append()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.as_list","text":"Return all Blocks contained by the specified parent. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def as_list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference . build ( parent ) . id logger . info ( 'Listing blocks for %s ...' , parent_id ) blocks = EndpointIterator ( endpoint = self . raw_api . list ) return blocks ( block_id = parent_id )","title":"as_list()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.delete","text":"Delete (archive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Deleting block :: %s ' , block_id ) data = self . raw_api . delete ( block_id ) return Block . model_validate ( data )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.restore","text":"Restore (unarchive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Restoring block :: %s ' , block_id ) data = self . raw_api . update ( block_id , archived = False ) return Block . model_validate ( data )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.retrieve","text":"Return the requested Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , block ): \"\"\"Return the requested Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference . build ( block ) . id logger . info ( 'Retrieving block :: %s ' , block_id ) data = self . raw_api . retrieve ( block_id ) return Block . model_validate ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.update","text":"Update the block content on the server. The block info will be updated to the latest version from the server. Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , block : Block ): \"\"\"Update the block content on the server. The block info will be updated to the latest version from the server. \"\"\" logger . info ( 'Updating block :: %s ' , block . id ) data = self . raw_api . update ( block . id . hex , ** block . serialize_for_api ()) return block . update ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint","text":"Notional interface to the API 'databases' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"DatabasesEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.create","text":"Add a database to the given Page parent. parent may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def create ( self , parent , schema : dict [ str , PropertyType ], title = None ): \"\"\"Add a database to the given Page parent. `parent` may be any suitable `PageRef` type. \"\"\" parent_ref = PageRef . build ( parent ) logger . info ( 'Creating database @ %s - %s ' , parent_ref . page_id , title ) request = self . _build_request ( parent_ref , schema , title ) data = self . raw_api . create ( ** request ) return Database . model_validate ( data )","title":"create()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.delete","text":"Delete (archive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , dbref ): \"\"\"Delete (archive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Deleting database :: %s ' , dbid ) return self . api . blocks . delete ( dbid )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.query","text":"Initialize a new Query object with the target data class. :param target: either a DatabaseRef type or an ORM class Source code in src/ultimate_notion/obj_api/endpoints.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a `DatabaseRef` type or an ORM class \"\"\" cls = None dbid = DatabaseRef . build ( target ) . database_id logger . info ( 'Initializing database query :: { %s } [ %s ]' , dbid , cls ) return QueryBuilder ( endpoint = self . raw_api . query , datatype = cls , database_id = dbid )","title":"query()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.restore","text":"Restore (unarchive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , dbref ): \"\"\"Restore (unarchive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Restoring database :: %s ' , dbid ) return self . api . blocks . restore ( dbid )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.retrieve","text":"Return the Database with the given ID. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , dbref ): \"\"\"Return the Database with the given ID. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef . build ( dbref ) . database_id logger . info ( 'Retrieving database :: %s ' , dbid ) data = self . raw_api . retrieve ( dbid ) return Database . model_validate ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.update","text":"Update the Database object on the server. The database info will be updated to the latest version from the server. API reference: https://developers.notion.com/reference/update-a-database Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , db_ref : Database | str | UUID , title : list [ RichTextObject ] | None = None , description : list [ RichTextObject ] | None = None , schema : dict [ str , PropertyType ] | None = None , ): \"\"\"Update the Database object on the server. The database info will be updated to the latest version from the server. API reference: https://developers.notion.com/reference/update-a-database \"\"\" dbid = DatabaseRef . build ( db_ref ) . database_id logger . info ( 'Updating database info :: %s ' , dbid ) request = self . _build_request ( schema = schema , title = title , description = description ) if request : # https://github.com/ramnes/notion-sdk-py/blob/main/notion_client/api_endpoints.py data = self . raw_api . update ( dbid , ** request ) if isinstance ( db_ref , Database ): db_ref = db_ref . update ( ** data ) return db_ref","title":"update()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint","text":"Notional wrapper for the API endpoints. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"Endpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint.api","text":"","title":"api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI","text":"Object-based Notion API (pydantic) with all endpoints Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , client ): self . client = client self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self )","title":"NotionAPI"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.client","text":"","title":"client"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.search","text":"","title":"search"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.users","text":"","title":"users"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint","text":"Notional interface to the API 'pages' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `pages` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . properties = PagesEndpoint . PropertiesEndpoint ( * args , ** kwargs )","title":"PagesEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint","text":"Notional interface to the API 'pages/properties' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"PropertiesEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.retrieve","text":"Return the Property on a specific Page with the given ID. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , page_id , property_id ): \"\"\"Return the Property on a specific Page with the given ID.\"\"\" logger . info ( 'Retrieving property :: %s [ %s ]' , property_id , page_id ) data = self . raw_api . retrieve ( page_id , property_id ) # TODO should PropertyListItem return an iterator instead? return TypeAdapter ( PropertyItem | PropertyItemList ) . validate_python ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.create","text":"Add a page to the given parent (Page or Database). parent may be a ParentRef , Page , or Database object. Source code in src/ultimate_notion/obj_api/endpoints.py def create ( self , parent , title : Title | None = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database). `parent` may be a `ParentRef`, `Page`, or `Database` object. \"\"\" if parent is None : msg = \"'parent' must be provided\" raise ValueError ( msg ) if isinstance ( parent , Page ): parent = PageRef . build ( parent ) elif isinstance ( parent , Database ): parent = DatabaseRef . build ( parent ) elif not isinstance ( parent , ParentRef ): msg = \"Unsupported 'parent'\" raise ValueError ( msg ) request = { 'parent' : parent . serialize_for_api ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ 'title' ] = title request [ 'properties' ] = { name : prop . serialize_for_api () if prop is not None else None for name , prop in properties . items () } if children is not None : request [ 'children' ] = [ child . serialize_for_api () for child in children if child is not None ] logger . info ( 'Creating page :: %s => %s ' , parent , title ) data = self . raw_api . create ( ** request ) return Page . model_validate ( data )","title":"create()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.delete","text":"Delete (archive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set_attr ( page , archived = True )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.restore","text":"Restore (unarchive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set_attr ( page , archived = False )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.retrieve","text":"Return the requested Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , page ): \"\"\"Return the requested Page. `page` may be any suitable `PageRef` type. \"\"\" page_id = PageRef . build ( page ) . page_id logger . info ( 'Retrieving page :: %s ' , page_id ) data = self . raw_api . retrieve ( page_id ) # ToDo: would it make sense to (optionally) expand the full properties here? # e.g. call the PropertiesEndpoint to make sure all data is retrieved return Page . model_validate ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.set_attr","text":"Set specific page attributes (such as cover, icon, etc.) on the server. page may be any suitable PageRef type. To remove an attribute, set its value to None. Source code in src/ultimate_notion/obj_api/endpoints.py def set_attr ( self , page , * , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc.) on the server. `page` may be any suitable `PageRef` type. To remove an attribute, set its value to None. \"\"\" page_id = PageRef . build ( page ) . page_id props = {} if cover is None : logger . info ( 'Removing page cover :: %s ' , page_id ) props [ 'cover' ] = {} elif cover is not False : logger . info ( 'Setting page cover :: %s => %s ' , page_id , cover ) props [ 'cover' ] = cover . serialize_for_api () if icon is None : logger . info ( 'Removing page icon :: %s ' , page_id ) props [ 'icon' ] = {} elif icon is not False : logger . info ( 'Setting page icon :: %s => %s ' , page_id , icon ) props [ 'icon' ] = icon . serialize_for_api () if archived is False : logger . info ( 'Restoring page :: %s ' , page_id ) props [ 'archived' ] = False elif archived is True : logger . info ( 'Archiving page :: %s ' , page_id ) props [ 'archived' ] = True data = self . raw_api . update ( page_id . hex , ** props ) return page . update ( ** data )","title":"set_attr()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.update","text":"Update the Page object properties on the server. An optional properties may be specified as \"name\" : PropertyValue pairs. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. The page info will be updated to the latest version from the server. Source code in src/ultimate_notion/obj_api/endpoints.py def update ( self , page : Page , ** properties ): \"\"\"Update the Page object properties on the server. An optional `properties` may be specified as `\"name\"`: `PropertyValue` pairs. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. The page info will be updated to the latest version from the server. \"\"\" logger . info ( 'Updating page info :: %s ' , page . id ) if not properties : properties = page . properties props = { name : value . serialize_for_api () if value is not None else None for name , value in properties . items ()} data = self . raw_api . update ( page . id . hex , properties = props ) return page . update ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint","text":"Notional interface to the API 'search' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"SearchEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint.__call__","text":"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in src/ultimate_notion/obj_api/endpoints.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ 'query' ] = text return QueryBuilder ( endpoint = self . api . client . search , ** params )","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SessionError","text":"Raised when there are issues with the Notion session. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message..\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint","text":"Notional interface to the API 'users' endpoint. Source code in src/ultimate_notion/obj_api/endpoints.py def __init__ ( self , api : NotionAPI ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . api = api","title":"UsersEndpoint"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.raw_api","text":"Return the underlying endpoint in the Notion SDK.","title":"raw_api"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.as_list","text":"Return an iterator for all users in the workspace. Source code in src/ultimate_notion/obj_api/endpoints.py def as_list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" logger . info ( 'Listing known users...' ) users = EndpointIterator ( endpoint = self . raw_api . list ) return users ()","title":"as_list()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.me","text":"Return the current bot User. Source code in src/ultimate_notion/obj_api/endpoints.py def me ( self ): \"\"\"Return the current bot User.\"\"\" logger . info ( 'Retrieving current integration bot' ) data = self . raw_api . me () return User . model_validate ( data )","title":"me()"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.retrieve","text":"Return the User with the given ID. Source code in src/ultimate_notion/obj_api/endpoints.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" logger . info ( 'Retrieving user :: %s ' , user_id ) data = self . raw_api . retrieve ( user_id ) return User . model_validate ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/enums/","text":"enums \u00b6 All definitions and enumerations CodingLanguage \u00b6 Available coding languages. ABAP = 'abap' class-attribute instance-attribute \u00b6 ARDUINO = 'arduino' class-attribute instance-attribute \u00b6 BASH = 'bash' class-attribute instance-attribute \u00b6 BASIC = 'basic' class-attribute instance-attribute \u00b6 C = 'c' class-attribute instance-attribute \u00b6 CLOJURE = 'clojure' class-attribute instance-attribute \u00b6 COFFEESCRIPT = 'coffeescript' class-attribute instance-attribute \u00b6 CPP = 'c++' class-attribute instance-attribute \u00b6 CSHARP = 'c#' class-attribute instance-attribute \u00b6 CSS = 'css' class-attribute instance-attribute \u00b6 DART = 'dart' class-attribute instance-attribute \u00b6 DIFF = 'diff' class-attribute instance-attribute \u00b6 DOCKER = 'docker' class-attribute instance-attribute \u00b6 ELIXIR = 'elixir' class-attribute instance-attribute \u00b6 ELM = 'elm' class-attribute instance-attribute \u00b6 ERLANG = 'erlang' class-attribute instance-attribute \u00b6 FLOW = 'flow' class-attribute instance-attribute \u00b6 FORTRAN = 'fortran' class-attribute instance-attribute \u00b6 FSHARP = 'f#' class-attribute instance-attribute \u00b6 GHERKIN = 'gherkin' class-attribute instance-attribute \u00b6 GLSL = 'glsl' class-attribute instance-attribute \u00b6 GO = 'go' class-attribute instance-attribute \u00b6 GRAPHQL = 'graphql' class-attribute instance-attribute \u00b6 GROOVY = 'groovy' class-attribute instance-attribute \u00b6 HASKELL = 'haskell' class-attribute instance-attribute \u00b6 HTML = 'html' class-attribute instance-attribute \u00b6 JAVA = 'java' class-attribute instance-attribute \u00b6 JAVASCRIPT = 'javascript' class-attribute instance-attribute \u00b6 JSON = 'json' class-attribute instance-attribute \u00b6 JULIA = 'julia' class-attribute instance-attribute \u00b6 KOTLIN = 'kotlin' class-attribute instance-attribute \u00b6 LATEX = 'latex' class-attribute instance-attribute \u00b6 LESS = 'less' class-attribute instance-attribute \u00b6 LISP = 'lisp' class-attribute instance-attribute \u00b6 LIVESCRIPT = 'livescript' class-attribute instance-attribute \u00b6 LUA = 'lua' class-attribute instance-attribute \u00b6 MAKEFILE = 'makefile' class-attribute instance-attribute \u00b6 MARKDOWN = 'markdown' class-attribute instance-attribute \u00b6 MARKUP = 'markup' class-attribute instance-attribute \u00b6 MATLAB = 'matlab' class-attribute instance-attribute \u00b6 MERMAID = 'mermaid' class-attribute instance-attribute \u00b6 MISC = 'java/c/c++/c#' class-attribute instance-attribute \u00b6 NIX = 'nix' class-attribute instance-attribute \u00b6 OBJECTIVE_C = 'objective-c' class-attribute instance-attribute \u00b6 OCAML = 'ocaml' class-attribute instance-attribute \u00b6 PASCAL = 'pascal' class-attribute instance-attribute \u00b6 PERL = 'perl' class-attribute instance-attribute \u00b6 PHP = 'php' class-attribute instance-attribute \u00b6 PLAIN_TEXT = 'plain text' class-attribute instance-attribute \u00b6 POWERSHELL = 'powershell' class-attribute instance-attribute \u00b6 PROLOG = 'prolog' class-attribute instance-attribute \u00b6 PROTOBUF = 'protobuf' class-attribute instance-attribute \u00b6 PYTHON = 'python' class-attribute instance-attribute \u00b6 R = 'r' class-attribute instance-attribute \u00b6 REASON = 'reason' class-attribute instance-attribute \u00b6 RUBY = 'ruby' class-attribute instance-attribute \u00b6 RUST = 'rust' class-attribute instance-attribute \u00b6 SASS = 'sass' class-attribute instance-attribute \u00b6 SCALA = 'scala' class-attribute instance-attribute \u00b6 SCHEME = 'scheme' class-attribute instance-attribute \u00b6 SCSS = 'scss' class-attribute instance-attribute \u00b6 SHELL = 'shell' class-attribute instance-attribute \u00b6 SQL = 'sql' class-attribute instance-attribute \u00b6 SWIFT = 'swift' class-attribute instance-attribute \u00b6 TYPESCRIPT = 'typescript' class-attribute instance-attribute \u00b6 VB_NET = 'vb.net' class-attribute instance-attribute \u00b6 VERILOG = 'verilog' class-attribute instance-attribute \u00b6 VHDL = 'vhdl' class-attribute instance-attribute \u00b6 VISUAL_BASIC = 'visual basic' class-attribute instance-attribute \u00b6 WEBASSEMBLY = 'webassembly' class-attribute instance-attribute \u00b6 XML = 'xml' class-attribute instance-attribute \u00b6 YAML = 'yaml' class-attribute instance-attribute \u00b6 Color \u00b6 Basic color values. BLUE = 'blue' class-attribute instance-attribute \u00b6 BROWN = 'brown' class-attribute instance-attribute \u00b6 DEFAULT = 'default' class-attribute instance-attribute \u00b6 GRAY = 'gray' class-attribute instance-attribute \u00b6 GREEN = 'green' class-attribute instance-attribute \u00b6 ORANGE = 'orange' class-attribute instance-attribute \u00b6 PINK = 'pink' class-attribute instance-attribute \u00b6 PURPLE = 'purple' class-attribute instance-attribute \u00b6 RED = 'red' class-attribute instance-attribute \u00b6 YELLOW = 'yellow' class-attribute instance-attribute \u00b6 FullColor \u00b6 Extended color values, including backgrounds. BLUE = 'blue' class-attribute instance-attribute \u00b6 BLUE_BACKGROUND = 'blue_background' class-attribute instance-attribute \u00b6 BROWN = 'brown' class-attribute instance-attribute \u00b6 BROWN_BACKGROUND = 'brown_background' class-attribute instance-attribute \u00b6 DEFAULT = 'default' class-attribute instance-attribute \u00b6 GRAY = 'gray' class-attribute instance-attribute \u00b6 GRAY_BACKGROUND = 'gray_background' class-attribute instance-attribute \u00b6 GREEN = 'green' class-attribute instance-attribute \u00b6 GREEN_BACKGROUND = 'green_background' class-attribute instance-attribute \u00b6 ORANGE = 'orange' class-attribute instance-attribute \u00b6 ORANGE_BACKGROUND = 'orange_background' class-attribute instance-attribute \u00b6 PINK = 'pink' class-attribute instance-attribute \u00b6 PINK_BACKGROUND = 'pink_background' class-attribute instance-attribute \u00b6 PURPLE = 'purple' class-attribute instance-attribute \u00b6 PURPLE_BACKGROUND = 'purple_background' class-attribute instance-attribute \u00b6 RED = 'red' class-attribute instance-attribute \u00b6 RED_BACKGROUND = 'red_background' class-attribute instance-attribute \u00b6 YELLOW = 'yellow' class-attribute instance-attribute \u00b6 YELLOW_BACKGROUND = 'yellow_background' class-attribute instance-attribute \u00b6 Function \u00b6 Standard aggregation functions. AVERAGE = 'average' class-attribute instance-attribute \u00b6 CHECKED = 'checked' class-attribute instance-attribute \u00b6 COUNT = 'count' class-attribute instance-attribute \u00b6 COUNT_PER_GROUP = 'count_per_group' class-attribute instance-attribute \u00b6 COUNT_VALUES = 'count_values' class-attribute instance-attribute \u00b6 DATE_RANGE = 'date_range' class-attribute instance-attribute \u00b6 EARLIEST_DATE = 'earliest_date' class-attribute instance-attribute \u00b6 EMPTY = 'empty' class-attribute instance-attribute \u00b6 LATEST_DATE = 'latest_date' class-attribute instance-attribute \u00b6 MAX = 'max' class-attribute instance-attribute \u00b6 MEDIAN = 'median' class-attribute instance-attribute \u00b6 MIN = 'min' class-attribute instance-attribute \u00b6 NOT_EMPTY = 'not_empty' class-attribute instance-attribute \u00b6 PERCENT_CHECKED = 'percent_checked' class-attribute instance-attribute \u00b6 PERCENT_EMPTY = 'percent_empty' class-attribute instance-attribute \u00b6 PERCENT_NOT_EMPTY = 'percent_not_empty' class-attribute instance-attribute \u00b6 PERCENT_PER_GROUP = 'percent_per_group' class-attribute instance-attribute \u00b6 RANGE = 'range' class-attribute instance-attribute \u00b6 SHOW_ORIGINAL = 'show_original' class-attribute instance-attribute \u00b6 SHOW_UNIQUE = 'show_unique' class-attribute instance-attribute \u00b6 SUM = 'sum' class-attribute instance-attribute \u00b6 UNCHECKED = 'unchecked' class-attribute instance-attribute \u00b6 UNIQUE = 'unique' class-attribute instance-attribute \u00b6 NumberFormat \u00b6 Available number formats in Notion. ARGENTINE_PESO = 'argentine_peso' class-attribute instance-attribute \u00b6 BAHT = 'baht' class-attribute instance-attribute \u00b6 CANADIAN_DOLLAR = 'canadian_dollar' class-attribute instance-attribute \u00b6 CHILEAN_PESO = 'chilean_peso' class-attribute instance-attribute \u00b6 COLOMBIAN_PESO = 'colombian_peso' class-attribute instance-attribute \u00b6 DANISH_KRONE = 'danish_krone' class-attribute instance-attribute \u00b6 DIRHAM = 'dirham' class-attribute instance-attribute \u00b6 DOLLAR = 'dollar' class-attribute instance-attribute \u00b6 EURO = 'euro' class-attribute instance-attribute \u00b6 FORINT = 'forint' class-attribute instance-attribute \u00b6 FRANC = 'franc' class-attribute instance-attribute \u00b6 HONG_KONG_DOLLAR = 'hong_kong_dollar' class-attribute instance-attribute \u00b6 KORUNA = 'koruna' class-attribute instance-attribute \u00b6 KRONA = 'krona' class-attribute instance-attribute \u00b6 LEU = 'leu' class-attribute instance-attribute \u00b6 LIRA = 'lira' class-attribute instance-attribute \u00b6 MEXICAN_PESO = 'mexican_peso' class-attribute instance-attribute \u00b6 NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar' class-attribute instance-attribute \u00b6 NEW_ZEALAND_DOLLAR = 'new_zealand_dollar' class-attribute instance-attribute \u00b6 NORWEGIAN_KRONE = 'norwegian_krone' class-attribute instance-attribute \u00b6 NUMBER = 'number' class-attribute instance-attribute \u00b6 NUMBER_WITH_COMMAS = 'number_with_commas' class-attribute instance-attribute \u00b6 PERCENT = 'percent' class-attribute instance-attribute \u00b6 PHILIPPINE_PESO = 'philippine_peso' class-attribute instance-attribute \u00b6 POUND = 'pound' class-attribute instance-attribute \u00b6 RAND = 'rand' class-attribute instance-attribute \u00b6 REAL = 'real' class-attribute instance-attribute \u00b6 RINGGIT = 'ringgit' class-attribute instance-attribute \u00b6 RIYAL = 'riyal' class-attribute instance-attribute \u00b6 RUBLE = 'ruble' class-attribute instance-attribute \u00b6 RUPEE = 'rupee' class-attribute instance-attribute \u00b6 RUPIAH = 'rupiah' class-attribute instance-attribute \u00b6 SHEKEL = 'shekel' class-attribute instance-attribute \u00b6 URUGUAYAN_PESO = 'uruguayan_peso' class-attribute instance-attribute \u00b6 WON = 'won' class-attribute instance-attribute \u00b6 YEN = 'yen' class-attribute instance-attribute \u00b6 YUAN = 'yuan' class-attribute instance-attribute \u00b6 ZLOTY = 'zloty' class-attribute instance-attribute \u00b6 VerificationState \u00b6 Available verification states for pages in wiki databases UNVERIFIED = 'unverified' class-attribute instance-attribute \u00b6 VERIFIED = 'verified' class-attribute instance-attribute \u00b6","title":"Enums"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums","text":"All definitions and enumerations","title":"enums"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage","text":"Available coding languages.","title":"CodingLanguage"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.ABAP","text":"","title":"ABAP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.ARDUINO","text":"","title":"ARDUINO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.BASH","text":"","title":"BASH"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.BASIC","text":"","title":"BASIC"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.C","text":"","title":"C"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.CLOJURE","text":"","title":"CLOJURE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.COFFEESCRIPT","text":"","title":"COFFEESCRIPT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.CPP","text":"","title":"CPP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.CSHARP","text":"","title":"CSHARP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.CSS","text":"","title":"CSS"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.DART","text":"","title":"DART"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.DIFF","text":"","title":"DIFF"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.DOCKER","text":"","title":"DOCKER"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.ELIXIR","text":"","title":"ELIXIR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.ELM","text":"","title":"ELM"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.ERLANG","text":"","title":"ERLANG"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.FLOW","text":"","title":"FLOW"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.FORTRAN","text":"","title":"FORTRAN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.FSHARP","text":"","title":"FSHARP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.GHERKIN","text":"","title":"GHERKIN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.GLSL","text":"","title":"GLSL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.GO","text":"","title":"GO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.GRAPHQL","text":"","title":"GRAPHQL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.GROOVY","text":"","title":"GROOVY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.HASKELL","text":"","title":"HASKELL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.HTML","text":"","title":"HTML"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.JAVA","text":"","title":"JAVA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.JAVASCRIPT","text":"","title":"JAVASCRIPT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.JSON","text":"","title":"JSON"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.JULIA","text":"","title":"JULIA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.KOTLIN","text":"","title":"KOTLIN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.LATEX","text":"","title":"LATEX"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.LESS","text":"","title":"LESS"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.LISP","text":"","title":"LISP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.LIVESCRIPT","text":"","title":"LIVESCRIPT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.LUA","text":"","title":"LUA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MAKEFILE","text":"","title":"MAKEFILE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MARKDOWN","text":"","title":"MARKDOWN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MARKUP","text":"","title":"MARKUP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MATLAB","text":"","title":"MATLAB"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MERMAID","text":"","title":"MERMAID"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.MISC","text":"","title":"MISC"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.NIX","text":"","title":"NIX"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.OBJECTIVE_C","text":"","title":"OBJECTIVE_C"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.OCAML","text":"","title":"OCAML"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PASCAL","text":"","title":"PASCAL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PERL","text":"","title":"PERL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PHP","text":"","title":"PHP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PLAIN_TEXT","text":"","title":"PLAIN_TEXT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.POWERSHELL","text":"","title":"POWERSHELL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PROLOG","text":"","title":"PROLOG"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PROTOBUF","text":"","title":"PROTOBUF"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.PYTHON","text":"","title":"PYTHON"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.R","text":"","title":"R"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.REASON","text":"","title":"REASON"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.RUBY","text":"","title":"RUBY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.RUST","text":"","title":"RUST"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SASS","text":"","title":"SASS"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SCALA","text":"","title":"SCALA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SCHEME","text":"","title":"SCHEME"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SCSS","text":"","title":"SCSS"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SHELL","text":"","title":"SHELL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SQL","text":"","title":"SQL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.SWIFT","text":"","title":"SWIFT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.TYPESCRIPT","text":"","title":"TYPESCRIPT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.VB_NET","text":"","title":"VB_NET"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.VERILOG","text":"","title":"VERILOG"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.VHDL","text":"","title":"VHDL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.VISUAL_BASIC","text":"","title":"VISUAL_BASIC"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.WEBASSEMBLY","text":"","title":"WEBASSEMBLY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.XML","text":"","title":"XML"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodingLanguage.YAML","text":"","title":"YAML"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color","text":"Basic color values.","title":"Color"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor","text":"Extended color values, including backgrounds.","title":"FullColor"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.BLUE_BACKGROUND","text":"","title":"BLUE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.BROWN_BACKGROUND","text":"","title":"BROWN_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.GRAY_BACKGROUND","text":"","title":"GRAY_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.GREEN_BACKGROUND","text":"","title":"GREEN_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.ORANGE_BACKGROUND","text":"","title":"ORANGE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.PINK_BACKGROUND","text":"","title":"PINK_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.PURPLE_BACKGROUND","text":"","title":"PURPLE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.RED_BACKGROUND","text":"","title":"RED_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.FullColor.YELLOW_BACKGROUND","text":"","title":"YELLOW_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function","text":"Standard aggregation functions.","title":"Function"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.AVERAGE","text":"","title":"AVERAGE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.CHECKED","text":"","title":"CHECKED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.COUNT","text":"","title":"COUNT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.COUNT_PER_GROUP","text":"","title":"COUNT_PER_GROUP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.COUNT_VALUES","text":"","title":"COUNT_VALUES"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.DATE_RANGE","text":"","title":"DATE_RANGE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.EARLIEST_DATE","text":"","title":"EARLIEST_DATE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.EMPTY","text":"","title":"EMPTY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.LATEST_DATE","text":"","title":"LATEST_DATE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.MAX","text":"","title":"MAX"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.MEDIAN","text":"","title":"MEDIAN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.MIN","text":"","title":"MIN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.NOT_EMPTY","text":"","title":"NOT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.PERCENT_CHECKED","text":"","title":"PERCENT_CHECKED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.PERCENT_EMPTY","text":"","title":"PERCENT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.PERCENT_NOT_EMPTY","text":"","title":"PERCENT_NOT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.PERCENT_PER_GROUP","text":"","title":"PERCENT_PER_GROUP"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.RANGE","text":"","title":"RANGE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.SHOW_ORIGINAL","text":"","title":"SHOW_ORIGINAL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.SHOW_UNIQUE","text":"","title":"SHOW_UNIQUE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.SUM","text":"","title":"SUM"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.UNCHECKED","text":"","title":"UNCHECKED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Function.UNIQUE","text":"","title":"UNIQUE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat","text":"Available number formats in Notion.","title":"NumberFormat"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ARGENTINE_PESO","text":"","title":"ARGENTINE_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.BAHT","text":"","title":"BAHT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CANADIAN_DOLLAR","text":"","title":"CANADIAN_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CHILEAN_PESO","text":"","title":"CHILEAN_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.COLOMBIAN_PESO","text":"","title":"COLOMBIAN_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DANISH_KRONE","text":"","title":"DANISH_KRONE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DIRHAM","text":"","title":"DIRHAM"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DOLLAR","text":"","title":"DOLLAR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.EURO","text":"","title":"EURO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FORINT","text":"","title":"FORINT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FRANC","text":"","title":"FRANC"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.HONG_KONG_DOLLAR","text":"","title":"HONG_KONG_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KORUNA","text":"","title":"KORUNA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KRONA","text":"","title":"KRONA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LEU","text":"","title":"LEU"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LIRA","text":"","title":"LIRA"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.MEXICAN_PESO","text":"","title":"MEXICAN_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_TAIWAN_DOLLAR","text":"","title":"NEW_TAIWAN_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_ZEALAND_DOLLAR","text":"","title":"NEW_ZEALAND_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NORWEGIAN_KRONE","text":"","title":"NORWEGIAN_KRONE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER","text":"","title":"NUMBER"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER_WITH_COMMAS","text":"","title":"NUMBER_WITH_COMMAS"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PERCENT","text":"","title":"PERCENT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PHILIPPINE_PESO","text":"","title":"PHILIPPINE_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.POUND","text":"","title":"POUND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RAND","text":"","title":"RAND"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.REAL","text":"","title":"REAL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RINGGIT","text":"","title":"RINGGIT"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RIYAL","text":"","title":"RIYAL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUBLE","text":"","title":"RUBLE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPEE","text":"","title":"RUPEE"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPIAH","text":"","title":"RUPIAH"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.SHEKEL","text":"","title":"SHEKEL"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.URUGUAYAN_PESO","text":"","title":"URUGUAYAN_PESO"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.WON","text":"","title":"WON"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YEN","text":"","title":"YEN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YUAN","text":"","title":"YUAN"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ZLOTY","text":"","title":"ZLOTY"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VerificationState","text":"Available verification states for pages in wiki databases","title":"VerificationState"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VerificationState.UNVERIFIED","text":"","title":"UNVERIFIED"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VerificationState.VERIFIED","text":"","title":"VERIFIED"},{"location":"reference/ultimate_notion/obj_api/iterator/","text":"iterator \u00b6 Iterator classes for working with paginated API responses. MAX_PAGE_SIZE = 100 module-attribute \u00b6 logger = logging . getLogger ( __name__ ) module-attribute \u00b6 BlockList \u00b6 A list of Block objects returned by the Notion API. block : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 DatabaseList \u00b6 A list of Database objects returned by the Notion API. database : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 EndpointIterator ( endpoint , datatype = None ) \u00b6 Iterates over results from a paginated API response. These objects may be reused, however they are not thread safe. For example, after creating the following iterator: notion = notional.connect(auth=NOTION_AUTH_TOKEN) query = EndpointIterator(notion.databases().query) The iterator may be reused with different database ID's: for items in query(database_id=first_db): ... for items in query(database_id=second_db): ... Objects returned by the iterator may also be converted to a specific type. This is most commonly used to wrap API objects with a higher-level object (such as ORM types). If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the NotionObject contained in the ObjectList . Source code in src/ultimate_notion/obj_api/iterator.py def __init__ ( self , endpoint , datatype = None ): \"\"\"Initialize an object list iterator for the specified endpoint. If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the `NotionObject` contained in the `ObjectList`. \"\"\" self . _endpoint = endpoint self . _datatype = datatype self . has_more = None self . page_num = - 1 self . total_items = - 1 self . next_cursor = None has_more = None instance-attribute \u00b6 next_cursor = None instance-attribute \u00b6 page_num = - 1 instance-attribute \u00b6 total_items = - 1 instance-attribute \u00b6 __call__ ( ** kwargs ) \u00b6 Return a generator for this endpoint using the given parameters. Source code in src/ultimate_notion/obj_api/iterator.py def __call__ ( self , ** kwargs ): \"\"\"Return a generator for this endpoint using the given parameters.\"\"\" self . has_more = True self . page_num = 0 self . total_items = 0 if 'page_size' not in kwargs : kwargs [ 'page_size' ] = MAX_PAGE_SIZE self . next_cursor = kwargs . pop ( 'start_cursor' , None ) while self . has_more : self . page_num += 1 result_page = self . _endpoint ( start_cursor = self . next_cursor , ** kwargs ) api_list = ObjectList . model_validate ( result_page ) for obj in api_list . results : self . total_items += 1 if self . _datatype is None : yield obj else : yield self . _datatype ( obj ) self . next_cursor = api_list . next_cursor self . has_more = api_list . has_more and self . next_cursor is not None as_list ( ** kwargs ) \u00b6 Collect all items from the endpoint as a list. Source code in src/ultimate_notion/obj_api/iterator.py def as_list ( self , ** kwargs ): \"\"\"Collect all items from the endpoint as a list.\"\"\" items = [] for item in self ( ** kwargs ): items . append ( item ) return items ObjectList \u00b6 A paginated list of objects returned by the Notion API. More details in the Notion API . has_more : bool = False class-attribute instance-attribute \u00b6 next_cursor : str | None = None class-attribute instance-attribute \u00b6 results : list [ Annotated [ NotionObject , BeforeValidator ( convert_notion_object )]] = Field ( default_factory = list ) class-attribute instance-attribute \u00b6 PageList \u00b6 A list of Page objects returned by the Notion API. page : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 PageOrDatabaseList \u00b6 A list of Page or Database objects returned by the Notion API. page_or_database : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 PropertyItemList \u00b6 A paginated list of property items returned by the Notion API. Property item lists contain one or more pages of basic property items. These types do not typically match the schema for corresponding property values. property_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 UserList \u00b6 A list of User objects returned by the Notion API. user : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 convert_notion_object ( obj : NotionObject ) -> Block | Page | Database | PropertyItem | User | GenericObject \u00b6 Convert a Notion Object to a corresponding subtype. Used in the ObjectList below the convert the results from the Notion API. Source code in src/ultimate_notion/obj_api/iterator.py def convert_notion_object ( obj : NotionObject ) -> Block | Page | Database | PropertyItem | User | GenericObject : \"\"\"Convert a Notion Object to a corresponding subtype. Used in the ObjectList below the convert the results from the Notion API. \"\"\" if 'object' not in obj : msg = 'Unknown object in results' raise ValueError ( msg ) if obj [ 'object' ] == BlockList . build () . type : # .build() as the model is not constructed at that point. return Block . model_validate ( obj ) if obj [ 'object' ] == PageList . build () . type : return Page . model_validate ( obj ) if obj [ 'object' ] == DatabaseList . build () . type : return Database . model_validate ( obj ) if obj [ 'object' ] == PropertyItemList . build () . type : return PropertyItem . model_validate ( obj ) if obj [ 'object' ] == UserList . build () . type : return User . model_validate ( obj ) return GenericObject . model_validate ( obj )","title":"Iterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator","text":"Iterator classes for working with paginated API responses.","title":"iterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.MAX_PAGE_SIZE","text":"","title":"MAX_PAGE_SIZE"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList","text":"A list of Block objects returned by the Notion API.","title":"BlockList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList.block","text":"","title":"block"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList","text":"A list of Database objects returned by the Notion API.","title":"DatabaseList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList.database","text":"","title":"database"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator","text":"Iterates over results from a paginated API response. These objects may be reused, however they are not thread safe. For example, after creating the following iterator: notion = notional.connect(auth=NOTION_AUTH_TOKEN) query = EndpointIterator(notion.databases().query) The iterator may be reused with different database ID's: for items in query(database_id=first_db): ... for items in query(database_id=second_db): ... Objects returned by the iterator may also be converted to a specific type. This is most commonly used to wrap API objects with a higher-level object (such as ORM types). If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the NotionObject contained in the ObjectList . Source code in src/ultimate_notion/obj_api/iterator.py def __init__ ( self , endpoint , datatype = None ): \"\"\"Initialize an object list iterator for the specified endpoint. If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the `NotionObject` contained in the `ObjectList`. \"\"\" self . _endpoint = endpoint self . _datatype = datatype self . has_more = None self . page_num = - 1 self . total_items = - 1 self . next_cursor = None","title":"EndpointIterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.next_cursor","text":"","title":"next_cursor"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.page_num","text":"","title":"page_num"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.total_items","text":"","title":"total_items"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.__call__","text":"Return a generator for this endpoint using the given parameters. Source code in src/ultimate_notion/obj_api/iterator.py def __call__ ( self , ** kwargs ): \"\"\"Return a generator for this endpoint using the given parameters.\"\"\" self . has_more = True self . page_num = 0 self . total_items = 0 if 'page_size' not in kwargs : kwargs [ 'page_size' ] = MAX_PAGE_SIZE self . next_cursor = kwargs . pop ( 'start_cursor' , None ) while self . has_more : self . page_num += 1 result_page = self . _endpoint ( start_cursor = self . next_cursor , ** kwargs ) api_list = ObjectList . model_validate ( result_page ) for obj in api_list . results : self . total_items += 1 if self . _datatype is None : yield obj else : yield self . _datatype ( obj ) self . next_cursor = api_list . next_cursor self . has_more = api_list . has_more and self . next_cursor is not None","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.as_list","text":"Collect all items from the endpoint as a list. Source code in src/ultimate_notion/obj_api/iterator.py def as_list ( self , ** kwargs ): \"\"\"Collect all items from the endpoint as a list.\"\"\" items = [] for item in self ( ** kwargs ): items . append ( item ) return items","title":"as_list()"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList","text":"A paginated list of objects returned by the Notion API. More details in the Notion API .","title":"ObjectList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.next_cursor","text":"","title":"next_cursor"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.results","text":"","title":"results"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList","text":"A list of Page objects returned by the Notion API.","title":"PageList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList.page","text":"","title":"page"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList","text":"A list of Page or Database objects returned by the Notion API.","title":"PageOrDatabaseList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList.page_or_database","text":"","title":"page_or_database"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList","text":"A paginated list of property items returned by the Notion API. Property item lists contain one or more pages of basic property items. These types do not typically match the schema for corresponding property values.","title":"PropertyItemList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.property_item","text":"","title":"property_item"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList","text":"A list of User objects returned by the Notion API.","title":"UserList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList.user","text":"","title":"user"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.convert_notion_object","text":"Convert a Notion Object to a corresponding subtype. Used in the ObjectList below the convert the results from the Notion API. Source code in src/ultimate_notion/obj_api/iterator.py def convert_notion_object ( obj : NotionObject ) -> Block | Page | Database | PropertyItem | User | GenericObject : \"\"\"Convert a Notion Object to a corresponding subtype. Used in the ObjectList below the convert the results from the Notion API. \"\"\" if 'object' not in obj : msg = 'Unknown object in results' raise ValueError ( msg ) if obj [ 'object' ] == BlockList . build () . type : # .build() as the model is not constructed at that point. return Block . model_validate ( obj ) if obj [ 'object' ] == PageList . build () . type : return Page . model_validate ( obj ) if obj [ 'object' ] == DatabaseList . build () . type : return Database . model_validate ( obj ) if obj [ 'object' ] == PropertyItemList . build () . type : return PropertyItem . model_validate ( obj ) if obj [ 'object' ] == UserList . build () . type : return User . model_validate ( obj ) return GenericObject . model_validate ( obj )","title":"convert_notion_object()"},{"location":"reference/ultimate_notion/obj_api/objects/","text":"objects \u00b6 Wrapper for various Notion API objects like parents, mentions, emojis & users Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods. For validation the Pydantic model fields specify if a field is optional or not. Some fields are always set, e.g. id , when retrieving an object but must not be set when sending the object to the Notion API in order to create the object. To model this behavior, the default value None is used for those objects, e.g. ``` class SelectOption(GenericObject) id: str = None ```` Annotations \u00b6 Style information for RichTextObject's. bold : bool = False class-attribute instance-attribute \u00b6 code : bool = False class-attribute instance-attribute \u00b6 color : FullColor = None class-attribute instance-attribute \u00b6 is_plain property \u00b6 Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style. italic : bool = False class-attribute instance-attribute \u00b6 strikethrough : bool = False class-attribute instance-attribute \u00b6 underline : bool = False class-attribute instance-attribute \u00b6 BlockRef \u00b6 Reference a block. block_id : UUID instance-attribute \u00b6 build ( block_ref ) classmethod \u00b6 Compose a BlockRef from the given reference object. block_ref can be either a string, UUID, or block. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , block_ref ): \"\"\"Compose a BlockRef from the given reference object. `block_ref` can be either a string, UUID, or block. \"\"\" ref = ObjectReference [ block_ref ] return BlockRef . model_construct ( block_id = ref . id ) Bot \u00b6 Represents a Bot in Notion. bot : _NestedData = None class-attribute instance-attribute \u00b6 DatabaseRef \u00b6 Reference a database. database_id : UUID instance-attribute \u00b6 build ( db_ref : Database | str | UUID ) classmethod \u00b6 Compose a DatabaseRef from the given reference object. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , db_ref : Database | str | UUID ): \"\"\"Compose a DatabaseRef from the given reference object.\"\"\" ref = ObjectReference . build ( db_ref ) return DatabaseRef . model_construct ( database_id = ref . id ) DateRange \u00b6 A Notion date range, with an optional end date. end : date | datetime | None = None class-attribute instance-attribute \u00b6 start : date | datetime instance-attribute \u00b6 time_zone : str | None = None class-attribute instance-attribute \u00b6 EmojiObject \u00b6 A Notion emoji object. emoji : str instance-attribute \u00b6 build ( emoji ) classmethod \u00b6 Compose an EmojiObject from the given emoji string. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" # Todo: convert string-based emoji to unicode here! return EmojiObject . model_construct ( emoji = emoji ) EquationObject \u00b6 Notion equation element. equation : _NestedData instance-attribute \u00b6 ExternalFile \u00b6 An external file object. external : _NestedData instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/objects.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = super () . __str__ () if self . external and self . external . url : return f '![ { name } ]( { self . external . url } )' return name build ( url , name = None ) classmethod \u00b6 Create a new ExternalFile from the given URL. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls . model_construct ( name = name , external = cls . _NestedData ( url = url )) FileObject \u00b6 A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API. name : str | None = None class-attribute instance-attribute \u00b6 HostedFile \u00b6 A Notion file object. file : _NestedData instance-attribute \u00b6 LinkObject \u00b6 Reference a URL. type : str = 'url' class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 MentionData \u00b6 Base class for typed Mention data objects. MentionDatabase \u00b6 Nested database information for Mention properties. database : ObjectReference instance-attribute \u00b6 build ( page ) classmethod \u00b6 Build a Mention object for the specified database reference. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page ): \"\"\"Build a `Mention` object for the specified database reference.\"\"\" ref = ObjectReference [ page ] return MentionObject . model_construct ( plain_text = str ( ref ), mention = MentionDatabase ( database = ref )) MentionDate \u00b6 Nested date data for Mention properties. date : DateRange instance-attribute \u00b6 build ( start , end = None ) classmethod \u00b6 Build a Mention object for the specified URL. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , start , end = None ): \"\"\"Build a `Mention` object for the specified URL.\"\"\" date_obj = DateRange ( start = start , end = end ) return MentionObject . model_construct ( plain_text = str ( date_obj ), mention = MentionDate ( date = date_obj )) MentionLinkPreview \u00b6 Nested url data for Mention properties. These objects cannot be created via the API. link_preview : _NestedData instance-attribute \u00b6 MentionObject \u00b6 Notion mention element. mention : MentionData instance-attribute \u00b6 MentionPage \u00b6 Nested page data for Mention properties. page : ObjectReference instance-attribute \u00b6 build ( page_ref ) classmethod \u00b6 Build a Mention object for the specified page reference. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page_ref ): \"\"\"Build a `Mention` object for the specified page reference.\"\"\" ref = ObjectReference [ page_ref ] return MentionObject . model_construct ( plain_text = str ( ref ), mention = MentionPage ( page = ref )) MentionTemplate \u00b6 Nested template data for Mention properties. template_mention : MentionTemplateData instance-attribute \u00b6 MentionTemplateData \u00b6 Nested template data for Mention properties. MentionTemplateDate \u00b6 Nested date template data for Mention properties. template_mention_date : str instance-attribute \u00b6 MentionTemplateUser \u00b6 Nested user template data for Mention properties. template_mention_user : str instance-attribute \u00b6 MentionUser \u00b6 Nested user data for Mention properties. user : UserRef instance-attribute \u00b6 build ( user : User ) classmethod \u00b6 Build a Mention object for the specified user. The id field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , user : User ): \"\"\"Build a `Mention` object for the specified user. The `id` field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. \"\"\" return MentionObject . model_construct ( plain_text = str ( user ), mention = MentionUser ( user = user )) ObjectReference \u00b6 A general-purpose object reference in the Notion API. id : UUID instance-attribute \u00b6 build ( ref ) classmethod \u00b6 Compose an ObjectReference from the given reference. ref may be a UUID , str , ParentRef or GenericObject with an id . Strings may be either UUID's or URL's to Notion content. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , ref ): \"\"\"Compose an ObjectReference from the given reference. `ref` may be a `UUID`, `str`, `ParentRef` or `GenericObject` with an `id`. Strings may be either UUID's or URL's to Notion content. \"\"\" if isinstance ( ref , cls ): return ref . model_copy ( deep = True ) if isinstance ( ref , ParentRef ): # ParentRef's are typed-objects with a nested UUID return ObjectReference . model_construct ( id = ref ()) if isinstance ( ref , GenericObject ) and hasattr ( ref , 'id' ): # re-compose the ObjectReference from the internal ID return ObjectReference . build ( ref . id ) if isinstance ( ref , UUID ): return ObjectReference . model_construct ( id = ref ) if isinstance ( ref , str ): ref = util . extract_id_from_string ( ref ) if ref is not None : return ObjectReference . model_construct ( id = UUID ( ref )) msg = \"Unrecognized 'ref' attribute\" raise ValueError ( msg ) PageRef \u00b6 Reference a page. page_id : UUID instance-attribute \u00b6 build ( page_ref : Page | str | UUID ) classmethod \u00b6 Compose a PageRef from the given reference object. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page_ref : Page | str | UUID ): \"\"\"Compose a PageRef from the given reference object.\"\"\" ref = ObjectReference . build ( page_ref ) return PageRef . model_construct ( page_id = ref . id ) ParentRef \u00b6 Reference another block as a parent. This class is simply a placeholder for the typed concrete *Ref classes. Callers should always instantiate the intended concrete versions. Person \u00b6 Represents a Person in Notion. person : _NestedData = None class-attribute instance-attribute \u00b6 RichTextObject \u00b6 Base class for Notion rich text elements. annotations : Annotations | None = None class-attribute instance-attribute \u00b6 href : str | None = None class-attribute instance-attribute \u00b6 plain_text : str instance-attribute \u00b6 build ( text , href = None , style = None ) classmethod \u00b6 Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? style = deepcopy ( style ) return cls . model_construct ( plain_text = text , href = href , annotations = style ) SelectOption \u00b6 Options for select & multi-select objects. color : Color = Color . DEFAULT class-attribute instance-attribute \u00b6 id : str = None class-attribute instance-attribute \u00b6 name : str instance-attribute \u00b6 build ( name , color = Color . DEFAULT ) classmethod \u00b6 Create a SelectOption object from the given name and color. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls . model_construct ( name = name , color = color ) TextObject \u00b6 Notion text element. text : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( text : str , href : str | None = None , style : Annotations | None = None ) classmethod \u00b6 Compose a TextObject from the given properties. Parameters: Name Type Description Default text str the plain text of this object required href str | None optional link for this object None style Annotations | None optional annotations for styling this text None Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , text : str , href : str | None = None , style : Annotations | None = None ): \"\"\"Compose a TextObject from the given properties. Args: text: the plain text of this object href: optional link for this object style: optional annotations for styling this text \"\"\" if text is None : return None link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return cls . model_construct ( plain_text = text , text = nested , href = href , annotations = style , ) User \u00b6 Represents a User in Notion. avatar_url : str | None = None class-attribute instance-attribute \u00b6 name : str | None = None class-attribute instance-attribute \u00b6 UserRef \u00b6 Reference to a user, e.g. in created_by , last_edited_by , mentioning, etc. UserType \u00b6 Available user types. BOT = 'bot' class-attribute instance-attribute \u00b6 PERSON = 'person' class-attribute instance-attribute \u00b6 WorkspaceRef \u00b6 Reference the workspace. workspace : bool = True class-attribute instance-attribute \u00b6","title":"Objects"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects","text":"Wrapper for various Notion API objects like parents, mentions, emojis & users Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods. For validation the Pydantic model fields specify if a field is optional or not. Some fields are always set, e.g. id , when retrieving an object but must not be set when sending the object to the Notion API in order to create the object. To model this behavior, the default value None is used for those objects, e.g. ``` class SelectOption(GenericObject) id: str = None ````","title":"objects"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations","text":"Style information for RichTextObject's.","title":"Annotations"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.bold","text":"","title":"bold"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.code","text":"","title":"code"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.color","text":"","title":"color"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.is_plain","text":"Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style.","title":"is_plain"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.italic","text":"","title":"italic"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.strikethrough","text":"","title":"strikethrough"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.underline","text":"","title":"underline"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef","text":"Reference a block.","title":"BlockRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.block_id","text":"","title":"block_id"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.build","text":"Compose a BlockRef from the given reference object. block_ref can be either a string, UUID, or block. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , block_ref ): \"\"\"Compose a BlockRef from the given reference object. `block_ref` can be either a string, UUID, or block. \"\"\" ref = ObjectReference [ block_ref ] return BlockRef . model_construct ( block_id = ref . id )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot","text":"Represents a Bot in Notion.","title":"Bot"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot.bot","text":"","title":"bot"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef","text":"Reference a database.","title":"DatabaseRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.database_id","text":"","title":"database_id"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.build","text":"Compose a DatabaseRef from the given reference object. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , db_ref : Database | str | UUID ): \"\"\"Compose a DatabaseRef from the given reference object.\"\"\" ref = ObjectReference . build ( db_ref ) return DatabaseRef . model_construct ( database_id = ref . id )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange","text":"A Notion date range, with an optional end date.","title":"DateRange"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.end","text":"","title":"end"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.start","text":"","title":"start"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.time_zone","text":"","title":"time_zone"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject","text":"A Notion emoji object.","title":"EmojiObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.emoji","text":"","title":"emoji"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.build","text":"Compose an EmojiObject from the given emoji string. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" # Todo: convert string-based emoji to unicode here! return EmojiObject . model_construct ( emoji = emoji )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject","text":"Notion equation element.","title":"EquationObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.equation","text":"","title":"equation"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile","text":"An external file object.","title":"ExternalFile"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.external","text":"","title":"external"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/objects.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = super () . __str__ () if self . external and self . external . url : return f '![ { name } ]( { self . external . url } )' return name","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.build","text":"Create a new ExternalFile from the given URL. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls . model_construct ( name = name , external = cls . _NestedData ( url = url ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject","text":"A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API.","title":"FileObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile","text":"A Notion file object.","title":"HostedFile"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile.file","text":"","title":"file"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject","text":"Reference a URL.","title":"LinkObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionData","text":"Base class for typed Mention data objects.","title":"MentionData"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase","text":"Nested database information for Mention properties.","title":"MentionDatabase"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.database","text":"","title":"database"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.build","text":"Build a Mention object for the specified database reference. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page ): \"\"\"Build a `Mention` object for the specified database reference.\"\"\" ref = ObjectReference [ page ] return MentionObject . model_construct ( plain_text = str ( ref ), mention = MentionDatabase ( database = ref ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate","text":"Nested date data for Mention properties.","title":"MentionDate"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.build","text":"Build a Mention object for the specified URL. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , start , end = None ): \"\"\"Build a `Mention` object for the specified URL.\"\"\" date_obj = DateRange ( start = start , end = end ) return MentionObject . model_construct ( plain_text = str ( date_obj ), mention = MentionDate ( date = date_obj ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview","text":"Nested url data for Mention properties. These objects cannot be created via the API.","title":"MentionLinkPreview"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview.link_preview","text":"","title":"link_preview"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject","text":"Notion mention element.","title":"MentionObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject.mention","text":"","title":"mention"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage","text":"Nested page data for Mention properties.","title":"MentionPage"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.page","text":"","title":"page"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.build","text":"Build a Mention object for the specified page reference. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page_ref ): \"\"\"Build a `Mention` object for the specified page reference.\"\"\" ref = ObjectReference [ page_ref ] return MentionObject . model_construct ( plain_text = str ( ref ), mention = MentionPage ( page = ref ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate","text":"Nested template data for Mention properties.","title":"MentionTemplate"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate.template_mention","text":"","title":"template_mention"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateData","text":"Nested template data for Mention properties.","title":"MentionTemplateData"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate","text":"Nested date template data for Mention properties.","title":"MentionTemplateDate"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate.template_mention_date","text":"","title":"template_mention_date"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser","text":"Nested user template data for Mention properties.","title":"MentionTemplateUser"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser.template_mention_user","text":"","title":"template_mention_user"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser","text":"Nested user data for Mention properties.","title":"MentionUser"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.user","text":"","title":"user"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.build","text":"Build a Mention object for the specified user. The id field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , user : User ): \"\"\"Build a `Mention` object for the specified user. The `id` field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. \"\"\" return MentionObject . model_construct ( plain_text = str ( user ), mention = MentionUser ( user = user ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference","text":"A general-purpose object reference in the Notion API.","title":"ObjectReference"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference.build","text":"Compose an ObjectReference from the given reference. ref may be a UUID , str , ParentRef or GenericObject with an id . Strings may be either UUID's or URL's to Notion content. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , ref ): \"\"\"Compose an ObjectReference from the given reference. `ref` may be a `UUID`, `str`, `ParentRef` or `GenericObject` with an `id`. Strings may be either UUID's or URL's to Notion content. \"\"\" if isinstance ( ref , cls ): return ref . model_copy ( deep = True ) if isinstance ( ref , ParentRef ): # ParentRef's are typed-objects with a nested UUID return ObjectReference . model_construct ( id = ref ()) if isinstance ( ref , GenericObject ) and hasattr ( ref , 'id' ): # re-compose the ObjectReference from the internal ID return ObjectReference . build ( ref . id ) if isinstance ( ref , UUID ): return ObjectReference . model_construct ( id = ref ) if isinstance ( ref , str ): ref = util . extract_id_from_string ( ref ) if ref is not None : return ObjectReference . model_construct ( id = UUID ( ref )) msg = \"Unrecognized 'ref' attribute\" raise ValueError ( msg )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef","text":"Reference a page.","title":"PageRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.page_id","text":"","title":"page_id"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.build","text":"Compose a PageRef from the given reference object. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , page_ref : Page | str | UUID ): \"\"\"Compose a PageRef from the given reference object.\"\"\" ref = ObjectReference . build ( page_ref ) return PageRef . model_construct ( page_id = ref . id )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ParentRef","text":"Reference another block as a parent. This class is simply a placeholder for the typed concrete *Ref classes. Callers should always instantiate the intended concrete versions.","title":"ParentRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person","text":"Represents a Person in Notion.","title":"Person"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person.person","text":"","title":"person"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject","text":"Base class for Notion rich text elements.","title":"RichTextObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.annotations","text":"","title":"annotations"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.href","text":"","title":"href"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.plain_text","text":"","title":"plain_text"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.build","text":"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? style = deepcopy ( style ) return cls . model_construct ( plain_text = text , href = href , annotations = style )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption","text":"Options for select & multi-select objects.","title":"SelectOption"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.color","text":"","title":"color"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.build","text":"Create a SelectOption object from the given name and color. Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls . model_construct ( name = name , color = color )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject","text":"Notion text element.","title":"TextObject"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.text","text":"","title":"text"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.build","text":"Compose a TextObject from the given properties. Parameters: Name Type Description Default text str the plain text of this object required href str | None optional link for this object None style Annotations | None optional annotations for styling this text None Source code in src/ultimate_notion/obj_api/objects.py @classmethod def build ( cls , text : str , href : str | None = None , style : Annotations | None = None ): \"\"\"Compose a TextObject from the given properties. Args: text: the plain text of this object href: optional link for this object style: optional annotations for styling this text \"\"\" if text is None : return None link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return cls . model_construct ( plain_text = text , text = nested , href = href , annotations = style , )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User","text":"Represents a User in Notion.","title":"User"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserRef","text":"Reference to a user, e.g. in created_by , last_edited_by , mentioning, etc.","title":"UserRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType","text":"Available user types.","title":"UserType"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType.BOT","text":"","title":"BOT"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType.PERSON","text":"","title":"PERSON"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef","text":"Reference the workspace.","title":"WorkspaceRef"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef.workspace","text":"","title":"workspace"},{"location":"reference/ultimate_notion/obj_api/props/","text":"props \u00b6 Wrapper for property values of pages DateType : TypeAlias = datetime | date | tuple [ datetime | date , datetime | date ] module-attribute \u00b6 BooleanFormula \u00b6 A Notion boolean formula result. boolean : bool | None = None class-attribute instance-attribute \u00b6 value property \u00b6 Checkbox \u00b6 Simple checkbox type; represented as a boolean. checkbox : bool | None = None class-attribute instance-attribute \u00b6 CreatedBy \u00b6 A Notion created-by property value. created_by : SerializeAsAny [ User ] instance-attribute \u00b6 CreatedTime \u00b6 A Notion created-time property value. created_time : datetime instance-attribute \u00b6 Date \u00b6 Notion complex date type - may include timestamp and/or be a date range. date : DateRange | None = None class-attribute instance-attribute \u00b6 build ( start : datetime | date , end : datetime | date | None = None ) classmethod \u00b6 Create a new Date from the native values. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , start : datetime | date , end : datetime | date | None = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls . model_construct ( date = DateRange ( start = start , end = end )) DateFormula \u00b6 A Notion date formula result. date : DateRange | None = None class-attribute instance-attribute \u00b6 value : None | DateType property \u00b6 Email \u00b6 Notion email type. email : str | None = None class-attribute instance-attribute \u00b6 Files \u00b6 Notion files type. files : list [ SerializeAsAny [ FileObject ]] = None class-attribute instance-attribute \u00b6 Formula \u00b6 A Notion formula property value. formula : FormulaResult | None = None class-attribute instance-attribute \u00b6 FormulaResult \u00b6 A Notion formula result. This object contains the result of the expression in the database properties. value abstractmethod property \u00b6 Return the result of this FormulaResult. LastEditedBy \u00b6 A Notion last-edited-by property value. last_edited_by : SerializeAsAny [ User ] instance-attribute \u00b6 LastEditedTime \u00b6 A Notion last-edited-time property value. last_edited_time : datetime instance-attribute \u00b6 MultiSelect \u00b6 Notion multi-select type. multi_select : list [ SelectOption ] = None class-attribute instance-attribute \u00b6 Number \u00b6 Simple number type. number : float | int | None = None class-attribute instance-attribute \u00b6 NumberFormula \u00b6 A Notion number formula result. number : float | int | None = None class-attribute instance-attribute \u00b6 value property \u00b6 People \u00b6 Notion people type. people : list [ SerializeAsAny [ User ]] = None class-attribute instance-attribute \u00b6 PhoneNumber \u00b6 Notion phone type. phone_number : str | None = None class-attribute instance-attribute \u00b6 PropertyItem \u00b6 A PropertyItem returned by the Notion API. Basic property items have a similar schema to corresponding property values. As a result, these items share the PropertyValue type definitions. This class provides a placeholder for parsing property items, however objects parse by this class will likely be PropertyValue 's instead. PropertyValue \u00b6 Base class for Notion property values. id : str | None = None class-attribute instance-attribute \u00b6 build ( value ) classmethod \u00b6 Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling init with the corresponding keyword. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , value ): \"\"\"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling __init__ with the corresponding keyword. \"\"\" return cls . model_construct ( ** { cls . model_fields [ 'type' ] . get_default (): value }) Relation \u00b6 A Notion relation property value. has_more : bool = False class-attribute instance-attribute \u00b6 relation : list [ ObjectReference ] = None class-attribute instance-attribute \u00b6 build ( pages ) classmethod \u00b6 Return a Relation property with the specified pages. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" return cls . model_construct ( relation = [ ObjectReference . build ( page ) for page in pages ]) RichText \u00b6 Notion rich text type. rich_text : list [ SerializeAsAny [ RichTextObject ]] = None class-attribute instance-attribute \u00b6 Rollup \u00b6 A Notion rollup property value. rollup : RollupObject | None = None class-attribute instance-attribute \u00b6 RollupArray \u00b6 A Notion rollup array property value. array : list [ PropertyValue ] instance-attribute \u00b6 value : list [ PropertyValue ] property \u00b6 Return the native representation of this Rollup object. RollupDate \u00b6 A Notion rollup date property value. date : DateRange | None = None class-attribute instance-attribute \u00b6 value : DateType | None property \u00b6 RollupNumber \u00b6 A Notion rollup number property value. number : float | int | None = None class-attribute instance-attribute \u00b6 value : float | int | None property \u00b6 Return the native representation of this Rollup object. RollupObject \u00b6 A Notion rollup property value. function : Function | None = None class-attribute instance-attribute \u00b6 value abstractmethod property \u00b6 Return the native representation of this Rollup object. Select \u00b6 Notion select type. select : SelectOption | None = None class-attribute instance-attribute \u00b6 Status \u00b6 Notion status property. status : SelectOption | None = None class-attribute instance-attribute \u00b6 StringFormula \u00b6 A Notion string formula result. string : str | None = None class-attribute instance-attribute \u00b6 value property \u00b6 Title \u00b6 Notion title type. title : list [ SerializeAsAny [ RichTextObject ]] = None class-attribute instance-attribute \u00b6 URL \u00b6 Notion URL type. url : str | None = None class-attribute instance-attribute \u00b6 UniqueID \u00b6 A Notion unique-id property value. unique_id : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Verification \u00b6 A Notion verification property value verification : _NestedData = _NestedData () class-attribute instance-attribute \u00b6","title":"Props"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props","text":"Wrapper for property values of pages","title":"props"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateType","text":"","title":"DateType"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula","text":"A Notion boolean formula result.","title":"BooleanFormula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula.boolean","text":"","title":"boolean"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox","text":"Simple checkbox type; represented as a boolean.","title":"Checkbox"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy","text":"A Notion created-by property value.","title":"CreatedBy"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime","text":"A Notion created-time property value.","title":"CreatedTime"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date","text":"Notion complex date type - may include timestamp and/or be a date range.","title":"Date"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.build","text":"Create a new Date from the native values. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , start : datetime | date , end : datetime | date | None = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls . model_construct ( date = DateRange ( start = start , end = end ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula","text":"A Notion date formula result.","title":"DateFormula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email","text":"Notion email type.","title":"Email"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files","text":"Notion files type.","title":"Files"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula","text":"A Notion formula property value.","title":"Formula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaResult","text":"A Notion formula result. This object contains the result of the expression in the database properties.","title":"FormulaResult"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaResult.value","text":"Return the result of this FormulaResult.","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy","text":"A Notion last-edited-by property value.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime","text":"A Notion last-edited-time property value.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect","text":"Notion multi-select type.","title":"MultiSelect"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number","text":"Simple number type.","title":"Number"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula","text":"A Notion number formula result.","title":"NumberFormula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People","text":"Notion people type.","title":"People"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber","text":"Notion phone type.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyItem","text":"A PropertyItem returned by the Notion API. Basic property items have a similar schema to corresponding property values. As a result, these items share the PropertyValue type definitions. This class provides a placeholder for parsing property items, however objects parse by this class will likely be PropertyValue 's instead.","title":"PropertyItem"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue","text":"Base class for Notion property values.","title":"PropertyValue"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.build","text":"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling init with the corresponding keyword. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , value ): \"\"\"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling __init__ with the corresponding keyword. \"\"\" return cls . model_construct ( ** { cls . model_fields [ 'type' ] . get_default (): value })","title":"build()"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation","text":"A Notion relation property value.","title":"Relation"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.build","text":"Return a Relation property with the specified pages. Source code in src/ultimate_notion/obj_api/props.py @classmethod def build ( cls , pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" return cls . model_construct ( relation = [ ObjectReference . build ( page ) for page in pages ])","title":"build()"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText","text":"Notion rich text type.","title":"RichText"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup","text":"A Notion rollup property value.","title":"Rollup"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray","text":"A Notion rollup array property value.","title":"RollupArray"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray.array","text":"","title":"array"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray.value","text":"Return the native representation of this Rollup object.","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate","text":"A Notion rollup date property value.","title":"RollupDate"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber","text":"A Notion rollup number property value.","title":"RollupNumber"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber.value","text":"Return the native representation of this Rollup object.","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject","text":"A Notion rollup property value.","title":"RollupObject"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject.function","text":"","title":"function"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject.value","text":"Return the native representation of this Rollup object.","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select","text":"Notion select type.","title":"Select"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status","text":"Notion status property.","title":"Status"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula","text":"A Notion string formula result.","title":"StringFormula"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula.string","text":"","title":"string"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title","text":"Notion title type.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL","text":"Notion URL type.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID","text":"A Notion unique-id property value.","title":"UniqueID"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.unique_id","text":"","title":"unique_id"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification","text":"A Notion verification property value","title":"Verification"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.verification","text":"","title":"verification"},{"location":"reference/ultimate_notion/obj_api/query/","text":"query \u00b6 Provides an interactive query builder for Notion databases. logger = logging . getLogger ( __name__ ) module-attribute \u00b6 CheckboxCondition \u00b6 Represents checkbox criteria in Notion. does_not_equal : bool | None = None class-attribute instance-attribute \u00b6 equals : bool | None = None class-attribute instance-attribute \u00b6 CompoundFilter \u00b6 Represents a compound filter in Notion. and_ : list [ QueryFilter ] | None = Field ( None , alias = 'and' ) class-attribute instance-attribute \u00b6 or_ : list [ QueryFilter ] | None = Field ( None , alias = 'or' ) class-attribute instance-attribute \u00b6 CreatedTimeFilter \u00b6 Represents a created_time filter in Notion. created_time : DateCondition instance-attribute \u00b6 timestamp : TimestampKind = TimestampKind . CREATED_TIME class-attribute instance-attribute \u00b6 build ( value ) classmethod \u00b6 Create a new CreatedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def build ( cls , value ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = value ) DateCondition \u00b6 Represents date criteria in Notion. after : date | datetime | None = None class-attribute instance-attribute \u00b6 before : date | datetime | None = None class-attribute instance-attribute \u00b6 equals : date | datetime | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 next_month : Any | None = None class-attribute instance-attribute \u00b6 next_week : Any | None = None class-attribute instance-attribute \u00b6 next_year : Any | None = None class-attribute instance-attribute \u00b6 on_or_after : date | datetime | None = None class-attribute instance-attribute \u00b6 on_or_before : date | datetime | None = None class-attribute instance-attribute \u00b6 past_month : Any | None = None class-attribute instance-attribute \u00b6 past_week : Any | None = None class-attribute instance-attribute \u00b6 past_year : Any | None = None class-attribute instance-attribute \u00b6 FilesCondition \u00b6 Represents files criteria in Notion. is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 FormulaCondition \u00b6 Represents formula criteria in Notion. checkbox : CheckboxCondition | None = None class-attribute instance-attribute \u00b6 date : DateCondition | None = None class-attribute instance-attribute \u00b6 number : NumberCondition | None = None class-attribute instance-attribute \u00b6 string : TextCondition | None = None class-attribute instance-attribute \u00b6 LastEditedTimeFilter \u00b6 Represents a last_edited_time filter in Notion. last_edited_time : DateCondition instance-attribute \u00b6 timestamp : TimestampKind = TimestampKind . LAST_EDITED_TIME class-attribute instance-attribute \u00b6 build ( value ) classmethod \u00b6 Create a new LastEditedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def build ( cls , value ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = value ) MultiSelectCondition \u00b6 Represents a multi_select criteria in Notion. contains : str | None = None class-attribute instance-attribute \u00b6 does_not_contains : str | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 NumberCondition \u00b6 Represents number criteria in Notion. does_not_equal : float | int | None = None class-attribute instance-attribute \u00b6 equals : float | int | None = None class-attribute instance-attribute \u00b6 greater_than : float | int | None = None class-attribute instance-attribute \u00b6 greater_than_or_equal_to : float | int | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 less_than : float | int | None = None class-attribute instance-attribute \u00b6 less_than_or_equal_to : float | int | None = None class-attribute instance-attribute \u00b6 PeopleCondition \u00b6 Represents people criteria in Notion. contains : UUID | None = None class-attribute instance-attribute \u00b6 does_not_contain : UUID | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 PropertyFilter \u00b6 Represents a database property filter in Notion. checkbox : CheckboxCondition | None = None class-attribute instance-attribute \u00b6 date : DateCondition | None = None class-attribute instance-attribute \u00b6 files : FilesCondition | None = None class-attribute instance-attribute \u00b6 formula : FormulaCondition | None = None class-attribute instance-attribute \u00b6 multi_select : MultiSelectCondition | None = None class-attribute instance-attribute \u00b6 number : NumberCondition | None = None class-attribute instance-attribute \u00b6 people : PeopleCondition | None = None class-attribute instance-attribute \u00b6 phone_number : TextCondition | None = None class-attribute instance-attribute \u00b6 property : str instance-attribute \u00b6 relation : RelationCondition | None = None class-attribute instance-attribute \u00b6 rich_text : TextCondition | None = None class-attribute instance-attribute \u00b6 select : SelectCondition | None = None class-attribute instance-attribute \u00b6 PropertySort \u00b6 Represents a sort instruction in Notion. direction : SortDirection | None = None class-attribute instance-attribute \u00b6 property : str | None = None class-attribute instance-attribute \u00b6 timestamp : TimestampKind | None = None class-attribute instance-attribute \u00b6 Query \u00b6 Represents a query object in Notion. filter : SerializeAsAny [ QueryFilter ] | None = None class-attribute instance-attribute \u00b6 page_size : int = MAX_PAGE_SIZE class-attribute instance-attribute \u00b6 sorts : list [ PropertySort ] | None = None class-attribute instance-attribute \u00b6 start_cursor : UUID | None = None class-attribute instance-attribute \u00b6 valid_page_size ( value ) classmethod \u00b6 Validate that the given page size meets the Notion API requirements. Source code in src/ultimate_notion/obj_api/query.py @field_validator ( 'page_size' ) @classmethod @classmethod def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" if value <= 0 : msg = 'page size must be greater than zero' raise ValueError ( msg ) if value > MAX_PAGE_SIZE : msg = f 'page size must be less than or equal to { MAX_PAGE_SIZE } ' raise ValueError ( msg ) return value QueryBuilder ( endpoint , datatype = None , ** params ) \u00b6 A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param datatype: an optional class to capture results :param params: optional params that will be passed to the query Source code in src/ultimate_notion/obj_api/query.py def __init__ ( self , endpoint , datatype = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . datatype = datatype # ToDo: See if this is really needed or if we can get rid of it! self . params = params self . query = Query () datatype = datatype instance-attribute \u00b6 endpoint = endpoint instance-attribute \u00b6 params = params instance-attribute \u00b6 query = Query () instance-attribute \u00b6 execute () \u00b6 Execute the current query and return an iterator for the results. Source code in src/ultimate_notion/obj_api/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : msg = 'cannot execute query; no endpoint provided' raise ValueError ( msg ) logger . debug ( 'executing query - %s ' , self . query ) # the API doesn't like \"undefined\" values... query = self . query . serialize_for_api () if self . params : query . update ( self . params ) return EndpointIterator ( self . endpoint , datatype = self . datatype )( ** query ) filter ( query_filter = None , ** kwargs ) \u00b6 Add the given filter to the query. Source code in src/ultimate_notion/obj_api/query.py def filter ( self , query_filter = None , ** kwargs ): # noqa: A003 \"\"\"Add the given filter to the query.\"\"\" if query_filter is None : if isinstance ( self . endpoint , SearchEndpoint ): query_filter = SearchFilter . model_validate ( kwargs ) elif 'property' in kwargs : query_filter = PropertyFilter . model_validate ( kwargs ) elif 'timestamp' in kwargs and kwargs [ 'timestamp' ] == 'created_time' : query_filter = CreatedTimeFilter . model_validate ( kwargs ) elif 'timestamp' in kwargs and kwargs [ 'timestamp' ] == 'last_edited_time' : query_filter = LastEditedTimeFilter . model_validate ( kwargs ) else : msg = 'unrecognized filter' raise ValueError ( msg ) elif not isinstance ( query_filter , QueryFilter ): msg = 'filter must be of type QueryFilter' raise ValueError ( msg ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = query_filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( query_filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , query_filter ]) return self first () \u00b6 Execute the current query and return the first result only. Source code in src/ultimate_notion/obj_api/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : logger . debug ( 'iterator returned empty result set' ) return None limit ( count ) \u00b6 Limit the number of results to the given count. Source code in src/ultimate_notion/obj_api/query.py def limit ( self , count ): \"\"\"Limit the number of results to the given count.\"\"\" self . query . page_size = count return self sort ( sort = None , ** kwargs ) \u00b6 Add the given sort elements to the query. Source code in src/ultimate_notion/obj_api/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): msg = 'sort must be of type PropertySort' raise ValueError ( msg ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self start_at ( page_id ) \u00b6 Set the start cursor to a specific page ID. Source code in src/ultimate_notion/obj_api/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self QueryFilter \u00b6 Base class for query filters. RelationCondition \u00b6 Represents relation criteria in Notion. contains : UUID | None = None class-attribute instance-attribute \u00b6 does_not_contain : UUID | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 SearchFilter \u00b6 Represents a search property filter in Notion. property : str instance-attribute \u00b6 value : str instance-attribute \u00b6 SelectCondition \u00b6 Represents select criteria in Notion. does_not_equal : str | None = None class-attribute instance-attribute \u00b6 equals : str | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 SortDirection \u00b6 Sort direction options. ASCENDING = 'ascending' class-attribute instance-attribute \u00b6 DESCENDING = 'descending' class-attribute instance-attribute \u00b6 TextCondition \u00b6 Represents text criteria in Notion. contains : str | None = None class-attribute instance-attribute \u00b6 does_not_contain : str | None = None class-attribute instance-attribute \u00b6 does_not_equal : str | None = None class-attribute instance-attribute \u00b6 ends_with : str | None = None class-attribute instance-attribute \u00b6 equals : str | None = None class-attribute instance-attribute \u00b6 is_empty : bool | None = None class-attribute instance-attribute \u00b6 is_not_empty : bool | None = None class-attribute instance-attribute \u00b6 starts_with : str | None = None class-attribute instance-attribute \u00b6 TimestampFilter \u00b6 Represents a timestamp filter in Notion. timestamp : TimestampKind instance-attribute \u00b6 TimestampKind \u00b6 Possible timestamp types. CREATED_TIME = 'created_time' class-attribute instance-attribute \u00b6 LAST_EDITED_TIME = 'last_edited_time' class-attribute instance-attribute \u00b6","title":"Query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query","text":"Provides an interactive query builder for Notion databases.","title":"query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition","text":"Represents checkbox criteria in Notion.","title":"CheckboxCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter","text":"Represents a compound filter in Notion.","title":"CompoundFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.and_","text":"","title":"and_"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.or_","text":"","title":"or_"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter","text":"Represents a created_time filter in Notion.","title":"CreatedTimeFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.build","text":"Create a new CreatedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def build ( cls , value ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = value )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition","text":"Represents date criteria in Notion.","title":"DateCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.after","text":"","title":"after"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.before","text":"","title":"before"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_month","text":"","title":"next_month"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_week","text":"","title":"next_week"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_year","text":"","title":"next_year"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_after","text":"","title":"on_or_after"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_before","text":"","title":"on_or_before"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_month","text":"","title":"past_month"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_week","text":"","title":"past_week"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_year","text":"","title":"past_year"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition","text":"Represents files criteria in Notion.","title":"FilesCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition","text":"Represents formula criteria in Notion.","title":"FormulaCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.string","text":"","title":"string"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter","text":"Represents a last_edited_time filter in Notion.","title":"LastEditedTimeFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.build","text":"Create a new LastEditedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def build ( cls , value ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = value )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition","text":"Represents a multi_select criteria in Notion.","title":"MultiSelectCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.does_not_contains","text":"","title":"does_not_contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition","text":"Represents number criteria in Notion.","title":"NumberCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than","text":"","title":"greater_than"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than_or_equal_to","text":"","title":"greater_than_or_equal_to"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than","text":"","title":"less_than"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than_or_equal_to","text":"","title":"less_than_or_equal_to"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition","text":"Represents people criteria in Notion.","title":"PeopleCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter","text":"Represents a database property filter in Notion.","title":"PropertyFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort","text":"Represents a sort instruction in Notion.","title":"PropertySort"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.direction","text":"","title":"direction"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query","text":"Represents a query object in Notion.","title":"Query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.filter","text":"","title":"filter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.page_size","text":"","title":"page_size"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.sorts","text":"","title":"sorts"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.start_cursor","text":"","title":"start_cursor"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.valid_page_size","text":"Validate that the given page size meets the Notion API requirements. Source code in src/ultimate_notion/obj_api/query.py @field_validator ( 'page_size' ) @classmethod @classmethod def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" if value <= 0 : msg = 'page size must be greater than zero' raise ValueError ( msg ) if value > MAX_PAGE_SIZE : msg = f 'page size must be less than or equal to { MAX_PAGE_SIZE } ' raise ValueError ( msg ) return value","title":"valid_page_size()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder","text":"A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param datatype: an optional class to capture results :param params: optional params that will be passed to the query Source code in src/ultimate_notion/obj_api/query.py def __init__ ( self , endpoint , datatype = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . datatype = datatype # ToDo: See if this is really needed or if we can get rid of it! self . params = params self . query = Query ()","title":"QueryBuilder"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.datatype","text":"","title":"datatype"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.endpoint","text":"","title":"endpoint"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.params","text":"","title":"params"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.query","text":"","title":"query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.execute","text":"Execute the current query and return an iterator for the results. Source code in src/ultimate_notion/obj_api/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : msg = 'cannot execute query; no endpoint provided' raise ValueError ( msg ) logger . debug ( 'executing query - %s ' , self . query ) # the API doesn't like \"undefined\" values... query = self . query . serialize_for_api () if self . params : query . update ( self . params ) return EndpointIterator ( self . endpoint , datatype = self . datatype )( ** query )","title":"execute()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.filter","text":"Add the given filter to the query. Source code in src/ultimate_notion/obj_api/query.py def filter ( self , query_filter = None , ** kwargs ): # noqa: A003 \"\"\"Add the given filter to the query.\"\"\" if query_filter is None : if isinstance ( self . endpoint , SearchEndpoint ): query_filter = SearchFilter . model_validate ( kwargs ) elif 'property' in kwargs : query_filter = PropertyFilter . model_validate ( kwargs ) elif 'timestamp' in kwargs and kwargs [ 'timestamp' ] == 'created_time' : query_filter = CreatedTimeFilter . model_validate ( kwargs ) elif 'timestamp' in kwargs and kwargs [ 'timestamp' ] == 'last_edited_time' : query_filter = LastEditedTimeFilter . model_validate ( kwargs ) else : msg = 'unrecognized filter' raise ValueError ( msg ) elif not isinstance ( query_filter , QueryFilter ): msg = 'filter must be of type QueryFilter' raise ValueError ( msg ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = query_filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( query_filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , query_filter ]) return self","title":"filter()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.first","text":"Execute the current query and return the first result only. Source code in src/ultimate_notion/obj_api/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : logger . debug ( 'iterator returned empty result set' ) return None","title":"first()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.limit","text":"Limit the number of results to the given count. Source code in src/ultimate_notion/obj_api/query.py def limit ( self , count ): \"\"\"Limit the number of results to the given count.\"\"\" self . query . page_size = count return self","title":"limit()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.sort","text":"Add the given sort elements to the query. Source code in src/ultimate_notion/obj_api/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): msg = 'sort must be of type PropertySort' raise ValueError ( msg ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self","title":"sort()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.start_at","text":"Set the start cursor to a specific page ID. Source code in src/ultimate_notion/obj_api/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self","title":"start_at()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryFilter","text":"Base class for query filters.","title":"QueryFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition","text":"Represents relation criteria in Notion.","title":"RelationCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter","text":"Represents a search property filter in Notion.","title":"SearchFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition","text":"Represents select criteria in Notion.","title":"SelectCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection","text":"Sort direction options.","title":"SortDirection"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.ASCENDING","text":"","title":"ASCENDING"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.DESCENDING","text":"","title":"DESCENDING"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition","text":"Represents text criteria in Notion.","title":"TextCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.ends_with","text":"","title":"ends_with"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.starts_with","text":"","title":"starts_with"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter","text":"Represents a timestamp filter in Notion.","title":"TimestampFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind","text":"Possible timestamp types.","title":"TimestampKind"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.CREATED_TIME","text":"","title":"CREATED_TIME"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.LAST_EDITED_TIME","text":"","title":"LAST_EDITED_TIME"},{"location":"reference/ultimate_notion/obj_api/schema/","text":"schema \u00b6 Objects representing a database schema. Checkbox \u00b6 Defines the checkbox configuration for a database property. checkbox : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 CreatedBy \u00b6 Defines the created-by configuration for a database property. created_by : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 CreatedTime \u00b6 Defines the created-time configuration for a database property. created_time : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Date \u00b6 Defines the date configuration for a database property. date : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 DualPropertyRelation \u00b6 Defines a two-way relation configuration for a database property. If a two-way relation property X relates to Y then the two-way relation property Y relates to X. dual_property : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( dbref ) classmethod \u00b6 Create a dual_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , dbref ): \"\"\"Create a `dual_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" rel = DualPropertyRelation . model_construct ( database_id = dbref ) return Relation . model_construct ( relation = rel ) Email \u00b6 Defines the email configuration for a database property. email : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Files \u00b6 Defines the files configuration for a database property. files : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Formula \u00b6 Defines the formula configuration for a database property. formula : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( expression ) classmethod \u00b6 Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , expression ): return cls . model_construct ( formula = cls . _NestedData ( expression = expression )) LastEditedBy \u00b6 Defines the last-edited-by configuration for a database property. last_edited_by : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 LastEditedTime \u00b6 Defines the last-edited-time configuration for a database property. last_edited_time : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 MultiSelect \u00b6 Defines the multi-select configuration for a database property. multi_select : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( options ) classmethod \u00b6 Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls . model_construct ( multi_select = cls . _NestedData ( options = options )) Number \u00b6 Defines the number configuration for a database property. number : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( format ) classmethod \u00b6 Create a Number object with the expected format. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , format ): # noqa: A002 \"\"\"Create a `Number` object with the expected format.\"\"\" return cls . model_construct ( number = cls . _NestedData ( format = format )) People \u00b6 Defines the people configuration for a database property. people : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 PhoneNumber \u00b6 Defines the phone number configuration for a database property. phone_number : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 PropertyRelation \u00b6 Defines common configuration for a property relation. database_id : UUID = None class-attribute instance-attribute \u00b6 PropertyType \u00b6 Base class for Notion property objects. id : str | None = None class-attribute instance-attribute \u00b6 name : str | None = None class-attribute instance-attribute \u00b6 build () classmethod \u00b6 Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling init with the corresponding keyword. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls ): \"\"\"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling __init__ with the corresponding keyword. \"\"\" return cls . model_construct () Relation \u00b6 Defines the relation configuration for a database property. relation : SerializeAsAny [ PropertyRelation ] instance-attribute \u00b6 RenameProp \u00b6 Use to rename a property during a database update name : str instance-attribute \u00b6 RichText \u00b6 Defines the rich text configuration for a database property. rich_text : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Rollup \u00b6 Defines the rollup configuration for a database property. rollup : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( relation , property , function ) classmethod \u00b6 Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , relation , property , function ): # noqa: A002 return Rollup . model_construct ( rollup = cls . _NestedData ( function = function , relation_property_name = relation , rollup_property_name = property ) ) Select \u00b6 Defines the select configuration for a database property. select : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 build ( options ) classmethod \u00b6 Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls . model_construct ( select = cls . _NestedData ( options = options )) SinglePropertyRelation \u00b6 Defines a one-way relation configuration for a database property. single_property : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 build ( dbref ) classmethod \u00b6 Create a single_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , dbref ): \"\"\"Create a `single_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" rel = SinglePropertyRelation . model_construct ( database_id = dbref ) return Relation . model_construct ( relation = rel ) Status \u00b6 Defines the status configuration for a database property. status : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Title \u00b6 Defines the title configuration for a database property. title : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 URL \u00b6 Defines the URL configuration for a database property. url : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 UniqueID \u00b6 Unique ID database property unique_id : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6 Verification \u00b6 Verfication database property of Wiki databases verification : Any = Field ( default_factory = dict ) class-attribute instance-attribute \u00b6","title":"Schema"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema","text":"Objects representing a database schema.","title":"schema"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox","text":"Defines the checkbox configuration for a database property.","title":"Checkbox"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy","text":"Defines the created-by configuration for a database property.","title":"CreatedBy"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime","text":"Defines the created-time configuration for a database property.","title":"CreatedTime"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date","text":"Defines the date configuration for a database property.","title":"Date"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation","text":"Defines a two-way relation configuration for a database property. If a two-way relation property X relates to Y then the two-way relation property Y relates to X.","title":"DualPropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.dual_property","text":"","title":"dual_property"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.build","text":"Create a dual_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , dbref ): \"\"\"Create a `dual_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" rel = DualPropertyRelation . model_construct ( database_id = dbref ) return Relation . model_construct ( relation = rel )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email","text":"Defines the email configuration for a database property.","title":"Email"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files","text":"Defines the files configuration for a database property.","title":"Files"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula","text":"Defines the formula configuration for a database property.","title":"Formula"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.build","text":"Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , expression ): return cls . model_construct ( formula = cls . _NestedData ( expression = expression ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy","text":"Defines the last-edited-by configuration for a database property.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime","text":"Defines the last-edited-time configuration for a database property.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect","text":"Defines the multi-select configuration for a database property.","title":"MultiSelect"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.build","text":"Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls . model_construct ( multi_select = cls . _NestedData ( options = options ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number","text":"Defines the number configuration for a database property.","title":"Number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.build","text":"Create a Number object with the expected format. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , format ): # noqa: A002 \"\"\"Create a `Number` object with the expected format.\"\"\" return cls . model_construct ( number = cls . _NestedData ( format = format ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People","text":"Defines the people configuration for a database property.","title":"People"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber","text":"Defines the phone number configuration for a database property.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation","text":"Defines common configuration for a property relation.","title":"PropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.database_id","text":"","title":"database_id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType","text":"Base class for Notion property objects.","title":"PropertyType"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.build","text":"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling init with the corresponding keyword. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls ): \"\"\"Build the property value from given value, e.g. native Python or nested type. In practice, this is like calling __init__ with the corresponding keyword. \"\"\" return cls . model_construct ()","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation","text":"Defines the relation configuration for a database property.","title":"Relation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp","text":"Use to rename a property during a database update","title":"RenameProp"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText","text":"Defines the rich text configuration for a database property.","title":"RichText"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup","text":"Defines the rollup configuration for a database property.","title":"Rollup"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.build","text":"Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , relation , property , function ): # noqa: A002 return Rollup . model_construct ( rollup = cls . _NestedData ( function = function , relation_property_name = relation , rollup_property_name = property ) )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select","text":"Defines the select configuration for a database property.","title":"Select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.build","text":"Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls . model_construct ( select = cls . _NestedData ( options = options ))","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation","text":"Defines a one-way relation configuration for a database property.","title":"SinglePropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.single_property","text":"","title":"single_property"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.build","text":"Create a single_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def build ( cls , dbref ): \"\"\"Create a `single_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" rel = SinglePropertyRelation . model_construct ( database_id = dbref ) return Relation . model_construct ( relation = rel )","title":"build()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status","text":"Defines the status configuration for a database property.","title":"Status"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title","text":"Defines the title configuration for a database property.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL","text":"Defines the URL configuration for a database property.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID","text":"Unique ID database property","title":"UniqueID"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID.unique_id","text":"","title":"unique_id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification","text":"Verfication database property of Wiki databases","title":"Verification"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification.verification","text":"","title":"verification"},{"location":"reference/ultimate_notion/obj_api/util/","text":"util \u00b6 Utility methods for Notional. block_url_long_re = re . compile ( f '^ { _base_url_pattern } ( ? P < username >.* ) / ( ? P < title >.* ) - ( ? P < page_id > { _uuid_pattern }) \\ #(?P<block_id>{_uuid_pattern}) $ ', flags=re.IGNORECASE | re.VERBOSE) module-attribute \u00b6 page_url_long_re = re . compile ( f '^ { _base_url_pattern } ( ? P < title >.* ) - ( ? P < page_id > { _uuid_pattern }) $ ', flags=re.IGNORECASE | re.VERBOSE) module-attribute \u00b6 page_url_short_re = re . compile ( f '^ { _base_url_pattern } ( ? P < page_id > { _uuid_pattern }) $ ', flags=re.IGNORECASE | re.VERBOSE) module-attribute \u00b6 uuid_re = re . compile ( f '^(?P<id> { _uuid_pattern } )$' ) module-attribute \u00b6 extract_id_from_string ( string ) \u00b6 Examine the given string to find a valid Notion object ID. Source code in src/ultimate_notion/obj_api/util.py def extract_id_from_string ( string ): \"\"\"Examine the given string to find a valid Notion object ID.\"\"\" m = uuid_re . match ( string ) if m is not None : return m . group ( 'id' ) m = page_url_long_re . match ( string ) if m is not None : return m . group ( 'page_id' ) m = page_url_short_re . match ( string ) if m is not None : return m . group ( 'page_id' ) m = block_url_long_re . match ( string ) if m is not None : return m . group ( 'block_id' ) return None","title":"Util"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util","text":"Utility methods for Notional.","title":"util"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.block_url_long_re","text":"","title":"block_url_long_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.page_url_long_re","text":"","title":"page_url_long_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.page_url_short_re","text":"","title":"page_url_short_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.uuid_re","text":"","title":"uuid_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.extract_id_from_string","text":"Examine the given string to find a valid Notion object ID. Source code in src/ultimate_notion/obj_api/util.py def extract_id_from_string ( string ): \"\"\"Examine the given string to find a valid Notion object ID.\"\"\" m = uuid_re . match ( string ) if m is not None : return m . group ( 'id' ) m = page_url_long_re . match ( string ) if m is not None : return m . group ( 'page_id' ) m = page_url_short_re . match ( string ) if m is not None : return m . group ( 'page_id' ) m = block_url_long_re . match ( string ) if m is not None : return m . group ( 'block_id' ) return None","title":"extract_id_from_string()"},{"location":"usage/db_advanced/","text":"Data models & schemas \u00b6 Todo: Use to run this koaning/mktestdocs \u00b6 ToDo: Create/Read/Update/Delete (CRUD) operations \u00b6 We gonna create two simple databases with a relation quite similar as described in the Notion docs . We gonna have a database for customers and one for items , which customers can purchase. Let's first initialize a Notion session: >>> from ultimate_notion import Session >>> >>> notion = Session () We start by defining the schema for our items: >>> from ultimate_notion import PageSchema , Property , schema >>> >>> sizes = [ ... schema . SelectOption ( name = \"S\" ), ... schema . SelectOption ( name = \"M\" , color = \"red\" ), ... schema . SelectOption ( name = \"L\" , color = \"yellow\" ), ... ] >>> >>> >>> class Item ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... size = Property ( \"Size\" , schema . SingleSelect ( sizes )) ... price = Property ( \"price\" , schema . Number ( schema . NumberFormat . DOLLAR )) Since a database needs to be a block wighin a page, we assume there is a page called 'Tests', which is connected with this integration script. We retrieve the object of this page and create the database with the page as parent page. >>> root_page = notion . search_page ( 'Tests' , exact = True ) . item () >>> item_db = notion . create_db ( parent = root_page , schema = Item , title = 'Items' ) Now we create a database for our customers and define a one-way relation to the items: >>> class Customer ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... purchases = Property ( \"Items Purchased\" , schema . Relation ( item_db )) >>> >>> customer_db = notion . create_db ( parent = root_page , schema = Customer , title = 'Customers' ) The databases are created and we can start filling them with a few items. >>> # some items >>> t_shirt = item_db . create_page ( name = \"T-shirt\" , size = \"M\" , prize = 17 ) >>> khaki_pants = item_db . create_page ( name = \"Khaki pants\" , size = \"M\" , prize = 25 ) >>> tank_top = item_db . create_page ( name = \"Tank top\" , size = \"S\" , prize = 15 ) >>> >>> # some customers >>> lovelace = customer_db . create_page ( name = \"Ada Lovelace\" ) >>> hertzfeld = customer_db . create_page ( name = \"Andy Herzfeld\" ) >>> Engelbart = customer_db . create_page ( name = \"Doug Engelbart\" ) Note that that the keyword-arguments are exactly the class variables from the page schemas Item and Customer above. Since all pages are by default live-updated, we can modify the page objects to change the data in the actual Notion dababases. Let's say Ada Lovelace purchased a tank top as well as some khaki pants. >>> lovelace . prop . purchases . extend ([ tank_top , khaki_pants ]) >>> lovelace Customer ( \"Ada Lovelace\" ) >>> print ( lovelace ) Customer ( name = \"Ada Lovelace\" , purchases = [ Item ( \"Tank top\" ), Item ( \"Khaki pants\" )], ) Tip Use ensure_db and ensure_page to get or create a database and to get or create a page, respectively. This allows you to avoid extra codepaths in the initial phase when setting up a database for instance. Note that the title property is used as the unique identifier for a database or page.","title":"Advanced"},{"location":"usage/db_advanced/#data-models-schemas","text":"","title":"Data models &amp; schemas"},{"location":"usage/db_advanced/#todo-use-to-run-this-koaningmktestdocs","text":"","title":"Todo: Use to run this koaning/mktestdocs"},{"location":"usage/db_advanced/#todo-createreadupdatedelete-crud-operations","text":"We gonna create two simple databases with a relation quite similar as described in the Notion docs . We gonna have a database for customers and one for items , which customers can purchase. Let's first initialize a Notion session: >>> from ultimate_notion import Session >>> >>> notion = Session () We start by defining the schema for our items: >>> from ultimate_notion import PageSchema , Property , schema >>> >>> sizes = [ ... schema . SelectOption ( name = \"S\" ), ... schema . SelectOption ( name = \"M\" , color = \"red\" ), ... schema . SelectOption ( name = \"L\" , color = \"yellow\" ), ... ] >>> >>> >>> class Item ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... size = Property ( \"Size\" , schema . SingleSelect ( sizes )) ... price = Property ( \"price\" , schema . Number ( schema . NumberFormat . DOLLAR )) Since a database needs to be a block wighin a page, we assume there is a page called 'Tests', which is connected with this integration script. We retrieve the object of this page and create the database with the page as parent page. >>> root_page = notion . search_page ( 'Tests' , exact = True ) . item () >>> item_db = notion . create_db ( parent = root_page , schema = Item , title = 'Items' ) Now we create a database for our customers and define a one-way relation to the items: >>> class Customer ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... purchases = Property ( \"Items Purchased\" , schema . Relation ( item_db )) >>> >>> customer_db = notion . create_db ( parent = root_page , schema = Customer , title = 'Customers' ) The databases are created and we can start filling them with a few items. >>> # some items >>> t_shirt = item_db . create_page ( name = \"T-shirt\" , size = \"M\" , prize = 17 ) >>> khaki_pants = item_db . create_page ( name = \"Khaki pants\" , size = \"M\" , prize = 25 ) >>> tank_top = item_db . create_page ( name = \"Tank top\" , size = \"S\" , prize = 15 ) >>> >>> # some customers >>> lovelace = customer_db . create_page ( name = \"Ada Lovelace\" ) >>> hertzfeld = customer_db . create_page ( name = \"Andy Herzfeld\" ) >>> Engelbart = customer_db . create_page ( name = \"Doug Engelbart\" ) Note that that the keyword-arguments are exactly the class variables from the page schemas Item and Customer above. Since all pages are by default live-updated, we can modify the page objects to change the data in the actual Notion dababases. Let's say Ada Lovelace purchased a tank top as well as some khaki pants. >>> lovelace . prop . purchases . extend ([ tank_top , khaki_pants ]) >>> lovelace Customer ( \"Ada Lovelace\" ) >>> print ( lovelace ) Customer ( name = \"Ada Lovelace\" , purchases = [ Item ( \"Tank top\" ), Item ( \"Khaki pants\" )], ) Tip Use ensure_db and ensure_page to get or create a database and to get or create a page, respectively. This allows you to avoid extra codepaths in the initial phase when setting up a database for instance. Note that the title property is used as the unique identifier for a database or page.","title":"ToDo: Create/Read/Update/Delete (CRUD) operations"},{"location":"usage/db_introduction/","text":"Introduction to databases \u00b6 Databases are one of the most versatile and powerful features of Notion. Working programmatically with your databases extends Notion's functionality to infinity. Ultimate Notion unleashes the full power of Python for use with Notion's databases. So let's see what we can do. Reading a Database \u00b6 Assume we have a database called Contacts DB . from ultimate_notion import Session notion = Session . get_or_create () contacts_dbs = notion . search_db ( \"Contacts DB\" ) assert [ db . title for db in contacts_dbs ] == [ \"Contacts DB\" ] The method search_db will always return a list as Notion gives no guarantees that the title of a database is unique. Practically though, most users will give databases unique names and to accommodate for this, the returned list provides a method .item() , which will return the item of a single-item list or raise an error otherwise. Another possibility would be to retrieve the database by its unqiue id. contacts_db = notion . search_db ( \"Contacts DB\" ) . item () # or in case the unique ID of the database is known contacts_db = notion . get_db ( contacts_db . id ) The Database object provides access to many attributes like title , icon , description , etc. assert contacts_db . description == \"Database of all my contacts!\" Accessing the content of a database \u00b6","title":"Introduction"},{"location":"usage/db_introduction/#introduction-to-databases","text":"Databases are one of the most versatile and powerful features of Notion. Working programmatically with your databases extends Notion's functionality to infinity. Ultimate Notion unleashes the full power of Python for use with Notion's databases. So let's see what we can do.","title":"Introduction to databases"},{"location":"usage/db_introduction/#reading-a-database","text":"Assume we have a database called Contacts DB . from ultimate_notion import Session notion = Session . get_or_create () contacts_dbs = notion . search_db ( \"Contacts DB\" ) assert [ db . title for db in contacts_dbs ] == [ \"Contacts DB\" ] The method search_db will always return a list as Notion gives no guarantees that the title of a database is unique. Practically though, most users will give databases unique names and to accommodate for this, the returned list provides a method .item() , which will return the item of a single-item list or raise an error otherwise. Another possibility would be to retrieve the database by its unqiue id. contacts_db = notion . search_db ( \"Contacts DB\" ) . item () # or in case the unique ID of the database is known contacts_db = notion . get_db ( contacts_db . id ) The Database object provides access to many attributes like title , icon , description , etc. assert contacts_db . description == \"Database of all my contacts!\"","title":"Reading a Database"},{"location":"usage/db_introduction/#accessing-the-content-of-a-database","text":"","title":"Accessing the content of a database"},{"location":"usage/getting_started/","text":"Getting started \u00b6 Installation \u00b6 To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more recent version. Creating an integration \u00b6 Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication. Granting access to an integration \u00b6 Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children. Loading a Notion page \u00b6 To try out if your integration works, just copy&paste the following code into your favorite editor or better Jupyter Lab . Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () page . show () Run the code and you should see in Jupyter Lab following rendered Markdown code or just the plain output if you run the code in a terminal. Notion concepts in a nutshell \u00b6 In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , as a block or at the same hierarchy level as a page . Every database has a schema , i.e. a set of columns with specific types, e.g. number, text, url, etc., that imposes structured properties on every page within that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. A special type of database is a wiki database that comes with a pre-defined schema, i.e., title, last_edited_time, owner, tags, verification. Besides the properties of pages contained in a database, every page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be included in the schema if the page is contained in a database. The column name of the title attribute can be customized. Think of the title property as a human-readable identifier, which does not have to be unique! This concept is important when relation properties are used between different databases as the title property of a linked page will show up in the relation column of the other database. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". A page at the root of the workspace has the workspace itself as parent. This concept is important as access permissions for integrations are inherited from parent pages. Permissions can only be granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID), i.e. 32 hexadecimal digits, potentially structured in various fields by a dash, i.e. - . Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID}?{PARAMS} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its objects for that.","title":"Getting started"},{"location":"usage/getting_started/#getting-started","text":"","title":"Getting started"},{"location":"usage/getting_started/#installation","text":"To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more recent version.","title":"Installation"},{"location":"usage/getting_started/#creating-an-integration","text":"Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication.","title":"Creating an integration"},{"location":"usage/getting_started/#granting-access-to-an-integration","text":"Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children.","title":"Granting access to an integration"},{"location":"usage/getting_started/#loading-a-notion-page","text":"To try out if your integration works, just copy&paste the following code into your favorite editor or better Jupyter Lab . Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () page . show () Run the code and you should see in Jupyter Lab following rendered Markdown code or just the plain output if you run the code in a terminal.","title":"Loading a Notion page"},{"location":"usage/getting_started/#notion-concepts-in-a-nutshell","text":"In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , as a block or at the same hierarchy level as a page . Every database has a schema , i.e. a set of columns with specific types, e.g. number, text, url, etc., that imposes structured properties on every page within that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. A special type of database is a wiki database that comes with a pre-defined schema, i.e., title, last_edited_time, owner, tags, verification. Besides the properties of pages contained in a database, every page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be included in the schema if the page is contained in a database. The column name of the title attribute can be customized. Think of the title property as a human-readable identifier, which does not have to be unique! This concept is important when relation properties are used between different databases as the title property of a linked page will show up in the relation column of the other database. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". A page at the root of the workspace has the workspace itself as parent. This concept is important as access permissions for integrations are inherited from parent pages. Permissions can only be granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID), i.e. 32 hexadecimal digits, potentially structured in various fields by a dash, i.e. - . Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID}?{PARAMS} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its objects for that.","title":"Notion concepts in a nutshell"},{"location":"usage/page_introduction/","text":"Introduction to pages \u00b6 Work in Progress","title":"Introduction"},{"location":"usage/page_introduction/#introduction-to-pages","text":"Work in Progress","title":"Introduction to pages"}]}