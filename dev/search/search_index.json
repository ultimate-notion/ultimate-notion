{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u200b \u00b6 Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. This is a pre-alpha version! Don't use it! Features \u00b6 Databases: \u00b6 searching & retrieving databases by name and id creating new databases and deleting them modifying properties of contained pages archiving and creating new pages using the schema of the database having an easy-to-use sorted & filtered, view on the database, e.g. in Jupyter Lab update the attributes or schema of a database Pages: \u00b6 searching & retrieving pages by name and id modifying the attributes of pages, i.e. title, icon, etc. modifying the blocks, e.g. headlines, bulleted lists, etc. of pages viewing the content of pages in different formats, e.g. Markdown Users: \u00b6 list all users and self identify retrieve a user and its properties Comments: \u00b6 creating a comment retrieving a comment License \u00b6 Ultimate Notion is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"About"},{"location":"#_1","text":"Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. This is a pre-alpha version! Don't use it!","title":"\u200b"},{"location":"#features","text":"","title":"Features"},{"location":"#databases","text":"searching & retrieving databases by name and id creating new databases and deleting them modifying properties of contained pages archiving and creating new pages using the schema of the database having an easy-to-use sorted & filtered, view on the database, e.g. in Jupyter Lab update the attributes or schema of a database","title":"Databases:"},{"location":"#pages","text":"searching & retrieving pages by name and id modifying the attributes of pages, i.e. title, icon, etc. modifying the blocks, e.g. headlines, bulleted lists, etc. of pages viewing the content of pages in different formats, e.g. Markdown","title":"Pages:"},{"location":"#users","text":"list all users and self identify retrieve a user and its properties","title":"Users:"},{"location":"#comments","text":"creating a comment retrieving a comment","title":"Comments:"},{"location":"#license","text":"Ultimate Notion is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"getting_started/","text":"Getting Started \u00b6 Before we get started a few words about Notion and its basic concepts are appropriate. In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , or at the same hierarchy level as a page . A database has a schema , that specifies various structured properties of the individual pages contained in that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. Regardless of the properties, each page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be shown as database property, while the actual name of the property can be customized. Consequently, a schema always has a title property. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". This concept is important as access permissions for integrations are inherited from parent pages. Permissions can be only granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID). Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its object for that. Installation \u00b6 To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more uptodate version. Creating an integration \u00b6 Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication. Granting access to a page for an integration \u00b6 Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children. Access the page with Python \u00b6 To try out if your integration works, just copy&paste the following code into your favorite editor. Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () print ( page )","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Before we get started a few words about Notion and its basic concepts are appropriate. In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , or at the same hierarchy level as a page . A database has a schema , that specifies various structured properties of the individual pages contained in that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. Regardless of the properties, each page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be shown as database property, while the actual name of the property can be customized. Consequently, a schema always has a title property. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". This concept is important as access permissions for integrations are inherited from parent pages. Permissions can be only granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID). Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its object for that.","title":"Getting Started"},{"location":"getting_started/#installation","text":"To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more uptodate version.","title":"Installation"},{"location":"getting_started/#creating-an-integration","text":"Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication.","title":"Creating an integration"},{"location":"getting_started/#granting-access-to-a-page-for-an-integration","text":"Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children.","title":"Granting access to a page for an integration"},{"location":"getting_started/#access-the-page-with-python","text":"To try out if your integration works, just copy&paste the following code into your favorite editor. Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () print ( page )","title":"Access the page with Python"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"ultimate_notion database page query record schema session user utils view","title":"SUMMARY"},{"location":"reference/ultimate_notion/","text":"ultimate_notion \u00b6 Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro __all__ = [ '__version__' , 'Session' ] module-attribute \u00b6 __version__ = version ( 'ultimate-notion' ) module-attribute \u00b6 Session ( auth : str | None = None , kwargs : Any ) \u00b6 A session for the Notion API Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' ) notional = NotionalSession ( auth = auth , None = kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () create_db ( parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database : \"\"\"Create a new database\"\"\" schema = { k : v . obj_ref for k , v in schema . items ()} db = self . notional . databases . create ( parent = parent_page . obj_ref , title = title , schema = schema ) return Database ( db_ref = db , session = self ) delete_db ( db_ref : Database | ObjRef ) \u00b6 Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid ) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( db_ref = self . _get_db ( db_uuid ), session = self ) get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( page_ref = self . _get_page ( page_uuid ), session = self ) get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . notional . users . retrieve ( user_uuid )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . whoami () if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) except ConnectError : error = 'Unable to connect to Notion' except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) search_db ( db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( db_ref = db , session = self ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default page_name str | None name/title of the page, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_page ( self , page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ]: \"\"\"Search a page by name Args: page_name: name/title of the page, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( page_name ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( page_ref = page , session = self ) for page in query . execute ()) if exact and page_name is not None : pages = SList ( page for page in pages if page . title == page_name ) return pages set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped ) whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"Reference"},{"location":"reference/ultimate_notion/#ultimate_notion","text":"Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","text":"","title":"__all__"},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","text":"","title":"__version__"},{"location":"reference/ultimate_notion/#ultimate_notion.Session","text":"A session for the Notion API Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.notional","text":"","title":"notional"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()]","title":"all_users()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database : \"\"\"Create a new database\"\"\" schema = { k : v . obj_ref for k , v in schema . items ()} db = self . notional . databases . create ( parent = parent_page . obj_ref , title = title , schema = schema ) return Database ( db_ref = db , session = self )","title":"create_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.delete_db","text":"Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid )","title":"delete_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_db","text":"Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( db_ref = self . _get_db ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( page_ref = self . _get_page ( page_uuid ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . notional . users . retrieve ( user_uuid ))","title":"get_user()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . whoami () if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) except ConnectError : error = 'Unable to connect to Notion' except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( db_ref = db , session = self ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default page_name str | None name/title of the page, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_page ( self , page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ]: \"\"\"Search a page by name Args: page_name: name/title of the page, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( page_name ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( page_ref = page , session = self ) for page in query . execute ()) if exact and page_name is not None : pages = SList ( page for page in pages if page . title == page_name ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.set_cache","text":"Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped )","title":"set_cache()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"whoami()"},{"location":"reference/ultimate_notion/database/","text":"database \u00b6 Database object Database ( db_ref : blocks . Database , session : Session ) \u00b6 Source code in src/ultimate_notion/database.py def __init__ ( self , db_ref : blocks . Database , session : Session ): self . obj_ref : blocks . Database = db_ref self . session : Session = session archived : bool property \u00b6 cover : types . FileObject | None property \u00b6 description : list [ types . RichTextObject ] | None property \u00b6 icon : types . FileObject | types . EmojiObject | None property \u00b6 is_inline : bool property \u00b6 meta_properties : dict [ str , Any ] property \u00b6 obj_ref : blocks . Database = db_ref instance-attribute \u00b6 schema : dict [ str , PropertyObject ] property \u00b6 session : Session = session instance-attribute \u00b6 title : str property \u00b6 Return the title of this database as plain text. url : str property \u00b6 __repr__ () -> str \u00b6 Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/database.py def __str__ ( self ): return self . title create_page () \u00b6 Source code in src/ultimate_notion/database.py def create_page ( self ): raise NotImplementedError delete () \u00b6 Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" self . session . delete_db ( self ) query () -> QueryBuilder \u00b6 Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self ) view ( * , live_update : bool = True ) -> View \u00b6 Source code in src/ultimate_notion/database.py def view ( self , * , live_update : bool = True ) -> View : query = self . session . notional . databases . query ( self . id ) pages = [ Page ( page_obj , self . session , live_update = live_update ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query , live_update = live_update )","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","text":"Database object","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","text":"Source code in src/ultimate_notion/database.py def __init__ ( self , db_ref : blocks . Database , session : Session ): self . obj_ref : blocks . Database = db_ref self . session : Session = session","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.meta_properties","text":"","title":"meta_properties"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.session","text":"","title":"session"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","text":"Return the title of this database as plain text.","title":"title"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","text":"Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","text":"Source code in src/ultimate_notion/database.py def __str__ ( self ): return self . title","title":"__str__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.create_page","text":"Source code in src/ultimate_notion/database.py def create_page ( self ): raise NotImplementedError","title":"create_page()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.delete","text":"Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" self . session . delete_db ( self )","title":"delete()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.query","text":"Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self )","title":"query()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.view","text":"Source code in src/ultimate_notion/database.py def view ( self , * , live_update : bool = True ) -> View : query = self . session . notional . databases . query ( self . id ) pages = [ Page ( page_obj , self . session , live_update = live_update ) for page_obj in query . execute ()] return View ( database = self , pages = pages , query = query , live_update = live_update )","title":"view()"},{"location":"reference/ultimate_notion/page/","text":"page \u00b6 Page object Page ( page_ref : blocks . Page , session : Session , * , live_update : bool = True ) \u00b6 Source code in src/ultimate_notion/page.py def __init__ ( self , page_ref : blocks . Page , session : Session , * , live_update : bool = True ): self . obj_ref : blocks . Page = page_ref self . session = session self . live_update = live_update database : Database | None property \u00b6 Retrieve database from parent or None icon : str property \u00b6 live_update = live_update instance-attribute \u00b6 obj_ref : blocks . Page = page_ref instance-attribute \u00b6 properties : dict [ str , types . PropertyValue ] property \u00b6 session = session instance-attribute \u00b6 title : str property \u00b6 __delitem__ ( key ) \u00b6 Source code in src/ultimate_notion/page.py def __delitem__ ( self , key ): # ToDo: Implement me! pass __getitem__ ( property_name ) -> types . PropertyValue \u00b6 Source code in src/ultimate_notion/page.py def __getitem__ ( self , property_name ) -> types . PropertyValue : val = self . obj_ref [ property_name ] if isinstance ( val , types . Date ): val = val . date elif isinstance ( val , types . Relation ): val = [ p . title for p in self . _resolve_relation ( val )] elif isinstance ( val , types . Formula ): val = val . Result elif isinstance ( val , types . LastEditedBy | types . CreatedBy ): val = str ( self . session . get_user ( val . last_edited_by . id )) elif isinstance ( val , types . MultiSelect ): val = val . Values elif isinstance ( val , types . NativeTypeMixin ): val = val . Value else : msg = f 'Unknown property type { type ( val ) } ' raise RuntimeError ( msg ) return val __repr__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\" __setitem__ ( property_name : str , value : Any ) \u00b6 Source code in src/ultimate_notion/page.py def __setitem__ ( self , property_name : str , value : Any ): value_type = self . _get_prop_type ( property_name ) if isinstance ( value , value_type ): prop = value elif hasattr ( value_type , '__compose__' ): prop = value_type [ value ] else : msg = f 'Unsupported value type for { value_type . type } ' raise TypeError ( msg ) if self . live_update : # update the property on the server (which will refresh the local data) self . session . notional . pages . update ( self . obj_ref , ** { property_name : prop }) __str__ () \u00b6 Source code in src/ultimate_notion/page.py def __str__ ( self ): return self . title clone () -> Page \u00b6 Source code in src/ultimate_notion/page.py def clone ( self ) -> Page : return deepcopy_with_sharing ( self , shared_attributes = [ 'session' ]) to_dict () -> dict [ str , Any ] \u00b6 Source code in src/ultimate_notion/page.py def to_dict ( self ) -> dict [ str , Any ]: dct = super () . to_dict () # meta properties for k in self . properties : dct [ k ] = self [ k ] return dct","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","text":"Page object","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","text":"Source code in src/ultimate_notion/page.py def __init__ ( self , page_ref : blocks . Page , session : Session , * , live_update : bool = True ): self . obj_ref : blocks . Page = page_ref self . session = session self . live_update = live_update","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.database","text":"Retrieve database from parent or None","title":"database"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.live_update","text":"","title":"live_update"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.session","text":"","title":"session"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","text":"","title":"title"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__delitem__","text":"Source code in src/ultimate_notion/page.py def __delitem__ ( self , key ): # ToDo: Implement me! pass","title":"__delitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__getitem__","text":"Source code in src/ultimate_notion/page.py def __getitem__ ( self , property_name ) -> types . PropertyValue : val = self . obj_ref [ property_name ] if isinstance ( val , types . Date ): val = val . date elif isinstance ( val , types . Relation ): val = [ p . title for p in self . _resolve_relation ( val )] elif isinstance ( val , types . Formula ): val = val . Result elif isinstance ( val , types . LastEditedBy | types . CreatedBy ): val = str ( self . session . get_user ( val . last_edited_by . id )) elif isinstance ( val , types . MultiSelect ): val = val . Values elif isinstance ( val , types . NativeTypeMixin ): val = val . Value else : msg = f 'Unknown property type { type ( val ) } ' raise RuntimeError ( msg ) return val","title":"__getitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__repr__","text":"Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__setitem__","text":"Source code in src/ultimate_notion/page.py def __setitem__ ( self , property_name : str , value : Any ): value_type = self . _get_prop_type ( property_name ) if isinstance ( value , value_type ): prop = value elif hasattr ( value_type , '__compose__' ): prop = value_type [ value ] else : msg = f 'Unsupported value type for { value_type . type } ' raise TypeError ( msg ) if self . live_update : # update the property on the server (which will refresh the local data) self . session . notional . pages . update ( self . obj_ref , ** { property_name : prop })","title":"__setitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__str__","text":"Source code in src/ultimate_notion/page.py def __str__ ( self ): return self . title","title":"__str__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.clone","text":"Source code in src/ultimate_notion/page.py def clone ( self ) -> Page : return deepcopy_with_sharing ( self , shared_attributes = [ 'session' ])","title":"clone()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_dict","text":"Source code in src/ultimate_notion/page.py def to_dict ( self ) -> dict [ str , Any ]: dct = super () . to_dict () # meta properties for k in self . properties : dct [ k ] = self [ k ] return dct","title":"to_dict()"},{"location":"reference/ultimate_notion/query/","text":"query \u00b6 QueryBuilder ( db : Database ) \u00b6 \"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError db = db instance-attribute \u00b6","title":"Query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query","text":"","title":"query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder","text":"\"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError","title":"QueryBuilder"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder.db","text":"","title":"db"},{"location":"reference/ultimate_notion/record/","text":"record \u00b6 Core building block is a Record Record \u00b6 The base type for all Notion objects. archived : bool property \u00b6 created_by property \u00b6 created_time : datetime property \u00b6 has_children : bool property \u00b6 id : UUID property \u00b6 last_edited_by property \u00b6 last_edited_time : datetime property \u00b6 obj_ref : blocks . DataRecord = None class-attribute \u00b6 parent : types . ParentRef property \u00b6 url : str property \u00b6 to_dict () -> dict [ str , Any ] \u00b6 Source code in src/ultimate_notion/record.py def to_dict ( self ) -> dict [ str , Any ]: return { 'id' : self . id , 'created_time' : self . created_time , 'created_by' : self . created_by , 'last_edited_time' : self . last_edited_time , 'last_edited_by' : self . last_edited_by , 'parent' : self . parent , 'has_children' : self . has_children , 'archived' : self . archived , }","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record","text":"Core building block is a Record","title":"record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record","text":"The base type for all Notion objects.","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.id","text":"","title":"id"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.parent","text":"","title":"parent"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.url","text":"","title":"url"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.to_dict","text":"Source code in src/ultimate_notion/record.py def to_dict ( self ) -> dict [ str , Any ]: return { 'id' : self . id , 'created_time' : self . created_time , 'created_by' : self . created_by , 'last_edited_time' : self . last_edited_time , 'last_edited_by' : self . last_edited_by , 'parent' : self . parent , 'has_children' : self . has_children , 'archived' : self . archived , }","title":"to_dict()"},{"location":"reference/ultimate_notion/schema/","text":"schema \u00b6 Functionality around defining a database schema Function \u00b6 Enum of standard aggregation functions. AVERAGE = 'average' class-attribute \u00b6 CHECKED = 'checked' class-attribute \u00b6 COUNT = 'count' class-attribute \u00b6 COUNT_PER_GROUP = 'count_per_group' class-attribute \u00b6 COUNT_VALUES = 'count_values' class-attribute \u00b6 DATE_RANGE = 'date_range' class-attribute \u00b6 EARLIEST_DATE = 'earliest_date' class-attribute \u00b6 EMPTY = 'empty' class-attribute \u00b6 LATEST_DATE = 'latest_date' class-attribute \u00b6 MAX = 'max' class-attribute \u00b6 MEDIAN = 'median' class-attribute \u00b6 MIN = 'min' class-attribute \u00b6 NOT_EMPTY = 'not_empty' class-attribute \u00b6 PERCENT_CHECKED = 'percent_checked' class-attribute \u00b6 PERCENT_EMPTY = 'percent_empty' class-attribute \u00b6 PERCENT_NOT_EMPTY = 'percent_not_empty' class-attribute \u00b6 PERCENT_PER_GROUP = 'percent_per_group' class-attribute \u00b6 RANGE = 'range' class-attribute \u00b6 SHOW_ORIGINAL = 'show_original' class-attribute \u00b6 SHOW_UNIQUE = 'show_unique' class-attribute \u00b6 SUM = 'sum' class-attribute \u00b6 UNCHECKED = 'unchecked' class-attribute \u00b6 UNIQUE = 'unique' class-attribute \u00b6 Number ( number_format : NumberFormat ) \u00b6 Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): self . obj_ref = schema . Number [ number_format ] obj_ref = schema . Number [ number_format ] instance-attribute \u00b6 NumberFormat \u00b6 Enum of available number formats in Notion. ARGENTINE_PESO = 'argentine_peso' class-attribute \u00b6 BAHT = 'baht' class-attribute \u00b6 CANADIAN_DOLLAR = 'canadian_dollar' class-attribute \u00b6 CHILEAN_PESO = 'chilean_peso' class-attribute \u00b6 COLOMBIAN_PESO = 'colombian_peso' class-attribute \u00b6 DANISH_KRONE = 'danish_krone' class-attribute \u00b6 DIRHAM = 'dirham' class-attribute \u00b6 DOLLAR = 'dollar' class-attribute \u00b6 EURO = 'euro' class-attribute \u00b6 FORINT = 'forint' class-attribute \u00b6 FRANC = 'franc' class-attribute \u00b6 HONG_KONG_DOLLAR = 'hong_kong_dollar' class-attribute \u00b6 KORUNA = 'koruna' class-attribute \u00b6 KRONA = 'krona' class-attribute \u00b6 LEU = 'leu' class-attribute \u00b6 LIRA = 'lira' class-attribute \u00b6 MEXICAN_PESO = 'mexican_peso' class-attribute \u00b6 NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar' class-attribute \u00b6 NEW_ZEALAND_DOLLAR = 'new_zealand_dollar' class-attribute \u00b6 NORWEGIAN_KRONE = 'norwegian_krone' class-attribute \u00b6 NUMBER = 'number' class-attribute \u00b6 NUMBER_WITH_COMMAS = 'number_with_commas' class-attribute \u00b6 PERCENT = 'percent' class-attribute \u00b6 PHILIPPINE_PESO = 'philippine_peso' class-attribute \u00b6 POUND = 'pound' class-attribute \u00b6 RAND = 'rand' class-attribute \u00b6 REAL = 'real' class-attribute \u00b6 RINGGIT = 'ringgit' class-attribute \u00b6 RIYAL = 'riyal' class-attribute \u00b6 RUBLE = 'ruble' class-attribute \u00b6 RUPEE = 'rupee' class-attribute \u00b6 RUPIAH = 'rupiah' class-attribute \u00b6 SHEKEL = 'shekel' class-attribute \u00b6 URUGUAYAN_PESO = 'uruguayan_peso' class-attribute \u00b6 WON = 'won' class-attribute \u00b6 YEN = 'yen' class-attribute \u00b6 YUAN = 'yuan' class-attribute \u00b6 ZLOTY = 'zloty' class-attribute \u00b6 PropertyObject \u00b6 Base class for Notion property objects. id property \u00b6 name property \u00b6 obj_ref : schema . PropertyObject class-attribute \u00b6 Text () \u00b6 Text property Source code in src/ultimate_notion/schema.py def __init__ ( self ): self . obj_ref = schema . RichText () obj_ref = schema . RichText () instance-attribute \u00b6 Title () \u00b6 Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self ): self . obj_ref = schema . Title () obj_ref = schema . Title () instance-attribute \u00b6","title":"Schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema","text":"Functionality around defining a database schema","title":"schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function","text":"Enum of standard aggregation functions.","title":"Function"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.AVERAGE","text":"","title":"AVERAGE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.CHECKED","text":"","title":"CHECKED"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.COUNT","text":"","title":"COUNT"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.COUNT_PER_GROUP","text":"","title":"COUNT_PER_GROUP"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.COUNT_VALUES","text":"","title":"COUNT_VALUES"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.DATE_RANGE","text":"","title":"DATE_RANGE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.EARLIEST_DATE","text":"","title":"EARLIEST_DATE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.EMPTY","text":"","title":"EMPTY"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.LATEST_DATE","text":"","title":"LATEST_DATE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.MAX","text":"","title":"MAX"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.MEDIAN","text":"","title":"MEDIAN"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.MIN","text":"","title":"MIN"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.NOT_EMPTY","text":"","title":"NOT_EMPTY"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.PERCENT_CHECKED","text":"","title":"PERCENT_CHECKED"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.PERCENT_EMPTY","text":"","title":"PERCENT_EMPTY"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.PERCENT_NOT_EMPTY","text":"","title":"PERCENT_NOT_EMPTY"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.PERCENT_PER_GROUP","text":"","title":"PERCENT_PER_GROUP"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.RANGE","text":"","title":"RANGE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.SHOW_ORIGINAL","text":"","title":"SHOW_ORIGINAL"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.SHOW_UNIQUE","text":"","title":"SHOW_UNIQUE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.SUM","text":"","title":"SUM"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.UNCHECKED","text":"","title":"UNCHECKED"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Function.UNIQUE","text":"","title":"UNIQUE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number","text":"Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): self . obj_ref = schema . Number [ number_format ]","title":"Number"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat","text":"Enum of available number formats in Notion.","title":"NumberFormat"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.ARGENTINE_PESO","text":"","title":"ARGENTINE_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.BAHT","text":"","title":"BAHT"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.CANADIAN_DOLLAR","text":"","title":"CANADIAN_DOLLAR"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.CHILEAN_PESO","text":"","title":"CHILEAN_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.COLOMBIAN_PESO","text":"","title":"COLOMBIAN_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.DANISH_KRONE","text":"","title":"DANISH_KRONE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.DIRHAM","text":"","title":"DIRHAM"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.DOLLAR","text":"","title":"DOLLAR"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.EURO","text":"","title":"EURO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.FORINT","text":"","title":"FORINT"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.FRANC","text":"","title":"FRANC"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.HONG_KONG_DOLLAR","text":"","title":"HONG_KONG_DOLLAR"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.KORUNA","text":"","title":"KORUNA"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.KRONA","text":"","title":"KRONA"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.LEU","text":"","title":"LEU"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.LIRA","text":"","title":"LIRA"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.MEXICAN_PESO","text":"","title":"MEXICAN_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.NEW_TAIWAN_DOLLAR","text":"","title":"NEW_TAIWAN_DOLLAR"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.NEW_ZEALAND_DOLLAR","text":"","title":"NEW_ZEALAND_DOLLAR"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.NORWEGIAN_KRONE","text":"","title":"NORWEGIAN_KRONE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.NUMBER","text":"","title":"NUMBER"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.NUMBER_WITH_COMMAS","text":"","title":"NUMBER_WITH_COMMAS"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.PERCENT","text":"","title":"PERCENT"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.PHILIPPINE_PESO","text":"","title":"PHILIPPINE_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.POUND","text":"","title":"POUND"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RAND","text":"","title":"RAND"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.REAL","text":"","title":"REAL"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RINGGIT","text":"","title":"RINGGIT"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RIYAL","text":"","title":"RIYAL"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RUBLE","text":"","title":"RUBLE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RUPEE","text":"","title":"RUPEE"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.RUPIAH","text":"","title":"RUPIAH"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.SHEKEL","text":"","title":"SHEKEL"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.URUGUAYAN_PESO","text":"","title":"URUGUAYAN_PESO"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.WON","text":"","title":"WON"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.YEN","text":"","title":"YEN"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.YUAN","text":"","title":"YUAN"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.NumberFormat.ZLOTY","text":"","title":"ZLOTY"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyObject","text":"Base class for Notion property objects.","title":"PropertyObject"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyObject.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text","text":"Text property Source code in src/ultimate_notion/schema.py def __init__ ( self ): self . obj_ref = schema . RichText ()","title":"Text"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title","text":"Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self ): self . obj_ref = schema . Title ()","title":"Title"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/session/","text":"session \u00b6 Session object ENV_NOTION_AUTH_TOKEN = 'NOTION_AUTH_TOKEN' module-attribute \u00b6 Session ( auth : str | None = None , kwargs : Any ) \u00b6 A session for the Notion API Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' ) notional = NotionalSession ( auth = auth , None = kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () create_db ( parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database : \"\"\"Create a new database\"\"\" schema = { k : v . obj_ref for k , v in schema . items ()} db = self . notional . databases . create ( parent = parent_page . obj_ref , title = title , schema = schema ) return Database ( db_ref = db , session = self ) delete_db ( db_ref : Database | ObjRef ) \u00b6 Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid ) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( db_ref = self . _get_db ( db_uuid ), session = self ) get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( page_ref = self . _get_page ( page_uuid ), session = self ) get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . notional . users . retrieve ( user_uuid )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . whoami () if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) except ConnectError : error = 'Unable to connect to Notion' except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) search_db ( db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( db_ref = db , session = self ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default page_name str | None name/title of the page, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_page ( self , page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ]: \"\"\"Search a page by name Args: page_name: name/title of the page, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( page_name ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( page_ref = page , session = self ) for page in query . execute ()) if exact and page_name is not None : pages = SList ( page for page in pages if page . title == page_name ) return pages set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped ) whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me () SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","text":"Session object","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.ENV_NOTION_AUTH_TOKEN","text":"","title":"ENV_NOTION_AUTH_TOKEN"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","text":"A session for the Notion API Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.notional","text":"","title":"notional"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()]","title":"all_users()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent_page : Page , schema : dict [ str , PropertyObject ], title = None ) -> Database : \"\"\"Create a new database\"\"\" schema = { k : v . obj_ref for k , v in schema . items ()} db = self . notional . databases . create ( parent = parent_page . obj_ref , title = title , schema = schema ) return Database ( db_ref = db , session = self )","title":"create_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.delete_db","text":"Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid )","title":"delete_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","text":"Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( db_ref = self . _get_db ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( page_ref = self . _get_page ( page_uuid ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . notional . users . retrieve ( user_uuid ))","title":"get_user()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . whoami () if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) except ConnectError : error = 'Unable to connect to Notion' except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( db_ref = db , session = self ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default page_name str | None name/title of the page, return all if None None exact bool perform an exact search, not only a substring match True parents Iterable [ str ] | None list of parent pages to further refine the search None Source code in src/ultimate_notion/session.py def search_page ( self , page_name : str | None = None , * , exact : bool = True , parents : Iterable [ str ] | None = None ) -> SList [ Page ]: \"\"\"Search a page by name Args: page_name: name/title of the page, return all if `None` exact: perform an exact search, not only a substring match parents: list of parent pages to further refine the search \"\"\" if parents is not None : # ToDo: Implement a search that also considers the parents raise NotImplementedError query = self . notional . search ( page_name ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( page_ref = page , session = self ) for page in query . execute ()) if exact and page_name is not None : pages = SList ( page for page in pages if page . title == page_name ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.set_cache","text":"Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped )","title":"set_cache()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"whoami()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.SessionError","text":"Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/user/","text":"user \u00b6 User ( obj_ref : types . User ) \u00b6 Source code in src/ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref avatar_url property \u00b6 email : str | None property \u00b6 id property \u00b6 is_bot : bool property \u00b6 is_person : bool property \u00b6 name property \u00b6 obj_ref : types . User = obj_ref instance-attribute \u00b6 type property \u00b6 __eq__ ( other ) \u00b6 Source code in src/ultimate_notion/user.py def __eq__ ( self , other ): return self . id == other . id __repr__ () -> str \u00b6 Source code in src/ultimate_notion/user.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/user.py def __str__ ( self ): return self . name","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user","text":"","title":"user"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User","text":"Source code in src/ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.email","text":"","title":"email"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.id","text":"","title":"id"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_bot","text":"","title":"is_bot"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_person","text":"","title":"is_person"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.type","text":"","title":"type"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__eq__","text":"Source code in src/ultimate_notion/user.py def __eq__ ( self , other ): return self . id == other . id","title":"__eq__()"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__repr__","text":"Source code in src/ultimate_notion/user.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { str ( self ) } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__str__","text":"Source code in src/ultimate_notion/user.py def __str__ ( self ): return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/utils/","text":"utils \u00b6 Additional utilities that fit nowhere else ObjRef : TypeAlias = UUID | str module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 SList \u00b6 A list that holds often only a single element item () -> T \u00b6 Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg ) deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ) \u00b6 Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone find_index ( elem : Any , lst : list [ Any ]) -> int | None \u00b6 Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem ) find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array \u00b6 Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID \u00b6 Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return types . ObjectReference [ obj ] . id is_notebook () -> bool \u00b6 Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter schema2prop_type ( schema_type : str ) -> type [ types . PropertyValue ] \u00b6 Map the name of a schema attribute to the corresponding property type Parameters: Name Type Description Default schema_type str name of the schema property, e.g. status , url , etc. The name is defined in name in the classes of notional.schema . required Source code in src/ultimate_notion/utils.py def schema2prop_type ( schema_type : str ) -> type [ types . PropertyValue ]: \"\"\"Map the name of a schema attribute to the corresponding property type Args: schema_type: name of the schema property, e.g. `status`, `url`, etc. The name is defined in `name` in the classes of `notional.schema`. \"\"\" return types . PropertyValue . __notional_typemap__ [ schema_type ] store_retvals ( func ) \u00b6 Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped","title":"Utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","text":"Additional utilities that fit nowhere else","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.ObjRef","text":"","title":"ObjRef"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","text":"","title":"T"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","text":"A list that holds often only a single element","title":"SList"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","text":"Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg )","title":"item()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.deepcopy_with_sharing","text":"Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone","title":"deepcopy_with_sharing()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_index","text":"Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem )","title":"find_index()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_indices","text":"Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result","title":"find_indices()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_uuid","text":"Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return types . ObjectReference [ obj ] . id","title":"get_uuid()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","text":"Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter","title":"is_notebook()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.schema2prop_type","text":"Map the name of a schema attribute to the corresponding property type Parameters: Name Type Description Default schema_type str name of the schema property, e.g. status , url , etc. The name is defined in name in the classes of notional.schema . required Source code in src/ultimate_notion/utils.py def schema2prop_type ( schema_type : str ) -> type [ types . PropertyValue ]: \"\"\"Map the name of a schema attribute to the corresponding property type Args: schema_type: name of the schema property, e.g. `status`, `url`, etc. The name is defined in `name` in the classes of `notional.schema`. \"\"\" return types . PropertyValue . __notional_typemap__ [ schema_type ]","title":"schema2prop_type()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.store_retvals","text":"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped","title":"store_retvals()"},{"location":"reference/ultimate_notion/view/","text":"view \u00b6 View representing the result of a Query ColType = str | list [ str ] module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 View ( database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ) \u00b6 Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ): self . database = database self . _live_update = live_update self . _query = query self . _title_col = SList ( col for col , val in database . schema . items () if isinstance ( val , Title )) . item () self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset () columns : list [ str ] property \u00b6 Columns of the database view aligned with the elements of a row database = database instance-attribute \u00b6 has_icon : bool property \u00b6 has_id : bool property \u00b6 has_index : bool property \u00b6 live_update property \u00b6 __len__ () \u00b6 Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices ) __repr__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : repr_str = self . show () if is_notebook (): from IPython.core.display import display_html display_html ( repr_str ) return '' else : return repr_str __str__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show ( html = False ) apply ( func : Callable [[ Page ], T ]) -> list [ T ] \u00b6 Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if live_update is True Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if `live_update` is True Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()] clone () -> View \u00b6 Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ]) filter () \u00b6 Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError head ( num : int ) -> View \u00b6 Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view limit ( num : int ) -> View \u00b6 Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num ) page ( idx : int ) -> Page \u00b6 Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]] pages () -> list [ Page ] \u00b6 Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))] reload () -> View \u00b6 Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = [ Page ( page_obj , self . database . session , live_update = self . _live_update ) for page_obj in self . _query . execute () ] return view reset () -> View \u00b6 Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self reverse () -> View \u00b6 Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view row ( idx : int ) -> list [ Any ] \u00b6 Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) page_dct = page . to_dict () row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page_dct [ col ]) return row rows () -> list [ list [ Any ]] \u00b6 Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))] select ( cols : ColType , more_cols : str ) -> View \u00b6 Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view show ( html : bool | None = None ) \u00b6 Show the view Parameters: Name Type Description Default html bool | None output in html or not, or determine automatically based on context, e.g. Jupyter lab. None Source code in src/ultimate_notion/view.py def show ( self , html : bool | None = None ): \"\"\"Show the view Args: html: output in html or not, or determine automatically based on context, e.g. Jupyter lab. \"\"\" rows = self . rows () cols = self . columns if html is None : html = is_notebook () if html : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' ) else : html_str = tabulate ( rows , headers = cols , tablefmt = 'html' ) return html_str else : return tabulate ( rows , headers = cols ) sort () \u00b6 Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError tail ( num : int ) -> View \u00b6 Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view to_pandas () -> pd . DataFrame \u00b6 Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns ) with_icon ( name = 'icon' ) -> View \u00b6 Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view with_id ( name : str = 'id' ) -> View \u00b6 Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view with_index ( name = 'index' ) -> View \u00b6 Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view with_live_update () -> View \u00b6 Source code in src/ultimate_notion/view.py def with_live_update ( self ) -> View : if self . live_update : return self for page in self . _pages : page . live_update = True self . _live_update = True return self without_icon () -> View \u00b6 Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view without_id () -> View \u00b6 Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view without_index () -> View \u00b6 Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view without_live_update () -> View \u00b6 Source code in src/ultimate_notion/view.py def without_live_update ( self ) -> View : if not self . live_update : return self for page in self . _pages : page . live_update = False self . _live_update = False return self","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","text":"View representing the result of a Query","title":"view"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.ColType","text":"","title":"ColType"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.T","text":"","title":"T"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","text":"Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ): self . database = database self . _live_update = live_update self . _query = query self . _title_col = SList ( col for col , val in database . schema . items () if isinstance ( val , Title )) . item () self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset ()","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","text":"Columns of the database view aligned with the elements of a row","title":"columns"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","text":"","title":"database"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_icon","text":"","title":"has_icon"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_id","text":"","title":"has_id"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","text":"","title":"has_index"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.live_update","text":"","title":"live_update"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__len__","text":"Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices )","title":"__len__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__repr__","text":"Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : repr_str = self . show () if is_notebook (): from IPython.core.display import display_html display_html ( repr_str ) return '' else : return repr_str","title":"__repr__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","text":"Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show ( html = False )","title":"__str__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.apply","text":"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if live_update is True Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if `live_update` is True Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()]","title":"apply()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","text":"Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ])","title":"clone()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.filter","text":"Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError","title":"filter()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.head","text":"Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view","title":"head()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","text":"Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num )","title":"limit()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.page","text":"Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]]","title":"page()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.pages","text":"Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))]","title":"pages()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reload","text":"Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = [ Page ( page_obj , self . database . session , live_update = self . _live_update ) for page_obj in self . _query . execute () ] return view","title":"reload()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reset","text":"Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self","title":"reset()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reverse","text":"Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view","title":"reverse()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.row","text":"Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) page_dct = page . to_dict () row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page_dct [ col ]) return row","title":"row()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.rows","text":"Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))]","title":"rows()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.select","text":"Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view","title":"select()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.show","text":"Show the view Parameters: Name Type Description Default html bool | None output in html or not, or determine automatically based on context, e.g. Jupyter lab. None Source code in src/ultimate_notion/view.py def show ( self , html : bool | None = None ): \"\"\"Show the view Args: html: output in html or not, or determine automatically based on context, e.g. Jupyter lab. \"\"\" rows = self . rows () cols = self . columns if html is None : html = is_notebook () if html : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' ) else : html_str = tabulate ( rows , headers = cols , tablefmt = 'html' ) return html_str else : return tabulate ( rows , headers = cols )","title":"show()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.sort","text":"Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError","title":"sort()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.tail","text":"Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view","title":"tail()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pandas","text":"Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns )","title":"to_pandas()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_icon","text":"Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view","title":"with_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_id","text":"Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view","title":"with_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","text":"Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view","title":"with_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_live_update","text":"Source code in src/ultimate_notion/view.py def with_live_update ( self ) -> View : if self . live_update : return self for page in self . _pages : page . live_update = True self . _live_update = True return self","title":"with_live_update()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_icon","text":"Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view","title":"without_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_id","text":"Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view","title":"without_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","text":"Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view","title":"without_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_live_update","text":"Source code in src/ultimate_notion/view.py def without_live_update ( self ) -> View : if not self . live_update : return self for page in self . _pages : page . live_update = False self . _live_update = False return self","title":"without_live_update()"}]}