{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u200b \u00b6 Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. This is a pre-alpha version! Don't use it! Features \u00b6 Databases \u00b6 searching & retrieving databases by name or id creating new databases and deleting them modifying properties of contained pages archiving and creating new pages using the schema of the database having an easy-to-use sorted & filtered, view on the database, e.g. in Jupyter Lab update the attributes or schema of a database Pages \u00b6 searching & retrieving pages by name and id modifying the attributes of pages, i.e. title, icon, etc. modifying the blocks, e.g. headlines, bulleted lists, etc. of pages viewing the content of pages in different formats, e.g. Markdown Users \u00b6 list all users and self identify retrieve a user and its properties Comments \u00b6 creating a comment retrieving a comment License \u00b6 Ultimate Notion is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"Home"},{"location":"#_1","text":"Ultimate Notion is the ultimate Python library for Notion ! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. This is a pre-alpha version! Don't use it!","title":"\u200b"},{"location":"#features","text":"","title":"Features"},{"location":"#databases","text":"searching & retrieving databases by name or id creating new databases and deleting them modifying properties of contained pages archiving and creating new pages using the schema of the database having an easy-to-use sorted & filtered, view on the database, e.g. in Jupyter Lab update the attributes or schema of a database","title":"Databases"},{"location":"#pages","text":"searching & retrieving pages by name and id modifying the attributes of pages, i.e. title, icon, etc. modifying the blocks, e.g. headlines, bulleted lists, etc. of pages viewing the content of pages in different formats, e.g. Markdown","title":"Pages"},{"location":"#users","text":"list all users and self identify retrieve a user and its properties","title":"Users"},{"location":"#comments","text":"creating a comment retrieving a comment","title":"Comments"},{"location":"#license","text":"Ultimate Notion is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. , / p and . / n for previous and next page, respectively, as well as / / s for searching.","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent [guide created by FreeCodeCamp] 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open [GitHub's code editor]. Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. !!! info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an [descriptive commit message] is highly recommended. In case of doubt, you can check the commit history with: ``` git log --graph --decorate --pretty=oneline --abbrev-commit --all ``` to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Ultimate Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent [guide created by FreeCodeCamp] 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes. This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way for proposing changes. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open [GitHub's code editor]. Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. !!! info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an [descriptive commit message] is highly recommended. In case of doubt, you can check the commit history with: ``` git log --graph --decorate --pretty=oneline --abbrev-commit --all ``` to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"getting_started/","text":"Getting Started \u00b6 Before we get started a few words about Notion and its basic concepts are appropriate. In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , as a block or at the same hierarchy level as a page . A database has a schema , that specifies various structured properties of the individual pages contained in that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. Regardless of the properties, each page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be shown as database property, while the actual name of the property can be customized. Consequently, a schema always has a title property. When a page is in a database, think of the title as a kind of primary key or human-readable identifier, but it does not have to be unique! This concept is important when relation properties are used between different databases as the title property of a linked page will show up in the relation column. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". A page at the root of the workspace has the workspace itself as parent. This concept is important as access permissions for integrations are inherited from parent pages. Permissions can only be granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID), which is composed of 32 hexadecimal digits, potentially structured in various fields by a dash, i.e. - . Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID}?{PARAMS} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its objects for that. Installation \u00b6 To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more recent version. Creating an integration \u00b6 Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication. Granting access to a page for an integration \u00b6 Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children. Access the page with Python \u00b6 To try out if your integration works, just copy&paste the following code into your favorite editor or better Jupyter Lab . Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () page . show () Run the code and you should see in Jupyter Lab following rendered Markdown code or just the plain output if you run the code in a terminal.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Before we get started a few words about Notion and its basic concepts are appropriate. In Notion everything is either a page or a block . A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on. An important and special block is the database , which may be within a page, i.e. inline , as a block or at the same hierarchy level as a page . A database has a schema , that specifies various structured properties of the individual pages contained in that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. Regardless of the properties, each page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be shown as database property, while the actual name of the property can be customized. Consequently, a schema always has a title property. When a page is in a database, think of the title as a kind of primary key or human-readable identifier, but it does not have to be unique! This concept is important when relation properties are used between different databases as the title property of a linked page will show up in the relation column. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly. A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". A page at the root of the workspace has the workspace itself as parent. This concept is important as access permissions for integrations are inherited from parent pages. Permissions can only be granted to pages, not to complete workspaces encompassing all pages. To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID), which is composed of 32 hexadecimal digits, potentially structured in various fields by a dash, i.e. - . Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7 -menu in the upper right corner. The link will have the schema: https://www.notion.so/{Title}-{UUID}?{PARAMS} UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an id -property on most of its objects for that.","title":"Getting Started"},{"location":"getting_started/#installation","text":"To install Ultimate Notion simple run: pip install ultimate-notion Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv , conda , etc. to install a more recent version.","title":"Installation"},{"location":"getting_started/#creating-an-integration","text":"Now open the web interface of Notion , select a workspace, click Settings & members , click Connections and choose Develop or manage integrations . This should take you to the My integrations site. Now select + Create new integration , provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button. This brings you to the Secrets-site where you need to copy and save the Internal Integration Token , which always starts with secret_ . This token will be used by Ultimate Notion for authentication.","title":"Creating an integration"},{"location":"getting_started/#granting-access-to-a-page-for-an-integration","text":"Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings & members \u00bb Connections . Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections , search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children.","title":"Granting access to a page for an integration"},{"location":"getting_started/#access-the-page-with-python","text":"To try out if your integration works, just copy&paste the following code into your favorite editor or better Jupyter Lab . Replace the content of TOKEN with the Internal Integration Token you saved and the content of PAGE_TITLE with the title of the page, you granted access for your integration. from ultimate_notion import Session TOKEN = 'secret_INSERT_YOUR_TOKEN_HERE' PAGE_TITLE = 'Getting Started' # Change this to the title of your page with Session ( auth = TOKEN ) as notion : page = notion . search_page ( PAGE_TITLE ) . item () page . show () Run the code and you should see in Jupyter Lab following rendered Markdown code or just the plain output if you run the code in a terminal.","title":"Access the page with Python"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"examples/create_database/","text":"Creating a database from scratch \u00b6 We gonna create two simple databases with a relation quite similar as described in the Notion docs . We gonna have a database for customers and one for items , which customers can purchase. Let's first initialize a Notion session: >>> from ultimate_notion import Session >>> >>> notion = Session () We start by defining the schema for our items: >>> from ultimate_notion import PageSchema , Property , schema >>> >>> sizes = [ ... schema . SelectOption ( name = \"S\" ), ... schema . SelectOption ( name = \"M\" , color = \"red\" ), ... schema . SelectOption ( name = \"L\" , color = \"yellow\" ), ... ] >>> >>> >>> class Item ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... size = Property ( \"Size\" , schema . SingleSelect ( sizes )) ... price = Property ( \"price\" , schema . Number ( schema . NumberFormat . DOLLAR )) Since a database needs to be a block wighin a page, we assume there is a page called 'Tests', which is connected with this integration script. We retrieve the object of this page and create the database with the page as parent page. >>> root_page = notion . search_page ( 'Tests' , exact = True ) . item () >>> item_db = notion . create_db ( parent = root_page , schema = Item , title = 'Items' ) Now we create a database for our customers and define a one-way relation to the items: >>> class Customer ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... purchases = Property ( \"Items Purchased\" , schema . Relation ( item_db )) >>> >>> customer_db = notion . create_db ( parent = root_page , schema = Customer , title = 'Customers' ) The databases are created and we can start filling them with a few items. >>> # some items >>> t_shirt = item_db . create_page ( name = \"T-shirt\" , size = \"M\" , prize = 17 ) >>> khaki_pants = item_db . create_page ( name = \"Khaki pants\" , size = \"M\" , prize = 25 ) >>> tank_top = item_db . create_page ( name = \"Tank top\" , size = \"S\" , prize = 15 ) >>> >>> # some customers >>> lovelace = customer_db . create_page ( name = \"Ada Lovelace\" ) >>> hertzfeld = customer_db . create_page ( name = \"Andy Herzfeld\" ) >>> Engelbart = customer_db . create_page ( name = \"Doug Engelbart\" ) Note that that the keyword-arguments are exactly the class variables from the page schemas Item and Customer above. Since all pages are by default live-updated, we can modify the page objects to change the data in the actual Notion dababases. Let's say Ada Lovelace purchased a tank top as well as some khaki pants. >>> lovelace . prop . purchases . extend ([ tank_top , khaki_pants ]) >>> lovelace Customer ( \"Ada Lovelace\" ) >>> print ( lovelace ) Customer ( name = \"Ada Lovelace\" , purchases = [ Item ( \"Tank top\" ), Item ( \"Khaki pants\" )], ) Tip Use ensure_db and ensure_page to get or create a database and to get or create a page, respectively. This allows you to avoid extra codepaths in the initial phase when setting up a database for instance. Note that the title property is used as the unique identifier for a database or page.","title":"Create a database"},{"location":"examples/create_database/#creating-a-database-from-scratch","text":"We gonna create two simple databases with a relation quite similar as described in the Notion docs . We gonna have a database for customers and one for items , which customers can purchase. Let's first initialize a Notion session: >>> from ultimate_notion import Session >>> >>> notion = Session () We start by defining the schema for our items: >>> from ultimate_notion import PageSchema , Property , schema >>> >>> sizes = [ ... schema . SelectOption ( name = \"S\" ), ... schema . SelectOption ( name = \"M\" , color = \"red\" ), ... schema . SelectOption ( name = \"L\" , color = \"yellow\" ), ... ] >>> >>> >>> class Item ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... size = Property ( \"Size\" , schema . SingleSelect ( sizes )) ... price = Property ( \"price\" , schema . Number ( schema . NumberFormat . DOLLAR )) Since a database needs to be a block wighin a page, we assume there is a page called 'Tests', which is connected with this integration script. We retrieve the object of this page and create the database with the page as parent page. >>> root_page = notion . search_page ( 'Tests' , exact = True ) . item () >>> item_db = notion . create_db ( parent = root_page , schema = Item , title = 'Items' ) Now we create a database for our customers and define a one-way relation to the items: >>> class Customer ( PageSchema ): ... name = Property ( \"Name\" , schema . Title ()) ... purchases = Property ( \"Items Purchased\" , schema . Relation ( item_db )) >>> >>> customer_db = notion . create_db ( parent = root_page , schema = Customer , title = 'Customers' ) The databases are created and we can start filling them with a few items. >>> # some items >>> t_shirt = item_db . create_page ( name = \"T-shirt\" , size = \"M\" , prize = 17 ) >>> khaki_pants = item_db . create_page ( name = \"Khaki pants\" , size = \"M\" , prize = 25 ) >>> tank_top = item_db . create_page ( name = \"Tank top\" , size = \"S\" , prize = 15 ) >>> >>> # some customers >>> lovelace = customer_db . create_page ( name = \"Ada Lovelace\" ) >>> hertzfeld = customer_db . create_page ( name = \"Andy Herzfeld\" ) >>> Engelbart = customer_db . create_page ( name = \"Doug Engelbart\" ) Note that that the keyword-arguments are exactly the class variables from the page schemas Item and Customer above. Since all pages are by default live-updated, we can modify the page objects to change the data in the actual Notion dababases. Let's say Ada Lovelace purchased a tank top as well as some khaki pants. >>> lovelace . prop . purchases . extend ([ tank_top , khaki_pants ]) >>> lovelace Customer ( \"Ada Lovelace\" ) >>> print ( lovelace ) Customer ( name = \"Ada Lovelace\" , purchases = [ Item ( \"Tank top\" ), Item ( \"Khaki pants\" )], ) Tip Use ensure_db and ensure_page to get or create a database and to get or create a page, respectively. This allows you to avoid extra codepaths in the initial phase when setting up a database for instance. Note that the title property is used as the unique identifier for a database or page.","title":"Creating a database from scratch"},{"location":"reference/SUMMARY/","text":"ultimate_notion blocks database obj_api blocks core iterator orm query schema session text types user util page query record schema session user utils view","title":"SUMMARY"},{"location":"reference/ultimate_notion/","text":"ultimate_notion \u00b6 Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro __all__ = [ '__version__' , 'Session' , 'PageSchema' , 'Property' ] module-attribute \u00b6 __version__ = version ( 'ultimate-notion' ) module-attribute \u00b6 PageSchema \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PageSchema ): return NotImplemented return self . to_dict () == other . to_dict () get_title_property_name () classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_title_property_name ( cls ): return SList ( col for col , val in cls . to_dict () . items () if isinstance ( val , Title )) . item () to_dict () -> dict [ str , PropertyType ] classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { prop . name : prop . type for prop in cls . __dict__ . values () if isinstance ( prop , Property )} Property dataclass \u00b6 Property for defining a Notion database schema name : str instance-attribute \u00b6 type : PropertyType instance-attribute \u00b6 Session ( auth : str | None = None , kwargs : Any ) \u00b6 A session for the Notion API This is a singleton Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _ensure_initialized ( self ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration # TODO: Remove this whole caching concept... self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' ) notional = NotionalSession ( auth = auth , None = kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () Session . _active_session = None create_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database : \"\"\"Create a new database\"\"\" schema_dct = { k : v . obj_ref for k , v in schema . to_dict () . items ()} db = self . notional . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) return Database ( obj_ref = db ) create_page ( parent : Page , title : str | None = None ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : str | None = None ) -> Page : return Page ( obj_ref = self . notional . pages . create ( parent = parent . obj_ref , title = title )) delete_db ( db_ref : Database | ObjRef ) \u00b6 Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid ) delete_page ( page : Page ) \u00b6 Source code in src/ultimate_notion/session.py def delete_page ( self , page : Page ): self . notional . pages . delete ( page . obj_ref ) ensure_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) \u00b6 Get or create the database Source code in src/ultimate_notion/session.py def ensure_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" get_active () classmethod \u00b6 Return the current active session or raise Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ): \"\"\"Return the current active session or raise\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg ) get_block ( block_ref : ObjRef ) \u00b6 Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . notional . blocks . retrieve ( block_ref )) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( obj_ref = self . _get_db ( db_uuid )) get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( obj_ref = self . _get_page ( page_uuid )) get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . _get_user ( user_uuid )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : me = self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) search_db ( db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( obj_ref = db ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( title : str | None = None , * , exact : bool = True ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( obj_ref = page ) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title == title ) return pages set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped ) whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"Reference"},{"location":"reference/ultimate_notion/#ultimate_notion","text":"Ultimate Notion provides a pythonic, high-level API for Notion Notion-API: https://developers.notion.com/reference/intro","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","text":"","title":"__all__"},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","text":"","title":"__version__"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema","text":"","title":"PageSchema"},{"location":"reference/ultimate_notion/#ultimate_notion.schema.PageSchema.__eq__","text":"Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PageSchema ): return NotImplemented return self . to_dict () == other . to_dict ()","title":"__eq__()"},{"location":"reference/ultimate_notion/#ultimate_notion.schema.PageSchema.get_title_property_name","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_title_property_name ( cls ): return SList ( col for col , val in cls . to_dict () . items () if isinstance ( val , Title )) . item ()","title":"get_title_property_name()"},{"location":"reference/ultimate_notion/#ultimate_notion.schema.PageSchema.to_dict","text":"Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { prop . name : prop . type for prop in cls . __dict__ . values () if isinstance ( prop , Property )}","title":"to_dict()"},{"location":"reference/ultimate_notion/#ultimate_notion.Property","text":"Property for defining a Notion database schema","title":"Property"},{"location":"reference/ultimate_notion/#ultimate_notion.schema.Property.name","text":"","title":"name"},{"location":"reference/ultimate_notion/#ultimate_notion.schema.Property.type","text":"","title":"type"},{"location":"reference/ultimate_notion/#ultimate_notion.Session","text":"A session for the Notion API This is a singleton Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _ensure_initialized ( self ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration # TODO: Remove this whole caching concept... self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.notional","text":"","title":"notional"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None","title":"__exit__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()]","title":"all_users()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () Session . _active_session = None","title":"close()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database : \"\"\"Create a new database\"\"\" schema_dct = { k : v . obj_ref for k , v in schema . to_dict () . items ()} db = self . notional . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) return Database ( obj_ref = db )","title":"create_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.create_page","text":"Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : str | None = None ) -> Page : return Page ( obj_ref = self . notional . pages . create ( parent = parent . obj_ref , title = title ))","title":"create_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.delete_db","text":"Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid )","title":"delete_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.delete_page","text":"Source code in src/ultimate_notion/session.py def delete_page ( self , page : Page ): self . notional . pages . delete ( page . obj_ref )","title":"delete_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.ensure_db","text":"Get or create the database Source code in src/ultimate_notion/session.py def ensure_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\"","title":"ensure_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_active","text":"Return the current active session or raise Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ): \"\"\"Return the current active session or raise\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg )","title":"get_active()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_block","text":"Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . notional . blocks . retrieve ( block_ref ))","title":"get_block()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_db","text":"Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( obj_ref = self . _get_db ( db_uuid ))","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( obj_ref = self . _get_page ( page_uuid ))","title":"get_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . _get_user ( user_uuid ))","title":"get_user()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : me = self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err if me is None : msg = 'Unable to get current user' raise SessionError ( msg )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( obj_ref = db ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( obj_ref = page ) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title == title ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.set_cache","text":"Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped )","title":"set_cache()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"whoami()"},{"location":"reference/ultimate_notion/blocks/","text":"blocks \u00b6 Block \u00b6 live_update : bool = True class-attribute instance-attribute \u00b6","title":"Blocks"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block","text":"","title":"Block"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block.live_update","text":"","title":"live_update"},{"location":"reference/ultimate_notion/database/","text":"database \u00b6 Database object Database ( obj_ref : blocks . Database ) \u00b6 Source code in src/ultimate_notion/database.py def __init__ ( self , obj_ref : blocks . Database ): super () . __init__ ( obj_ref ) archived : bool property \u00b6 cover : types . FileObject | None property \u00b6 description : list [ types . RichTextObject ] | None property \u00b6 icon : types . FileObject | types . EmojiObject | None property \u00b6 is_inline : bool property \u00b6 obj_ref : blocks . Database instance-attribute \u00b6 schema : type [ PageSchema ] writable property \u00b6 title : str property \u00b6 Return the title of this database as plain text. url : str property \u00b6 __repr__ () -> str \u00b6 Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return self . title else : return 'Untitled' create_page ( * , live_update : bool = True ) \u00b6 Return page object Source code in src/ultimate_notion/database.py def create_page ( self , * , live_update : bool = True ): \"\"\"Return page object\"\"\" # ToDo: Use Schema for this. raise NotImplementedError delete () \u00b6 Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" self . session . delete_db ( self ) query () -> QueryBuilder \u00b6 Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self ) reflect_schema () -> type [ PageSchema ] \u00b6 Reflection about the database schema Source code in src/ultimate_notion/database.py def reflect_schema ( self ) -> type [ PageSchema ]: \"\"\"Reflection about the database schema\"\"\" cls_name = f ' { make_safe_python_name ( self . title ) . capitalize () } Schema' def clear ( prop_obj ): \"\"\"Clear PropertyObject from any residues coming from the reflection\"\"\" prop_obj = deepcopy ( prop_obj ) prop_obj . name = None prop_obj . id = None return prop_obj attrs = { decapitalize ( make_safe_python_name ( k )): Property ( k , PropertyType . wrap_obj_ref ( clear ( v ))) for k , v in self . obj_ref . properties . items () } return type ( cls_name , ( PageSchema ,), attrs ) view ( * , live_update : bool = True ) -> View \u00b6 Source code in src/ultimate_notion/database.py def view ( self , * , live_update : bool = True ) -> View : query = self . session . notional . databases . query ( self . id ) # ToDo: use self.query when implemented pages = self . _pages_from_query ( query = query , live_update = live_update ) return View ( database = self , pages = pages , query = query , live_update = live_update )","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","text":"Database object","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","text":"Source code in src/ultimate_notion/database.py def __init__ ( self , obj_ref : blocks . Database ): super () . __init__ ( obj_ref )","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","text":"Return the title of this database as plain text.","title":"title"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","text":"Source code in src/ultimate_notion/database.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","text":"Source code in src/ultimate_notion/database.py def __str__ ( self ): if self . title : return self . title else : return 'Untitled'","title":"__str__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.create_page","text":"Return page object Source code in src/ultimate_notion/database.py def create_page ( self , * , live_update : bool = True ): \"\"\"Return page object\"\"\" # ToDo: Use Schema for this. raise NotImplementedError","title":"create_page()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.delete","text":"Delete this database Source code in src/ultimate_notion/database.py def delete ( self ): \"\"\"Delete this database\"\"\" self . session . delete_db ( self )","title":"delete()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.query","text":"Query a (large) database for pages in a more specific way Source code in src/ultimate_notion/database.py def query ( self ) -> QueryBuilder : \"\"\"Query a (large) database for pages in a more specific way\"\"\" return QueryBuilder ( self )","title":"query()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.reflect_schema","text":"Reflection about the database schema Source code in src/ultimate_notion/database.py def reflect_schema ( self ) -> type [ PageSchema ]: \"\"\"Reflection about the database schema\"\"\" cls_name = f ' { make_safe_python_name ( self . title ) . capitalize () } Schema' def clear ( prop_obj ): \"\"\"Clear PropertyObject from any residues coming from the reflection\"\"\" prop_obj = deepcopy ( prop_obj ) prop_obj . name = None prop_obj . id = None return prop_obj attrs = { decapitalize ( make_safe_python_name ( k )): Property ( k , PropertyType . wrap_obj_ref ( clear ( v ))) for k , v in self . obj_ref . properties . items () } return type ( cls_name , ( PageSchema ,), attrs )","title":"reflect_schema()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.view","text":"Source code in src/ultimate_notion/database.py def view ( self , * , live_update : bool = True ) -> View : query = self . session . notional . databases . query ( self . id ) # ToDo: use self.query when implemented pages = self . _pages_from_query ( query = query , live_update = live_update ) return View ( database = self , pages = pages , query = query , live_update = live_update )","title":"view()"},{"location":"reference/ultimate_notion/page/","text":"page \u00b6 Page object Page \u00b6 database : Database | None property \u00b6 Retrieve database from parent or None icon : str property \u00b6 live_update : bool = True class-attribute instance-attribute \u00b6 properties : dict [ str , Any ] property \u00b6 Page properties as dictionary. This includes properties defined by a database schema as well as meta properties like creation time, etc. title : str property \u00b6 __delitem__ ( key ) \u00b6 Source code in src/ultimate_notion/page.py def __delitem__ ( self , key ): # ToDo: Implement me! pass __getitem__ ( property_name ) -> types . PropertyValue \u00b6 Source code in src/ultimate_notion/page.py def __getitem__ ( self , property_name ) -> types . PropertyValue : # ToDo change the logic here. Use a wrapper functionality as in `schmema` val = self . obj_ref [ property_name ] if isinstance ( val , types . Date ): val = val . date elif isinstance ( val , types . Relation ): val = [ p . title for p in self . _resolve_relation ( val )] elif isinstance ( val , types . Formula ): val = val . Result elif isinstance ( val , types . LastEditedBy | types . CreatedBy ): if not ( user_id := val . last_edited_by . id ): raise RuntimeError ( \"Cannot determine id of user!\" ) val = str ( self . session . get_user ( user_id )) elif isinstance ( val , types . MultiSelect ): val = val . Values elif isinstance ( val , types . NativeTypeMixin ): val = val . Value else : msg = f 'Unknown property type { type ( val ) } ' raise RuntimeError ( msg ) return val __repr__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title } ' at { hex ( id ( self )) } >\" __setitem__ ( property_name : str , value : Any ) \u00b6 Source code in src/ultimate_notion/page.py def __setitem__ ( self , property_name : str , value : Any ): if not self . database : msg = 'This page is not within a database' raise RuntimeError ( msg ) value_type = type ( self . database . schema . to_dict ()[ property_name ]) prop = value_type ( value ) self . obj_ref [ property_name ] = prop . obj_ref if self . live_update : # update the property on the server (which will refresh the local data) self . session . notional . pages . update ( self . obj_ref , ** { property_name : self . obj_ref [ property_name ]}) __str__ () -> str \u00b6 Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return self . show ( display = False ) clone () -> Page \u00b6 Source code in src/ultimate_notion/page.py def clone ( self ) -> Page : return deepcopy_with_sharing ( self , shared_attributes = [ 'session' ]) markdown () -> str \u00b6 Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" md = f '# { self . title } \\n ' # ToDo: This retrieves the content again, could be done internally. # Also notion2md is quiet buggy in generating MD and notion2markdown is better but hard to use. md += StringExporter ( block_id = str ( self . id )) . export () return md show ( * , display = None ) \u00b6 Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md Properties \u00b6 Properties namespace for a page","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","text":"Page object","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","text":"","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.database","text":"Retrieve database from parent or None","title":"database"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.live_update","text":"","title":"live_update"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.properties","text":"Page properties as dictionary. This includes properties defined by a database schema as well as meta properties like creation time, etc.","title":"properties"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","text":"","title":"title"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__delitem__","text":"Source code in src/ultimate_notion/page.py def __delitem__ ( self , key ): # ToDo: Implement me! pass","title":"__delitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__getitem__","text":"Source code in src/ultimate_notion/page.py def __getitem__ ( self , property_name ) -> types . PropertyValue : # ToDo change the logic here. Use a wrapper functionality as in `schmema` val = self . obj_ref [ property_name ] if isinstance ( val , types . Date ): val = val . date elif isinstance ( val , types . Relation ): val = [ p . title for p in self . _resolve_relation ( val )] elif isinstance ( val , types . Formula ): val = val . Result elif isinstance ( val , types . LastEditedBy | types . CreatedBy ): if not ( user_id := val . last_edited_by . id ): raise RuntimeError ( \"Cannot determine id of user!\" ) val = str ( self . session . get_user ( user_id )) elif isinstance ( val , types . MultiSelect ): val = val . Values elif isinstance ( val , types . NativeTypeMixin ): val = val . Value else : msg = f 'Unknown property type { type ( val ) } ' raise RuntimeError ( msg ) return val","title":"__getitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__repr__","text":"Source code in src/ultimate_notion/page.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self . title } ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__setitem__","text":"Source code in src/ultimate_notion/page.py def __setitem__ ( self , property_name : str , value : Any ): if not self . database : msg = 'This page is not within a database' raise RuntimeError ( msg ) value_type = type ( self . database . schema . to_dict ()[ property_name ]) prop = value_type ( value ) self . obj_ref [ property_name ] = prop . obj_ref if self . live_update : # update the property on the server (which will refresh the local data) self . session . notional . pages . update ( self . obj_ref , ** { property_name : self . obj_ref [ property_name ]})","title":"__setitem__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__str__","text":"Source code in src/ultimate_notion/page.py def __str__ ( self ) -> str : return self . show ( display = False )","title":"__str__()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.clone","text":"Source code in src/ultimate_notion/page.py def clone ( self ) -> Page : return deepcopy_with_sharing ( self , shared_attributes = [ 'session' ])","title":"clone()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.markdown","text":"Return the content of the page as Markdown Source code in src/ultimate_notion/page.py def markdown ( self ) -> str : \"\"\"Return the content of the page as Markdown\"\"\" md = f '# { self . title } \\n ' # ToDo: This retrieves the content again, could be done internally. # Also notion2md is quiet buggy in generating MD and notion2markdown is better but hard to use. md += StringExporter ( block_id = str ( self . id )) . export () return md","title":"markdown()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.show","text":"Show the content of the page as markdown, rendered in Jupyter Lab Source code in src/ultimate_notion/page.py def show ( self , * , display = None ): \"\"\"Show the content of the page as markdown, rendered in Jupyter Lab\"\"\" if display is None : display = is_notebook () md = self . markdown () if display : from IPython.core.display import display_markdown display_markdown ( md , raw = True ) else : return md","title":"show()"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Properties","text":"Properties namespace for a page","title":"Properties"},{"location":"reference/ultimate_notion/query/","text":"query \u00b6 QueryBuilder ( db : Database ) \u00b6 \"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError db = db instance-attribute \u00b6","title":"Query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query","text":"","title":"query"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder","text":"\"Querybuilder to query a database in a more specific way Source code in src/ultimate_notion/query.py def __init__ ( self , db : Database ): self . db = db # ToDo: Implement this using Notion's QueryBuilder raise NotImplementedError","title":"QueryBuilder"},{"location":"reference/ultimate_notion/query/#ultimate_notion.query.QueryBuilder.db","text":"","title":"db"},{"location":"reference/ultimate_notion/record/","text":"record \u00b6 Core building blocks for pages and databases Record ( obj_ref ) \u00b6 The base type for all Notion objects. Source code in src/ultimate_notion/record.py def __init__ ( self , obj_ref ): \"\"\"Notional object reference for dispatch\"\"\" self . obj_ref = obj_ref archived : bool property \u00b6 created_by property \u00b6 created_time : datetime property \u00b6 has_children : bool property \u00b6 id : UUID property \u00b6 last_edited_by property \u00b6 last_edited_time : datetime property \u00b6 obj_ref : blocks . DataRecord = obj_ref instance-attribute \u00b6 parent : Record | None property \u00b6 Return the parent record or None if the workspace is the parent parents : tuple [ Record , ... ] property \u00b6 Return all parents from the workspace to the actual record (excluding) properties : dict [ str , Any ] property \u00b6 session : Session property \u00b6 Return the currently active session url : str property \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/record.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , Record ): raise RuntimeError ( f \"Cannot compare a Record with { type ( other ) } \" ) return self . id == other . id","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record","text":"Core building blocks for pages and databases","title":"record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record","text":"The base type for all Notion objects. Source code in src/ultimate_notion/record.py def __init__ ( self , obj_ref ): \"\"\"Notional object reference for dispatch\"\"\" self . obj_ref = obj_ref","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.id","text":"","title":"id"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.parent","text":"Return the parent record or None if the workspace is the parent","title":"parent"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.parents","text":"Return all parents from the workspace to the actual record (excluding)","title":"parents"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.session","text":"Return the currently active session","title":"session"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.url","text":"","title":"url"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.__eq__","text":"Source code in src/ultimate_notion/record.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , Record ): raise RuntimeError ( f \"Cannot compare a Record with { type ( other ) } \" ) return self . id == other . id","title":"__eq__()"},{"location":"reference/ultimate_notion/schema/","text":"schema \u00b6 Functionality around defining a database schema Checkbox \u00b6 Checkbox property CreatedBy \u00b6 Defines the created-by configuration for a database property. CreatedTime \u00b6 Defines the created-time configuration for a database property. Date \u00b6 Date property Email \u00b6 E-Mail property Files \u00b6 Files property Formula \u00b6 Formula Property LastEditedBy \u00b6 Defines the last-edited-by configuration for a database property. LastEditedTime \u00b6 Defines the last-edited-time configuration for a database property. MultiSelect \u00b6 Multi selection property Number ( number_format : NumberFormat ) \u00b6 Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): super () . __init__ ( number_format ) PageSchema \u00b6 __eq__ ( other : object ) -> bool \u00b6 Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PageSchema ): return NotImplemented return self . to_dict () == other . to_dict () get_title_property_name () classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def get_title_property_name ( cls ): return SList ( col for col , val in cls . to_dict () . items () if isinstance ( val , Title )) . item () to_dict () -> dict [ str , PropertyType ] classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { prop . name : prop . type for prop in cls . __dict__ . values () if isinstance ( prop , Property )} People \u00b6 People property Property dataclass \u00b6 Property for defining a Notion database schema name : str instance-attribute \u00b6 type : PropertyType instance-attribute \u00b6 PropertyType ( args , kwargs ) \u00b6 Base class for Notion property objects. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): # check if we just need to wrap, in case `wrap_obj_ref` was called if len ( args ) == 1 and isinstance ( args [ 0 ], obj_schema . PropertyObject ) and not kwargs : self . obj_ref = args [ 0 ] return # dispatch to __compose__ or __init__ if it has _NestedData or not, respectively obj_api_type = self . _obj_api_map_inv [ self . __class__ ] if self . _is_nested [ obj_api_type ] and len ( args ) == 1 and not kwargs : params = self . _unwrap_obj_api ( args [ 0 ]) self . obj_ref = obj_api_type [ params ] elif not self . _is_nested [ obj_api_type ] and not args : self . obj_ref = obj_api_type ( ** kwargs ) else : msg = 'Use args for types with nested data and kwargs otherwise' raise RuntimeError ( msg ) obj_ref : obj_schema . PropertyObject instance-attribute \u00b6 __eq__ ( other ) \u00b6 Source code in src/ultimate_notion/schema.py def __eq__ ( self , other ): return self . obj_ref == other . obj_ref __init_subclass__ ( type : type [ obj_schema . PropertyObject ], kwargs : Any ) \u00b6 Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , type : type [ obj_schema . PropertyObject ], ** kwargs : Any ): # noqa: A002 super () . __init_subclass__ ( ** kwargs ) cls . _obj_api_map [ type ] = cls cls . _is_nested [ type ] = '_NestedData' in { cls . __name__ for cls in type . __annotations__ . values ()} wrap_obj_ref ( obj_ref : obj_schema . PropertyObject ) -> PropertyType classmethod \u00b6 Source code in src/ultimate_notion/schema.py @classmethod def wrap_obj_ref ( cls , obj_ref : obj_schema . PropertyObject ) -> PropertyType : return cls . _obj_api_map [ type ( obj_ref )]( obj_ref ) Relation ( db : Database , * , two_way : bool = False ) \u00b6 Two-way relation configuration for a database property. Source code in src/ultimate_notion/schema.py def __init__ ( self , db : Database , * , two_way : bool = False ): pass Rollup \u00b6 Defines the rollup configuration for a database property. SchemaError ( message ) \u00b6 Raised when there are issues with the schema of a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message ) SelectOption \u00b6 Option for select & multi-select property SingleSelect \u00b6 Single selection property Status \u00b6 Status property Text \u00b6 Text property Title \u00b6 Mandatory Title property URL \u00b6 URL property","title":"Schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema","text":"Functionality around defining a database schema","title":"schema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Checkbox","text":"Checkbox property","title":"Checkbox"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedBy","text":"Defines the created-by configuration for a database property.","title":"CreatedBy"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedTime","text":"Defines the created-time configuration for a database property.","title":"CreatedTime"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Date","text":"Date property","title":"Date"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Email","text":"E-Mail property","title":"Email"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Files","text":"Files property","title":"Files"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Formula","text":"Formula Property","title":"Formula"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedBy","text":"Defines the last-edited-by configuration for a database property.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedTime","text":"Defines the last-edited-time configuration for a database property.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect","text":"Multi selection property","title":"MultiSelect"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number","text":"Mandatory Title property Source code in src/ultimate_notion/schema.py def __init__ ( self , number_format : NumberFormat ): super () . __init__ ( number_format )","title":"Number"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema","text":"","title":"PageSchema"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.__eq__","text":"Source code in src/ultimate_notion/schema.py def __eq__ ( self , other : object ) -> bool : if not isinstance ( other , PageSchema ): return NotImplemented return self . to_dict () == other . to_dict ()","title":"__eq__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_title_property_name","text":"Source code in src/ultimate_notion/schema.py @classmethod def get_title_property_name ( cls ): return SList ( col for col , val in cls . to_dict () . items () if isinstance ( val , Title )) . item ()","title":"get_title_property_name()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.to_dict","text":"Source code in src/ultimate_notion/schema.py @classmethod def to_dict ( cls ) -> dict [ str , PropertyType ]: return { prop . name : prop . type for prop in cls . __dict__ . values () if isinstance ( prop , Property )}","title":"to_dict()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.People","text":"People property","title":"People"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property","text":"Property for defining a Notion database schema","title":"Property"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.name","text":"","title":"name"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Property.type","text":"","title":"type"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType","text":"Base class for Notion property objects. Used to map high-level objects to low-level Notion-API objects Source code in src/ultimate_notion/schema.py def __init__ ( self , * args , ** kwargs ): # check if we just need to wrap, in case `wrap_obj_ref` was called if len ( args ) == 1 and isinstance ( args [ 0 ], obj_schema . PropertyObject ) and not kwargs : self . obj_ref = args [ 0 ] return # dispatch to __compose__ or __init__ if it has _NestedData or not, respectively obj_api_type = self . _obj_api_map_inv [ self . __class__ ] if self . _is_nested [ obj_api_type ] and len ( args ) == 1 and not kwargs : params = self . _unwrap_obj_api ( args [ 0 ]) self . obj_ref = obj_api_type [ params ] elif not self . _is_nested [ obj_api_type ] and not args : self . obj_ref = obj_api_type ( ** kwargs ) else : msg = 'Use args for types with nested data and kwargs otherwise' raise RuntimeError ( msg )","title":"PropertyType"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__eq__","text":"Source code in src/ultimate_notion/schema.py def __eq__ ( self , other ): return self . obj_ref == other . obj_ref","title":"__eq__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__init_subclass__","text":"Source code in src/ultimate_notion/schema.py def __init_subclass__ ( cls , type : type [ obj_schema . PropertyObject ], ** kwargs : Any ): # noqa: A002 super () . __init_subclass__ ( ** kwargs ) cls . _obj_api_map [ type ] = cls cls . _is_nested [ type ] = '_NestedData' in { cls . __name__ for cls in type . __annotations__ . values ()}","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.wrap_obj_ref","text":"Source code in src/ultimate_notion/schema.py @classmethod def wrap_obj_ref ( cls , obj_ref : obj_schema . PropertyObject ) -> PropertyType : return cls . _obj_api_map [ type ( obj_ref )]( obj_ref )","title":"wrap_obj_ref()"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation","text":"Two-way relation configuration for a database property. Source code in src/ultimate_notion/schema.py def __init__ ( self , db : Database , * , two_way : bool = False ): pass","title":"Relation"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup","text":"Defines the rollup configuration for a database property.","title":"Rollup"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaError","text":"Raised when there are issues with the schema of a database. Source code in src/ultimate_notion/schema.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SchemaError"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SelectOption","text":"Option for select & multi-select property","title":"SelectOption"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SingleSelect","text":"Single selection property","title":"SingleSelect"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status","text":"Status property","title":"Status"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text","text":"Text property","title":"Text"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title","text":"Mandatory Title property","title":"Title"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.URL","text":"URL property","title":"URL"},{"location":"reference/ultimate_notion/session/","text":"session \u00b6 Session object ENV_NOTION_AUTH_TOKEN = 'NOTION_AUTH_TOKEN' module-attribute \u00b6 Session ( auth : str | None = None , kwargs : Any ) \u00b6 A session for the Notion API This is a singleton Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _ensure_initialized ( self ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration # TODO: Remove this whole caching concept... self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' ) notional = NotionalSession ( auth = auth , None = kwargs ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self __exit__ ( exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None all_users () -> list [ User ] \u00b6 Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()] close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () Session . _active_session = None create_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database \u00b6 Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database : \"\"\"Create a new database\"\"\" schema_dct = { k : v . obj_ref for k , v in schema . to_dict () . items ()} db = self . notional . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) return Database ( obj_ref = db ) create_page ( parent : Page , title : str | None = None ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : str | None = None ) -> Page : return Page ( obj_ref = self . notional . pages . create ( parent = parent . obj_ref , title = title )) delete_db ( db_ref : Database | ObjRef ) \u00b6 Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid ) delete_page ( page : Page ) \u00b6 Source code in src/ultimate_notion/session.py def delete_page ( self , page : Page ): self . notional . pages . delete ( page . obj_ref ) ensure_db ( parent : Page , schema : type [ PageSchema ], title : str | None = None ) \u00b6 Get or create the database Source code in src/ultimate_notion/session.py def ensure_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\" get_active () classmethod \u00b6 Return the current active session or raise Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ): \"\"\"Return the current active session or raise\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg ) get_block ( block_ref : ObjRef ) \u00b6 Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . notional . blocks . retrieve ( block_ref )) get_db ( db_ref : ObjRef ) -> Database \u00b6 Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( obj_ref = self . _get_db ( db_uuid )) get_page ( page_ref : ObjRef ) -> Page \u00b6 Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( obj_ref = self . _get_page ( page_uuid )) get_user ( user_ref : ObjRef ) -> User \u00b6 Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . _get_user ( user_uuid )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : me = self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err if me is None : msg = 'Unable to get current user' raise SessionError ( msg ) search_db ( db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( obj_ref = db ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs search_page ( title : str | None = None , * , exact : bool = True ) -> SList [ Page ] \u00b6 Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( obj_ref = page ) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title == title ) return pages set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped ) whoami () -> User \u00b6 Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me () SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","text":"Session object","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.ENV_NOTION_AUTH_TOKEN","text":"","title":"ENV_NOTION_AUTH_TOKEN"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","text":"A session for the Notion API This is a singleton Parameters: Name Type Description Default auth str | None secret token from the Notion integration None **kwargs Any Arguments for the [Notion SDK Client][ https://ramnes.github.io/notion-sdk-py/reference/client/ ] {} Source code in src/ultimate_notion/session.py def __init__ ( self , auth : str | None = None , ** kwargs : Any ): \"\"\"Initialize the `Session` object and the Notional endpoints. Args: auth: secret token from the Notion integration **kwargs: Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/] \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : msg = f 'Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } ' raise RuntimeError ( msg ) _log . debug ( 'Initializing Notion session...' ) Session . _ensure_initialized ( self ) self . notional = NotionalSession ( auth = auth , ** kwargs ) # prepare API methods for decoration # TODO: Remove this whole caching concept... self . _search_db_unwrapped = self . search_db self . _get_db_unwrapped = self . _get_db self . _get_page_unwrapped = self . _get_page self . _get_user_unwrapped = self . _get_user self . set_cache () _log . info ( 'Initialized Notion session' )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.notional","text":"","title":"notional"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","text":"Source code in src/ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( 'Connecting to Notion...' ) self . notional . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","text":"Source code in src/ultimate_notion/session.py def __exit__ ( self , exc_type : type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( 'Closing connection to Notion...' ) self . notional . client . __exit__ ( exc_type , exc_value , traceback ) Session . _active_session = None","title":"__exit__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.all_users","text":"Retrieve all users of this workspace Source code in src/ultimate_notion/session.py def all_users ( self ) -> list [ User ]: \"\"\"Retrieve all users of this workspace\"\"\" return [ User ( obj_ref = user ) for user in self . notional . users . list ()]","title":"all_users()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . notional . client . close () Session . _active_session = None","title":"close()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_db","text":"Create a new database Source code in src/ultimate_notion/session.py def create_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ) -> Database : \"\"\"Create a new database\"\"\" schema_dct = { k : v . obj_ref for k , v in schema . to_dict () . items ()} db = self . notional . databases . create ( parent = parent . obj_ref , title = title , schema = schema_dct ) return Database ( obj_ref = db )","title":"create_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_page","text":"Source code in src/ultimate_notion/session.py def create_page ( self , parent : Page , title : str | None = None ) -> Page : return Page ( obj_ref = self . notional . pages . create ( parent = parent . obj_ref , title = title ))","title":"create_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.delete_db","text":"Source code in src/ultimate_notion/session.py def delete_db ( self , db_ref : Database | ObjRef ): db_uuid = db_ref . id if isinstance ( db_ref , Database ) else get_uuid ( db_ref ) self . notional . blocks . delete ( db_uuid )","title":"delete_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.delete_page","text":"Source code in src/ultimate_notion/session.py def delete_page ( self , page : Page ): self . notional . pages . delete ( page . obj_ref )","title":"delete_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.ensure_db","text":"Get or create the database Source code in src/ultimate_notion/session.py def ensure_db ( self , parent : Page , schema : type [ PageSchema ], title : str | None = None ): \"\"\"Get or create the database\"\"\"","title":"ensure_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_active","text":"Return the current active session or raise Source code in src/ultimate_notion/session.py @classmethod def get_active ( cls ): \"\"\"Return the current active session or raise\"\"\" with Session . _lock : if Session . _active_session : return Session . _active_session else : msg = 'There is no activate Session' raise ValueError ( msg )","title":"get_active()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_block","text":"Retrieve a block Source code in src/ultimate_notion/session.py def get_block ( self , block_ref : ObjRef ): \"\"\"Retrieve a block\"\"\" return Block ( obj_ref = self . notional . blocks . retrieve ( block_ref ))","title":"get_block()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","text":"Retrieve Notional database block by uuid Source code in src/ultimate_notion/session.py def get_db ( self , db_ref : ObjRef ) -> Database : \"\"\"Retrieve Notional database block by uuid\"\"\" db_uuid = get_uuid ( db_ref ) return Database ( obj_ref = self . _get_db ( db_uuid ))","title":"get_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","text":"Source code in src/ultimate_notion/session.py def get_page ( self , page_ref : ObjRef ) -> Page : page_uuid = get_uuid ( page_ref ) return Page ( obj_ref = self . _get_page ( page_uuid ))","title":"get_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","text":"Source code in src/ultimate_notion/session.py def get_user ( self , user_ref : ObjRef ) -> User : user_uuid = get_uuid ( user_ref ) return User ( obj_ref = self . _get_user ( user_uuid ))","title":"get_user()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in src/ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" try : me = self . whoami () except ConnectError as err : msg = 'Unable to connect to Notion' raise SessionError ( msg ) from err except APIResponseError as err : msg = 'Invalid API reponse' raise SessionError ( msg ) from err if me is None : msg = 'Unable to get current user' raise SessionError ( msg )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name str | None name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_db ( self , db_name : str | None = None , * , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( db_name ) . filter ( property = 'object' , value = 'database' ) dbs = SList ( Database ( obj_ref = db ) for db in query . execute ()) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_page","text":"Search a page by name Parameters: Name Type Description Default title str | None title of the page, return all if None None exact bool perform an exact search, not only a substring match True Source code in src/ultimate_notion/session.py def search_page ( self , title : str | None = None , * , exact : bool = True ) -> SList [ Page ]: \"\"\"Search a page by name Args: title: title of the page, return all if `None` exact: perform an exact search, not only a substring match \"\"\" query = self . notional . search ( title ) . filter ( property = 'object' , value = 'page' ) pages = SList ( Page ( obj_ref = page ) for page in query . execute ()) if exact and title is not None : pages = SList ( page for page in pages if page . title == title ) return pages","title":"search_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.set_cache","text":"Source code in src/ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db_unwrapped ) self . _get_db = wrapper ( self . _get_db_unwrapped ) self . _get_page = wrapper ( self . _get_page_unwrapped ) self . _get_user = wrapper ( self . _get_user_unwrapped )","title":"set_cache()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.whoami","text":"Return the user object of this bot Source code in src/ultimate_notion/session.py def whoami ( self ) -> User : \"\"\"Return the user object of this bot\"\"\" return self . notional . users . me ()","title":"whoami()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.SessionError","text":"Raised when there are issues with the Notion session. Source code in src/ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/user/","text":"user \u00b6 User ( obj_ref : types . User ) \u00b6 Source code in src/ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref avatar_url property \u00b6 email : str | None property \u00b6 id property \u00b6 is_bot : bool property \u00b6 is_person : bool property \u00b6 name property \u00b6 obj_ref : types . User = obj_ref instance-attribute \u00b6 type property \u00b6 __eq__ ( other ) \u00b6 Source code in src/ultimate_notion/user.py def __eq__ ( self , other ): return self . id == other . id __repr__ () -> str \u00b6 Source code in src/ultimate_notion/user.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\" __str__ () \u00b6 Source code in src/ultimate_notion/user.py def __str__ ( self ): return self . name","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user","text":"","title":"user"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User","text":"Source code in src/ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.email","text":"","title":"email"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.id","text":"","title":"id"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_bot","text":"","title":"is_bot"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.is_person","text":"","title":"is_person"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.type","text":"","title":"type"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__eq__","text":"Source code in src/ultimate_notion/user.py def __eq__ ( self , other ): return self . id == other . id","title":"__eq__()"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__repr__","text":"Source code in src/ultimate_notion/user.py def __repr__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \"< { cls_name } : ' { self !s} ' at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.__str__","text":"Source code in src/ultimate_notion/user.py def __str__ ( self ): return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/utils/","text":"utils \u00b6 Additional utilities that fit nowhere else ObjRef : TypeAlias = UUID | str module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 SList \u00b6 A list that holds often only a single element item () -> T \u00b6 Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg ) decapitalize ( string : str ) -> str \u00b6 Inverse of capitalize Source code in src/ultimate_notion/utils.py def decapitalize ( string : str ) -> str : \"\"\"Inverse of capitalize\"\"\" return string [ 0 ] . lower () + string [ 1 :] deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ) \u00b6 Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone find_index ( elem : Any , lst : list [ Any ]) -> int | None \u00b6 Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem ) find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array \u00b6 Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID \u00b6 Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return types . ObjectReference [ obj ] . id is_notebook () -> bool \u00b6 Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter store_retvals ( func ) \u00b6 Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped wait_until_exists ( record : Record , step : int = 1 , timeout : int = 10 ) \u00b6 Wait until object exists after creation In most cases, this is not really necessary to use. Source code in src/ultimate_notion/utils.py def wait_until_exists ( record : Record , step : int = 1 , timeout : int = 10 ): \"\"\"Wait until object exists after creation In most cases, this is not really necessary to use. \"\"\" from ultimate_notion.database import Database from ultimate_notion.page import Page poll_func : Callable [[ UUID | str ], Record ] if isinstance ( record , Database ): poll_func = record . session . get_db elif isinstance ( record , Page ): poll_func = record . session . get_page else : # Todo: Should we handle blocks here too? msg = f 'Unknown object type: { type ( record ) } ' raise RuntimeError ( msg ) poll ( lambda : poll_func ( record . id ), step = step , timeout = timeout , ignore_exceptions = ( APIResponseError ,))","title":"Utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","text":"Additional utilities that fit nowhere else","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.ObjRef","text":"","title":"ObjRef"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","text":"","title":"T"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","text":"A list that holds often only a single element","title":"SList"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","text":"Source code in src/ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = 'list is empty' else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg )","title":"item()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.decapitalize","text":"Inverse of capitalize Source code in src/ultimate_notion/utils.py def decapitalize ( string : str ) -> str : \"\"\"Inverse of capitalize\"\"\" return string [ 0 ] . lower () + string [ 1 :]","title":"decapitalize()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.deepcopy_with_sharing","text":"Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Parameters: Name Type Description Default obj Any some object to copy required shared_attributes list [ str ] A list of strings identifying the attributes that should be shared instead of copied. required memo dict [ int , Any ] | None dictionary passed into deepcopy . Ignore this argument if not calling from within deepcopy . None Example class A ( object ): def __init__ ( self ): self . copy_me = [] self . share_me = [] def __deepcopy__ ( self , memo ): return deepcopy_with_sharing ( self , shared_attribute_names = [ \"share_me\" ], memo = memo ) a = A () b = deepcopy ( a ) assert a . copy_me is not b . copy_me assert a . share_me is b . share_me c = deepcopy ( b ) assert c . copy_me is not b . copy_me assert c . share_me is b . share_me Original from https://stackoverflow.com/a/24621200 Source code in src/ultimate_notion/utils.py def deepcopy_with_sharing ( obj : Any , shared_attributes : list [ str ], memo : dict [ int , Any ] | None = None ): \"\"\" Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy. Args: obj: some object to copy shared_attributes: A list of strings identifying the attributes that should be shared instead of copied. memo: dictionary passed into __deepcopy__. Ignore this argument if not calling from within __deepcopy__. Example: ```python class A(object): def __init__(self): self.copy_me = [] self.share_me = [] def __deepcopy__(self, memo): return deepcopy_with_sharing( self, shared_attribute_names=[\"share_me\"], memo=memo ) a = A() b = deepcopy(a) assert a.copy_me is not b.copy_me assert a.share_me is b.share_me c = deepcopy(b) assert c.copy_me is not b.copy_me assert c.share_me is b.share_me ``` Original from https://stackoverflow.com/a/24621200 \"\"\" shared_attrs = { k : getattr ( obj , k ) for k in shared_attributes } deepcopy_defined = hasattr ( obj , '__deepcopy__' ) if deepcopy_defined : # Do hack to prevent infinite recursion in call to deepcopy deepcopy_method = obj . __deepcopy__ obj . __deepcopy__ = None for attr in shared_attributes : del obj . __dict__ [ attr ] clone = deepcopy ( obj , memo ) for attr , val in shared_attrs . items (): setattr ( obj , attr , val ) setattr ( clone , attr , val ) if deepcopy_defined : # Undo hack obj . __deepcopy__ = deepcopy_method del clone . __deepcopy__ return clone","title":"deepcopy_with_sharing()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_index","text":"Find the index of the element in the list or return None Source code in src/ultimate_notion/utils.py def find_index ( elem : Any , lst : list [ Any ]) -> int | None : \"\"\"Find the index of the element in the list or return `None`\"\"\" if elem not in lst : return None else : return lst . index ( elem )","title":"find_index()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_indices","text":"Finds the indices of the elements in the total set Source code in src/ultimate_notion/utils.py def find_indices ( elements : np . ndarray | list [ Any ], total_set : np . ndarray | list [ Any ]) -> np . array : \"\"\"Finds the indices of the elements in the total set\"\"\" if not isinstance ( total_set , np . ndarray ): total_set = np . array ( total_set ) mask = np . isin ( total_set , elements ) indices = np . where ( mask )[ 0 ] lookup = dict ( zip ( total_set [ mask ], indices , strict = True )) result = np . array ([ lookup . get ( x , None ) for x in elements ]) return result","title":"find_indices()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_uuid","text":"Retrieves a UUID from an object reference using Notional Only meant for internal use. Source code in src/ultimate_notion/utils.py def get_uuid ( obj : ObjRef | types . ParentRef | types . GenericObject ) -> UUID : \"\"\"Retrieves a UUID from an object reference using Notional Only meant for internal use. \"\"\" return types . ObjectReference [ obj ] . id","title":"get_uuid()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","text":"Source code in src/ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter","title":"is_notebook()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.store_retvals","text":"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) Source code in src/ultimate_notion/utils.py def store_retvals ( func ): \"\"\"Decorator storing the return values as function attribute for later cleanups This can be used for instance in a generator like this: ``` @pytest.fixture def create_blank_db(notion, test_area): @store_retvals def nested_func(db_name): db = notion.databases.create( parent=test_area, title=db_name, schema={ \"Name\": schema.Title(), }, ) return db yield nested_func # clean up by deleting the db of each prior call for db in nested_func.retvals: notion.databases.delete(db) ``` \"\"\" @wraps ( func ) def wrapped ( * args , ** kwargs ): retval = func ( * args , ** kwargs ) wrapped . retvals . append ( retval ) return retval wrapped . retvals = [] return wrapped","title":"store_retvals()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.wait_until_exists","text":"Wait until object exists after creation In most cases, this is not really necessary to use. Source code in src/ultimate_notion/utils.py def wait_until_exists ( record : Record , step : int = 1 , timeout : int = 10 ): \"\"\"Wait until object exists after creation In most cases, this is not really necessary to use. \"\"\" from ultimate_notion.database import Database from ultimate_notion.page import Page poll_func : Callable [[ UUID | str ], Record ] if isinstance ( record , Database ): poll_func = record . session . get_db elif isinstance ( record , Page ): poll_func = record . session . get_page else : # Todo: Should we handle blocks here too? msg = f 'Unknown object type: { type ( record ) } ' raise RuntimeError ( msg ) poll ( lambda : poll_func ( record . id ), step = step , timeout = timeout , ignore_exceptions = ( APIResponseError ,))","title":"wait_until_exists()"},{"location":"reference/ultimate_notion/view/","text":"view \u00b6 View representing the result of a Query ColType = str | list [ str ] module-attribute \u00b6 T = TypeVar ( 'T' ) module-attribute \u00b6 View ( database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ) \u00b6 Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ): self . database = database self . _live_update = live_update self . _query = query self . _title_col = database . schema . get_title_property_name () self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset () columns : list [ str ] property \u00b6 Columns of the database view aligned with the elements of a row database = database instance-attribute \u00b6 has_icon : bool property \u00b6 has_id : bool property \u00b6 has_index : bool property \u00b6 live_update property \u00b6 __len__ () \u00b6 Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices ) __repr__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : repr_str = self . show () if is_notebook (): from IPython.core.display import display_html display_html ( repr_str ) return '' else : return repr_str __str__ () -> str \u00b6 Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show ( html = False ) apply ( func : Callable [[ Page ], T ]) -> list [ T ] \u00b6 Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if live_update is True Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if `live_update` is True Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()] clone () -> View \u00b6 Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ]) filter () \u00b6 Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError head ( num : int ) -> View \u00b6 Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view limit ( num : int ) -> View \u00b6 Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num ) page ( idx : int ) -> Page \u00b6 Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]] pages () -> list [ Page ] \u00b6 Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))] reload () -> View \u00b6 Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = self . database . _pages_from_query ( query = self . _query , live_update = self . _live_update ) return view reset () -> View \u00b6 Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self reverse () -> View \u00b6 Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view row ( idx : int ) -> list [ Any ] \u00b6 Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page . properties [ col ]) return row rows () -> list [ list [ Any ]] \u00b6 Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))] select ( cols : ColType , more_cols : str ) -> View \u00b6 Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view show ( * , html : bool | None = None ) \u00b6 Show the view Parameters: Name Type Description Default html bool | None output in html or not, or determine automatically based on context, e.g. Jupyter lab. None Source code in src/ultimate_notion/view.py def show ( self , * , html : bool | None = None ): \"\"\"Show the view Args: html: output in html or not, or determine automatically based on context, e.g. Jupyter lab. \"\"\" rows = self . rows () cols = self . columns if html is None : html = is_notebook () if html : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' ) else : html_str = tabulate ( rows , headers = cols , tablefmt = 'html' ) return html_str else : return tabulate ( rows , headers = cols ) sort () \u00b6 Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError tail ( num : int ) -> View \u00b6 Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view to_pandas () -> pd . DataFrame \u00b6 Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns ) with_icon ( name = 'icon' ) -> View \u00b6 Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view with_id ( name : str = 'id' ) -> View \u00b6 Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view with_index ( name = 'index' ) -> View \u00b6 Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view with_live_update () -> View \u00b6 Source code in src/ultimate_notion/view.py def with_live_update ( self ) -> View : if self . live_update : return self for page in self . _pages : page . live_update = True self . _live_update = True return self without_icon () -> View \u00b6 Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view without_id () -> View \u00b6 Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view without_index () -> View \u00b6 Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view without_live_update () -> View \u00b6 Source code in src/ultimate_notion/view.py def without_live_update ( self ) -> View : if not self . live_update : return self for page in self . _pages : page . live_update = False self . _live_update = False return self","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","text":"View representing the result of a Query","title":"view"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.ColType","text":"","title":"ColType"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.T","text":"","title":"T"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","text":"Source code in src/ultimate_notion/view.py def __init__ ( self , database : Database , pages : list [ Page ], query : QueryBuilder , * , live_update : bool ): self . database = database self . _live_update = live_update self . _query = query self . _title_col = database . schema . get_title_property_name () self . _columns = self . _get_columns ( self . _title_col ) self . _pages = np . array ( pages ) self . reset ()","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","text":"Columns of the database view aligned with the elements of a row","title":"columns"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","text":"","title":"database"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_icon","text":"","title":"has_icon"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_id","text":"","title":"has_id"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","text":"","title":"has_index"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.live_update","text":"","title":"live_update"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__len__","text":"Source code in src/ultimate_notion/view.py def __len__ ( self ): return len ( self . _row_indices )","title":"__len__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__repr__","text":"Source code in src/ultimate_notion/view.py def __repr__ ( self ) -> str : repr_str = self . show () if is_notebook (): from IPython.core.display import display_html display_html ( repr_str ) return '' else : return repr_str","title":"__repr__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","text":"Source code in src/ultimate_notion/view.py def __str__ ( self ) -> str : return self . show ( html = False )","title":"__str__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.apply","text":"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if live_update is True Parameters: Name Type Description Default func Callable [[ Page ], T ] function taking a Page as input required Source code in src/ultimate_notion/view.py def apply ( self , func : Callable [[ Page ], T ]) -> list [ T ]: \"\"\"Apply function to all pages in view If the function modifies a page, the pages will be broadcast to Notion if `live_update` is True Args: func: function taking a Page as input \"\"\" return [ func ( page ) for page in self . pages ()]","title":"apply()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","text":"Clone the current view Source code in src/ultimate_notion/view.py def clone ( self ) -> View : \"\"\"Clone the current view\"\"\" return deepcopy_with_sharing ( self , shared_attributes = [ 'database' , '_pages' , '_query' ])","title":"clone()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.filter","text":"Source code in src/ultimate_notion/view.py def filter ( self ): # noqa: A003 raise NotImplementedError","title":"filter()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.head","text":"Keep only the first num elements in view Source code in src/ultimate_notion/view.py def head ( self , num : int ) -> View : \"\"\"Keep only the first `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [: num ] return view","title":"head()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","text":"Alias for head Source code in src/ultimate_notion/view.py def limit ( self , num : int ) -> View : \"\"\"Alias for `head`\"\"\" return self . head ( num )","title":"limit()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.page","text":"Retrieve a page by index of the view Source code in src/ultimate_notion/view.py def page ( self , idx : int ) -> Page : \"\"\"Retrieve a page by index of the view\"\"\" return self . _pages [ self . _row_indices [ idx ]]","title":"page()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.pages","text":"Retrieve all pages in view Source code in src/ultimate_notion/view.py def pages ( self ) -> list [ Page ]: \"\"\"Retrieve all pages in view\"\"\" return [ self . page ( idx ) for idx in range ( len ( self ))]","title":"pages()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reload","text":"Reload all pages by re-executing the query that generated the view Source code in src/ultimate_notion/view.py def reload ( self ) -> View : \"\"\"Reload all pages by re-executing the query that generated the view\"\"\" view = self . clone () view . _pages = self . database . _pages_from_query ( query = self . _query , live_update = self . _live_update ) return view","title":"reload()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reset","text":"Reset the view, i.e. remove filtering, index and sorting Source code in src/ultimate_notion/view.py def reset ( self ) -> View : \"\"\"Reset the view, i.e. remove filtering, index and sorting\"\"\" self . _icon_name : str | None = None self . _id_name : str | None = None self . _index_name : str | None = None self . _row_indices = np . arange ( len ( self . _pages )) self . _col_indices = np . arange ( len ( self . _columns )) return self","title":"reset()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reverse","text":"Reverse the order of the rows Source code in src/ultimate_notion/view.py def reverse ( self ) -> View : \"\"\"Reverse the order of the rows\"\"\" view = self . clone () view . _row_indices = view . _row_indices [:: - 1 ] return view","title":"reverse()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.row","text":"Source code in src/ultimate_notion/view.py def row ( self , idx : int ) -> list [ Any ]: page = self . page ( idx ) row : list [ Any ] = [] for col in self . columns : if col == self . _title_col : row . append ( page . title ) elif col == self . _id_name : row . append ( page . id ) elif col == self . _index_name : row . append ( idx ) elif col == self . _icon_name : row . append ( page . icon ) else : row . append ( page . properties [ col ]) return row","title":"row()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.rows","text":"Source code in src/ultimate_notion/view.py def rows ( self ) -> list [ list [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self ))]","title":"rows()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.select","text":"Source code in src/ultimate_notion/view.py def select ( self , cols : ColType , * more_cols : str ) -> View : if isinstance ( cols , str ): cols = [ cols ] if more_cols : cols += more_cols curr_cols = self . _columns # we only consider non-meta columns, e.g. no index, etc. if not_included := set ( cols ) - set ( curr_cols ): msg = f \"Some columns, i.e. { ', ' . join ( not_included ) } , are not in view\" raise RuntimeError ( msg ) view = self . clone () select_col_indices = find_indices ( cols , curr_cols ) view . _col_indices = view . _col_indices [ select_col_indices ] return view","title":"select()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.show","text":"Show the view Parameters: Name Type Description Default html bool | None output in html or not, or determine automatically based on context, e.g. Jupyter lab. None Source code in src/ultimate_notion/view.py def show ( self , * , html : bool | None = None ): \"\"\"Show the view Args: html: output in html or not, or determine automatically based on context, e.g. Jupyter lab. \"\"\" rows = self . rows () cols = self . columns if html is None : html = is_notebook () if html : if self . has_icon : rows = self . _html_for_icon ( rows , cols ) html_str = tabulate ( rows , headers = cols , tablefmt = 'unsafehtml' ) else : html_str = tabulate ( rows , headers = cols , tablefmt = 'html' ) return html_str else : return tabulate ( rows , headers = cols )","title":"show()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.sort","text":"Source code in src/ultimate_notion/view.py def sort ( self ): raise NotImplementedError","title":"sort()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.tail","text":"Keep only the last num elements in view Source code in src/ultimate_notion/view.py def tail ( self , num : int ) -> View : \"\"\"Keep only the last `num` elements in view\"\"\" view = self . clone () view . _row_indices = view . _row_indices [ - num :] return view","title":"tail()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pandas","text":"Source code in src/ultimate_notion/view.py def to_pandas ( self ) -> pd . DataFrame : # remove index as pandas uses its own view = self . without_index () if self . has_index else self return pd . DataFrame ( view . rows (), columns = view . columns )","title":"to_pandas()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_icon","text":"Show icons in HTML output Source code in src/ultimate_notion/view.py def with_icon ( self , name = 'icon' ) -> View : \"\"\"Show icons in HTML output\"\"\" if self . has_icon and name == self . _icon_name : return self view = self . clone () view . _icon_name = name return view","title":"with_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_id","text":"Add an id column to the view Source code in src/ultimate_notion/view.py def with_id ( self , name : str = 'id' ) -> View : \"\"\"Add an id column to the view\"\"\" if self . has_id and name == self . _id_name : return self view = self . clone () view . _id_name = name return view","title":"with_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","text":"Add an index column to the view Source code in src/ultimate_notion/view.py def with_index ( self , name = 'index' ) -> View : \"\"\"Add an index column to the view\"\"\" if self . has_index and name == self . _index_name : return self if name in self . columns : msg = f \"index ' { name } ' is already a column name\" raise RuntimeError ( msg ) view = self . clone () view . _index_name = name return view","title":"with_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_live_update","text":"Source code in src/ultimate_notion/view.py def with_live_update ( self ) -> View : if self . live_update : return self for page in self . _pages : page . live_update = True self . _live_update = True return self","title":"with_live_update()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_icon","text":"Don't show icons in HTML output Source code in src/ultimate_notion/view.py def without_icon ( self ) -> View : \"\"\"Don't show icons in HTML output\"\"\" if not self . has_icon : return self view = self . clone () view . _icon_name = None return view","title":"without_icon()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_id","text":"Remove id column from the view Source code in src/ultimate_notion/view.py def without_id ( self ) -> View : \"\"\"Remove id column from the view\"\"\" if not self . has_id : return self view = self . clone () view . _id_name = None return view","title":"without_id()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","text":"Remove index column from the view Source code in src/ultimate_notion/view.py def without_index ( self ) -> View : \"\"\"Remove index column from the view\"\"\" if not self . has_index : return self view = self . clone () view . _index_name = None return view","title":"without_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_live_update","text":"Source code in src/ultimate_notion/view.py def without_live_update ( self ) -> View : if not self . live_update : return self for page in self . _pages : page . live_update = False self . _live_update = False return self","title":"without_live_update()"},{"location":"reference/ultimate_notion/obj_api/","text":"obj_api \u00b6 The Notion API mapped to Python objects by Pydantic Most of this code is taken from Notional by Jason Heddings and is MIT-licensed.","title":"Obj api"},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api","text":"The Notion API mapped to Python objects by Pydantic Most of this code is taken from Notional by Jason Heddings and is MIT-licensed.","title":"obj_api"},{"location":"reference/ultimate_notion/obj_api/blocks/","text":"blocks \u00b6 Wrapper for Notion API blocks. Blocks are the base for all Notion content. Block \u00b6 A standard block object in Notion. Calling the block will expose the nested data in the object. Bookmark \u00b6 A bookmark block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. URL property \u00b6 Return the URL contained in this Bookmark block. bookmark : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( url ) classmethod \u00b6 Compose a new Bookmark block from a specific URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Compose a new `Bookmark` block from a specific URL.\"\"\" return Bookmark ( bookmark = Bookmark . _NestedData ( url = url )) Breadcrumb \u00b6 A breadcrumb block in Notion. breadcrumb : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 BulletedListItem \u00b6 A bulleted list item in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. bulleted_list_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Callout \u00b6 A callout block in Notion. callout : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( text , emoji = None , color = FullColor . GRAY_BACKGROUND ) classmethod \u00b6 Compose a Callout block from the given text, emoji and color. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , emoji = None , color = FullColor . GRAY_BACKGROUND ): \"\"\"Compose a `Callout` block from the given text, emoji and color.\"\"\" if emoji is not None : emoji = EmojiObject [ emoji ] nested = Callout . _NestedData ( icon = emoji , color = color ) callout = cls ( callout = nested ) callout . concat ( text ) return callout ChildDatabase \u00b6 A child database block in Notion. child_database : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 ChildPage \u00b6 A child page block in Notion. child_page : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Code \u00b6 A code block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. code : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( text , lang = CodingLanguage . PLAIN_TEXT ) classmethod \u00b6 Compose a Code block from the given text and language. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , lang = CodingLanguage . PLAIN_TEXT ): \"\"\"Compose a `Code` block from the given text and language.\"\"\" block = super () . __compose__ ( text ) block . code . language = lang return block Column \u00b6 A column block in Notion. column : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( blocks ) classmethod \u00b6 Create a new Column block with the given blocks as children. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * blocks ): \"\"\"Create a new `Column` block with the given blocks as children.\"\"\" col = cls () for block in blocks : col . append ( block ) return col ColumnList \u00b6 A column list block in Notion. column_list : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( columns ) classmethod \u00b6 Create a new Column block with the given blocks as children. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * columns ): \"\"\"Create a new `Column` block with the given blocks as children.\"\"\" cols = cls () for col in columns : cols . append ( col ) return cols DataRecord \u00b6 The base type for all Notion API records. archived : bool = False class-attribute instance-attribute \u00b6 created_by : User = None class-attribute instance-attribute \u00b6 created_time : datetime = None class-attribute instance-attribute \u00b6 has_children : bool = False class-attribute instance-attribute \u00b6 id : UUID = None class-attribute instance-attribute \u00b6 last_edited_by : User = None class-attribute instance-attribute \u00b6 last_edited_time : datetime = None class-attribute instance-attribute \u00b6 parent : ParentRef = None class-attribute instance-attribute \u00b6 Database \u00b6 A database record type. Title property \u00b6 Return the title of this database as plain text. cover : Optional [ FileObject ] = None class-attribute instance-attribute \u00b6 description : Optional [ List [ RichTextObject ]] = None class-attribute instance-attribute \u00b6 icon : Optional [ Union [ FileObject , EmojiObject ]] = None class-attribute instance-attribute \u00b6 is_inline : bool = False class-attribute instance-attribute \u00b6 properties : Dict [ str , PropertyObject ] = {} class-attribute instance-attribute \u00b6 title : List [ RichTextObject ] = None class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 Divider \u00b6 A divider block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. divider : Any = {} class-attribute instance-attribute \u00b6 Embed \u00b6 An embed block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. URL property \u00b6 Return the URL contained in this Embed block. embed : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( url ) classmethod \u00b6 Create a new Embed block from the given URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `Embed` block from the given URL.\"\"\" return Embed ( embed = Embed . _NestedData ( url = url )) Equation \u00b6 An equation block in Notion. equation : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( expr ) classmethod \u00b6 Create a new Equation block from the given expression. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , expr ): \"\"\"Create a new `Equation` block from the given expression.\"\"\" return LinkPreview ( equation = Equation . _NestedData ( expression = expr )) File \u00b6 A file block in Notion. file : FileObject = None class-attribute instance-attribute \u00b6 Heading1 \u00b6 A heading_1 block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. heading_1 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Heading2 \u00b6 A heading_2 block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. heading_2 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Heading3 \u00b6 A heading_3 block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. heading_3 : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Image \u00b6 An image block in Notion. image : FileObject = None class-attribute instance-attribute \u00b6 LinkPreview \u00b6 A link_preview block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. URL property \u00b6 Return the URL contained in this LinkPreview block. link_preview : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( url ) classmethod \u00b6 Create a new LinkPreview block from the given URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `LinkPreview` block from the given URL.\"\"\" return LinkPreview ( link_preview = LinkPreview . _NestedData ( url = url )) LinkToPage \u00b6 A link_to_page block in Notion. link_to_page : ParentRef instance-attribute \u00b6 NumberedListItem \u00b6 A numbered list item in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. numbered_list_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 PDF \u00b6 A pdf block in Notion. pdf : FileObject = None class-attribute instance-attribute \u00b6 Page \u00b6 A standard Notion page object. Title property \u00b6 Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate title entry and return as a string. cover : Optional [ FileObject ] = None class-attribute instance-attribute \u00b6 icon : Optional [ Union [ FileObject , EmojiObject ]] = None class-attribute instance-attribute \u00b6 properties : Dict [ str , PropertyValue ] = {} class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 __getitem__ ( name ) \u00b6 Indexer for the given property name. :param name: the name of the property to get from the internal properties Source code in src/ultimate_notion/obj_api/blocks.py def __getitem__ ( self , name ): \"\"\"Indexer for the given property name. :param name: the name of the property to get from the internal properties \"\"\" prop = self . properties . get ( name ) if prop is None : raise AttributeError ( f \"No such property: { name } \" ) return prop __setitem__ ( name , value ) \u00b6 Set the object data for the given property. If value is None , the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param value: the new value for the given property Source code in src/ultimate_notion/obj_api/blocks.py def __setitem__ ( self , name , value ): \"\"\"Set the object data for the given property. If `value` is `None`, the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param value: the new value for the given property \"\"\" if value is None : self . properties . pop ( name , None ) elif isinstance ( value , PropertyValue ): self . properties [ name ] = value else : raise ValueError ( f \"Unable to set { name } :: unsupported value type\" ) Paragraph \u00b6 A paragraph block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. paragraph : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Quote \u00b6 A quote block in Notion. Markdown property \u00b6 Return the contents of this block as markdown text. quote : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 SyncedBlock \u00b6 A synced_block block in Notion - either original or synced. IsOriginal property \u00b6 Determine if this block represents the original content. If this method returns False , the block represents the sync'ed block. synced_block : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Table \u00b6 A table block in Notion. Width property \u00b6 Return the current width of this table. table : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( rows ) classmethod \u00b6 Create a new Table block with the given rows. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * rows ): \"\"\"Create a new `Table` block with the given rows.\"\"\" table = cls () for row in rows : table . append ( row ) return table append ( block : TableRow ) \u00b6 Append the given row to this table. This method is only applicable when creating a new Table block. In order to add rows to an existing Table , use the blocks.children.append() endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , block : TableRow ): \"\"\"Append the given row to this table. This method is only applicable when creating a new `Table` block. In order to add rows to an existing `Table`, use the `blocks.children.append()` endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. \"\"\" # XXX need to review whether this is applicable during update... may need # to raise an error if the block has already been created on the server if not isinstance ( block , TableRow ): raise ValueError ( \"Only TableRow may be appended to Table blocks.\" ) if self . Width == 0 : self . table . table_width = block . Width elif self . Width != block . Width : raise ValueError ( \"Number of cells in row must match table\" ) self . table . children . append ( block ) TableOfContents \u00b6 A table_of_contents block in Notion. table_of_contents : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 TableRow \u00b6 A table_row block in Notion. Width property \u00b6 Return the width (number of cells) in this TableRow . table_row : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( cells ) classmethod \u00b6 Create a new TableRow block with the given cell contents. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * cells ): \"\"\"Create a new `TableRow` block with the given cell contents.\"\"\" row = cls () for cell in cells : row . append ( cell ) return row __getitem__ ( cell_num ) \u00b6 Return the cell content for the requested column. Source code in src/ultimate_notion/obj_api/blocks.py def __getitem__ ( self , cell_num ): \"\"\"Return the cell content for the requested column.\"\"\" return self . table_row [ cell_num ] append ( text ) \u00b6 Append the given text as a new cell in this TableRow . text may be a string, RichTextObject or a list of RichTextObject 's. :param text: the text content to append Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , text ): \"\"\"Append the given text as a new cell in this `TableRow`. `text` may be a string, `RichTextObject` or a list of `RichTextObject`'s. :param text: the text content to append \"\"\" if self . table_row . cells is None : self . table_row . cells = [] if isinstance ( text , list ): self . table_row . cells . append ( list ) elif isinstance ( text , RichTextObject ): self . table_row . cells . append ([ text ]) else : rtf = TextObject [ text ] self . table_row . cells . append ([ rtf ]) Template \u00b6 A template block in Notion. template : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 TextBlock \u00b6 A standard text block object in Notion. PlainText property \u00b6 Return the contents of this Block as plain text. __text__ property \u00b6 Provide shorthand access to the nested text content in this block. __compose__ ( text ) classmethod \u00b6 Compose a TextBlock from the given text items. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * text ): \"\"\"Compose a `TextBlock` from the given text items.\"\"\" obj = cls () obj . concat ( * text ) return obj concat ( text ) \u00b6 Concatenate text (either RichTextObject or str items) to this block. Source code in src/ultimate_notion/obj_api/blocks.py def concat ( self , * text ): \"\"\"Concatenate text (either `RichTextObject` or `str` items) to this block.\"\"\" rtf = rich_text ( * text ) # calling the block returns the nested data... this helps deal with # sublcasses of `TextBlock` that each have different \"type\" attributes nested = self () nested . rich_text . extend ( rtf ) ToDo \u00b6 A todo list item in Notion. IsChecked property \u00b6 Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns None . Markdown property \u00b6 Return the contents of this block as markdown text. to_do : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( text , checked = False , href = None ) classmethod \u00b6 Compose a ToDo block from the given text and checked state. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , checked = False , href = None ): \"\"\"Compose a ToDo block from the given text and checked state.\"\"\" return ToDo ( to_do = ToDo . _NestedData ( rich_text = [ TextObject [ text , href ]], checked = checked , ) ) Toggle \u00b6 A toggle list item in Notion. toggle : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 UnsupportedBlock \u00b6 A placeholder for unsupported blocks in the API. unsupported : Optional [ _NestedData ] = None class-attribute instance-attribute \u00b6 Video \u00b6 A video block in Notion. video : FileObject = None class-attribute instance-attribute \u00b6 WithChildrenMixin \u00b6 Mixin for blocks that support children blocks. __children__ property \u00b6 Provide short-hand access to the children in this block. __iadd__ ( block ) \u00b6 Append the given block to the children of this parent in place. Source code in src/ultimate_notion/obj_api/blocks.py def __iadd__ ( self , block ): \"\"\"Append the given block to the children of this parent in place.\"\"\" self . append ( block ) return self append ( block ) \u00b6 Append the given block to the children of this parent. Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , block ): \"\"\"Append the given block to the children of this parent.\"\"\" if block is None : raise ValueError ( \"block cannot be None\" ) nested = self () if nested . children is None : nested . children = [] nested . children . append ( block ) self . has_children = True","title":"Blocks"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks","text":"Wrapper for Notion API blocks. Blocks are the base for all Notion content.","title":"blocks"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block","text":"A standard block object in Notion. Calling the block will expose the nested data in the object.","title":"Block"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark","text":"A bookmark block in Notion.","title":"Bookmark"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.URL","text":"Return the URL contained in this Bookmark block.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.bookmark","text":"","title":"bookmark"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.__compose__","text":"Compose a new Bookmark block from a specific URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Compose a new `Bookmark` block from a specific URL.\"\"\" return Bookmark ( bookmark = Bookmark . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb","text":"A breadcrumb block in Notion.","title":"Breadcrumb"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb.breadcrumb","text":"","title":"breadcrumb"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem","text":"A bulleted list item in Notion.","title":"BulletedListItem"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem.bulleted_list_item","text":"","title":"bulleted_list_item"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout","text":"A callout block in Notion.","title":"Callout"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout.callout","text":"","title":"callout"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout.__compose__","text":"Compose a Callout block from the given text, emoji and color. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , emoji = None , color = FullColor . GRAY_BACKGROUND ): \"\"\"Compose a `Callout` block from the given text, emoji and color.\"\"\" if emoji is not None : emoji = EmojiObject [ emoji ] nested = Callout . _NestedData ( icon = emoji , color = color ) callout = cls ( callout = nested ) callout . concat ( text ) return callout","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase","text":"A child database block in Notion.","title":"ChildDatabase"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase.child_database","text":"","title":"child_database"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage","text":"A child page block in Notion.","title":"ChildPage"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage.child_page","text":"","title":"child_page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code","text":"A code block in Notion.","title":"Code"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.code","text":"","title":"code"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.__compose__","text":"Compose a Code block from the given text and language. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , lang = CodingLanguage . PLAIN_TEXT ): \"\"\"Compose a `Code` block from the given text and language.\"\"\" block = super () . __compose__ ( text ) block . code . language = lang return block","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column","text":"A column block in Notion.","title":"Column"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.column","text":"","title":"column"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.__compose__","text":"Create a new Column block with the given blocks as children. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * blocks ): \"\"\"Create a new `Column` block with the given blocks as children.\"\"\" col = cls () for block in blocks : col . append ( block ) return col","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList","text":"A column list block in Notion.","title":"ColumnList"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList.column_list","text":"","title":"column_list"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList.__compose__","text":"Create a new Column block with the given blocks as children. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * columns ): \"\"\"Create a new `Column` block with the given blocks as children.\"\"\" cols = cls () for col in columns : cols . append ( col ) return cols","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord","text":"The base type for all Notion API records.","title":"DataRecord"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataRecord.parent","text":"","title":"parent"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database","text":"A database record type.","title":"Database"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.Title","text":"Return the title of this database as plain text.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider","text":"A divider block in Notion.","title":"Divider"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider.divider","text":"","title":"divider"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed","text":"An embed block in Notion.","title":"Embed"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.URL","text":"Return the URL contained in this Embed block.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.embed","text":"","title":"embed"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.__compose__","text":"Create a new Embed block from the given URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `Embed` block from the given URL.\"\"\" return Embed ( embed = Embed . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation","text":"An equation block in Notion.","title":"Equation"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation.equation","text":"","title":"equation"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation.__compose__","text":"Create a new Equation block from the given expression. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , expr ): \"\"\"Create a new `Equation` block from the given expression.\"\"\" return LinkPreview ( equation = Equation . _NestedData ( expression = expr ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File","text":"A file block in Notion.","title":"File"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File.file","text":"","title":"file"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1","text":"A heading_1 block in Notion.","title":"Heading1"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1.heading_1","text":"","title":"heading_1"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2","text":"A heading_2 block in Notion.","title":"Heading2"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2.heading_2","text":"","title":"heading_2"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3","text":"A heading_3 block in Notion.","title":"Heading3"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3.heading_3","text":"","title":"heading_3"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image","text":"An image block in Notion.","title":"Image"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image.image","text":"","title":"image"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview","text":"A link_preview block in Notion.","title":"LinkPreview"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.URL","text":"Return the URL contained in this LinkPreview block.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.link_preview","text":"","title":"link_preview"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.__compose__","text":"Create a new LinkPreview block from the given URL. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `LinkPreview` block from the given URL.\"\"\" return LinkPreview ( link_preview = LinkPreview . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage","text":"A link_to_page block in Notion.","title":"LinkToPage"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage.link_to_page","text":"","title":"link_to_page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem","text":"A numbered list item in Notion.","title":"NumberedListItem"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem.numbered_list_item","text":"","title":"numbered_list_item"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF","text":"A pdf block in Notion.","title":"PDF"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF.pdf","text":"","title":"pdf"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page","text":"A standard Notion page object.","title":"Page"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.Title","text":"Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate title entry and return as a string.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.__getitem__","text":"Indexer for the given property name. :param name: the name of the property to get from the internal properties Source code in src/ultimate_notion/obj_api/blocks.py def __getitem__ ( self , name ): \"\"\"Indexer for the given property name. :param name: the name of the property to get from the internal properties \"\"\" prop = self . properties . get ( name ) if prop is None : raise AttributeError ( f \"No such property: { name } \" ) return prop","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.__setitem__","text":"Set the object data for the given property. If value is None , the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param value: the new value for the given property Source code in src/ultimate_notion/obj_api/blocks.py def __setitem__ ( self , name , value ): \"\"\"Set the object data for the given property. If `value` is `None`, the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param value: the new value for the given property \"\"\" if value is None : self . properties . pop ( name , None ) elif isinstance ( value , PropertyValue ): self . properties [ name ] = value else : raise ValueError ( f \"Unable to set { name } :: unsupported value type\" )","title":"__setitem__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph","text":"A paragraph block in Notion.","title":"Paragraph"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph.paragraph","text":"","title":"paragraph"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote","text":"A quote block in Notion.","title":"Quote"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote.quote","text":"","title":"quote"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock","text":"A synced_block block in Notion - either original or synced.","title":"SyncedBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.IsOriginal","text":"Determine if this block represents the original content. If this method returns False , the block represents the sync'ed block.","title":"IsOriginal"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.synced_block","text":"","title":"synced_block"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table","text":"A table block in Notion.","title":"Table"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.Width","text":"Return the current width of this table.","title":"Width"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.table","text":"","title":"table"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.__compose__","text":"Create a new Table block with the given rows. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * rows ): \"\"\"Create a new `Table` block with the given rows.\"\"\" table = cls () for row in rows : table . append ( row ) return table","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.append","text":"Append the given row to this table. This method is only applicable when creating a new Table block. In order to add rows to an existing Table , use the blocks.children.append() endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , block : TableRow ): \"\"\"Append the given row to this table. This method is only applicable when creating a new `Table` block. In order to add rows to an existing `Table`, use the `blocks.children.append()` endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. \"\"\" # XXX need to review whether this is applicable during update... may need # to raise an error if the block has already been created on the server if not isinstance ( block , TableRow ): raise ValueError ( \"Only TableRow may be appended to Table blocks.\" ) if self . Width == 0 : self . table . table_width = block . Width elif self . Width != block . Width : raise ValueError ( \"Number of cells in row must match table\" ) self . table . children . append ( block )","title":"append()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents","text":"A table_of_contents block in Notion.","title":"TableOfContents"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents.table_of_contents","text":"","title":"table_of_contents"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow","text":"A table_row block in Notion.","title":"TableRow"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.Width","text":"Return the width (number of cells) in this TableRow .","title":"Width"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.table_row","text":"","title":"table_row"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.__compose__","text":"Create a new TableRow block with the given cell contents. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * cells ): \"\"\"Create a new `TableRow` block with the given cell contents.\"\"\" row = cls () for cell in cells : row . append ( cell ) return row","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.__getitem__","text":"Return the cell content for the requested column. Source code in src/ultimate_notion/obj_api/blocks.py def __getitem__ ( self , cell_num ): \"\"\"Return the cell content for the requested column.\"\"\" return self . table_row [ cell_num ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.append","text":"Append the given text as a new cell in this TableRow . text may be a string, RichTextObject or a list of RichTextObject 's. :param text: the text content to append Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , text ): \"\"\"Append the given text as a new cell in this `TableRow`. `text` may be a string, `RichTextObject` or a list of `RichTextObject`'s. :param text: the text content to append \"\"\" if self . table_row . cells is None : self . table_row . cells = [] if isinstance ( text , list ): self . table_row . cells . append ( list ) elif isinstance ( text , RichTextObject ): self . table_row . cells . append ([ text ]) else : rtf = TextObject [ text ] self . table_row . cells . append ([ rtf ])","title":"append()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template","text":"A template block in Notion.","title":"Template"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template.template","text":"","title":"template"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock","text":"A standard text block object in Notion.","title":"TextBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock.PlainText","text":"Return the contents of this Block as plain text.","title":"PlainText"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock.__text__","text":"Provide shorthand access to the nested text content in this block.","title":"__text__"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock.__compose__","text":"Compose a TextBlock from the given text items. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , * text ): \"\"\"Compose a `TextBlock` from the given text items.\"\"\" obj = cls () obj . concat ( * text ) return obj","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock.concat","text":"Concatenate text (either RichTextObject or str items) to this block. Source code in src/ultimate_notion/obj_api/blocks.py def concat ( self , * text ): \"\"\"Concatenate text (either `RichTextObject` or `str` items) to this block.\"\"\" rtf = rich_text ( * text ) # calling the block returns the nested data... this helps deal with # sublcasses of `TextBlock` that each have different \"type\" attributes nested = self () nested . rich_text . extend ( rtf )","title":"concat()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo","text":"A todo list item in Notion.","title":"ToDo"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.IsChecked","text":"Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns None .","title":"IsChecked"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.Markdown","text":"Return the contents of this block as markdown text.","title":"Markdown"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.to_do","text":"","title":"to_do"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.__compose__","text":"Compose a ToDo block from the given text and checked state. Source code in src/ultimate_notion/obj_api/blocks.py @classmethod def __compose__ ( cls , text , checked = False , href = None ): \"\"\"Compose a ToDo block from the given text and checked state.\"\"\" return ToDo ( to_do = ToDo . _NestedData ( rich_text = [ TextObject [ text , href ]], checked = checked , ) )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle","text":"A toggle list item in Notion.","title":"Toggle"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle.toggle","text":"","title":"toggle"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock","text":"A placeholder for unsupported blocks in the API.","title":"UnsupportedBlock"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock.unsupported","text":"","title":"unsupported"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video","text":"A video block in Notion.","title":"Video"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video.video","text":"","title":"video"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.WithChildrenMixin","text":"Mixin for blocks that support children blocks.","title":"WithChildrenMixin"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.WithChildrenMixin.__children__","text":"Provide short-hand access to the children in this block.","title":"__children__"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.WithChildrenMixin.__iadd__","text":"Append the given block to the children of this parent in place. Source code in src/ultimate_notion/obj_api/blocks.py def __iadd__ ( self , block ): \"\"\"Append the given block to the children of this parent in place.\"\"\" self . append ( block ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.WithChildrenMixin.append","text":"Append the given block to the children of this parent. Source code in src/ultimate_notion/obj_api/blocks.py def append ( self , block ): \"\"\"Append the given block to the children of this parent.\"\"\" if block is None : raise ValueError ( \"block cannot be None\" ) nested = self () if nested . children is None : nested . children = [] nested . children . append ( block ) self . has_children = True","title":"append()"},{"location":"reference/ultimate_notion/obj_api/core/","text":"core \u00b6 Base classes for working with the Notion API. logger = logging . getLogger ( __name__ ) module-attribute \u00b6 ComposableObjectMeta \u00b6 Presents a metaclass that composes objects using simple values. This is primarily to allow easy definition of data objects without disrupting the BaseModel constructor. e.g. rather than requiring a caller to understand how nested data works in the data objects, they can compose objects from simple values. Compare the following code for declaring a Paragraph: # using nested data objects: text = \"hello world\" nested = TextObject . _NestedData ( content = text ) rtf = text . TextObject ( text = nested , plain_text = text ) content = blocks . Paragraph . _NestedData ( text = [ rtf ]) para = blocks . Paragraph ( paragraph = content ) # using a composable object: para = blocks . Paragraph [ \"hello world\" ] Classes that support composition in this way must define and implement the internal __compose__ method. This method takes an arbitrary number of parameters, based on the needs of the implementation. It is up to the implementing class to ensure that the parameters are specified correctly. __getitem__ ( params ) \u00b6 Return the requested class by composing using the given param. Types found in params will be compared to expected types in the __compose__ method. If the requested class does not expose the __compose__ method, this will raise an exception. Source code in src/ultimate_notion/obj_api/core.py def __getitem__ ( self , params ): \"\"\"Return the requested class by composing using the given param. Types found in `params` will be compared to expected types in the `__compose__` method. If the requested class does not expose the `__compose__` method, this will raise an exception. \"\"\" if not hasattr ( self , \"__compose__\" ): raise NotImplementedError ( f \" { self } does not support object composition\" ) compose_func = self . __compose__ # __getitem__ only accepts a single parameter... if the caller provides # multiple params, they will be converted and passed as a tuple. this method # also accepts a list for readability when composing from ORM properties if params and type ( params ) in ( list , tuple ): return compose_func ( * params ) return compose_func ( params ) GenericObject \u00b6 The base for all API objects. As a general convention, data fields in lower case are defined by the Notion API. Properties in Title Case are provided for convenience. __setattr__ ( name , value ) \u00b6 Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not support property setters. See samuelcolvin/pydantic#1577 Source code in src/ultimate_notion/obj_api/core.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not support property setters. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( object = self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err dict ( kwargs ) \u00b6 Convert to a suitable representation for the Notion API. Source code in src/ultimate_notion/obj_api/core.py def dict ( self , ** kwargs ): \"\"\"Convert to a suitable representation for the Notion API.\"\"\" # the API doesn't like \"undefined\" values... kwargs [ \"exclude_none\" ] = True kwargs [ \"by_alias\" ] = True obj = super () . dict ( ** kwargs ) # TODO read-only fields should not be sent to the API # https://github.com/jheddings/notional/issues/9 return serialize_to_api ( obj ) refresh ( __notional_self__ , data ) \u00b6 Refresh the internal attributes with new data. Source code in src/ultimate_notion/obj_api/core.py def refresh ( __notional_self__ , ** data ): \"\"\"Refresh the internal attributes with new data.\"\"\" values , fields , error = validate_model ( __notional_self__ . __class__ , data ) if error : raise error for name in fields : value = values [ name ] logger . debug ( \"set object data -- %s => %s \" , name , value ) setattr ( __notional_self__ , name , value ) return __notional_self__ NotionObject \u00b6 A top-level Notion API resource. id : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 object : str instance-attribute \u00b6 __init_subclass__ ( object = None , kwargs ) \u00b6 Update GenericObject defaults for the named object. Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , object = None , ** kwargs ): \"\"\"Update `GenericObject` defaults for the named object.\"\"\" super () . __init_subclass__ ( ** kwargs ) if object is not None : cls . _set_field_default ( \"object\" , default = object ) TypedObject \u00b6 A type-referenced object. Many objects in the Notion API follow a standard pattern with a 'type' property followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. For example, this contains a nested 'detail' object: data = { type: \"detail\", ... detail: { ... } } Calling the object provides direct access to the data stored in {type} . type : str instance-attribute \u00b6 __call__ ( field = None ) \u00b6 Return the nested data object contained by this TypedObject . If a field is provided, the contents of that field in the nested data will be returned. Otherwise, the full contents of the NestedData will be returned. Source code in src/ultimate_notion/obj_api/core.py def __call__ ( self , field = None ): \"\"\"Return the nested data object contained by this `TypedObject`. If a field is provided, the contents of that field in the nested data will be returned. Otherwise, the full contents of the NestedData will be returned. \"\"\" type = getattr ( self , \"type\" , None ) if type is None : raise AttributeError ( \"type not specified\" ) nested = getattr ( self , type ) if field is not None : nested = getattr ( nested , field ) return nested __get_validators__ () classmethod \u00b6 Provide BaseModel with the means to convert TypedObject 's. Source code in src/ultimate_notion/obj_api/core.py @classmethod def __get_validators__ ( cls ): \"\"\"Provide `BaseModel` with the means to convert `TypedObject`'s.\"\"\" yield cls . _resolve_type __init_subclass__ ( type = None , kwargs ) \u00b6 Register the subtypes of the TypedObject subclass. Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , type = None , ** kwargs ): \"\"\"Register the subtypes of the TypedObject subclass.\"\"\" super () . __init_subclass__ ( ** kwargs ) type_name = cls . __name__ if type is None else type cls . _register_type ( type_name ) parse_obj ( obj ) classmethod \u00b6 Parse the structured object data into an instance of TypedObject . This method overrides BaseModel.parse_obj() . Source code in src/ultimate_notion/obj_api/core.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the structured object data into an instance of `TypedObject`. This method overrides `BaseModel.parse_obj()`. \"\"\" return cls . _resolve_type ( obj ) serialize_to_api ( data ) \u00b6 Recursively convert the given data to an API-safe form. This is mostly to handle data types that will not directly serialize to JSON. Source code in src/ultimate_notion/obj_api/core.py def serialize_to_api ( data ): \"\"\"Recursively convert the given data to an API-safe form. This is mostly to handle data types that will not directly serialize to JSON. \"\"\" # https://github.com/samuelcolvin/pydantic/issues/1409 if isinstance ( data , ( date , datetime )): return data . isoformat () if isinstance ( data , UUID ): return str ( data ) if isinstance ( data , Enum ): return data . value if isinstance ( data , ( list , tuple )): return [ serialize_to_api ( value ) for value in data ] if isinstance ( data , dict ): return { name : serialize_to_api ( value ) for name , value in data . items ()} return data","title":"Core"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core","text":"Base classes for working with the Notion API.","title":"core"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.ComposableObjectMeta","text":"Presents a metaclass that composes objects using simple values. This is primarily to allow easy definition of data objects without disrupting the BaseModel constructor. e.g. rather than requiring a caller to understand how nested data works in the data objects, they can compose objects from simple values. Compare the following code for declaring a Paragraph: # using nested data objects: text = \"hello world\" nested = TextObject . _NestedData ( content = text ) rtf = text . TextObject ( text = nested , plain_text = text ) content = blocks . Paragraph . _NestedData ( text = [ rtf ]) para = blocks . Paragraph ( paragraph = content ) # using a composable object: para = blocks . Paragraph [ \"hello world\" ] Classes that support composition in this way must define and implement the internal __compose__ method. This method takes an arbitrary number of parameters, based on the needs of the implementation. It is up to the implementing class to ensure that the parameters are specified correctly.","title":"ComposableObjectMeta"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.ComposableObjectMeta.__getitem__","text":"Return the requested class by composing using the given param. Types found in params will be compared to expected types in the __compose__ method. If the requested class does not expose the __compose__ method, this will raise an exception. Source code in src/ultimate_notion/obj_api/core.py def __getitem__ ( self , params ): \"\"\"Return the requested class by composing using the given param. Types found in `params` will be compared to expected types in the `__compose__` method. If the requested class does not expose the `__compose__` method, this will raise an exception. \"\"\" if not hasattr ( self , \"__compose__\" ): raise NotImplementedError ( f \" { self } does not support object composition\" ) compose_func = self . __compose__ # __getitem__ only accepts a single parameter... if the caller provides # multiple params, they will be converted and passed as a tuple. this method # also accepts a list for readability when composing from ORM properties if params and type ( params ) in ( list , tuple ): return compose_func ( * params ) return compose_func ( params )","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject","text":"The base for all API objects. As a general convention, data fields in lower case are defined by the Notion API. Properties in Title Case are provided for convenience.","title":"GenericObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.__setattr__","text":"Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not support property setters. See samuelcolvin/pydantic#1577 Source code in src/ultimate_notion/obj_api/core.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not support property setters. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( object = self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err","title":"__setattr__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.dict","text":"Convert to a suitable representation for the Notion API. Source code in src/ultimate_notion/obj_api/core.py def dict ( self , ** kwargs ): \"\"\"Convert to a suitable representation for the Notion API.\"\"\" # the API doesn't like \"undefined\" values... kwargs [ \"exclude_none\" ] = True kwargs [ \"by_alias\" ] = True obj = super () . dict ( ** kwargs ) # TODO read-only fields should not be sent to the API # https://github.com/jheddings/notional/issues/9 return serialize_to_api ( obj )","title":"dict()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.refresh","text":"Refresh the internal attributes with new data. Source code in src/ultimate_notion/obj_api/core.py def refresh ( __notional_self__ , ** data ): \"\"\"Refresh the internal attributes with new data.\"\"\" values , fields , error = validate_model ( __notional_self__ . __class__ , data ) if error : raise error for name in fields : value = values [ name ] logger . debug ( \"set object data -- %s => %s \" , name , value ) setattr ( __notional_self__ , name , value ) return __notional_self__","title":"refresh()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject","text":"A top-level Notion API resource.","title":"NotionObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.object","text":"","title":"object"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__init_subclass__","text":"Update GenericObject defaults for the named object. Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , object = None , ** kwargs ): \"\"\"Update `GenericObject` defaults for the named object.\"\"\" super () . __init_subclass__ ( ** kwargs ) if object is not None : cls . _set_field_default ( \"object\" , default = object )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject","text":"A type-referenced object. Many objects in the Notion API follow a standard pattern with a 'type' property followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. For example, this contains a nested 'detail' object: data = { type: \"detail\", ... detail: { ... } } Calling the object provides direct access to the data stored in {type} .","title":"TypedObject"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__call__","text":"Return the nested data object contained by this TypedObject . If a field is provided, the contents of that field in the nested data will be returned. Otherwise, the full contents of the NestedData will be returned. Source code in src/ultimate_notion/obj_api/core.py def __call__ ( self , field = None ): \"\"\"Return the nested data object contained by this `TypedObject`. If a field is provided, the contents of that field in the nested data will be returned. Otherwise, the full contents of the NestedData will be returned. \"\"\" type = getattr ( self , \"type\" , None ) if type is None : raise AttributeError ( \"type not specified\" ) nested = getattr ( self , type ) if field is not None : nested = getattr ( nested , field ) return nested","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__get_validators__","text":"Provide BaseModel with the means to convert TypedObject 's. Source code in src/ultimate_notion/obj_api/core.py @classmethod def __get_validators__ ( cls ): \"\"\"Provide `BaseModel` with the means to convert `TypedObject`'s.\"\"\" yield cls . _resolve_type","title":"__get_validators__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__init_subclass__","text":"Register the subtypes of the TypedObject subclass. Source code in src/ultimate_notion/obj_api/core.py def __init_subclass__ ( cls , type = None , ** kwargs ): \"\"\"Register the subtypes of the TypedObject subclass.\"\"\" super () . __init_subclass__ ( ** kwargs ) type_name = cls . __name__ if type is None else type cls . _register_type ( type_name )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.parse_obj","text":"Parse the structured object data into an instance of TypedObject . This method overrides BaseModel.parse_obj() . Source code in src/ultimate_notion/obj_api/core.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the structured object data into an instance of `TypedObject`. This method overrides `BaseModel.parse_obj()`. \"\"\" return cls . _resolve_type ( obj )","title":"parse_obj()"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.serialize_to_api","text":"Recursively convert the given data to an API-safe form. This is mostly to handle data types that will not directly serialize to JSON. Source code in src/ultimate_notion/obj_api/core.py def serialize_to_api ( data ): \"\"\"Recursively convert the given data to an API-safe form. This is mostly to handle data types that will not directly serialize to JSON. \"\"\" # https://github.com/samuelcolvin/pydantic/issues/1409 if isinstance ( data , ( date , datetime )): return data . isoformat () if isinstance ( data , UUID ): return str ( data ) if isinstance ( data , Enum ): return data . value if isinstance ( data , ( list , tuple )): return [ serialize_to_api ( value ) for value in data ] if isinstance ( data , dict ): return { name : serialize_to_api ( value ) for name , value in data . items ()} return data","title":"serialize_to_api()"},{"location":"reference/ultimate_notion/obj_api/iterator/","text":"iterator \u00b6 Iterator classes for working with paginated API responses. MAX_PAGE_SIZE = 100 module-attribute \u00b6 logger = logging . getLogger ( __name__ ) module-attribute \u00b6 BlockList \u00b6 A list of Block objects returned by the Notion API. block : Any = {} class-attribute instance-attribute \u00b6 DatabaseList \u00b6 A list of Database objects returned by the Notion API. database : Any = {} class-attribute instance-attribute \u00b6 EndpointIterator ( endpoint , datatype = None ) \u00b6 Iterates over results from a paginated API response. These objects may be reused, however they are not thread safe. For example, after creating the following iterator notion = notional.connect(auth=NOTION_AUTH_TOKEN) query = EndpointIterator(notion.databases().query) The iterator may be reused with different database ID's: for items in query(database_id=first_db): ... for items in query(database_id=second_db): ... Objects returned by the iterator may also be converted to a specific type. This is most commonly used to wrap API objects with a higher-level object (such as ORM types). If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the NotionObject contained in the ObjectList . Source code in src/ultimate_notion/obj_api/iterator.py def __init__ ( self , endpoint , datatype = None ): \"\"\"Initialize an object list iterator for the specified endpoint. If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the `NotionObject` contained in the `ObjectList`. \"\"\" self . _endpoint = endpoint self . _datatype = datatype self . has_more = None self . page_num = - 1 self . total_items = - 1 self . next_cursor = None has_more = None instance-attribute \u00b6 next_cursor = None instance-attribute \u00b6 page_num = - 1 instance-attribute \u00b6 total_items = - 1 instance-attribute \u00b6 __call__ ( kwargs ) \u00b6 Return a generator for this endpoint using the given parameters. Source code in src/ultimate_notion/obj_api/iterator.py def __call__ ( self , ** kwargs ): \"\"\"Return a generator for this endpoint using the given parameters.\"\"\" self . has_more = True self . page_num = 0 self . total_items = 0 if \"page_size\" not in kwargs : kwargs [ \"page_size\" ] = MAX_PAGE_SIZE self . next_cursor = kwargs . pop ( \"start_cursor\" , None ) while self . has_more : self . page_num += 1 page = self . _endpoint ( start_cursor = self . next_cursor , ** kwargs ) api_list = ObjectList . parse_obj ( page ) for obj in api_list . results : self . total_items += 1 if self . _datatype is None : yield obj else : yield self . _datatype ( obj ) self . next_cursor = api_list . next_cursor self . has_more = api_list . has_more and self . next_cursor is not None list ( kwargs ) \u00b6 Collect all items from the endpoint as a list. Source code in src/ultimate_notion/obj_api/iterator.py def list ( self , ** kwargs ): \"\"\"Collect all items from the endpoint as a list.\"\"\" items = [] for item in self ( ** kwargs ): items . append ( item ) return items ObjectList \u00b6 A paginated list of objects returned by the Notion API. has_more : bool = False class-attribute instance-attribute \u00b6 next_cursor : Optional [ str ] = None class-attribute instance-attribute \u00b6 results : List [ NotionObject ] = [] class-attribute instance-attribute \u00b6 PageList \u00b6 A list of Page objects returned by the Notion API. page : Any = {} class-attribute instance-attribute \u00b6 PageOrDatabaseList \u00b6 A list of Page or Database objects returned by the Notion API. page_or_database : Any = {} class-attribute instance-attribute \u00b6 PropertyItemList \u00b6 A paginated list of property items returned by the Notion API. Property item lists contain one or more pages of basic property items. These types do not typically match the schema for corresponding property values. property_item : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 UserList \u00b6 A list of User objects returned by the Notion API. user : Any = {} class-attribute instance-attribute \u00b6","title":"Iterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator","text":"Iterator classes for working with paginated API responses.","title":"iterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.MAX_PAGE_SIZE","text":"","title":"MAX_PAGE_SIZE"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList","text":"A list of Block objects returned by the Notion API.","title":"BlockList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList.block","text":"","title":"block"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList","text":"A list of Database objects returned by the Notion API.","title":"DatabaseList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList.database","text":"","title":"database"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator","text":"Iterates over results from a paginated API response. These objects may be reused, however they are not thread safe. For example, after creating the following iterator notion = notional.connect(auth=NOTION_AUTH_TOKEN) query = EndpointIterator(notion.databases().query) The iterator may be reused with different database ID's: for items in query(database_id=first_db): ... for items in query(database_id=second_db): ... Objects returned by the iterator may also be converted to a specific type. This is most commonly used to wrap API objects with a higher-level object (such as ORM types). If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the NotionObject contained in the ObjectList . Source code in src/ultimate_notion/obj_api/iterator.py def __init__ ( self , endpoint , datatype = None ): \"\"\"Initialize an object list iterator for the specified endpoint. If a class is provided, it will be constructued for each result returned by this iterator. The constructor must accept a single argument, which is the `NotionObject` contained in the `ObjectList`. \"\"\" self . _endpoint = endpoint self . _datatype = datatype self . has_more = None self . page_num = - 1 self . total_items = - 1 self . next_cursor = None","title":"EndpointIterator"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.next_cursor","text":"","title":"next_cursor"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.page_num","text":"","title":"page_num"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.total_items","text":"","title":"total_items"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.__call__","text":"Return a generator for this endpoint using the given parameters. Source code in src/ultimate_notion/obj_api/iterator.py def __call__ ( self , ** kwargs ): \"\"\"Return a generator for this endpoint using the given parameters.\"\"\" self . has_more = True self . page_num = 0 self . total_items = 0 if \"page_size\" not in kwargs : kwargs [ \"page_size\" ] = MAX_PAGE_SIZE self . next_cursor = kwargs . pop ( \"start_cursor\" , None ) while self . has_more : self . page_num += 1 page = self . _endpoint ( start_cursor = self . next_cursor , ** kwargs ) api_list = ObjectList . parse_obj ( page ) for obj in api_list . results : self . total_items += 1 if self . _datatype is None : yield obj else : yield self . _datatype ( obj ) self . next_cursor = api_list . next_cursor self . has_more = api_list . has_more and self . next_cursor is not None","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.list","text":"Collect all items from the endpoint as a list. Source code in src/ultimate_notion/obj_api/iterator.py def list ( self , ** kwargs ): \"\"\"Collect all items from the endpoint as a list.\"\"\" items = [] for item in self ( ** kwargs ): items . append ( item ) return items","title":"list()"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList","text":"A paginated list of objects returned by the Notion API.","title":"ObjectList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.next_cursor","text":"","title":"next_cursor"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.results","text":"","title":"results"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList","text":"A list of Page objects returned by the Notion API.","title":"PageList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList.page","text":"","title":"page"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList","text":"A list of Page or Database objects returned by the Notion API.","title":"PageOrDatabaseList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList.page_or_database","text":"","title":"page_or_database"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList","text":"A paginated list of property items returned by the Notion API. Property item lists contain one or more pages of basic property items. These types do not typically match the schema for corresponding property values.","title":"PropertyItemList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.property_item","text":"","title":"property_item"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList","text":"A list of User objects returned by the Notion API.","title":"UserList"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList.user","text":"","title":"user"},{"location":"reference/ultimate_notion/obj_api/orm/","text":"orm \u00b6 Utilities for working with Notion as an ORM. There are two primary constructs in this module that enable custom type definitions in Notional: Property() and connected_page() . logger = logging . getLogger ( __name__ ) module-attribute \u00b6 ConnectedPage ( page : Page ) \u00b6 Base class for \"live\" pages via the Notion API. All changes are committed in real time. Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , page : Page ): \"\"\"Construct a ConnectedPage using the underlying Page object.\"\"\" if page . id is None : raise ValueError ( \"Missing ID for connected page\" ) self . _notional__page = page children property \u00b6 Return an iterator for all child blocks of this Page. cover writable property \u00b6 Return the cover for the Page. icon writable property \u00b6 Return the icon for the Page. id property \u00b6 Return the ID of this page (if available). __iadd__ ( block ) \u00b6 Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. Source code in src/ultimate_notion/obj_api/orm.py def __iadd__ ( self , block ): \"\"\"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. \"\"\" self . append ( block ) return self __init_subclass__ ( database = None , kwargs ) \u00b6 Register new subclasses of a ConnectedPage. Source code in src/ultimate_notion/obj_api/orm.py def __init_subclass__ ( cls , database = None , ** kwargs ): \"\"\"Register new subclasses of a ConnectedPage.\"\"\" super ( cls ) . __init_subclass__ ( ** kwargs ) if database is not None : cls . _notional__database = database elif hasattr ( cls , \"__database__\" ): cls . _notional__database = cls . __database__ append ( blocks ) \u00b6 Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. Source code in src/ultimate_notion/obj_api/orm.py def append ( self , * blocks ): \"\"\"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. \"\"\" if self . _notional__page is None : raise ValueError ( \"Cannot append blocks; missing page\" ) if self . _notional__session is None : raise ValueError ( \"Cannot append blocks; invalid session\" ) logger . debug ( \"appending %d blocks to page :: %s \" , len ( blocks ), self . _notional__page . id ) self . _notional__session . blocks . children . append ( self . _notional__page , * blocks ) bind ( to_session ) classmethod \u00b6 Attach this ConnectedPage to the given session. Setting this to None will detach the page. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def bind ( cls , to_session ): \"\"\"Attach this ConnectedPage to the given session. Setting this to None will detach the page. \"\"\" cls . _notional__session = to_session create ( kwargs ) classmethod \u00b6 Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in kwargs . This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. name=value , where name is the attribute in the custom type and value is a supported type for composing. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def create ( cls , ** kwargs ): \"\"\"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in `kwargs`. This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. `name=value`, where `name` is the attribute in the custom type and `value` is a supported type for composing. \"\"\" if cls . _notional__session is None : raise ValueError ( \"Cannot create Page; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Cannot create Page; invalid database\" ) logger . debug ( \"creating new %s :: %s \" , cls , cls . _notional__database ) parent = DatabaseRef ( database_id = cls . _notional__database ) page = cls . _notional__session . pages . create ( parent = parent ) logger . debug ( \"=> connected page :: %s \" , page . id ) connected = cls ( page ) # FIXME it would be better to convert properties to a dict and pass to the API, # rather than setting them individually here... for name , value in kwargs . items (): setattr ( connected , name , value ) return connected parse_obj ( obj ) classmethod \u00b6 Parse the given object as a ConnectedPage. Similar to BaseModel.parse_obj(data) . Source code in src/ultimate_notion/obj_api/orm.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the given object as a ConnectedPage. Similar to `BaseModel.parse_obj(data)`. \"\"\" return cls ( page = Page ( ** obj )) query () classmethod \u00b6 Return a QueryBuilder for the custom type. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def query ( cls ): \"\"\"Return a `QueryBuilder` for the custom type.\"\"\" if cls . _notional__session is None : raise ValueError ( \"Unable to query; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Unable to query; invalid database\" ) return cls . _notional__session . databases . query ( cls ) ConnectedPageFactory ( name = 'CustomBase' , base = None , metaclass = None ) \u00b6 A factory that builds custom types for ConnectedPage classes. Typically, these generated classes will be extended to form a custom type. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to None :param metaclass: the callable metaclass to use for generating new types; defaults to type Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , name = \"CustomBase\" , base = None , metaclass = None , ): \"\"\"Initialize the `ConnectedPageFactory` with the given parameters. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to `None` :param metaclass: the callable metaclass to use for generating new types; defaults to `type` \"\"\" self . name = name if base is None : self . bases = ( ConnectedPage ,) elif isinstance ( base , tuple ): self . bases = base else : self . bases = ( base ,) if metaclass is None : self . metaclass = type else : self . metaclass = metaclass bases = ( ConnectedPage ) instance-attribute \u00b6 metaclass = type instance-attribute \u00b6 name = name instance-attribute \u00b6 __call__ ( session , database , schema = None ) \u00b6 Return a new type from this factory with the given configuration. Source code in src/ultimate_notion/obj_api/orm.py def __call__ ( self , session , database , schema = None ): \"\"\"Return a new type from this factory with the given configuration.\"\"\" attrs = { \"_notional__session\" : session , \"_notional__database\" : database , } if schema is not None : for name , obj in schema . items (): safe_name = make_safe_python_name ( name ) prop = Property ( name , obj ) attrs [ safe_name ] = prop return self . metaclass ( self . name , self . bases , attrs ) ConnectedProperty ( name , schema , default = Ellipsis ) \u00b6 Contains the information and methods needed for a connected property. When created, this object does not have a reference to its parent object. Before this property is accessed for the first time, callers must use bind() to set the containing object at runtime. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , name , schema , default =... ): \"\"\"Initialize the property wrapper. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API \"\"\" if name is None or len ( name ) == 0 : raise ValueError ( \"Must provide a valid property name\" ) if schema is None : raise ValueError ( \"Invalid schema; cannot be None\" ) self . name = name self . default = default self . schema = schema self . data_type = type ( schema ) if not hasattr ( self . data_type , \"type\" ) or self . data_type . type is None : raise ValueError ( \"Invalid schema; undefined type\" ) self . type_name = self . data_type . type # this is kind of an ugly way to grab the value type from the schema type... # mostly b/c we are using internal knowledge of TypedObject.__notional_typemap__ if self . type_name not in PropertyValue . __notional_typemap__ : raise TypeError ( f \"Invalid schema; missing value type - { self . type_name } \" ) self . value_type = PropertyValue . __notional_typemap__ [ self . type_name ] data_type = type ( schema ) instance-attribute \u00b6 default = default instance-attribute \u00b6 name = name instance-attribute \u00b6 schema = schema instance-attribute \u00b6 type_name = self . data_type . type instance-attribute \u00b6 value_type = PropertyValue . __notional_typemap__ [ self . type_name ] instance-attribute \u00b6 bind ( obj ) \u00b6 Binds this property to the given object. Source code in src/ultimate_notion/obj_api/orm.py def bind ( self , obj ): \"\"\"Binds this property to the given object.\"\"\" if not isinstance ( obj , ConnectedPage ): raise TypeError ( \"Properties must be used in a ConnectedPage object\" ) # XXX should we do any additional error checking on the object? self . parent = obj self . page_data = self . parent . _notional__page self . session = self . parent . _notional__session delete () \u00b6 Delete the value associated with this property. Source code in src/ultimate_notion/obj_api/orm.py def delete ( self ): \"\"\"Delete the value associated with this property.\"\"\" # TODO raise instead? if self . page_data is None : return empty = self . value_type () self . session . pages . update ( self . page_data , ** { self . name : empty }) get () \u00b6 Return the current value of the property as a python object. Source code in src/ultimate_notion/obj_api/orm.py def get ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" logger . debug ( \"fget :: %s [ %s ]\" , self . type_name , self . name ) # TODO raise instead? if self . page_data is None : return None try : prop = self . page_data [ self . name ] except AttributeError : if self . default == ... : raise AttributeError ( f \"Missing property: { self . name } \" ) return self . default if not isinstance ( prop , self . value_type ): raise TypeError ( \"Type mismatch\" ) if hasattr ( prop , \"Value\" ): return prop . Value return prop set ( value ) \u00b6 Set the property to the given value. Source code in src/ultimate_notion/obj_api/orm.py def set ( self , value ): \"\"\"Set the property to the given value.\"\"\" logger . debug ( \"fset :: %s [ %s ] => %s \" , self . type_name , self . name , type ( value )) # TODO raise instead? if self . page_data is None : return if isinstance ( value , self . value_type ): prop = value elif hasattr ( self . value_type , \"__compose__\" ): prop = self . value_type [ value ] else : raise TypeError ( f \"Unsupported value type for { self . type_name } \" ) # update the property on the server (which will refresh the local data) self . session . pages . update ( self . page_data , ** { self . name : prop }) Property ( name , schema = None , default = Ellipsis ) \u00b6 Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects Source code in src/ultimate_notion/obj_api/orm.py def Property ( name , schema = None , default =... ): \"\"\"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects \"\"\" logger . debug ( \"creating new Property: %s \" , name ) if schema is None : schema = RichText () elif not isinstance ( schema , PropertyObject ): raise TypeError ( \"Invalid data_type; not a PropertyObject\" ) cprop = ConnectedProperty ( name = name , schema = schema , default = default , ) def fget ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" cprop . bind ( self ) return cprop . get () def fset ( self , value ): \"\"\"Set the property to the given value.\"\"\" cprop . bind ( self ) cprop . set ( value ) def fdel ( self ): \"\"\"Delete the value for this property.\"\"\" cprop . bind ( self ) cprop . delete () return property ( fget , fset , fdel ) connected_page ( session = None , source_db = None , schema = None , cls = None ) \u00b6 Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to None :param cls: the returned class will inherit from the given class, which must be a subclass of ConnectedPage ; defaults to ConnectedPage Source code in src/ultimate_notion/obj_api/orm.py def connected_page ( session = None , source_db = None , schema = None , cls = None ): \"\"\"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to `None` :param cls: the returned class will inherit from the given class, which must be a subclass of `ConnectedPage`; defaults to `ConnectedPage` \"\"\" if cls is None : cls = ConnectedPage elif not issubclass ( cls , ConnectedPage ): raise ValueError ( \"'cls' must subclass ConnectedPage\" ) dbid = None if source_db is not None : if schema is None : schema = source_db . properties dbid = source_db . id factory = ConnectedPageFactory ( base = cls ) return factory ( session = session , database = dbid , schema = schema , )","title":"Orm"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm","text":"Utilities for working with Notion as an ORM. There are two primary constructs in this module that enable custom type definitions in Notional: Property() and connected_page() .","title":"orm"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage","text":"Base class for \"live\" pages via the Notion API. All changes are committed in real time. Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , page : Page ): \"\"\"Construct a ConnectedPage using the underlying Page object.\"\"\" if page . id is None : raise ValueError ( \"Missing ID for connected page\" ) self . _notional__page = page","title":"ConnectedPage"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.children","text":"Return an iterator for all child blocks of this Page.","title":"children"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.cover","text":"Return the cover for the Page.","title":"cover"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.icon","text":"Return the icon for the Page.","title":"icon"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.id","text":"Return the ID of this page (if available).","title":"id"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.__iadd__","text":"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. Source code in src/ultimate_notion/obj_api/orm.py def __iadd__ ( self , block ): \"\"\"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. \"\"\" self . append ( block ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.__init_subclass__","text":"Register new subclasses of a ConnectedPage. Source code in src/ultimate_notion/obj_api/orm.py def __init_subclass__ ( cls , database = None , ** kwargs ): \"\"\"Register new subclasses of a ConnectedPage.\"\"\" super ( cls ) . __init_subclass__ ( ** kwargs ) if database is not None : cls . _notional__database = database elif hasattr ( cls , \"__database__\" ): cls . _notional__database = cls . __database__","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.append","text":"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. Source code in src/ultimate_notion/obj_api/orm.py def append ( self , * blocks ): \"\"\"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. \"\"\" if self . _notional__page is None : raise ValueError ( \"Cannot append blocks; missing page\" ) if self . _notional__session is None : raise ValueError ( \"Cannot append blocks; invalid session\" ) logger . debug ( \"appending %d blocks to page :: %s \" , len ( blocks ), self . _notional__page . id ) self . _notional__session . blocks . children . append ( self . _notional__page , * blocks )","title":"append()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.bind","text":"Attach this ConnectedPage to the given session. Setting this to None will detach the page. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def bind ( cls , to_session ): \"\"\"Attach this ConnectedPage to the given session. Setting this to None will detach the page. \"\"\" cls . _notional__session = to_session","title":"bind()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.create","text":"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in kwargs . This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. name=value , where name is the attribute in the custom type and value is a supported type for composing. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def create ( cls , ** kwargs ): \"\"\"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in `kwargs`. This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. `name=value`, where `name` is the attribute in the custom type and `value` is a supported type for composing. \"\"\" if cls . _notional__session is None : raise ValueError ( \"Cannot create Page; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Cannot create Page; invalid database\" ) logger . debug ( \"creating new %s :: %s \" , cls , cls . _notional__database ) parent = DatabaseRef ( database_id = cls . _notional__database ) page = cls . _notional__session . pages . create ( parent = parent ) logger . debug ( \"=> connected page :: %s \" , page . id ) connected = cls ( page ) # FIXME it would be better to convert properties to a dict and pass to the API, # rather than setting them individually here... for name , value in kwargs . items (): setattr ( connected , name , value ) return connected","title":"create()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.parse_obj","text":"Parse the given object as a ConnectedPage. Similar to BaseModel.parse_obj(data) . Source code in src/ultimate_notion/obj_api/orm.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the given object as a ConnectedPage. Similar to `BaseModel.parse_obj(data)`. \"\"\" return cls ( page = Page ( ** obj ))","title":"parse_obj()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPage.query","text":"Return a QueryBuilder for the custom type. Source code in src/ultimate_notion/obj_api/orm.py @classmethod def query ( cls ): \"\"\"Return a `QueryBuilder` for the custom type.\"\"\" if cls . _notional__session is None : raise ValueError ( \"Unable to query; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Unable to query; invalid database\" ) return cls . _notional__session . databases . query ( cls )","title":"query()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPageFactory","text":"A factory that builds custom types for ConnectedPage classes. Typically, these generated classes will be extended to form a custom type. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to None :param metaclass: the callable metaclass to use for generating new types; defaults to type Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , name = \"CustomBase\" , base = None , metaclass = None , ): \"\"\"Initialize the `ConnectedPageFactory` with the given parameters. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to `None` :param metaclass: the callable metaclass to use for generating new types; defaults to `type` \"\"\" self . name = name if base is None : self . bases = ( ConnectedPage ,) elif isinstance ( base , tuple ): self . bases = base else : self . bases = ( base ,) if metaclass is None : self . metaclass = type else : self . metaclass = metaclass","title":"ConnectedPageFactory"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPageFactory.bases","text":"","title":"bases"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPageFactory.metaclass","text":"","title":"metaclass"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPageFactory.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedPageFactory.__call__","text":"Return a new type from this factory with the given configuration. Source code in src/ultimate_notion/obj_api/orm.py def __call__ ( self , session , database , schema = None ): \"\"\"Return a new type from this factory with the given configuration.\"\"\" attrs = { \"_notional__session\" : session , \"_notional__database\" : database , } if schema is not None : for name , obj in schema . items (): safe_name = make_safe_python_name ( name ) prop = Property ( name , obj ) attrs [ safe_name ] = prop return self . metaclass ( self . name , self . bases , attrs )","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty","text":"Contains the information and methods needed for a connected property. When created, this object does not have a reference to its parent object. Before this property is accessed for the first time, callers must use bind() to set the containing object at runtime. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API Source code in src/ultimate_notion/obj_api/orm.py def __init__ ( self , name , schema , default =... ): \"\"\"Initialize the property wrapper. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API \"\"\" if name is None or len ( name ) == 0 : raise ValueError ( \"Must provide a valid property name\" ) if schema is None : raise ValueError ( \"Invalid schema; cannot be None\" ) self . name = name self . default = default self . schema = schema self . data_type = type ( schema ) if not hasattr ( self . data_type , \"type\" ) or self . data_type . type is None : raise ValueError ( \"Invalid schema; undefined type\" ) self . type_name = self . data_type . type # this is kind of an ugly way to grab the value type from the schema type... # mostly b/c we are using internal knowledge of TypedObject.__notional_typemap__ if self . type_name not in PropertyValue . __notional_typemap__ : raise TypeError ( f \"Invalid schema; missing value type - { self . type_name } \" ) self . value_type = PropertyValue . __notional_typemap__ [ self . type_name ]","title":"ConnectedProperty"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.data_type","text":"","title":"data_type"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.default","text":"","title":"default"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.type_name","text":"","title":"type_name"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.value_type","text":"","title":"value_type"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.bind","text":"Binds this property to the given object. Source code in src/ultimate_notion/obj_api/orm.py def bind ( self , obj ): \"\"\"Binds this property to the given object.\"\"\" if not isinstance ( obj , ConnectedPage ): raise TypeError ( \"Properties must be used in a ConnectedPage object\" ) # XXX should we do any additional error checking on the object? self . parent = obj self . page_data = self . parent . _notional__page self . session = self . parent . _notional__session","title":"bind()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.delete","text":"Delete the value associated with this property. Source code in src/ultimate_notion/obj_api/orm.py def delete ( self ): \"\"\"Delete the value associated with this property.\"\"\" # TODO raise instead? if self . page_data is None : return empty = self . value_type () self . session . pages . update ( self . page_data , ** { self . name : empty })","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.get","text":"Return the current value of the property as a python object. Source code in src/ultimate_notion/obj_api/orm.py def get ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" logger . debug ( \"fget :: %s [ %s ]\" , self . type_name , self . name ) # TODO raise instead? if self . page_data is None : return None try : prop = self . page_data [ self . name ] except AttributeError : if self . default == ... : raise AttributeError ( f \"Missing property: { self . name } \" ) return self . default if not isinstance ( prop , self . value_type ): raise TypeError ( \"Type mismatch\" ) if hasattr ( prop , \"Value\" ): return prop . Value return prop","title":"get()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.ConnectedProperty.set","text":"Set the property to the given value. Source code in src/ultimate_notion/obj_api/orm.py def set ( self , value ): \"\"\"Set the property to the given value.\"\"\" logger . debug ( \"fset :: %s [ %s ] => %s \" , self . type_name , self . name , type ( value )) # TODO raise instead? if self . page_data is None : return if isinstance ( value , self . value_type ): prop = value elif hasattr ( self . value_type , \"__compose__\" ): prop = self . value_type [ value ] else : raise TypeError ( f \"Unsupported value type for { self . type_name } \" ) # update the property on the server (which will refresh the local data) self . session . pages . update ( self . page_data , ** { self . name : prop })","title":"set()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.Property","text":"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects Source code in src/ultimate_notion/obj_api/orm.py def Property ( name , schema = None , default =... ): \"\"\"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects \"\"\" logger . debug ( \"creating new Property: %s \" , name ) if schema is None : schema = RichText () elif not isinstance ( schema , PropertyObject ): raise TypeError ( \"Invalid data_type; not a PropertyObject\" ) cprop = ConnectedProperty ( name = name , schema = schema , default = default , ) def fget ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" cprop . bind ( self ) return cprop . get () def fset ( self , value ): \"\"\"Set the property to the given value.\"\"\" cprop . bind ( self ) cprop . set ( value ) def fdel ( self ): \"\"\"Delete the value for this property.\"\"\" cprop . bind ( self ) cprop . delete () return property ( fget , fset , fdel )","title":"Property()"},{"location":"reference/ultimate_notion/obj_api/orm/#ultimate_notion.obj_api.orm.connected_page","text":"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to None :param cls: the returned class will inherit from the given class, which must be a subclass of ConnectedPage ; defaults to ConnectedPage Source code in src/ultimate_notion/obj_api/orm.py def connected_page ( session = None , source_db = None , schema = None , cls = None ): \"\"\"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to `None` :param cls: the returned class will inherit from the given class, which must be a subclass of `ConnectedPage`; defaults to `ConnectedPage` \"\"\" if cls is None : cls = ConnectedPage elif not issubclass ( cls , ConnectedPage ): raise ValueError ( \"'cls' must subclass ConnectedPage\" ) dbid = None if source_db is not None : if schema is None : schema = source_db . properties dbid = source_db . id factory = ConnectedPageFactory ( base = cls ) return factory ( session = session , database = dbid , schema = schema , )","title":"connected_page()"},{"location":"reference/ultimate_notion/obj_api/query/","text":"query \u00b6 Provides an interactive query builder for Notion databases. logger = logging . getLogger ( __name__ ) module-attribute \u00b6 CheckboxCondition \u00b6 Represents checkbox criteria in Notion. does_not_equal : Optional [ bool ] = None class-attribute instance-attribute \u00b6 equals : Optional [ bool ] = None class-attribute instance-attribute \u00b6 CompoundFilter \u00b6 Represents a compound filter in Notion. and_ : Optional [ List [ QueryFilter ]] = Field ( None , alias = 'and' ) class-attribute instance-attribute \u00b6 or_ : Optional [ List [ QueryFilter ]] = Field ( None , alias = 'or' ) class-attribute instance-attribute \u00b6 Config \u00b6 Pydantic configuration class to support keyword fields. allow_population_by_field_name = True class-attribute instance-attribute \u00b6 CreatedTimeFilter \u00b6 Represents a created_time filter in Notion. created_time : DateCondition instance-attribute \u00b6 timestamp : TimestampKind = TimestampKind . CREATED_TIME class-attribute instance-attribute \u00b6 __compose__ ( value ) classmethod \u00b6 Create a new CreatedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def __compose__ ( cls , value ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = value ) DateCondition \u00b6 Represents date criteria in Notion. after : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 before : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 equals : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 next_month : Optional [ Any ] = None class-attribute instance-attribute \u00b6 next_week : Optional [ Any ] = None class-attribute instance-attribute \u00b6 next_year : Optional [ Any ] = None class-attribute instance-attribute \u00b6 on_or_after : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 on_or_before : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 past_month : Optional [ Any ] = None class-attribute instance-attribute \u00b6 past_week : Optional [ Any ] = None class-attribute instance-attribute \u00b6 past_year : Optional [ Any ] = None class-attribute instance-attribute \u00b6 FilesCondition \u00b6 Represents files criteria in Notion. is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 FormulaCondition \u00b6 Represents formula criteria in Notion. checkbox : Optional [ CheckboxCondition ] = None class-attribute instance-attribute \u00b6 date : Optional [ DateCondition ] = None class-attribute instance-attribute \u00b6 number : Optional [ NumberCondition ] = None class-attribute instance-attribute \u00b6 string : Optional [ TextCondition ] = None class-attribute instance-attribute \u00b6 LastEditedTimeFilter \u00b6 Represents a last_edited_time filter in Notion. last_edited_time : DateCondition instance-attribute \u00b6 timestamp : TimestampKind = TimestampKind . LAST_EDITED_TIME class-attribute instance-attribute \u00b6 __compose__ ( value ) classmethod \u00b6 Create a new LastEditedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def __compose__ ( cls , value ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = value ) MultiSelectCondition \u00b6 Represents a multi_select criteria in Notion. contains : Optional [ str ] = None class-attribute instance-attribute \u00b6 does_not_contains : Optional [ str ] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 NumberCondition \u00b6 Represents number criteria in Notion. does_not_equal : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 equals : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 greater_than : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 greater_than_or_equal_to : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 less_than : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 less_than_or_equal_to : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 PeopleCondition \u00b6 Represents people criteria in Notion. contains : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 does_not_contain : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 PropertyFilter \u00b6 Represents a database property filter in Notion. checkbox : Optional [ CheckboxCondition ] = None class-attribute instance-attribute \u00b6 date : Optional [ DateCondition ] = None class-attribute instance-attribute \u00b6 files : Optional [ FilesCondition ] = None class-attribute instance-attribute \u00b6 formula : Optional [ FormulaCondition ] = None class-attribute instance-attribute \u00b6 multi_select : Optional [ MultiSelectCondition ] = None class-attribute instance-attribute \u00b6 number : Optional [ NumberCondition ] = None class-attribute instance-attribute \u00b6 people : Optional [ PeopleCondition ] = None class-attribute instance-attribute \u00b6 phone_number : Optional [ TextCondition ] = None class-attribute instance-attribute \u00b6 property : str instance-attribute \u00b6 relation : Optional [ RelationCondition ] = None class-attribute instance-attribute \u00b6 rich_text : Optional [ TextCondition ] = None class-attribute instance-attribute \u00b6 select : Optional [ SelectCondition ] = None class-attribute instance-attribute \u00b6 PropertySort \u00b6 Represents a sort instruction in Notion. direction : Optional [ SortDirection ] = None class-attribute instance-attribute \u00b6 property : Optional [ str ] = None class-attribute instance-attribute \u00b6 timestamp : Optional [ TimestampKind ] = None class-attribute instance-attribute \u00b6 Query \u00b6 Represents a query object in Notion. filter : Optional [ QueryFilter ] = None class-attribute instance-attribute \u00b6 page_size : int = MAX_PAGE_SIZE class-attribute instance-attribute \u00b6 sorts : Optional [ List [ PropertySort ]] = None class-attribute instance-attribute \u00b6 start_cursor : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 valid_page_size ( value ) \u00b6 Validate that the given page size meets the Notion API requirements. Source code in src/ultimate_notion/obj_api/query.py @validator ( \"page_size\" ) def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" assert value > 0 , \"size must be greater than zero\" assert value <= MAX_PAGE_SIZE , \"size must be less than or equal to 100\" return value QueryBuilder ( endpoint , datatype = None , params ) \u00b6 A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param datatype: an optional class to capture results :param params: optional params that will be passed to the query Source code in src/ultimate_notion/obj_api/query.py def __init__ ( self , endpoint , datatype = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . datatype = datatype self . params = params self . query = Query () datatype = datatype instance-attribute \u00b6 endpoint = endpoint instance-attribute \u00b6 params = params instance-attribute \u00b6 query = Query () instance-attribute \u00b6 execute () \u00b6 Execute the current query and return an iterator for the results. Source code in src/ultimate_notion/obj_api/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : raise ValueError ( \"cannot execute query; no endpoint provided\" ) logger . debug ( \"executing query - %s \" , self . query ) query = self . query . dict () if self . params : query . update ( self . params ) return EndpointIterator ( self . endpoint , datatype = self . datatype )( ** query ) filter ( filter = None , kwargs ) \u00b6 Add the given filter to the query. Source code in src/ultimate_notion/obj_api/query.py def filter ( self , filter = None , ** kwargs ): \"\"\"Add the given filter to the query.\"\"\" if filter is None : if isinstance ( self . endpoint , SearchEndpoint ): filter = SearchFilter . parse_obj ( kwargs ) elif \"property\" in kwargs : filter = PropertyFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"created_time\" : filter = CreatedTimeFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"last_edited_time\" : filter = LastEditedTimeFilter . parse_obj ( kwargs ) else : raise ValueError ( \"unrecognized filter\" ) elif not isinstance ( filter , QueryFilter ): raise ValueError ( \"filter must be of type QueryFilter\" ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , filter ]) return self first () \u00b6 Execute the current query and return the first result only. Source code in src/ultimate_notion/obj_api/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : logger . debug ( \"iterator returned empty result set\" ) return None limit ( count ) \u00b6 Limit the number of results to the given count. Source code in src/ultimate_notion/obj_api/query.py def limit ( self , count ): \"\"\"Limit the number of results to the given count.\"\"\" self . query . page_size = count return self sort ( sort = None , kwargs ) \u00b6 Add the given sort elements to the query. Source code in src/ultimate_notion/obj_api/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" # XXX should this support ORM properties also? # e.g. - query.sort(property=Task.Title) # but users won't always use ORM for queries... if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): raise ValueError ( \"sort must be of type PropertySort\" ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self start_at ( page_id ) \u00b6 Set the start cursor to a specific page ID. Source code in src/ultimate_notion/obj_api/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self QueryFilter \u00b6 Base class for query filters. RelationCondition \u00b6 Represents relation criteria in Notion. contains : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 does_not_contain : Optional [ UUID ] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 SearchFilter \u00b6 Represents a search property filter in Notion. property : str instance-attribute \u00b6 value : str instance-attribute \u00b6 SelectCondition \u00b6 Represents select criteria in Notion. does_not_equal : Optional [ str ] = None class-attribute instance-attribute \u00b6 equals : Optional [ str ] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 SortDirection \u00b6 Sort direction options. ASCENDING = 'ascending' class-attribute instance-attribute \u00b6 DESCENDING = 'descending' class-attribute instance-attribute \u00b6 TextCondition \u00b6 Represents text criteria in Notion. contains : Optional [ str ] = None class-attribute instance-attribute \u00b6 does_not_contain : Optional [ str ] = None class-attribute instance-attribute \u00b6 does_not_equal : Optional [ str ] = None class-attribute instance-attribute \u00b6 ends_with : Optional [ str ] = None class-attribute instance-attribute \u00b6 equals : Optional [ str ] = None class-attribute instance-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute instance-attribute \u00b6 starts_with : Optional [ str ] = None class-attribute instance-attribute \u00b6 TimestampFilter \u00b6 Represents a timestamp filter in Notion. timestamp : TimestampKind instance-attribute \u00b6 TimestampKind \u00b6 Possible timestamp types. CREATED_TIME = 'created_time' class-attribute instance-attribute \u00b6 LAST_EDITED_TIME = 'last_edited_time' class-attribute instance-attribute \u00b6","title":"Query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query","text":"Provides an interactive query builder for Notion databases.","title":"query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition","text":"Represents checkbox criteria in Notion.","title":"CheckboxCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter","text":"Represents a compound filter in Notion.","title":"CompoundFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.and_","text":"","title":"and_"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.or_","text":"","title":"or_"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.Config","text":"Pydantic configuration class to support keyword fields.","title":"Config"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.Config.allow_population_by_field_name","text":"","title":"allow_population_by_field_name"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter","text":"Represents a created_time filter in Notion.","title":"CreatedTimeFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.__compose__","text":"Create a new CreatedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def __compose__ ( cls , value ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = value )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition","text":"Represents date criteria in Notion.","title":"DateCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.after","text":"","title":"after"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.before","text":"","title":"before"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_month","text":"","title":"next_month"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_week","text":"","title":"next_week"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_year","text":"","title":"next_year"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_after","text":"","title":"on_or_after"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_before","text":"","title":"on_or_before"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_month","text":"","title":"past_month"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_week","text":"","title":"past_week"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_year","text":"","title":"past_year"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition","text":"Represents files criteria in Notion.","title":"FilesCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition","text":"Represents formula criteria in Notion.","title":"FormulaCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.string","text":"","title":"string"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter","text":"Represents a last_edited_time filter in Notion.","title":"LastEditedTimeFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.__compose__","text":"Create a new LastEditedTimeFilter using the given constraint. Source code in src/ultimate_notion/obj_api/query.py @classmethod def __compose__ ( cls , value ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = value )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition","text":"Represents a multi_select criteria in Notion.","title":"MultiSelectCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.does_not_contains","text":"","title":"does_not_contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition","text":"Represents number criteria in Notion.","title":"NumberCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than","text":"","title":"greater_than"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than_or_equal_to","text":"","title":"greater_than_or_equal_to"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than","text":"","title":"less_than"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than_or_equal_to","text":"","title":"less_than_or_equal_to"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition","text":"Represents people criteria in Notion.","title":"PeopleCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter","text":"Represents a database property filter in Notion.","title":"PropertyFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort","text":"Represents a sort instruction in Notion.","title":"PropertySort"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.direction","text":"","title":"direction"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertySort.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query","text":"Represents a query object in Notion.","title":"Query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.filter","text":"","title":"filter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.page_size","text":"","title":"page_size"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.sorts","text":"","title":"sorts"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.start_cursor","text":"","title":"start_cursor"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.valid_page_size","text":"Validate that the given page size meets the Notion API requirements. Source code in src/ultimate_notion/obj_api/query.py @validator ( \"page_size\" ) def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" assert value > 0 , \"size must be greater than zero\" assert value <= MAX_PAGE_SIZE , \"size must be less than or equal to 100\" return value","title":"valid_page_size()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder","text":"A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param datatype: an optional class to capture results :param params: optional params that will be passed to the query Source code in src/ultimate_notion/obj_api/query.py def __init__ ( self , endpoint , datatype = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . datatype = datatype self . params = params self . query = Query ()","title":"QueryBuilder"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.datatype","text":"","title":"datatype"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.endpoint","text":"","title":"endpoint"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.params","text":"","title":"params"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.query","text":"","title":"query"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.execute","text":"Execute the current query and return an iterator for the results. Source code in src/ultimate_notion/obj_api/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : raise ValueError ( \"cannot execute query; no endpoint provided\" ) logger . debug ( \"executing query - %s \" , self . query ) query = self . query . dict () if self . params : query . update ( self . params ) return EndpointIterator ( self . endpoint , datatype = self . datatype )( ** query )","title":"execute()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.filter","text":"Add the given filter to the query. Source code in src/ultimate_notion/obj_api/query.py def filter ( self , filter = None , ** kwargs ): \"\"\"Add the given filter to the query.\"\"\" if filter is None : if isinstance ( self . endpoint , SearchEndpoint ): filter = SearchFilter . parse_obj ( kwargs ) elif \"property\" in kwargs : filter = PropertyFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"created_time\" : filter = CreatedTimeFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"last_edited_time\" : filter = LastEditedTimeFilter . parse_obj ( kwargs ) else : raise ValueError ( \"unrecognized filter\" ) elif not isinstance ( filter , QueryFilter ): raise ValueError ( \"filter must be of type QueryFilter\" ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , filter ]) return self","title":"filter()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.first","text":"Execute the current query and return the first result only. Source code in src/ultimate_notion/obj_api/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : logger . debug ( \"iterator returned empty result set\" ) return None","title":"first()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.limit","text":"Limit the number of results to the given count. Source code in src/ultimate_notion/obj_api/query.py def limit ( self , count ): \"\"\"Limit the number of results to the given count.\"\"\" self . query . page_size = count return self","title":"limit()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.sort","text":"Add the given sort elements to the query. Source code in src/ultimate_notion/obj_api/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" # XXX should this support ORM properties also? # e.g. - query.sort(property=Task.Title) # but users won't always use ORM for queries... if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): raise ValueError ( \"sort must be of type PropertySort\" ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self","title":"sort()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.start_at","text":"Set the start cursor to a specific page ID. Source code in src/ultimate_notion/obj_api/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self","title":"start_at()"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryFilter","text":"Base class for query filters.","title":"QueryFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition","text":"Represents relation criteria in Notion.","title":"RelationCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter","text":"Represents a search property filter in Notion.","title":"SearchFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.value","text":"","title":"value"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition","text":"Represents select criteria in Notion.","title":"SelectCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection","text":"Sort direction options.","title":"SortDirection"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.ASCENDING","text":"","title":"ASCENDING"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.DESCENDING","text":"","title":"DESCENDING"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition","text":"Represents text criteria in Notion.","title":"TextCondition"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.ends_with","text":"","title":"ends_with"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.starts_with","text":"","title":"starts_with"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter","text":"Represents a timestamp filter in Notion.","title":"TimestampFilter"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind","text":"Possible timestamp types.","title":"TimestampKind"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.CREATED_TIME","text":"","title":"CREATED_TIME"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.LAST_EDITED_TIME","text":"","title":"LAST_EDITED_TIME"},{"location":"reference/ultimate_notion/obj_api/schema/","text":"schema \u00b6 Objects representing a database schema. Checkbox \u00b6 Defines the checkbox configuration for a database property. checkbox : Any = {} class-attribute instance-attribute \u00b6 CreatedBy \u00b6 Defines the created-by configuration for a database property. created_by : Any = {} class-attribute instance-attribute \u00b6 CreatedTime \u00b6 Defines the created-time configuration for a database property. created_time : Any = {} class-attribute instance-attribute \u00b6 Date \u00b6 Defines the date configuration for a database property. date : Any = {} class-attribute instance-attribute \u00b6 DualPropertyRelation \u00b6 Defines a dual-property relation configuration for a database property. dual_property : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Email \u00b6 Defines the email configuration for a database property. email : Any = {} class-attribute instance-attribute \u00b6 Files \u00b6 Defines the files configuration for a database property. files : Any = {} class-attribute instance-attribute \u00b6 Formula \u00b6 Defines the formula configuration for a database property. formula : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Function \u00b6 Standard aggregation functions. AVERAGE = 'average' class-attribute instance-attribute \u00b6 CHECKED = 'checked' class-attribute instance-attribute \u00b6 COUNT = 'count' class-attribute instance-attribute \u00b6 COUNT_PER_GROUP = 'count_per_group' class-attribute instance-attribute \u00b6 COUNT_VALUES = 'count_values' class-attribute instance-attribute \u00b6 DATE_RANGE = 'date_range' class-attribute instance-attribute \u00b6 EARLIEST_DATE = 'earliest_date' class-attribute instance-attribute \u00b6 EMPTY = 'empty' class-attribute instance-attribute \u00b6 LATEST_DATE = 'latest_date' class-attribute instance-attribute \u00b6 MAX = 'max' class-attribute instance-attribute \u00b6 MEDIAN = 'median' class-attribute instance-attribute \u00b6 MIN = 'min' class-attribute instance-attribute \u00b6 NOT_EMPTY = 'not_empty' class-attribute instance-attribute \u00b6 PERCENT_CHECKED = 'percent_checked' class-attribute instance-attribute \u00b6 PERCENT_EMPTY = 'percent_empty' class-attribute instance-attribute \u00b6 PERCENT_NOT_EMPTY = 'percent_not_empty' class-attribute instance-attribute \u00b6 PERCENT_PER_GROUP = 'percent_per_group' class-attribute instance-attribute \u00b6 RANGE = 'range' class-attribute instance-attribute \u00b6 SHOW_ORIGINAL = 'show_original' class-attribute instance-attribute \u00b6 SHOW_UNIQUE = 'show_unique' class-attribute instance-attribute \u00b6 SUM = 'sum' class-attribute instance-attribute \u00b6 UNCHECKED = 'unchecked' class-attribute instance-attribute \u00b6 UNIQUE = 'unique' class-attribute instance-attribute \u00b6 LastEditedBy \u00b6 Defines the last-edited-by configuration for a database property. last_edited_by : Any = {} class-attribute instance-attribute \u00b6 LastEditedTime \u00b6 Defines the last-edited-time configuration for a database property. last_edited_time : Any = {} class-attribute instance-attribute \u00b6 MultiSelect \u00b6 Defines the multi-select configuration for a database property. multi_select : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Number \u00b6 Defines the number configuration for a database property. number : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( format ) classmethod \u00b6 Create a Number object with the expected format. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , format ): \"\"\"Create a `Number` object with the expected format.\"\"\" return cls ( number = cls . _NestedData ( format = format )) NumberFormat \u00b6 Available number formats in Notion. ARGENTINE_PESO = 'argentine_peso' class-attribute instance-attribute \u00b6 BAHT = 'baht' class-attribute instance-attribute \u00b6 CANADIAN_DOLLAR = 'canadian_dollar' class-attribute instance-attribute \u00b6 CHILEAN_PESO = 'chilean_peso' class-attribute instance-attribute \u00b6 COLOMBIAN_PESO = 'colombian_peso' class-attribute instance-attribute \u00b6 DANISH_KRONE = 'danish_krone' class-attribute instance-attribute \u00b6 DIRHAM = 'dirham' class-attribute instance-attribute \u00b6 DOLLAR = 'dollar' class-attribute instance-attribute \u00b6 EURO = 'euro' class-attribute instance-attribute \u00b6 FORINT = 'forint' class-attribute instance-attribute \u00b6 FRANC = 'franc' class-attribute instance-attribute \u00b6 HONG_KONG_DOLLAR = 'hong_kong_dollar' class-attribute instance-attribute \u00b6 KORUNA = 'koruna' class-attribute instance-attribute \u00b6 KRONA = 'krona' class-attribute instance-attribute \u00b6 LEU = 'leu' class-attribute instance-attribute \u00b6 LIRA = 'lira' class-attribute instance-attribute \u00b6 MEXICAN_PESO = 'mexican_peso' class-attribute instance-attribute \u00b6 NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar' class-attribute instance-attribute \u00b6 NEW_ZEALAND_DOLLAR = 'new_zealand_dollar' class-attribute instance-attribute \u00b6 NORWEGIAN_KRONE = 'norwegian_krone' class-attribute instance-attribute \u00b6 NUMBER = 'number' class-attribute instance-attribute \u00b6 NUMBER_WITH_COMMAS = 'number_with_commas' class-attribute instance-attribute \u00b6 PERCENT = 'percent' class-attribute instance-attribute \u00b6 PHILIPPINE_PESO = 'philippine_peso' class-attribute instance-attribute \u00b6 POUND = 'pound' class-attribute instance-attribute \u00b6 RAND = 'rand' class-attribute instance-attribute \u00b6 REAL = 'real' class-attribute instance-attribute \u00b6 RINGGIT = 'ringgit' class-attribute instance-attribute \u00b6 RIYAL = 'riyal' class-attribute instance-attribute \u00b6 RUBLE = 'ruble' class-attribute instance-attribute \u00b6 RUPEE = 'rupee' class-attribute instance-attribute \u00b6 RUPIAH = 'rupiah' class-attribute instance-attribute \u00b6 SHEKEL = 'shekel' class-attribute instance-attribute \u00b6 URUGUAYAN_PESO = 'uruguayan_peso' class-attribute instance-attribute \u00b6 WON = 'won' class-attribute instance-attribute \u00b6 YEN = 'yen' class-attribute instance-attribute \u00b6 YUAN = 'yuan' class-attribute instance-attribute \u00b6 ZLOTY = 'zloty' class-attribute instance-attribute \u00b6 People \u00b6 Defines the people configuration for a database property. people : Any = {} class-attribute instance-attribute \u00b6 PhoneNumber \u00b6 Defines the phone number configuration for a database property. phone_number : Any = {} class-attribute instance-attribute \u00b6 PropertyObject \u00b6 Base class for Notion property objects. id : Optional [ str ] = None class-attribute instance-attribute \u00b6 name : Optional [ str ] = None class-attribute instance-attribute \u00b6 PropertyRelation \u00b6 Defines common configuration for a property relation. database_id : UUID = None class-attribute instance-attribute \u00b6 Relation \u00b6 Defines the relation configuration for a database property. relation : PropertyRelation = PropertyRelation () class-attribute instance-attribute \u00b6 RichText \u00b6 Defines the rich text configuration for a database property. rich_text : Any = {} class-attribute instance-attribute \u00b6 Rollup \u00b6 Defines the rollup configuration for a database property. rollup : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 Select \u00b6 Defines the select configuration for a database property. select : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( options ) classmethod \u00b6 Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , * options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls ( select = cls . _NestedData ( options = options )) SelectOption \u00b6 Options for select & multi-select objects. color : str = Color . DEFAULT class-attribute instance-attribute \u00b6 id : str = None class-attribute instance-attribute \u00b6 name : str instance-attribute \u00b6 __compose__ ( name , color = Color . DEFAULT ) classmethod \u00b6 Create a SelectOption object from the given name and color. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls ( name = name , color = color ) SinglePropertyRelation \u00b6 Defines a single-property relation configuration for a database property. single_property : Any = {} class-attribute instance-attribute \u00b6 __compose__ ( dbref ) classmethod \u00b6 Create a single_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , dbref ): \"\"\"Create a `single_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" return Relation ( relation = SinglePropertyRelation ( database_id = dbref )) Status \u00b6 Defines the status configuration for a database property. status : Any = {} class-attribute instance-attribute \u00b6 Title \u00b6 Defines the title configuration for a database property. title : Any = {} class-attribute instance-attribute \u00b6 URL \u00b6 Defines the URL configuration for a database property. url : Any = {} class-attribute instance-attribute \u00b6","title":"Schema"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema","text":"Objects representing a database schema.","title":"schema"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox","text":"Defines the checkbox configuration for a database property.","title":"Checkbox"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy","text":"Defines the created-by configuration for a database property.","title":"CreatedBy"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime","text":"Defines the created-time configuration for a database property.","title":"CreatedTime"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date","text":"Defines the date configuration for a database property.","title":"Date"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation","text":"Defines a dual-property relation configuration for a database property.","title":"DualPropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.dual_property","text":"","title":"dual_property"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email","text":"Defines the email configuration for a database property.","title":"Email"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files","text":"Defines the files configuration for a database property.","title":"Files"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula","text":"Defines the formula configuration for a database property.","title":"Formula"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function","text":"Standard aggregation functions.","title":"Function"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.AVERAGE","text":"","title":"AVERAGE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.CHECKED","text":"","title":"CHECKED"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.COUNT","text":"","title":"COUNT"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.COUNT_PER_GROUP","text":"","title":"COUNT_PER_GROUP"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.COUNT_VALUES","text":"","title":"COUNT_VALUES"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.DATE_RANGE","text":"","title":"DATE_RANGE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.EARLIEST_DATE","text":"","title":"EARLIEST_DATE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.EMPTY","text":"","title":"EMPTY"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.LATEST_DATE","text":"","title":"LATEST_DATE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.MAX","text":"","title":"MAX"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.MEDIAN","text":"","title":"MEDIAN"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.MIN","text":"","title":"MIN"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.NOT_EMPTY","text":"","title":"NOT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.PERCENT_CHECKED","text":"","title":"PERCENT_CHECKED"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.PERCENT_EMPTY","text":"","title":"PERCENT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.PERCENT_NOT_EMPTY","text":"","title":"PERCENT_NOT_EMPTY"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.PERCENT_PER_GROUP","text":"","title":"PERCENT_PER_GROUP"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.RANGE","text":"","title":"RANGE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.SHOW_ORIGINAL","text":"","title":"SHOW_ORIGINAL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.SHOW_UNIQUE","text":"","title":"SHOW_UNIQUE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.SUM","text":"","title":"SUM"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.UNCHECKED","text":"","title":"UNCHECKED"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Function.UNIQUE","text":"","title":"UNIQUE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy","text":"Defines the last-edited-by configuration for a database property.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime","text":"Defines the last-edited-time configuration for a database property.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect","text":"Defines the multi-select configuration for a database property.","title":"MultiSelect"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number","text":"Defines the number configuration for a database property.","title":"Number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.__compose__","text":"Create a Number object with the expected format. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , format ): \"\"\"Create a `Number` object with the expected format.\"\"\" return cls ( number = cls . _NestedData ( format = format ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat","text":"Available number formats in Notion.","title":"NumberFormat"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.ARGENTINE_PESO","text":"","title":"ARGENTINE_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.BAHT","text":"","title":"BAHT"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.CANADIAN_DOLLAR","text":"","title":"CANADIAN_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.CHILEAN_PESO","text":"","title":"CHILEAN_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.COLOMBIAN_PESO","text":"","title":"COLOMBIAN_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.DANISH_KRONE","text":"","title":"DANISH_KRONE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.DIRHAM","text":"","title":"DIRHAM"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.DOLLAR","text":"","title":"DOLLAR"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.EURO","text":"","title":"EURO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.FORINT","text":"","title":"FORINT"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.FRANC","text":"","title":"FRANC"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.HONG_KONG_DOLLAR","text":"","title":"HONG_KONG_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.KORUNA","text":"","title":"KORUNA"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.KRONA","text":"","title":"KRONA"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.LEU","text":"","title":"LEU"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.LIRA","text":"","title":"LIRA"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.MEXICAN_PESO","text":"","title":"MEXICAN_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.NEW_TAIWAN_DOLLAR","text":"","title":"NEW_TAIWAN_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.NEW_ZEALAND_DOLLAR","text":"","title":"NEW_ZEALAND_DOLLAR"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.NORWEGIAN_KRONE","text":"","title":"NORWEGIAN_KRONE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.NUMBER","text":"","title":"NUMBER"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.NUMBER_WITH_COMMAS","text":"","title":"NUMBER_WITH_COMMAS"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.PERCENT","text":"","title":"PERCENT"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.PHILIPPINE_PESO","text":"","title":"PHILIPPINE_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.POUND","text":"","title":"POUND"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RAND","text":"","title":"RAND"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.REAL","text":"","title":"REAL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RINGGIT","text":"","title":"RINGGIT"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RIYAL","text":"","title":"RIYAL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RUBLE","text":"","title":"RUBLE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RUPEE","text":"","title":"RUPEE"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.RUPIAH","text":"","title":"RUPIAH"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.SHEKEL","text":"","title":"SHEKEL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.URUGUAYAN_PESO","text":"","title":"URUGUAYAN_PESO"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.WON","text":"","title":"WON"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.YEN","text":"","title":"YEN"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.YUAN","text":"","title":"YUAN"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.NumberFormat.ZLOTY","text":"","title":"ZLOTY"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People","text":"Defines the people configuration for a database property.","title":"People"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber","text":"Defines the phone number configuration for a database property.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyObject","text":"Base class for Notion property objects.","title":"PropertyObject"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation","text":"Defines common configuration for a property relation.","title":"PropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.database_id","text":"","title":"database_id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation","text":"Defines the relation configuration for a database property.","title":"Relation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText","text":"Defines the rich text configuration for a database property.","title":"RichText"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup","text":"Defines the rollup configuration for a database property.","title":"Rollup"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select","text":"Defines the select configuration for a database property.","title":"Select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.__compose__","text":"Create a Select object from the list of SelectOption 's. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , * options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls ( select = cls . _NestedData ( options = options ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectOption","text":"Options for select & multi-select objects.","title":"SelectOption"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectOption.color","text":"","title":"color"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectOption.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectOption.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SelectOption.__compose__","text":"Create a SelectOption object from the given name and color. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls ( name = name , color = color )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation","text":"Defines a single-property relation configuration for a database property.","title":"SinglePropertyRelation"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.single_property","text":"","title":"single_property"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.__compose__","text":"Create a single_property relation using the target database reference. dbref must be either a string or UUID. Source code in src/ultimate_notion/obj_api/schema.py @classmethod def __compose__ ( cls , dbref ): \"\"\"Create a `single_property` relation using the target database reference. `dbref` must be either a string or UUID. \"\"\" return Relation ( relation = SinglePropertyRelation ( database_id = dbref ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status","text":"Defines the status configuration for a database property.","title":"Status"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title","text":"Defines the title configuration for a database property.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL","text":"Defines the URL configuration for a database property.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/session/","text":"session \u00b6 Provides direct access to the Notion API. logger = logging . getLogger ( __name__ ) module-attribute \u00b6 BlocksEndpoint ( args , kwargs ) \u00b6 Notional interface to the API 'blocks' endpoint. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs ) children = BlocksEndpoint . ChildrenEndpoint ( args , None = kwargs ) instance-attribute \u00b6 ChildrenEndpoint \u00b6 Notional interface to the API 'blocks/children' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks . children append ( parent , blocks : Block ) \u00b6 Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def append ( self , parent , * blocks : Block ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference [ parent ] . id children = [ block . dict () for block in blocks if block is not None ] logger . info ( \"Appending %d blocks to %s ...\" , len ( children ), parent_id ) data = self () . append ( block_id = parent_id , children = children ) if \"results\" in data : if len ( blocks ) == len ( data [ \"results\" ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ \"results\" ][ idx ] block . refresh ( ** result ) else : logger . warning ( \"Unable to refresh results; size mismatch\" ) else : logger . warning ( \"Unable to refresh results; not provided\" ) return parent list ( parent ) \u00b6 Return all Blocks contained by the specified parent. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference [ parent ] . id logger . info ( \"Listing blocks for %s ...\" , parent_id ) blocks = EndpointIterator ( endpoint = self () . list ) return blocks ( block_id = parent_id ) __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks delete ( block ) \u00b6 Delete (archive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Deleting block :: %s \" , block_id ) data = self () . delete ( block_id ) return Block . parse_obj ( data ) restore ( block ) \u00b6 Restore (unarchive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Restoring block :: %s \" , block_id ) data = self () . update ( block_id , archived = False ) return Block . parse_obj ( data ) retrieve ( block ) \u00b6 Return the requested Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , block ): \"\"\"Return the requested Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Retrieving block :: %s \" , block_id ) data = self () . retrieve ( block_id ) return Block . parse_obj ( data ) update ( block : Block ) \u00b6 Update the block content on the server. The block info will be refreshed to the latest version from the server. Source code in src/ultimate_notion/obj_api/session.py def update ( self , block : Block ): \"\"\"Update the block content on the server. The block info will be refreshed to the latest version from the server. \"\"\" logger . info ( \"Updating block :: %s \" , block . id ) data = self () . update ( block . id . hex , ** block . dict ()) return block . refresh ( ** data ) DatabasesEndpoint \u00b6 Notional interface to the API 'databases' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . databases create ( parent , schema : Dict [ str , PropertyObject ], title = None ) \u00b6 Add a database to the given Page parent. parent may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def create ( self , parent , schema : Dict [ str , PropertyObject ], title = None ): \"\"\"Add a database to the given Page parent. `parent` may be any suitable `PageRef` type. \"\"\" parent_ref = PageRef [ parent ] logger . info ( \"Creating database @ %s - %s \" , parent_ref . page_id , title ) request = self . _build_request ( parent_ref , schema , title ) data = self () . create ( ** request ) return Database . parse_obj ( data ) delete ( dbref ) \u00b6 Delete (archive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , dbref ): \"\"\"Delete (archive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Deleting database :: %s \" , dbid ) return self . session . blocks . delete ( dbid ) query ( target ) \u00b6 Initialize a new Query object with the target data class. :param target: either a DatabaseRef type or an ORM class Source code in src/ultimate_notion/obj_api/session.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a `DatabaseRef` type or an ORM class \"\"\" if isclass ( target ) and issubclass ( target , ConnectedPage ): cls = target dbid = target . _notional__database if cls . _notional__session != self . session : raise ValueError ( \"ConnectedPage belongs to a different session\" ) else : cls = None dbid = DatabaseRef [ target ] . database_id logger . info ( \"Initializing database query :: { %s } [ %s ]\" , dbid , cls ) return QueryBuilder ( endpoint = self () . query , datatype = cls , database_id = dbid ) restore ( dbref ) \u00b6 Restore (unarchive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , dbref ): \"\"\"Restore (unarchive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Restoring database :: %s \" , dbid ) return self . session . blocks . restore ( dbid ) retrieve ( dbref ) \u00b6 Return the Database with the given ID. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , dbref ): \"\"\"Return the Database with the given ID. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Retrieving database :: %s \" , dbid ) data = self () . retrieve ( dbid ) return Database . parse_obj ( data ) update ( dbref , title = None , schema : Dict [ str , PropertyObject ] = None ) \u00b6 Update the Database object on the server. The database info will be refreshed to the latest version from the server. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def update ( self , dbref , title = None , schema : Dict [ str , PropertyObject ] = None ): \"\"\"Update the Database object on the server. The database info will be refreshed to the latest version from the server. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Updating database info :: %s \" , dbid ) request = self . _build_request ( schema = schema , title = title ) if request : data = self () . update ( dbid , ** request ) dbref = dbref . refresh ( ** data ) return dbref Endpoint ( session : Session ) \u00b6 Notional wrapper for the API endpoints. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , session : Session ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . session = session session = session instance-attribute \u00b6 PagesEndpoint ( args , kwargs ) \u00b6 Notional interface to the API 'pages' endpoint. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `pages` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . properties = PagesEndpoint . PropertiesEndpoint ( * args , ** kwargs ) properties = PagesEndpoint . PropertiesEndpoint ( args , None = kwargs ) instance-attribute \u00b6 PropertiesEndpoint \u00b6 Notional interface to the API 'pages/properties' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages . properties retrieve ( page_id , property_id ) \u00b6 Return the Property on a specific Page with the given ID. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , page_id , property_id ): \"\"\"Return the Property on a specific Page with the given ID.\"\"\" logger . info ( \"Retrieving property :: %s [ %s ]\" , property_id , page_id ) data = self () . retrieve ( page_id , property_id ) # TODO should PropertyListItem return an iterator instead? return parse_obj_as ( Union [ PropertyItem , PropertyItemList ], obj = data ) __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages create ( parent , title = None , properties = None , children = None ) \u00b6 Add a page to the given parent (Page or Database). parent may be a ParentRef , Page , or Database object. Source code in src/ultimate_notion/obj_api/session.py def create ( self , parent , title = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database). `parent` may be a `ParentRef`, `Page`, or `Database` object. \"\"\" if parent is None : raise ValueError ( \"'parent' must be provided\" ) if isinstance ( parent , Page ): parent = PageRef [ parent ] elif isinstance ( parent , Database ): parent = DatabaseRef [ parent ] elif not isinstance ( parent , ParentRef ): raise ValueError ( \"Unsupported 'parent'\" ) request = { \"parent\" : parent . dict ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ \"title\" ] = Title [ title ] request [ \"properties\" ] = { name : prop . dict () if prop is not None else None for name , prop in properties . items ()} if children is not None : request [ \"children\" ] = [ child . dict () for child in children if child is not None ] logger . info ( \"Creating page :: %s => %s \" , parent , title ) data = self () . create ( ** request ) return Page . parse_obj ( data ) delete ( page ) \u00b6 Delete (archive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set ( page , archived = True ) restore ( page ) \u00b6 Restore (unarchive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set ( page , archived = False ) retrieve ( page ) \u00b6 Return the requested Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , page ): \"\"\"Return the requested Page. `page` may be any suitable `PageRef` type. \"\"\" page_id = PageRef [ page ] . page_id logger . info ( \"Retrieving page :: %s \" , page_id ) data = self () . retrieve ( page_id ) # XXX would it make sense to (optionally) expand the full properties here? # e.g. call the PropertiesEndpoint to make sure all data is retrieved return Page . parse_obj ( data ) set ( page , cover = False , icon = False , archived = None ) \u00b6 Set specific page attributes (such as cover, icon, etc.) on the server. page may be any suitable PageRef type. To remove an attribute, set its value to None. Source code in src/ultimate_notion/obj_api/session.py def set ( self , page , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc.) on the server. `page` may be any suitable `PageRef` type. To remove an attribute, set its value to None. \"\"\" page_id = PageRef [ page ] . page_id props = {} if cover is None : logger . info ( \"Removing page cover :: %s \" , page_id ) props [ \"cover\" ] = {} elif cover is not False : logger . info ( \"Setting page cover :: %s => %s \" , page_id , cover ) props [ \"cover\" ] = cover . dict () if icon is None : logger . info ( \"Removing page icon :: %s \" , page_id ) props [ \"icon\" ] = {} elif icon is not False : logger . info ( \"Setting page icon :: %s => %s \" , page_id , icon ) props [ \"icon\" ] = icon . dict () if archived is False : logger . info ( \"Restoring page :: %s \" , page_id ) props [ \"archived\" ] = False elif archived is True : logger . info ( \"Archiving page :: %s \" , page_id ) props [ \"archived\" ] = True data = self () . update ( page_id . hex , ** props ) return page . refresh ( ** data ) update ( page : Page , properties ) \u00b6 Update the Page object properties on the server. An optional properties may be specified as \"name\" : PropertyValue pairs. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. The page info will be refreshed to the latest version from the server. Source code in src/ultimate_notion/obj_api/session.py def update ( self , page : Page , ** properties ): \"\"\"Update the Page object properties on the server. An optional `properties` may be specified as `\"name\"`: `PropertyValue` pairs. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. The page info will be refreshed to the latest version from the server. \"\"\" logger . info ( \"Updating page info :: %s \" , page . id ) if not properties : properties = page . properties props = { name : value . dict () if value is not None else None for name , value in properties . items ()} data = self () . update ( page . id . hex , properties = props ) return page . refresh ( ** data ) SearchEndpoint \u00b6 Notional interface to the API 'search' endpoint. __call__ ( text = None ) \u00b6 Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ \"query\" ] = text return QueryBuilder ( endpoint = self . session . client . search , ** params ) Session ( kwargs ) \u00b6 An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param auth: bearer token for authentication Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param auth: bearer token for authentication \"\"\" self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) logger . info ( \"Initialized Notion SDK client\" ) IsActive property \u00b6 Determine if the current session is active. The session is considered \"active\" if it has not been closed. This does not determine if the session can connect to the Notion API. blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = notion_client . Client ( None = kwargs ) instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 close () \u00b6 Close the session and release resources. Source code in src/ultimate_notion/obj_api/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" if self . client is None : raise SessionError ( \"Session is not active.\" ) self . client . close () self . client = None ping () \u00b6 Confirm that the session is active and able to connect to Notion. Raises SessionError if there is a problem, otherwise returns True. Source code in src/ultimate_notion/obj_api/session.py def ping ( self ): \"\"\"Confirm that the session is active and able to connect to Notion. Raises SessionError if there is a problem, otherwise returns True. \"\"\" if self . IsActive is False : return False error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) return True SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message..\"\"\" super () . __init__ ( message ) UsersEndpoint \u00b6 Notional interface to the API 'users' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . users list () \u00b6 Return an iterator for all users in the workspace. Source code in src/ultimate_notion/obj_api/session.py def list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" logger . info ( \"Listing known users...\" ) users = EndpointIterator ( endpoint = self () . list ) return users () me () \u00b6 Return the current bot User. Source code in src/ultimate_notion/obj_api/session.py def me ( self ): \"\"\"Return the current bot User.\"\"\" logger . info ( \"Retrieving current integration bot\" ) data = self () . me () return User . parse_obj ( data ) retrieve ( user_id ) \u00b6 Return the User with the given ID. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" logger . info ( \"Retrieving user :: %s \" , user_id ) data = self () . retrieve ( user_id ) return User . parse_obj ( data )","title":"Session"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session","text":"Provides direct access to the Notion API.","title":"session"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.logger","text":"","title":"logger"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint","text":"Notional interface to the API 'blocks' endpoint. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs )","title":"BlocksEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.children","text":"","title":"children"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.ChildrenEndpoint","text":"Notional interface to the API 'blocks/children' endpoint.","title":"ChildrenEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.ChildrenEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks . children","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.ChildrenEndpoint.append","text":"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def append ( self , parent , * blocks : Block ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference [ parent ] . id children = [ block . dict () for block in blocks if block is not None ] logger . info ( \"Appending %d blocks to %s ...\" , len ( children ), parent_id ) data = self () . append ( block_id = parent_id , children = children ) if \"results\" in data : if len ( blocks ) == len ( data [ \"results\" ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ \"results\" ][ idx ] block . refresh ( ** result ) else : logger . warning ( \"Unable to refresh results; size mismatch\" ) else : logger . warning ( \"Unable to refresh results; not provided\" ) return parent","title":"append()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.ChildrenEndpoint.list","text":"Return all Blocks contained by the specified parent. parent may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent. `parent` may be any suitable `ObjectReference` type. \"\"\" parent_id = ObjectReference [ parent ] . id logger . info ( \"Listing blocks for %s ...\" , parent_id ) blocks = EndpointIterator ( endpoint = self () . list ) return blocks ( block_id = parent_id )","title":"list()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.delete","text":"Delete (archive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Deleting block :: %s \" , block_id ) data = self () . delete ( block_id ) return Block . parse_obj ( data )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.restore","text":"Restore (unarchive) the specified Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Restoring block :: %s \" , block_id ) data = self () . update ( block_id , archived = False ) return Block . parse_obj ( data )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.retrieve","text":"Return the requested Block. block may be any suitable ObjectReference type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , block ): \"\"\"Return the requested Block. `block` may be any suitable `ObjectReference` type. \"\"\" block_id = ObjectReference [ block ] . id logger . info ( \"Retrieving block :: %s \" , block_id ) data = self () . retrieve ( block_id ) return Block . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.BlocksEndpoint.update","text":"Update the block content on the server. The block info will be refreshed to the latest version from the server. Source code in src/ultimate_notion/obj_api/session.py def update ( self , block : Block ): \"\"\"Update the block content on the server. The block info will be refreshed to the latest version from the server. \"\"\" logger . info ( \"Updating block :: %s \" , block . id ) data = self () . update ( block . id . hex , ** block . dict ()) return block . refresh ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint","text":"Notional interface to the API 'databases' endpoint.","title":"DatabasesEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . databases","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.create","text":"Add a database to the given Page parent. parent may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def create ( self , parent , schema : Dict [ str , PropertyObject ], title = None ): \"\"\"Add a database to the given Page parent. `parent` may be any suitable `PageRef` type. \"\"\" parent_ref = PageRef [ parent ] logger . info ( \"Creating database @ %s - %s \" , parent_ref . page_id , title ) request = self . _build_request ( parent_ref , schema , title ) data = self () . create ( ** request ) return Database . parse_obj ( data )","title":"create()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.delete","text":"Delete (archive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , dbref ): \"\"\"Delete (archive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Deleting database :: %s \" , dbid ) return self . session . blocks . delete ( dbid )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.query","text":"Initialize a new Query object with the target data class. :param target: either a DatabaseRef type or an ORM class Source code in src/ultimate_notion/obj_api/session.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a `DatabaseRef` type or an ORM class \"\"\" if isclass ( target ) and issubclass ( target , ConnectedPage ): cls = target dbid = target . _notional__database if cls . _notional__session != self . session : raise ValueError ( \"ConnectedPage belongs to a different session\" ) else : cls = None dbid = DatabaseRef [ target ] . database_id logger . info ( \"Initializing database query :: { %s } [ %s ]\" , dbid , cls ) return QueryBuilder ( endpoint = self () . query , datatype = cls , database_id = dbid )","title":"query()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.restore","text":"Restore (unarchive) the specified Database. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , dbref ): \"\"\"Restore (unarchive) the specified Database. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Restoring database :: %s \" , dbid ) return self . session . blocks . restore ( dbid )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.retrieve","text":"Return the Database with the given ID. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , dbref ): \"\"\"Return the Database with the given ID. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Retrieving database :: %s \" , dbid ) data = self () . retrieve ( dbid ) return Database . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.DatabasesEndpoint.update","text":"Update the Database object on the server. The database info will be refreshed to the latest version from the server. dbref may be any suitable DatabaseRef type. Source code in src/ultimate_notion/obj_api/session.py def update ( self , dbref , title = None , schema : Dict [ str , PropertyObject ] = None ): \"\"\"Update the Database object on the server. The database info will be refreshed to the latest version from the server. `dbref` may be any suitable `DatabaseRef` type. \"\"\" dbid = DatabaseRef [ dbref ] . database_id logger . info ( \"Updating database info :: %s \" , dbid ) request = self . _build_request ( schema = schema , title = title ) if request : data = self () . update ( dbid , ** request ) dbref = dbref . refresh ( ** data ) return dbref","title":"update()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Endpoint","text":"Notional wrapper for the API endpoints. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , session : Session ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . session = session","title":"Endpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Endpoint.session","text":"","title":"session"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint","text":"Notional interface to the API 'pages' endpoint. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `pages` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . properties = PagesEndpoint . PropertiesEndpoint ( * args , ** kwargs )","title":"PagesEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.PropertiesEndpoint","text":"Notional interface to the API 'pages/properties' endpoint.","title":"PropertiesEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.PropertiesEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages . properties","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.PropertiesEndpoint.retrieve","text":"Return the Property on a specific Page with the given ID. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , page_id , property_id ): \"\"\"Return the Property on a specific Page with the given ID.\"\"\" logger . info ( \"Retrieving property :: %s [ %s ]\" , property_id , page_id ) data = self () . retrieve ( page_id , property_id ) # TODO should PropertyListItem return an iterator instead? return parse_obj_as ( Union [ PropertyItem , PropertyItemList ], obj = data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.create","text":"Add a page to the given parent (Page or Database). parent may be a ParentRef , Page , or Database object. Source code in src/ultimate_notion/obj_api/session.py def create ( self , parent , title = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database). `parent` may be a `ParentRef`, `Page`, or `Database` object. \"\"\" if parent is None : raise ValueError ( \"'parent' must be provided\" ) if isinstance ( parent , Page ): parent = PageRef [ parent ] elif isinstance ( parent , Database ): parent = DatabaseRef [ parent ] elif not isinstance ( parent , ParentRef ): raise ValueError ( \"Unsupported 'parent'\" ) request = { \"parent\" : parent . dict ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ \"title\" ] = Title [ title ] request [ \"properties\" ] = { name : prop . dict () if prop is not None else None for name , prop in properties . items ()} if children is not None : request [ \"children\" ] = [ child . dict () for child in children if child is not None ] logger . info ( \"Creating page :: %s => %s \" , parent , title ) data = self () . create ( ** request ) return Page . parse_obj ( data )","title":"create()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.delete","text":"Delete (archive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set ( page , archived = True )","title":"delete()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.restore","text":"Restore (unarchive) the specified Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page. `page` may be any suitable `PageRef` type. \"\"\" return self . set ( page , archived = False )","title":"restore()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.retrieve","text":"Return the requested Page. page may be any suitable PageRef type. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , page ): \"\"\"Return the requested Page. `page` may be any suitable `PageRef` type. \"\"\" page_id = PageRef [ page ] . page_id logger . info ( \"Retrieving page :: %s \" , page_id ) data = self () . retrieve ( page_id ) # XXX would it make sense to (optionally) expand the full properties here? # e.g. call the PropertiesEndpoint to make sure all data is retrieved return Page . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.set","text":"Set specific page attributes (such as cover, icon, etc.) on the server. page may be any suitable PageRef type. To remove an attribute, set its value to None. Source code in src/ultimate_notion/obj_api/session.py def set ( self , page , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc.) on the server. `page` may be any suitable `PageRef` type. To remove an attribute, set its value to None. \"\"\" page_id = PageRef [ page ] . page_id props = {} if cover is None : logger . info ( \"Removing page cover :: %s \" , page_id ) props [ \"cover\" ] = {} elif cover is not False : logger . info ( \"Setting page cover :: %s => %s \" , page_id , cover ) props [ \"cover\" ] = cover . dict () if icon is None : logger . info ( \"Removing page icon :: %s \" , page_id ) props [ \"icon\" ] = {} elif icon is not False : logger . info ( \"Setting page icon :: %s => %s \" , page_id , icon ) props [ \"icon\" ] = icon . dict () if archived is False : logger . info ( \"Restoring page :: %s \" , page_id ) props [ \"archived\" ] = False elif archived is True : logger . info ( \"Archiving page :: %s \" , page_id ) props [ \"archived\" ] = True data = self () . update ( page_id . hex , ** props ) return page . refresh ( ** data )","title":"set()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.PagesEndpoint.update","text":"Update the Page object properties on the server. An optional properties may be specified as \"name\" : PropertyValue pairs. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. The page info will be refreshed to the latest version from the server. Source code in src/ultimate_notion/obj_api/session.py def update ( self , page : Page , ** properties ): \"\"\"Update the Page object properties on the server. An optional `properties` may be specified as `\"name\"`: `PropertyValue` pairs. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. The page info will be refreshed to the latest version from the server. \"\"\" logger . info ( \"Updating page info :: %s \" , page . id ) if not properties : properties = page . properties props = { name : value . dict () if value is not None else None for name , value in properties . items ()} data = self () . update ( page . id . hex , properties = props ) return page . refresh ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.SearchEndpoint","text":"Notional interface to the API 'search' endpoint.","title":"SearchEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.SearchEndpoint.__call__","text":"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ \"query\" ] = text return QueryBuilder ( endpoint = self . session . client . search , ** params )","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session","text":"An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param auth: bearer token for authentication Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param auth: bearer token for authentication \"\"\" self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) logger . info ( \"Initialized Notion SDK client\" )","title":"Session"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.IsActive","text":"Determine if the current session is active. The session is considered \"active\" if it has not been closed. This does not determine if the session can connect to the Notion API.","title":"IsActive"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.client","text":"","title":"client"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.search","text":"","title":"search"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.users","text":"","title":"users"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.close","text":"Close the session and release resources. Source code in src/ultimate_notion/obj_api/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" if self . client is None : raise SessionError ( \"Session is not active.\" ) self . client . close () self . client = None","title":"close()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.Session.ping","text":"Confirm that the session is active and able to connect to Notion. Raises SessionError if there is a problem, otherwise returns True. Source code in src/ultimate_notion/obj_api/session.py def ping ( self ): \"\"\"Confirm that the session is active and able to connect to Notion. Raises SessionError if there is a problem, otherwise returns True. \"\"\" if self . IsActive is False : return False error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) return True","title":"ping()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.SessionError","text":"Raised when there are issues with the Notion session. Source code in src/ultimate_notion/obj_api/session.py def __init__ ( self , message ): \"\"\"Initialize the `SessionError` with a supplied message..\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.UsersEndpoint","text":"Notional interface to the API 'users' endpoint.","title":"UsersEndpoint"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.UsersEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in src/ultimate_notion/obj_api/session.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . users","title":"__call__()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.UsersEndpoint.list","text":"Return an iterator for all users in the workspace. Source code in src/ultimate_notion/obj_api/session.py def list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" logger . info ( \"Listing known users...\" ) users = EndpointIterator ( endpoint = self () . list ) return users ()","title":"list()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.UsersEndpoint.me","text":"Return the current bot User. Source code in src/ultimate_notion/obj_api/session.py def me ( self ): \"\"\"Return the current bot User.\"\"\" logger . info ( \"Retrieving current integration bot\" ) data = self () . me () return User . parse_obj ( data )","title":"me()"},{"location":"reference/ultimate_notion/obj_api/session/#ultimate_notion.obj_api.session.UsersEndpoint.retrieve","text":"Return the User with the given ID. Source code in src/ultimate_notion/obj_api/session.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" logger . info ( \"Retrieving user :: %s \" , user_id ) data = self () . retrieve ( user_id ) return User . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/obj_api/text/","text":"text \u00b6 Utilities for working text, markdown & Rich Text in Notion. MAX_TEXT_OBJECT_SIZE = 2000 module-attribute \u00b6 Annotations \u00b6 Style information for RichTextObject's. bold : bool = False class-attribute instance-attribute \u00b6 code : bool = False class-attribute instance-attribute \u00b6 color : FullColor = None class-attribute instance-attribute \u00b6 is_plain property \u00b6 Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style. italic : bool = False class-attribute instance-attribute \u00b6 strikethrough : bool = False class-attribute instance-attribute \u00b6 underline : bool = False class-attribute instance-attribute \u00b6 CodingLanguage \u00b6 Available coding languages. ABAP = 'abap' class-attribute instance-attribute \u00b6 ARDUINO = 'arduino' class-attribute instance-attribute \u00b6 BASH = 'bash' class-attribute instance-attribute \u00b6 BASIC = 'basic' class-attribute instance-attribute \u00b6 C = 'c' class-attribute instance-attribute \u00b6 CLOJURE = 'clojure' class-attribute instance-attribute \u00b6 COFFEESCRIPT = 'coffeescript' class-attribute instance-attribute \u00b6 CPP = 'c++' class-attribute instance-attribute \u00b6 CSHARP = 'c#' class-attribute instance-attribute \u00b6 CSS = 'css' class-attribute instance-attribute \u00b6 DART = 'dart' class-attribute instance-attribute \u00b6 DIFF = 'diff' class-attribute instance-attribute \u00b6 DOCKER = 'docker' class-attribute instance-attribute \u00b6 ELIXIR = 'elixir' class-attribute instance-attribute \u00b6 ELM = 'elm' class-attribute instance-attribute \u00b6 ERLANG = 'erlang' class-attribute instance-attribute \u00b6 FLOW = 'flow' class-attribute instance-attribute \u00b6 FORTRAN = 'fortran' class-attribute instance-attribute \u00b6 FSHARP = 'f#' class-attribute instance-attribute \u00b6 GHERKIN = 'gherkin' class-attribute instance-attribute \u00b6 GLSL = 'glsl' class-attribute instance-attribute \u00b6 GO = 'go' class-attribute instance-attribute \u00b6 GRAPHQL = 'graphql' class-attribute instance-attribute \u00b6 GROOVY = 'groovy' class-attribute instance-attribute \u00b6 HASKELL = 'haskell' class-attribute instance-attribute \u00b6 HTML = 'html' class-attribute instance-attribute \u00b6 JAVA = 'java' class-attribute instance-attribute \u00b6 JAVASCRIPT = 'javascript' class-attribute instance-attribute \u00b6 JSON = 'json' class-attribute instance-attribute \u00b6 JULIA = 'julia' class-attribute instance-attribute \u00b6 KOTLIN = 'kotlin' class-attribute instance-attribute \u00b6 LATEX = 'latex' class-attribute instance-attribute \u00b6 LESS = 'less' class-attribute instance-attribute \u00b6 LISP = 'lisp' class-attribute instance-attribute \u00b6 LIVESCRIPT = 'livescript' class-attribute instance-attribute \u00b6 LUA = 'lua' class-attribute instance-attribute \u00b6 MAKEFILE = 'makefile' class-attribute instance-attribute \u00b6 MARKDOWN = 'markdown' class-attribute instance-attribute \u00b6 MARKUP = 'markup' class-attribute instance-attribute \u00b6 MATLAB = 'matlab' class-attribute instance-attribute \u00b6 MERMAID = 'mermaid' class-attribute instance-attribute \u00b6 MISC = 'java/c/c++/c#' class-attribute instance-attribute \u00b6 NIX = 'nix' class-attribute instance-attribute \u00b6 OBJECTIVE_C = 'objective-c' class-attribute instance-attribute \u00b6 OCAML = 'ocaml' class-attribute instance-attribute \u00b6 PASCAL = 'pascal' class-attribute instance-attribute \u00b6 PERL = 'perl' class-attribute instance-attribute \u00b6 PHP = 'php' class-attribute instance-attribute \u00b6 PLAIN_TEXT = 'plain text' class-attribute instance-attribute \u00b6 POWERSHELL = 'powershell' class-attribute instance-attribute \u00b6 PROLOG = 'prolog' class-attribute instance-attribute \u00b6 PROTOBUF = 'protobuf' class-attribute instance-attribute \u00b6 PYTHON = 'python' class-attribute instance-attribute \u00b6 R = 'r' class-attribute instance-attribute \u00b6 REASON = 'reason' class-attribute instance-attribute \u00b6 RUBY = 'ruby' class-attribute instance-attribute \u00b6 RUST = 'rust' class-attribute instance-attribute \u00b6 SASS = 'sass' class-attribute instance-attribute \u00b6 SCALA = 'scala' class-attribute instance-attribute \u00b6 SCHEME = 'scheme' class-attribute instance-attribute \u00b6 SCSS = 'scss' class-attribute instance-attribute \u00b6 SHELL = 'shell' class-attribute instance-attribute \u00b6 SQL = 'sql' class-attribute instance-attribute \u00b6 SWIFT = 'swift' class-attribute instance-attribute \u00b6 TYPESCRIPT = 'typescript' class-attribute instance-attribute \u00b6 VB_NET = 'vb.net' class-attribute instance-attribute \u00b6 VERILOG = 'verilog' class-attribute instance-attribute \u00b6 VHDL = 'vhdl' class-attribute instance-attribute \u00b6 VISUAL_BASIC = 'visual basic' class-attribute instance-attribute \u00b6 WEBASSEMBLY = 'webassembly' class-attribute instance-attribute \u00b6 XML = 'xml' class-attribute instance-attribute \u00b6 YAML = 'yaml' class-attribute instance-attribute \u00b6 Color \u00b6 Basic color values. BLUE = 'blue' class-attribute instance-attribute \u00b6 BROWN = 'brown' class-attribute instance-attribute \u00b6 DEFAULT = 'default' class-attribute instance-attribute \u00b6 GRAY = 'gray' class-attribute instance-attribute \u00b6 GREEN = 'green' class-attribute instance-attribute \u00b6 ORANGE = 'orange' class-attribute instance-attribute \u00b6 PINK = 'pink' class-attribute instance-attribute \u00b6 PURPLE = 'purple' class-attribute instance-attribute \u00b6 RED = 'red' class-attribute instance-attribute \u00b6 YELLOW = 'yellow' class-attribute instance-attribute \u00b6 FullColor \u00b6 Extended color values, including backgrounds. BLUE = 'blue' class-attribute instance-attribute \u00b6 BLUE_BACKGROUND = 'blue_background' class-attribute instance-attribute \u00b6 BROWN = 'brown' class-attribute instance-attribute \u00b6 BROWN_BACKGROUND = 'brown_background' class-attribute instance-attribute \u00b6 DEFAULT = 'default' class-attribute instance-attribute \u00b6 GRAY = 'gray' class-attribute instance-attribute \u00b6 GRAY_BACKGROUND = 'gray_background' class-attribute instance-attribute \u00b6 GREEN = 'green' class-attribute instance-attribute \u00b6 GREEN_BACKGROUND = 'green_background' class-attribute instance-attribute \u00b6 ORANGE = 'orange' class-attribute instance-attribute \u00b6 ORANGE_BACKGROUND = 'orange_background' class-attribute instance-attribute \u00b6 PINK = 'pink' class-attribute instance-attribute \u00b6 PINK_BACKGROUND = 'pink_background' class-attribute instance-attribute \u00b6 PURPLE = 'purple' class-attribute instance-attribute \u00b6 PURPLE_BACKGROUND = 'purple_background' class-attribute instance-attribute \u00b6 RED = 'red' class-attribute instance-attribute \u00b6 RED_BACKGROUND = 'red_background' class-attribute instance-attribute \u00b6 YELLOW = 'yellow' class-attribute instance-attribute \u00b6 YELLOW_BACKGROUND = 'yellow_background' class-attribute instance-attribute \u00b6 LinkObject \u00b6 Reference a URL. type : str = 'url' class-attribute instance-attribute \u00b6 url : str = None class-attribute instance-attribute \u00b6 RichTextObject \u00b6 Base class for Notion rich text elements. annotations : Optional [ Annotations ] = None class-attribute instance-attribute \u00b6 href : Optional [ str ] = None class-attribute instance-attribute \u00b6 plain_text : str instance-attribute \u00b6 __compose__ ( text , href = None , style = None ) classmethod \u00b6 Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? style = deepcopy ( style ) return cls ( plain_text = text , href = href , annotations = style ) __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/text.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . href is None : text = self . plain_text or \"\" elif self . plain_text is None or len ( self . plain_text ) == 0 : text = f \"( { self . href } )\" else : text = f \"[ { self . plain_text } ]( { self . href } )\" if self . annotations : if self . annotations . bold : text = f \"* { text } *\" if self . annotations . italic : text = f \"** { text } **\" if self . annotations . underline : text = f \"_ { text } _\" if self . annotations . strikethrough : text = f \"~ { text } ~\" if self . annotations . code : text = f \"` { text } `\" return text TextObject \u00b6 Notion text element. text : _NestedData = _NestedData () class-attribute instance-attribute \u00b6 __compose__ ( text , href = None , style = None ) classmethod \u00b6 Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return cls ( plain_text = text , text = nested , href = href , annotations = style , ) chunky ( text , length = MAX_TEXT_OBJECT_SIZE ) \u00b6 Break the given text into chunks of at most length size. Source code in src/ultimate_notion/obj_api/text.py def chunky ( text , length = MAX_TEXT_OBJECT_SIZE ): \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length )) lstrip ( rtf ) \u00b6 Remove leading whitespace from each TextObject in the list. Source code in src/ultimate_notion/obj_api/text.py def lstrip ( * rtf ): \"\"\"Remove leading whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . lstrip () obj . text . content = strip_text obj . plain_text = strip_text make_safe_python_name ( name ) \u00b6 Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Source code in src/ultimate_notion/obj_api/text.py def make_safe_python_name ( name ): \"\"\"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. \"\"\" s = re . sub ( r \"[^0-9a-zA-Z_]+\" , \"_\" , name ) s = re . sub ( r \"^[^a-zA-Z]+\" , \"\" , s ) # remove trailing underscores return s . rstrip ( \"_\" ) markdown ( rtf ) \u00b6 Return text as markdown from the list of RichText objects. Source code in src/ultimate_notion/obj_api/text.py def markdown ( * rtf ): \"\"\"Return text as markdown from the list of RichText objects.\"\"\" return \"\" . join ( str ( text ) for text in rtf if text ) plain_text ( rtf ) \u00b6 Return the combined plain text from the list of RichText objects. Source code in src/ultimate_notion/obj_api/text.py def plain_text ( * rtf ): \"\"\"Return the combined plain text from the list of RichText objects.\"\"\" return \"\" . join ( text . plain_text for text in rtf if text ) rich_text ( text ) \u00b6 Return a list of RichTextObject's from the list of text elements. Source code in src/ultimate_notion/obj_api/text.py def rich_text ( * text ): \"\"\"Return a list of RichTextObject's from the list of text elements.\"\"\" rtf = [] for obj in text : if obj is None : continue if isinstance ( obj , RichTextObject ): rtf . append ( obj ) elif isinstance ( obj , str ): txt = text_blocks ( obj ) rtf . extend ( txt ) else : raise ValueError ( \"unsupported text object\" ) return rtf rstrip ( rtf ) \u00b6 Remove trailing whitespace from each TextObject in the list. Source code in src/ultimate_notion/obj_api/text.py def rstrip ( * rtf ): \"\"\"Remove trailing whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . rstrip () obj . text . content = strip_text obj . plain_text = strip_text strip ( rtf ) \u00b6 Remove leading and trailing whitespace from each TextObject in the list. This is functionally equivalent to lstrip ( * rtf ) rstrip ( * rtf ) :param rtf: a list of TextObject 's Source code in src/ultimate_notion/obj_api/text.py def strip ( * rtf ): \"\"\"Remove leading and trailing whitespace from each `TextObject` in the list. This is functionally equivalent to: ```python lstrip(*rtf) rstrip(*rtf) ``` :param rtf: a list of `TextObject`'s \"\"\" lstrip ( * rtf ) rstrip ( * rtf ) text_blocks ( text : str ) \u00b6 Convert the given plain text into an array of TextObject's. If the test is larger than the maximum block size for the Notion API, it will be broken into multiple blocks. Source code in src/ultimate_notion/obj_api/text.py def text_blocks ( text : str ): \"\"\"Convert the given plain text into an array of TextObject's. If the test is larger than the maximum block size for the Notion API, it will be broken into multiple blocks. \"\"\" return [ TextObject [ chunk ] for chunk in chunky ( text )] truncate ( text , length = - 1 , trail = '...' ) \u00b6 Truncate the given text, using a supplied tail as a placeholder. Source code in src/ultimate_notion/obj_api/text.py def truncate ( text , length =- 1 , trail = \"...\" ): \"\"\"Truncate the given text, using a supplied tail as a placeholder.\"\"\" if text is None : return None # repr() includes open and close quotes... literal = repr ( text )[ 1 : - 1 ] if 0 < length < len ( literal ): literal = literal [: length ] if trail is not None : literal += trail return literal","title":"Text"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text","text":"Utilities for working text, markdown & Rich Text in Notion.","title":"text"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.MAX_TEXT_OBJECT_SIZE","text":"","title":"MAX_TEXT_OBJECT_SIZE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations","text":"Style information for RichTextObject's.","title":"Annotations"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.bold","text":"","title":"bold"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.code","text":"","title":"code"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.color","text":"","title":"color"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.is_plain","text":"Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style.","title":"is_plain"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.italic","text":"","title":"italic"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.strikethrough","text":"","title":"strikethrough"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Annotations.underline","text":"","title":"underline"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage","text":"Available coding languages.","title":"CodingLanguage"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.ABAP","text":"","title":"ABAP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.ARDUINO","text":"","title":"ARDUINO"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.BASH","text":"","title":"BASH"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.BASIC","text":"","title":"BASIC"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.C","text":"","title":"C"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.CLOJURE","text":"","title":"CLOJURE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.COFFEESCRIPT","text":"","title":"COFFEESCRIPT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.CPP","text":"","title":"CPP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.CSHARP","text":"","title":"CSHARP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.CSS","text":"","title":"CSS"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.DART","text":"","title":"DART"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.DIFF","text":"","title":"DIFF"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.DOCKER","text":"","title":"DOCKER"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.ELIXIR","text":"","title":"ELIXIR"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.ELM","text":"","title":"ELM"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.ERLANG","text":"","title":"ERLANG"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.FLOW","text":"","title":"FLOW"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.FORTRAN","text":"","title":"FORTRAN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.FSHARP","text":"","title":"FSHARP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.GHERKIN","text":"","title":"GHERKIN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.GLSL","text":"","title":"GLSL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.GO","text":"","title":"GO"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.GRAPHQL","text":"","title":"GRAPHQL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.GROOVY","text":"","title":"GROOVY"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.HASKELL","text":"","title":"HASKELL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.HTML","text":"","title":"HTML"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.JAVA","text":"","title":"JAVA"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.JAVASCRIPT","text":"","title":"JAVASCRIPT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.JSON","text":"","title":"JSON"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.JULIA","text":"","title":"JULIA"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.KOTLIN","text":"","title":"KOTLIN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.LATEX","text":"","title":"LATEX"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.LESS","text":"","title":"LESS"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.LISP","text":"","title":"LISP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.LIVESCRIPT","text":"","title":"LIVESCRIPT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.LUA","text":"","title":"LUA"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MAKEFILE","text":"","title":"MAKEFILE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MARKDOWN","text":"","title":"MARKDOWN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MARKUP","text":"","title":"MARKUP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MATLAB","text":"","title":"MATLAB"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MERMAID","text":"","title":"MERMAID"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.MISC","text":"","title":"MISC"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.NIX","text":"","title":"NIX"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.OBJECTIVE_C","text":"","title":"OBJECTIVE_C"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.OCAML","text":"","title":"OCAML"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PASCAL","text":"","title":"PASCAL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PERL","text":"","title":"PERL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PHP","text":"","title":"PHP"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PLAIN_TEXT","text":"","title":"PLAIN_TEXT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.POWERSHELL","text":"","title":"POWERSHELL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PROLOG","text":"","title":"PROLOG"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PROTOBUF","text":"","title":"PROTOBUF"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.PYTHON","text":"","title":"PYTHON"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.R","text":"","title":"R"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.REASON","text":"","title":"REASON"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.RUBY","text":"","title":"RUBY"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.RUST","text":"","title":"RUST"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SASS","text":"","title":"SASS"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SCALA","text":"","title":"SCALA"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SCHEME","text":"","title":"SCHEME"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SCSS","text":"","title":"SCSS"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SHELL","text":"","title":"SHELL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SQL","text":"","title":"SQL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.SWIFT","text":"","title":"SWIFT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.TYPESCRIPT","text":"","title":"TYPESCRIPT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.VB_NET","text":"","title":"VB_NET"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.VERILOG","text":"","title":"VERILOG"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.VHDL","text":"","title":"VHDL"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.VISUAL_BASIC","text":"","title":"VISUAL_BASIC"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.WEBASSEMBLY","text":"","title":"WEBASSEMBLY"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.XML","text":"","title":"XML"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.CodingLanguage.YAML","text":"","title":"YAML"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color","text":"Basic color values.","title":"Color"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.Color.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor","text":"Extended color values, including backgrounds.","title":"FullColor"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.BLUE_BACKGROUND","text":"","title":"BLUE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.BROWN_BACKGROUND","text":"","title":"BROWN_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.GRAY_BACKGROUND","text":"","title":"GRAY_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.GREEN_BACKGROUND","text":"","title":"GREEN_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.ORANGE_BACKGROUND","text":"","title":"ORANGE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.PINK_BACKGROUND","text":"","title":"PINK_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.PURPLE_BACKGROUND","text":"","title":"PURPLE_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.RED_BACKGROUND","text":"","title":"RED_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.FullColor.YELLOW_BACKGROUND","text":"","title":"YELLOW_BACKGROUND"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.LinkObject","text":"Reference a URL.","title":"LinkObject"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.LinkObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.LinkObject.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject","text":"Base class for Notion rich text elements.","title":"RichTextObject"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject.annotations","text":"","title":"annotations"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject.href","text":"","title":"href"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject.plain_text","text":"","title":"plain_text"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject.__compose__","text":"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? style = deepcopy ( style ) return cls ( plain_text = text , href = href , annotations = style )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.RichTextObject.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/text.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . href is None : text = self . plain_text or \"\" elif self . plain_text is None or len ( self . plain_text ) == 0 : text = f \"( { self . href } )\" else : text = f \"[ { self . plain_text } ]( { self . href } )\" if self . annotations : if self . annotations . bold : text = f \"* { text } *\" if self . annotations . italic : text = f \"** { text } **\" if self . annotations . underline : text = f \"_ { text } _\" if self . annotations . strikethrough : text = f \"~ { text } ~\" if self . annotations . code : text = f \"` { text } `\" return text","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.TextObject","text":"Notion text element.","title":"TextObject"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.TextObject.text","text":"","title":"text"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.TextObject.__compose__","text":"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in src/ultimate_notion/obj_api/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return cls ( plain_text = text , text = nested , href = href , annotations = style , )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.chunky","text":"Break the given text into chunks of at most length size. Source code in src/ultimate_notion/obj_api/text.py def chunky ( text , length = MAX_TEXT_OBJECT_SIZE ): \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length ))","title":"chunky()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.lstrip","text":"Remove leading whitespace from each TextObject in the list. Source code in src/ultimate_notion/obj_api/text.py def lstrip ( * rtf ): \"\"\"Remove leading whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . lstrip () obj . text . content = strip_text obj . plain_text = strip_text","title":"lstrip()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.make_safe_python_name","text":"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Source code in src/ultimate_notion/obj_api/text.py def make_safe_python_name ( name ): \"\"\"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. \"\"\" s = re . sub ( r \"[^0-9a-zA-Z_]+\" , \"_\" , name ) s = re . sub ( r \"^[^a-zA-Z]+\" , \"\" , s ) # remove trailing underscores return s . rstrip ( \"_\" )","title":"make_safe_python_name()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.markdown","text":"Return text as markdown from the list of RichText objects. Source code in src/ultimate_notion/obj_api/text.py def markdown ( * rtf ): \"\"\"Return text as markdown from the list of RichText objects.\"\"\" return \"\" . join ( str ( text ) for text in rtf if text )","title":"markdown()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.plain_text","text":"Return the combined plain text from the list of RichText objects. Source code in src/ultimate_notion/obj_api/text.py def plain_text ( * rtf ): \"\"\"Return the combined plain text from the list of RichText objects.\"\"\" return \"\" . join ( text . plain_text for text in rtf if text )","title":"plain_text()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.rich_text","text":"Return a list of RichTextObject's from the list of text elements. Source code in src/ultimate_notion/obj_api/text.py def rich_text ( * text ): \"\"\"Return a list of RichTextObject's from the list of text elements.\"\"\" rtf = [] for obj in text : if obj is None : continue if isinstance ( obj , RichTextObject ): rtf . append ( obj ) elif isinstance ( obj , str ): txt = text_blocks ( obj ) rtf . extend ( txt ) else : raise ValueError ( \"unsupported text object\" ) return rtf","title":"rich_text()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.rstrip","text":"Remove trailing whitespace from each TextObject in the list. Source code in src/ultimate_notion/obj_api/text.py def rstrip ( * rtf ): \"\"\"Remove trailing whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . rstrip () obj . text . content = strip_text obj . plain_text = strip_text","title":"rstrip()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.strip","text":"Remove leading and trailing whitespace from each TextObject in the list. This is functionally equivalent to lstrip ( * rtf ) rstrip ( * rtf ) :param rtf: a list of TextObject 's Source code in src/ultimate_notion/obj_api/text.py def strip ( * rtf ): \"\"\"Remove leading and trailing whitespace from each `TextObject` in the list. This is functionally equivalent to: ```python lstrip(*rtf) rstrip(*rtf) ``` :param rtf: a list of `TextObject`'s \"\"\" lstrip ( * rtf ) rstrip ( * rtf )","title":"strip()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.text_blocks","text":"Convert the given plain text into an array of TextObject's. If the test is larger than the maximum block size for the Notion API, it will be broken into multiple blocks. Source code in src/ultimate_notion/obj_api/text.py def text_blocks ( text : str ): \"\"\"Convert the given plain text into an array of TextObject's. If the test is larger than the maximum block size for the Notion API, it will be broken into multiple blocks. \"\"\" return [ TextObject [ chunk ] for chunk in chunky ( text )]","title":"text_blocks()"},{"location":"reference/ultimate_notion/obj_api/text/#ultimate_notion.obj_api.text.truncate","text":"Truncate the given text, using a supplied tail as a placeholder. Source code in src/ultimate_notion/obj_api/text.py def truncate ( text , length =- 1 , trail = \"...\" ): \"\"\"Truncate the given text, using a supplied tail as a placeholder.\"\"\" if text is None : return None # repr() includes open and close quotes... literal = repr ( text )[ 1 : - 1 ] if 0 < length < len ( literal ): literal = literal [: length ] if trail is not None : literal += trail return literal","title":"truncate()"},{"location":"reference/ultimate_notion/obj_api/types/","text":"types \u00b6 Wrapper for Notion API data types. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods. BlockRef \u00b6 Reference a block. block_id : UUID instance-attribute \u00b6 __compose__ ( block_ref ) classmethod \u00b6 Compose a BlockRef from the given reference object. block_ref can be either a string, UUID, or block. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , block_ref ): \"\"\"Compose a BlockRef from the given reference object. `block_ref` can be either a string, UUID, or block. \"\"\" ref = ObjectReference [ block_ref ] return BlockRef ( block_id = ref . id ) BooleanFormula \u00b6 A Notion boolean formula result. Result property \u00b6 Return the result of this BooleanFormula. boolean : Optional [ bool ] = None class-attribute instance-attribute \u00b6 Checkbox \u00b6 Simple checkbox type; represented as a boolean. checkbox : Optional [ bool ] = None class-attribute instance-attribute \u00b6 CreatedBy \u00b6 A Notion created-by property value. created_by : User instance-attribute \u00b6 __str__ () \u00b6 Return the contents of this property as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . created_by ) CreatedTime \u00b6 A Notion created-time property value. created_time : datetime instance-attribute \u00b6 DatabaseRef \u00b6 Reference a database. database_id : UUID instance-attribute \u00b6 __compose__ ( db_ref ) classmethod \u00b6 Compose a DatabaseRef from the given reference object. db_ref can be either a string, UUID, or database. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , db_ref ): \"\"\"Compose a DatabaseRef from the given reference object. `db_ref` can be either a string, UUID, or database. \"\"\" ref = ObjectReference [ db_ref ] return DatabaseRef ( database_id = ref . id ) Date \u00b6 Notion complex date type - may include timestamp and/or be a date range. End property \u00b6 Return the end date of this property. IsRange property \u00b6 Determine if this object represents a date range (versus a single date). Start property \u00b6 Return the start date of this property. date : Optional [ DateRange ] = None class-attribute instance-attribute \u00b6 __compose__ ( start , end = None ) classmethod \u00b6 Create a new Date from the native values. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls ( date = DateRange ( start = start , end = end )) __contains__ ( other ) \u00b6 Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. \"\"\" if not self . IsRange : raise ValueError ( \"This date is not a range\" ) return self . Start <= other <= self . End __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"\" if self . date is None else str ( self . date ) DateFormula \u00b6 A Notion date formula result. Result property \u00b6 Return the result of this DateFormula. date : Optional [ DateRange ] = None class-attribute instance-attribute \u00b6 DateRange \u00b6 A Notion date range, with an optional end date. end : Optional [ Union [ date , datetime ]] = None class-attribute instance-attribute \u00b6 start : Union [ date , datetime ] instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . end is None : return f \" { self . start } \" return f \" { self . start } :: { self . end } \" Email \u00b6 Notion email type. email : Optional [ str ] = None class-attribute instance-attribute \u00b6 EmojiObject \u00b6 A Notion emoji object. emoji : str instance-attribute \u00b6 __compose__ ( emoji ) classmethod \u00b6 Compose an EmojiObject from the given emoji string. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" return EmojiObject ( emoji = emoji ) __str__ () \u00b6 Return this EmojiObject as a simple string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return this EmojiObject as a simple string.\"\"\" return self . emoji EquationObject \u00b6 Notion equation element. equation : _NestedData instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . equation is None : return None return self . equation . expression ExternalFile \u00b6 An external file object. external : _NestedData instance-attribute \u00b6 __compose__ ( url , name = None ) classmethod \u00b6 Create a new ExternalFile from the given URL. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls ( name = name , external = cls . _NestedData ( url = url )) __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = super () . __str__ () if self . external and self . external . url : return f \"![ { name } ]( { self . external . url } )\" return name FileObject \u00b6 A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API. URL property \u00b6 Return the URL to this FileObject. name : Optional [ str ] = None class-attribute instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" return self . name or \"__unknown__\" Files \u00b6 Notion files type. files : List [ FileObject ] = [] class-attribute instance-attribute \u00b6 __contains__ ( other ) \u00b6 Determine if the given FileObject or name is in the property. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given FileObject or name is in the property.\"\"\" if self . files is None : return False for ref in self . files : if ref == other : return True if ref . name == other : return True return False __getitem__ ( name ) \u00b6 Return the FileObject with the given name. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , name ): \"\"\"Return the FileObject with the given name.\"\"\" if self . files is None : return None for ref in self . files : if ref . name == name : return ref raise AttributeError ( \"No such file\" ) __iadd__ ( obj ) \u00b6 Append the given FileObject in place. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , obj ): \"\"\"Append the given `FileObject` in place.\"\"\" if obj in self : raise ValueError ( f \"Item exists: { obj } \" ) self . append ( obj ) return self __isub__ ( obj ) \u00b6 Remove the given FileObject in place. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , obj ): \"\"\"Remove the given `FileObject` in place.\"\"\" if obj not in self : raise ValueError ( f \"No such item: { obj } \" ) self . remove ( obj ) return self __iter__ () \u00b6 Iterate over the FileObject's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the FileObject's in this property.\"\"\" if self . files is None : return None return iter ( self . files ) __len__ () \u00b6 Return the number of Files in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of Files in this property.\"\"\" return len ( self . files ) __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"; \" . join ([ str ( file ) for file in self . files ]) append ( obj ) \u00b6 Append the given file reference to this property. :param ref: the FileObject to be added Source code in src/ultimate_notion/obj_api/types.py def append ( self , obj ): \"\"\"Append the given file reference to this property. :param ref: the `FileObject` to be added \"\"\" self . files . append ( obj ) remove ( obj ) \u00b6 Remove the given file reference from this property. :param ref: the FileObject to be removed Source code in src/ultimate_notion/obj_api/types.py def remove ( self , obj ): \"\"\"Remove the given file reference from this property. :param ref: the `FileObject` to be removed \"\"\" self . files . remove ( obj ) Formula \u00b6 A Notion formula property value. Result property \u00b6 Return the result of this Formula in its native type. formula : Optional [ FormulaResult ] = None class-attribute instance-attribute \u00b6 __str__ () \u00b6 Return the result of this formula as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the result of this formula as a string.\"\"\" return str ( self . Result or \"\" ) FormulaResult \u00b6 A Notion formula result. This object contains the result of the expression in the database properties. Result property \u00b6 Return the result of this FormulaResult. __str__ () \u00b6 Return the formula result as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the formula result as a string.\"\"\" return self . Result or \"\" HostedFile \u00b6 A Notion file object. file : _NestedData instance-attribute \u00b6 LastEditedBy \u00b6 A Notion last-edited-by property value. last_edited_by : User instance-attribute \u00b6 __str__ () \u00b6 Return the contents of this property as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . last_edited_by ) LastEditedTime \u00b6 A Notion last-edited-time property value. last_edited_time : datetime instance-attribute \u00b6 MentionData \u00b6 Base class for typed Mention data objects. MentionDatabase \u00b6 Nested database information for Mention properties. database : ObjectReference instance-attribute \u00b6 __compose__ ( page ) classmethod \u00b6 Build a Mention object for the specified database reference. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page ): \"\"\"Build a `Mention` object for the specified database reference.\"\"\" ref = ObjectReference [ page ] return MentionObject ( plain_text = str ( ref ), mention = MentionDatabase ( database = ref )) MentionDate \u00b6 Nested date data for Mention properties. date : DateRange instance-attribute \u00b6 __compose__ ( start , end = None ) classmethod \u00b6 Build a Mention object for the specified URL. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Build a `Mention` object for the specified URL.\"\"\" date_obj = DateRange ( start = start , end = end ) return MentionObject ( plain_text = str ( date_obj ), mention = MentionDate ( date = date_obj )) MentionLinkPreview \u00b6 Nested url data for Mention properties. These objects cannot be created via the API. link_preview : _NestedData instance-attribute \u00b6 MentionObject \u00b6 Notion mention element. mention : MentionData instance-attribute \u00b6 MentionPage \u00b6 Nested page data for Mention properties. page : ObjectReference instance-attribute \u00b6 __compose__ ( page_ref ) classmethod \u00b6 Build a Mention object for the specified page reference. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page_ref ): \"\"\"Build a `Mention` object for the specified page reference.\"\"\" ref = ObjectReference [ page_ref ] return MentionObject ( plain_text = str ( ref ), mention = MentionPage ( page = ref )) MentionTemplate \u00b6 Nested template data for Mention properties. template_mention : MentionTemplateData instance-attribute \u00b6 MentionTemplateData \u00b6 Nested template data for Mention properties. MentionTemplateDate \u00b6 Nested date template data for Mention properties. template_mention_date : str instance-attribute \u00b6 MentionTemplateUser \u00b6 Nested user template data for Mention properties. template_mention_user : str instance-attribute \u00b6 MentionUser \u00b6 Nested user data for Mention properties. user : User instance-attribute \u00b6 __compose__ ( user : User ) classmethod \u00b6 Build a Mention object for the specified user. The id field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , user : User ): \"\"\"Build a `Mention` object for the specified user. The `id` field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. \"\"\" return MentionObject ( plain_text = str ( user ), mention = MentionUser ( user = user )) MultiSelect \u00b6 Notion multi-select type. Values property \u00b6 Return the names of each value in this MultiSelect as a list. multi_select : List [ SelectValue ] = [] class-attribute instance-attribute \u00b6 __compose__ ( values ) classmethod \u00b6 Initialize a new MultiSelect from the given value(s). Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * values ): \"\"\"Initialize a new MultiSelect from the given value(s).\"\"\" select = [ SelectValue [ value ] for value in values if value is not None ] return cls ( multi_select = select ) __contains__ ( name ) \u00b6 Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , name ): \"\"\"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. \"\"\" for opt in self . multi_select : if opt . name == name : return True return False __getitem__ ( index ) \u00b6 Return the SelectValue object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the SelectValue object at the given index.\"\"\" if self . multi_select is None : raise IndexError ( \"empty property\" ) if index > len ( self . multi_select ): raise IndexError ( \"index out of range\" ) return self . multi_select [ index ] __iadd__ ( other ) \u00b6 Add the given option to this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , other ): \"\"\"Add the given option to this MultiSelect.\"\"\" if other in self : raise ValueError ( f \"Duplicate item: { other } \" ) self . append ( other ) return self __isub__ ( other ) \u00b6 Remove the given value from this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , other ): \"\"\"Remove the given value from this MultiSelect.\"\"\" if other not in self : raise ValueError ( f \"No such item: { other } \" ) self . remove ( other ) return self __iter__ () \u00b6 Iterate over the SelectValue's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the SelectValue's in this property.\"\"\" if self . multi_select is None : return None return iter ( self . multi_select ) __len__ () \u00b6 Count the number of selected values. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Count the number of selected values.\"\"\" return len ( self . multi_select ) __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ( self . Values ) append ( values ) \u00b6 Add selected values to this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def append ( self , * values ): \"\"\"Add selected values to this MultiSelect.\"\"\" for value in values : if value is None : raise ValueError ( \"'None' is an invalid value\" ) if value not in self : self . multi_select . append ( SelectValue [ value ]) remove ( values ) \u00b6 Remove selected values from this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def remove ( self , * values ): \"\"\"Remove selected values from this MultiSelect.\"\"\" self . multi_select = [ opt for opt in self . multi_select if opt . name not in values ] NativeTypeMixin \u00b6 Mixin class for properties that can be represented as native Python types. Value property \u00b6 Get the current value of this property as a native Python type. __compose__ ( value ) classmethod \u00b6 Build the property value from the native Python value. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Build the property value from the native Python value.\"\"\" # use type-name field to instantiate the class when possible if hasattr ( cls , \"type\" ): return cls ( ** { cls . type : value }) raise NotImplementedError () __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object.\"\"\" # if `other` is a NativeTypeMixin, this comparrison will call __eq__ on that # object using this objects `Value` as the value for `other` (allowing callers # to compare using either native types or NativeTypeMixin's) return other == self . Value __ne__ ( other ) \u00b6 Determine if this property is not equal to the given object. Source code in src/ultimate_notion/obj_api/types.py def __ne__ ( self , other ): \"\"\"Determine if this property is not equal to the given object.\"\"\" return not self . __eq__ ( other ) __str__ () \u00b6 Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" value = self . Value if value is None : return \"\" return str ( value ) Number \u00b6 Simple number type. Value property \u00b6 Get the current value of this property as a native Python number. number : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 __add__ ( other ) \u00b6 Add the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __add__ ( self , other ): \"\"\"Add the value of `other` and returns the result as a Number.\"\"\" return Number [ other + self . Value ] __float__ () \u00b6 Return the Number as a float . Source code in src/ultimate_notion/obj_api/types.py def __float__ ( self ): \"\"\"Return the Number as a `float`.\"\"\" if self . number is None : raise ValueError ( \"Cannot convert 'None' to float\" ) return float ( self . number ) __ge__ ( other ) \u00b6 Return True if this Number is greater-than-or-equal-to other . Source code in src/ultimate_notion/obj_api/types.py def __ge__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than-or-equal-to `other`.\"\"\" return self > other or self == other __gt__ ( other ) \u00b6 Return True if this Number is greater-than other . Source code in src/ultimate_notion/obj_api/types.py def __gt__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than `other`.\"\"\" return other < self . Value __iadd__ ( other ) \u00b6 Add the given value to this Number. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" if isinstance ( other , Number ): self . number += other . Value else : self . number += other return self __int__ () \u00b6 Return the Number as an int . Source code in src/ultimate_notion/obj_api/types.py def __int__ ( self ): \"\"\"Return the Number as an `int`.\"\"\" if self . number is None : raise ValueError ( \"Cannot convert 'None' to int\" ) return int ( self . number ) __isub__ ( other ) \u00b6 Subtract the given value from this Number. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" if isinstance ( other , Number ): self . number -= other . Value else : self . number -= other return self __le__ ( other ) \u00b6 Return True if this Number is less-than-or-equal-to other . Source code in src/ultimate_notion/obj_api/types.py def __le__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than-or-equal-to `other`.\"\"\" return self < other or self == other __lt__ ( other ) \u00b6 Return True if this Number is less-than other . Source code in src/ultimate_notion/obj_api/types.py def __lt__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than `other`.\"\"\" return other > self . Value __mul__ ( other ) \u00b6 Multiply the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __mul__ ( self , other ): \"\"\"Multiply the value of `other` and returns the result as a Number.\"\"\" return Number [ other * self . Value ] __sub__ ( other ) \u00b6 Subtract the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __sub__ ( self , other ): \"\"\"Subtract the value of `other` and returns the result as a Number.\"\"\" return Number [ self . Value - float ( other )] NumberFormula \u00b6 A Notion number formula result. Result property \u00b6 Return the result of this NumberFormula. number : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 ObjectReference \u00b6 A general-purpose object reference in the Notion API. URL property \u00b6 Return the Notion URL for this object reference. Note: this is a convenience property only. It does not guarantee that the URL exists or that it is accessible by the integration. id : UUID instance-attribute \u00b6 __compose__ ( ref ) classmethod \u00b6 Compose an ObjectReference from the given reference. ref may be a UUID , str , ParentRef or GenericObject with an id . Strings may be either UUID's or URL's to Notion content. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , ref ): \"\"\"Compose an ObjectReference from the given reference. `ref` may be a `UUID`, `str`, `ParentRef` or `GenericObject` with an `id`. Strings may be either UUID's or URL's to Notion content. \"\"\" if isinstance ( ref , cls ): return ref . copy ( deep = True ) if isinstance ( ref , ParentRef ): # ParentRef's are typed-objects with a nested UUID return ObjectReference ( id = ref ()) if isinstance ( ref , GenericObject ) and hasattr ( ref , \"id\" ): # re-compose the ObjectReference from the internal ID return ObjectReference [ ref . id ] if isinstance ( ref , UUID ): return ObjectReference ( id = ref ) if isinstance ( ref , str ): ref = util . extract_id_from_string ( ref ) if ref is not None : return ObjectReference ( id = UUID ( ref )) raise ValueError ( \"Unrecognized 'ref' attribute\" ) PageRef \u00b6 Reference a page. page_id : UUID instance-attribute \u00b6 __compose__ ( page_ref ) classmethod \u00b6 Compose a PageRef from the given reference object. page_ref can be either a string, UUID, or page. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page_ref ): \"\"\"Compose a PageRef from the given reference object. `page_ref` can be either a string, UUID, or page. \"\"\" ref = ObjectReference [ page_ref ] return PageRef ( page_id = ref . id ) ParentRef \u00b6 Reference another block as a parent. People \u00b6 Notion people type. people : List [ User ] = [] class-attribute instance-attribute \u00b6 __contains__ ( other ) \u00b6 Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). \"\"\" for user in self . people : if user == other : return True if user . name == other : return True return False __getitem__ ( index ) \u00b6 Return the People object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the People object at the given index.\"\"\" if self . people is None : raise IndexError ( \"empty property\" ) if index > len ( self . people ): raise IndexError ( \"index out of range\" ) return self . people [ index ] __iter__ () \u00b6 Iterate over the User's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the User's in this property.\"\"\" if self . people is None : return None return iter ( self . people ) __len__ () \u00b6 Return the number of People in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of People in this property.\"\"\" return len ( self . people ) __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ([ str ( user ) for user in self . people ]) PhoneNumber \u00b6 Notion phone type. phone_number : Optional [ str ] = None class-attribute instance-attribute \u00b6 PropertyItem \u00b6 A PropertyItem returned by the Notion API. Basic property items have a similar schema to corresponding property values. As a result, these items share the PropertyValue type definitions. This class provides a placeholder for parsing property items, however objects parse by this class will likely be PropertyValue 's instead. PropertyValue \u00b6 Base class for Notion property values. id : Optional [ str ] = None class-attribute instance-attribute \u00b6 Relation \u00b6 A Notion relation property value. has_more : bool = False class-attribute instance-attribute \u00b6 relation : List [ ObjectReference ] = [] class-attribute instance-attribute \u00b6 __compose__ ( pages ) classmethod \u00b6 Return a Relation property with the specified pages. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" return cls ( relation = [ ObjectReference [ page ] for page in pages ]) __contains__ ( page ) \u00b6 Determine if the given page is in this Relation. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , page ): \"\"\"Determine if the given page is in this Relation.\"\"\" return ObjectReference [ page ] in self . relation __getitem__ ( index ) \u00b6 Return the ObjectReference object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the ObjectReference object at the given index.\"\"\" if self . relation is None : raise IndexError ( \"empty property\" ) if index > len ( self . relation ): raise IndexError ( \"index out of range\" ) return self . relation [ index ] __iadd__ ( page ) \u00b6 Add the given page to this Relation in place. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , page ): \"\"\"Add the given page to this Relation in place.\"\"\" ref = ObjectReference [ page ] if ref in self . relation : raise ValueError ( f \"Duplicate item: { ref . id } \" ) self . relation . append ( ref ) return self __isub__ ( page ) \u00b6 Remove the given page from this Relation in place. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , page ): \"\"\"Remove the given page from this Relation in place.\"\"\" ref = ObjectReference [ page ] if ref in self . relation : raise ValueError ( f \"No such item: { ref . id } \" ) self . relation . remove ( ref ) return self __iter__ () \u00b6 Iterate over the ObjectReference's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the ObjectReference's in this property.\"\"\" if self . relation is None : return None return iter ( self . relation ) __len__ () \u00b6 Return the number of ObjectReference's in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of ObjectReference's in this property.\"\"\" return len ( self . relation ) RichText \u00b6 Notion rich text type. Value property \u00b6 Return the plain text from this RichText. rich_text : List [ RichTextObject ] = [] class-attribute instance-attribute \u00b6 __compose__ ( text ) classmethod \u00b6 Create a new RichText property from the given strings. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * text ): \"\"\"Create a new `RichText` property from the given strings.\"\"\" return cls ( rich_text = rich_text ( * text )) __len__ () \u00b6 Return the number of object in the RichText object. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of object in the RichText object.\"\"\" return len ( self . rich_text ) Rollup \u00b6 A Notion rollup property value. rollup : Optional [ RollupObject ] = None class-attribute instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Rollup property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this Rollup property.\"\"\" if self . rollup is None : return \"\" value = self . rollup . Value if value is None : return \"\" return str ( value ) RollupArray \u00b6 A Notion rollup array property value. Value property \u00b6 Return the native representation of this Rollup object. array : List [ PropertyValue ] instance-attribute \u00b6 RollupDate \u00b6 A Notion rollup date property value. Value property \u00b6 Return the native representation of this Rollup object. date : Optional [ DateRange ] = None class-attribute instance-attribute \u00b6 RollupNumber \u00b6 A Notion rollup number property value. Value property \u00b6 Return the native representation of this Rollup object. number : Optional [ Union [ float , int ]] = None class-attribute instance-attribute \u00b6 RollupObject \u00b6 A Notion rollup property value. Value abstractmethod property \u00b6 Return the native representation of this Rollup object. function : Optional [ Function ] = None class-attribute instance-attribute \u00b6 SelectOne \u00b6 Notion select type. Value property \u00b6 Return the value of this property as a string. select : Optional [ SelectValue ] = None class-attribute instance-attribute \u00b6 __compose__ ( value , color = None ) classmethod \u00b6 Create a SelectOne property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value , color = None ): \"\"\"Create a `SelectOne` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" return cls ( select = SelectValue [ value , color ]) __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. \"\"\" if other is None : return self . select is None return other == self . select . name __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\" SelectValue \u00b6 Values for select & multi-select properties. color : Optional [ Color ] = None class-attribute instance-attribute \u00b6 id : Optional [ Union [ UUID , str ]] = None class-attribute instance-attribute \u00b6 name : str instance-attribute \u00b6 __compose__ ( value , color = None ) classmethod \u00b6 Create a SelectValue property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value , color = None ): \"\"\"Create a `SelectValue` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" return cls ( name = value , color = color ) __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . name Status \u00b6 Notion status property. Value property \u00b6 Return the value of this property as a string. status : Optional [ _NestedData ] = None class-attribute instance-attribute \u00b6 __compose__ ( name , color = None ) classmethod \u00b6 Create a Status property from the given name. :param name: a string to use for this property :param color: an optional Color for the status Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , name , color = None ): \"\"\"Create a `Status` property from the given name. :param name: a string to use for this property :param color: an optional Color for the status \"\"\" if name is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( status = Status . _NestedData ( name = name , color = color )) __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. \"\"\" if other is None : return self . status is None if isinstance ( other , Status ): return self . status . name == other . status . name return self . status . name == other __str__ () \u00b6 Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\" StringFormula \u00b6 A Notion string formula result. Result property \u00b6 Return the result of this StringFormula. string : Optional [ str ] = None class-attribute instance-attribute \u00b6 Title \u00b6 Notion title type. Value property \u00b6 Return the plain text from this Title. title : List [ RichTextObject ] = [] class-attribute instance-attribute \u00b6 __compose__ ( text ) classmethod \u00b6 Create a new Title property from the given text elements. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * text ): \"\"\"Create a new `Title` property from the given text elements.\"\"\" return cls ( title = rich_text ( * text )) __len__ () \u00b6 Return the number of object in the Title object. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of object in the Title object.\"\"\" return len ( self . title ) URL \u00b6 Notion URL type. url : Optional [ str ] = None class-attribute instance-attribute \u00b6 WorkspaceRef \u00b6 Reference the workspace. workspace : bool = True class-attribute instance-attribute \u00b6","title":"Types"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types","text":"Wrapper for Notion API data types. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods.","title":"types"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BlockRef","text":"Reference a block.","title":"BlockRef"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BlockRef.block_id","text":"","title":"block_id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BlockRef.__compose__","text":"Compose a BlockRef from the given reference object. block_ref can be either a string, UUID, or block. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , block_ref ): \"\"\"Compose a BlockRef from the given reference object. `block_ref` can be either a string, UUID, or block. \"\"\" ref = ObjectReference [ block_ref ] return BlockRef ( block_id = ref . id )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BooleanFormula","text":"A Notion boolean formula result.","title":"BooleanFormula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BooleanFormula.Result","text":"Return the result of this BooleanFormula.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.BooleanFormula.boolean","text":"","title":"boolean"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Checkbox","text":"Simple checkbox type; represented as a boolean.","title":"Checkbox"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.CreatedBy","text":"A Notion created-by property value.","title":"CreatedBy"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.CreatedBy.__str__","text":"Return the contents of this property as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . created_by )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.CreatedTime","text":"A Notion created-time property value.","title":"CreatedTime"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DatabaseRef","text":"Reference a database.","title":"DatabaseRef"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DatabaseRef.database_id","text":"","title":"database_id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DatabaseRef.__compose__","text":"Compose a DatabaseRef from the given reference object. db_ref can be either a string, UUID, or database. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , db_ref ): \"\"\"Compose a DatabaseRef from the given reference object. `db_ref` can be either a string, UUID, or database. \"\"\" ref = ObjectReference [ db_ref ] return DatabaseRef ( database_id = ref . id )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date","text":"Notion complex date type - may include timestamp and/or be a date range.","title":"Date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.End","text":"Return the end date of this property.","title":"End"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.IsRange","text":"Determine if this object represents a date range (versus a single date).","title":"IsRange"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.Start","text":"Return the start date of this property.","title":"Start"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.__compose__","text":"Create a new Date from the native values. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls ( date = DateRange ( start = start , end = end ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.__contains__","text":"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. \"\"\" if not self . IsRange : raise ValueError ( \"This date is not a range\" ) return self . Start <= other <= self . End","title":"__contains__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Date.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"\" if self . date is None else str ( self . date )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateFormula","text":"A Notion date formula result.","title":"DateFormula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateFormula.Result","text":"Return the result of this DateFormula.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateFormula.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateRange","text":"A Notion date range, with an optional end date.","title":"DateRange"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateRange.end","text":"","title":"end"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateRange.start","text":"","title":"start"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.DateRange.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . end is None : return f \" { self . start } \" return f \" { self . start } :: { self . end } \"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Email","text":"Notion email type.","title":"Email"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EmojiObject","text":"A Notion emoji object.","title":"EmojiObject"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EmojiObject.emoji","text":"","title":"emoji"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EmojiObject.__compose__","text":"Compose an EmojiObject from the given emoji string. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" return EmojiObject ( emoji = emoji )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EmojiObject.__str__","text":"Return this EmojiObject as a simple string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return this EmojiObject as a simple string.\"\"\" return self . emoji","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EquationObject","text":"Notion equation element.","title":"EquationObject"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EquationObject.equation","text":"","title":"equation"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.EquationObject.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . equation is None : return None return self . equation . expression","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ExternalFile","text":"An external file object.","title":"ExternalFile"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ExternalFile.external","text":"","title":"external"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ExternalFile.__compose__","text":"Create a new ExternalFile from the given URL. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls ( name = name , external = cls . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ExternalFile.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = super () . __str__ () if self . external and self . external . url : return f \"![ { name } ]( { self . external . url } )\" return name","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FileObject","text":"A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API.","title":"FileObject"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FileObject.URL","text":"Return the URL to this FileObject.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FileObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FileObject.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" return self . name or \"__unknown__\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files","text":"Notion files type.","title":"Files"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__contains__","text":"Determine if the given FileObject or name is in the property. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given FileObject or name is in the property.\"\"\" if self . files is None : return False for ref in self . files : if ref == other : return True if ref . name == other : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__getitem__","text":"Return the FileObject with the given name. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , name ): \"\"\"Return the FileObject with the given name.\"\"\" if self . files is None : return None for ref in self . files : if ref . name == name : return ref raise AttributeError ( \"No such file\" )","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__iadd__","text":"Append the given FileObject in place. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , obj ): \"\"\"Append the given `FileObject` in place.\"\"\" if obj in self : raise ValueError ( f \"Item exists: { obj } \" ) self . append ( obj ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__isub__","text":"Remove the given FileObject in place. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , obj ): \"\"\"Remove the given `FileObject` in place.\"\"\" if obj not in self : raise ValueError ( f \"No such item: { obj } \" ) self . remove ( obj ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__iter__","text":"Iterate over the FileObject's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the FileObject's in this property.\"\"\" if self . files is None : return None return iter ( self . files )","title":"__iter__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__len__","text":"Return the number of Files in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of Files in this property.\"\"\" return len ( self . files )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"; \" . join ([ str ( file ) for file in self . files ])","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.append","text":"Append the given file reference to this property. :param ref: the FileObject to be added Source code in src/ultimate_notion/obj_api/types.py def append ( self , obj ): \"\"\"Append the given file reference to this property. :param ref: the `FileObject` to be added \"\"\" self . files . append ( obj )","title":"append()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Files.remove","text":"Remove the given file reference from this property. :param ref: the FileObject to be removed Source code in src/ultimate_notion/obj_api/types.py def remove ( self , obj ): \"\"\"Remove the given file reference from this property. :param ref: the `FileObject` to be removed \"\"\" self . files . remove ( obj )","title":"remove()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Formula","text":"A Notion formula property value.","title":"Formula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Formula.Result","text":"Return the result of this Formula in its native type.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Formula.__str__","text":"Return the result of this formula as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the result of this formula as a string.\"\"\" return str ( self . Result or \"\" )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FormulaResult","text":"A Notion formula result. This object contains the result of the expression in the database properties.","title":"FormulaResult"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FormulaResult.Result","text":"Return the result of this FormulaResult.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.FormulaResult.__str__","text":"Return the formula result as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the formula result as a string.\"\"\" return self . Result or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.HostedFile","text":"A Notion file object.","title":"HostedFile"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.HostedFile.file","text":"","title":"file"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.LastEditedBy","text":"A Notion last-edited-by property value.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.LastEditedBy.__str__","text":"Return the contents of this property as a string. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . last_edited_by )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.LastEditedTime","text":"A Notion last-edited-time property value.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionData","text":"Base class for typed Mention data objects.","title":"MentionData"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDatabase","text":"Nested database information for Mention properties.","title":"MentionDatabase"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDatabase.database","text":"","title":"database"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDatabase.__compose__","text":"Build a Mention object for the specified database reference. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page ): \"\"\"Build a `Mention` object for the specified database reference.\"\"\" ref = ObjectReference [ page ] return MentionObject ( plain_text = str ( ref ), mention = MentionDatabase ( database = ref ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDate","text":"Nested date data for Mention properties.","title":"MentionDate"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionDate.__compose__","text":"Build a Mention object for the specified URL. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Build a `Mention` object for the specified URL.\"\"\" date_obj = DateRange ( start = start , end = end ) return MentionObject ( plain_text = str ( date_obj ), mention = MentionDate ( date = date_obj ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionLinkPreview","text":"Nested url data for Mention properties. These objects cannot be created via the API.","title":"MentionLinkPreview"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionLinkPreview.link_preview","text":"","title":"link_preview"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionObject","text":"Notion mention element.","title":"MentionObject"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionObject.mention","text":"","title":"mention"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionPage","text":"Nested page data for Mention properties.","title":"MentionPage"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionPage.page","text":"","title":"page"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionPage.__compose__","text":"Build a Mention object for the specified page reference. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page_ref ): \"\"\"Build a `Mention` object for the specified page reference.\"\"\" ref = ObjectReference [ page_ref ] return MentionObject ( plain_text = str ( ref ), mention = MentionPage ( page = ref ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplate","text":"Nested template data for Mention properties.","title":"MentionTemplate"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplate.template_mention","text":"","title":"template_mention"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplateData","text":"Nested template data for Mention properties.","title":"MentionTemplateData"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplateDate","text":"Nested date template data for Mention properties.","title":"MentionTemplateDate"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplateDate.template_mention_date","text":"","title":"template_mention_date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplateUser","text":"Nested user template data for Mention properties.","title":"MentionTemplateUser"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionTemplateUser.template_mention_user","text":"","title":"template_mention_user"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionUser","text":"Nested user data for Mention properties.","title":"MentionUser"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionUser.user","text":"","title":"user"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MentionUser.__compose__","text":"Build a Mention object for the specified user. The id field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , user : User ): \"\"\"Build a `Mention` object for the specified user. The `id` field must be set for the given User. Other fields may cause errors if they do not match the specific type returned from the API. \"\"\" return MentionObject ( plain_text = str ( user ), mention = MentionUser ( user = user ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect","text":"Notion multi-select type.","title":"MultiSelect"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.Values","text":"Return the names of each value in this MultiSelect as a list.","title":"Values"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__compose__","text":"Initialize a new MultiSelect from the given value(s). Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * values ): \"\"\"Initialize a new MultiSelect from the given value(s).\"\"\" select = [ SelectValue [ value ] for value in values if value is not None ] return cls ( multi_select = select )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__contains__","text":"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , name ): \"\"\"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. \"\"\" for opt in self . multi_select : if opt . name == name : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__getitem__","text":"Return the SelectValue object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the SelectValue object at the given index.\"\"\" if self . multi_select is None : raise IndexError ( \"empty property\" ) if index > len ( self . multi_select ): raise IndexError ( \"index out of range\" ) return self . multi_select [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__iadd__","text":"Add the given option to this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , other ): \"\"\"Add the given option to this MultiSelect.\"\"\" if other in self : raise ValueError ( f \"Duplicate item: { other } \" ) self . append ( other ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__isub__","text":"Remove the given value from this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , other ): \"\"\"Remove the given value from this MultiSelect.\"\"\" if other not in self : raise ValueError ( f \"No such item: { other } \" ) self . remove ( other ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__iter__","text":"Iterate over the SelectValue's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the SelectValue's in this property.\"\"\" if self . multi_select is None : return None return iter ( self . multi_select )","title":"__iter__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__len__","text":"Count the number of selected values. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Count the number of selected values.\"\"\" return len ( self . multi_select )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ( self . Values )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.append","text":"Add selected values to this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def append ( self , * values ): \"\"\"Add selected values to this MultiSelect.\"\"\" for value in values : if value is None : raise ValueError ( \"'None' is an invalid value\" ) if value not in self : self . multi_select . append ( SelectValue [ value ])","title":"append()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.MultiSelect.remove","text":"Remove selected values from this MultiSelect. Source code in src/ultimate_notion/obj_api/types.py def remove ( self , * values ): \"\"\"Remove selected values from this MultiSelect.\"\"\" self . multi_select = [ opt for opt in self . multi_select if opt . name not in values ]","title":"remove()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin","text":"Mixin class for properties that can be represented as native Python types.","title":"NativeTypeMixin"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin.Value","text":"Get the current value of this property as a native Python type.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin.__compose__","text":"Build the property value from the native Python value. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Build the property value from the native Python value.\"\"\" # use type-name field to instantiate the class when possible if hasattr ( cls , \"type\" ): return cls ( ** { cls . type : value }) raise NotImplementedError ()","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin.__eq__","text":"Determine if this property is equal to the given object. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object.\"\"\" # if `other` is a NativeTypeMixin, this comparrison will call __eq__ on that # object using this objects `Value` as the value for `other` (allowing callers # to compare using either native types or NativeTypeMixin's) return other == self . Value","title":"__eq__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin.__ne__","text":"Determine if this property is not equal to the given object. Source code in src/ultimate_notion/obj_api/types.py def __ne__ ( self , other ): \"\"\"Determine if this property is not equal to the given object.\"\"\" return not self . __eq__ ( other )","title":"__ne__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NativeTypeMixin.__str__","text":"Return a string representation of this object. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" value = self . Value if value is None : return \"\" return str ( value )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number","text":"Simple number type.","title":"Number"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.Value","text":"Get the current value of this property as a native Python number.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__add__","text":"Add the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __add__ ( self , other ): \"\"\"Add the value of `other` and returns the result as a Number.\"\"\" return Number [ other + self . Value ]","title":"__add__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__float__","text":"Return the Number as a float . Source code in src/ultimate_notion/obj_api/types.py def __float__ ( self ): \"\"\"Return the Number as a `float`.\"\"\" if self . number is None : raise ValueError ( \"Cannot convert 'None' to float\" ) return float ( self . number )","title":"__float__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__ge__","text":"Return True if this Number is greater-than-or-equal-to other . Source code in src/ultimate_notion/obj_api/types.py def __ge__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than-or-equal-to `other`.\"\"\" return self > other or self == other","title":"__ge__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__gt__","text":"Return True if this Number is greater-than other . Source code in src/ultimate_notion/obj_api/types.py def __gt__ ( self , other ): \"\"\"Return `True` if this `Number` is greater-than `other`.\"\"\" return other < self . Value","title":"__gt__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__iadd__","text":"Add the given value to this Number. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" if isinstance ( other , Number ): self . number += other . Value else : self . number += other return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__int__","text":"Return the Number as an int . Source code in src/ultimate_notion/obj_api/types.py def __int__ ( self ): \"\"\"Return the Number as an `int`.\"\"\" if self . number is None : raise ValueError ( \"Cannot convert 'None' to int\" ) return int ( self . number )","title":"__int__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__isub__","text":"Subtract the given value from this Number. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" if isinstance ( other , Number ): self . number -= other . Value else : self . number -= other return self","title":"__isub__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__le__","text":"Return True if this Number is less-than-or-equal-to other . Source code in src/ultimate_notion/obj_api/types.py def __le__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than-or-equal-to `other`.\"\"\" return self < other or self == other","title":"__le__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__lt__","text":"Return True if this Number is less-than other . Source code in src/ultimate_notion/obj_api/types.py def __lt__ ( self , other ): \"\"\"Return `True` if this `Number` is less-than `other`.\"\"\" return other > self . Value","title":"__lt__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__mul__","text":"Multiply the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __mul__ ( self , other ): \"\"\"Multiply the value of `other` and returns the result as a Number.\"\"\" return Number [ other * self . Value ]","title":"__mul__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Number.__sub__","text":"Subtract the value of other and returns the result as a Number. Source code in src/ultimate_notion/obj_api/types.py def __sub__ ( self , other ): \"\"\"Subtract the value of `other` and returns the result as a Number.\"\"\" return Number [ self . Value - float ( other )]","title":"__sub__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NumberFormula","text":"A Notion number formula result.","title":"NumberFormula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NumberFormula.Result","text":"Return the result of this NumberFormula.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.NumberFormula.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ObjectReference","text":"A general-purpose object reference in the Notion API.","title":"ObjectReference"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ObjectReference.URL","text":"Return the Notion URL for this object reference. Note: this is a convenience property only. It does not guarantee that the URL exists or that it is accessible by the integration.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ObjectReference.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ObjectReference.__compose__","text":"Compose an ObjectReference from the given reference. ref may be a UUID , str , ParentRef or GenericObject with an id . Strings may be either UUID's or URL's to Notion content. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , ref ): \"\"\"Compose an ObjectReference from the given reference. `ref` may be a `UUID`, `str`, `ParentRef` or `GenericObject` with an `id`. Strings may be either UUID's or URL's to Notion content. \"\"\" if isinstance ( ref , cls ): return ref . copy ( deep = True ) if isinstance ( ref , ParentRef ): # ParentRef's are typed-objects with a nested UUID return ObjectReference ( id = ref ()) if isinstance ( ref , GenericObject ) and hasattr ( ref , \"id\" ): # re-compose the ObjectReference from the internal ID return ObjectReference [ ref . id ] if isinstance ( ref , UUID ): return ObjectReference ( id = ref ) if isinstance ( ref , str ): ref = util . extract_id_from_string ( ref ) if ref is not None : return ObjectReference ( id = UUID ( ref )) raise ValueError ( \"Unrecognized 'ref' attribute\" )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PageRef","text":"Reference a page.","title":"PageRef"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PageRef.page_id","text":"","title":"page_id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PageRef.__compose__","text":"Compose a PageRef from the given reference object. page_ref can be either a string, UUID, or page. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , page_ref ): \"\"\"Compose a PageRef from the given reference object. `page_ref` can be either a string, UUID, or page. \"\"\" ref = ObjectReference [ page_ref ] return PageRef ( page_id = ref . id )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.ParentRef","text":"Reference another block as a parent.","title":"ParentRef"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People","text":"Notion people type.","title":"People"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.__contains__","text":"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , other ): \"\"\"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). \"\"\" for user in self . people : if user == other : return True if user . name == other : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.__getitem__","text":"Return the People object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the People object at the given index.\"\"\" if self . people is None : raise IndexError ( \"empty property\" ) if index > len ( self . people ): raise IndexError ( \"index out of range\" ) return self . people [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.__iter__","text":"Iterate over the User's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the User's in this property.\"\"\" if self . people is None : return None return iter ( self . people )","title":"__iter__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.__len__","text":"Return the number of People in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of People in this property.\"\"\" return len ( self . people )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.People.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ([ str ( user ) for user in self . people ])","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PhoneNumber","text":"Notion phone type.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PropertyItem","text":"A PropertyItem returned by the Notion API. Basic property items have a similar schema to corresponding property values. As a result, these items share the PropertyValue type definitions. This class provides a placeholder for parsing property items, however objects parse by this class will likely be PropertyValue 's instead.","title":"PropertyItem"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PropertyValue","text":"Base class for Notion property values.","title":"PropertyValue"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.PropertyValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation","text":"A Notion relation property value.","title":"Relation"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.has_more","text":"","title":"has_more"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__compose__","text":"Return a Relation property with the specified pages. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" return cls ( relation = [ ObjectReference [ page ] for page in pages ])","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__contains__","text":"Determine if the given page is in this Relation. Source code in src/ultimate_notion/obj_api/types.py def __contains__ ( self , page ): \"\"\"Determine if the given page is in this Relation.\"\"\" return ObjectReference [ page ] in self . relation","title":"__contains__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__getitem__","text":"Return the ObjectReference object at the given index. Source code in src/ultimate_notion/obj_api/types.py def __getitem__ ( self , index ): \"\"\"Return the ObjectReference object at the given index.\"\"\" if self . relation is None : raise IndexError ( \"empty property\" ) if index > len ( self . relation ): raise IndexError ( \"index out of range\" ) return self . relation [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__iadd__","text":"Add the given page to this Relation in place. Source code in src/ultimate_notion/obj_api/types.py def __iadd__ ( self , page ): \"\"\"Add the given page to this Relation in place.\"\"\" ref = ObjectReference [ page ] if ref in self . relation : raise ValueError ( f \"Duplicate item: { ref . id } \" ) self . relation . append ( ref ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__isub__","text":"Remove the given page from this Relation in place. Source code in src/ultimate_notion/obj_api/types.py def __isub__ ( self , page ): \"\"\"Remove the given page from this Relation in place.\"\"\" ref = ObjectReference [ page ] if ref in self . relation : raise ValueError ( f \"No such item: { ref . id } \" ) self . relation . remove ( ref ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__iter__","text":"Iterate over the ObjectReference's in this property. Source code in src/ultimate_notion/obj_api/types.py def __iter__ ( self ): \"\"\"Iterate over the ObjectReference's in this property.\"\"\" if self . relation is None : return None return iter ( self . relation )","title":"__iter__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Relation.__len__","text":"Return the number of ObjectReference's in this property. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of ObjectReference's in this property.\"\"\" return len ( self . relation )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RichText","text":"Notion rich text type.","title":"RichText"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RichText.Value","text":"Return the plain text from this RichText.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RichText.__compose__","text":"Create a new RichText property from the given strings. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * text ): \"\"\"Create a new `RichText` property from the given strings.\"\"\" return cls ( rich_text = rich_text ( * text ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RichText.__len__","text":"Return the number of object in the RichText object. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of object in the RichText object.\"\"\" return len ( self . rich_text )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Rollup","text":"A Notion rollup property value.","title":"Rollup"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Rollup.__str__","text":"Return a string representation of this Rollup property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this Rollup property.\"\"\" if self . rollup is None : return \"\" value = self . rollup . Value if value is None : return \"\" return str ( value )","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupArray","text":"A Notion rollup array property value.","title":"RollupArray"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupArray.Value","text":"Return the native representation of this Rollup object.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupArray.array","text":"","title":"array"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupDate","text":"A Notion rollup date property value.","title":"RollupDate"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupDate.Value","text":"Return the native representation of this Rollup object.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupNumber","text":"A Notion rollup number property value.","title":"RollupNumber"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupNumber.Value","text":"Return the native representation of this Rollup object.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupNumber.number","text":"","title":"number"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupObject","text":"A Notion rollup property value.","title":"RollupObject"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupObject.Value","text":"Return the native representation of this Rollup object.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.RollupObject.function","text":"","title":"function"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne","text":"Notion select type.","title":"SelectOne"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne.Value","text":"Return the value of this property as a string.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne.select","text":"","title":"select"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne.__compose__","text":"Create a SelectOne property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value , color = None ): \"\"\"Create a `SelectOne` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" return cls ( select = SelectValue [ value , color ])","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne.__eq__","text":"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. \"\"\" if other is None : return self . select is None return other == self . select . name","title":"__eq__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectOne.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue","text":"Values for select & multi-select properties.","title":"SelectValue"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue.color","text":"","title":"color"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue.__compose__","text":"Create a SelectValue property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , value , color = None ): \"\"\"Create a `SelectValue` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" return cls ( name = value , color = color )","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.SelectValue.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status","text":"Notion status property.","title":"Status"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status.Value","text":"Return the value of this property as a string.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status.__compose__","text":"Create a Status property from the given name. :param name: a string to use for this property :param color: an optional Color for the status Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , name , color = None ): \"\"\"Create a `Status` property from the given name. :param name: a string to use for this property :param color: an optional Color for the status \"\"\" if name is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( status = Status . _NestedData ( name = name , color = color ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status.__eq__","text":"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. Source code in src/ultimate_notion/obj_api/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. \"\"\" if other is None : return self . status is None if isinstance ( other , Status ): return self . status . name == other . status . name return self . status . name == other","title":"__eq__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Status.__str__","text":"Return a string representation of this property. Source code in src/ultimate_notion/obj_api/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.StringFormula","text":"A Notion string formula result.","title":"StringFormula"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.StringFormula.Result","text":"Return the result of this StringFormula.","title":"Result"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.StringFormula.string","text":"","title":"string"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Title","text":"Notion title type.","title":"Title"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Title.Value","text":"Return the plain text from this Title.","title":"Value"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Title.__compose__","text":"Create a new Title property from the given text elements. Source code in src/ultimate_notion/obj_api/types.py @classmethod def __compose__ ( cls , * text ): \"\"\"Create a new `Title` property from the given text elements.\"\"\" return cls ( title = rich_text ( * text ))","title":"__compose__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.Title.__len__","text":"Return the number of object in the Title object. Source code in src/ultimate_notion/obj_api/types.py def __len__ ( self ): \"\"\"Return the number of object in the Title object.\"\"\" return len ( self . title )","title":"__len__()"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.URL","text":"Notion URL type.","title":"URL"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.WorkspaceRef","text":"Reference the workspace.","title":"WorkspaceRef"},{"location":"reference/ultimate_notion/obj_api/types/#ultimate_notion.obj_api.types.WorkspaceRef.workspace","text":"","title":"workspace"},{"location":"reference/ultimate_notion/obj_api/user/","text":"user \u00b6 Wrapper for Notion user objects. Bot \u00b6 Represents a Bot in Notion. bot : _NestedData = None class-attribute instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Bot . Source code in src/ultimate_notion/obj_api/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Bot`.\"\"\" return f \"[% { self . name } ]\" Person \u00b6 Represents a Person in Notion. person : _NestedData = None class-attribute instance-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Person . Source code in src/ultimate_notion/obj_api/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Person`.\"\"\" return f \"[@ { self . name } ]\" User \u00b6 Represents a User in Notion. avatar_url : Optional [ str ] = None class-attribute instance-attribute \u00b6 name : Optional [ str ] = None class-attribute instance-attribute \u00b6 type : Optional [ UserType ] = None class-attribute instance-attribute \u00b6 parse_obj ( obj ) classmethod \u00b6 Attempt to parse the given object data into the correct User type. Source code in src/ultimate_notion/obj_api/user.py @classmethod def parse_obj ( cls , obj ): \"\"\"Attempt to parse the given object data into the correct `User` type.\"\"\" if obj is None : return None if \"type\" in obj : if obj [ \"type\" ] == \"person\" : return Person ( ** obj ) if obj [ \"type\" ] == \"bot\" : return Bot ( ** obj ) return cls ( obj ) UserType \u00b6 Available user types. BOT = 'bot' class-attribute instance-attribute \u00b6 PERSON = 'person' class-attribute instance-attribute \u00b6","title":"User"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user","text":"Wrapper for Notion user objects.","title":"user"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Bot","text":"Represents a Bot in Notion.","title":"Bot"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Bot.bot","text":"","title":"bot"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Bot.__str__","text":"Return a string representation of this Bot . Source code in src/ultimate_notion/obj_api/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Bot`.\"\"\" return f \"[% { self . name } ]\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Person","text":"Represents a Person in Notion.","title":"Person"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Person.person","text":"","title":"person"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.Person.__str__","text":"Return a string representation of this Person . Source code in src/ultimate_notion/obj_api/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Person`.\"\"\" return f \"[@ { self . name } ]\"","title":"__str__()"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.User","text":"Represents a User in Notion.","title":"User"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.User.type","text":"","title":"type"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.User.parse_obj","text":"Attempt to parse the given object data into the correct User type. Source code in src/ultimate_notion/obj_api/user.py @classmethod def parse_obj ( cls , obj ): \"\"\"Attempt to parse the given object data into the correct `User` type.\"\"\" if obj is None : return None if \"type\" in obj : if obj [ \"type\" ] == \"person\" : return Person ( ** obj ) if obj [ \"type\" ] == \"bot\" : return Bot ( ** obj ) return cls ( obj )","title":"parse_obj()"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.UserType","text":"Available user types.","title":"UserType"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.UserType.BOT","text":"","title":"BOT"},{"location":"reference/ultimate_notion/obj_api/user/#ultimate_notion.obj_api.user.UserType.PERSON","text":"","title":"PERSON"},{"location":"reference/ultimate_notion/obj_api/util/","text":"util \u00b6 Utility methods for Notional. block_url_long_re = re . compile ( f '^ \\n { _base_url_pattern } \\n (?P<username>.*)/ \\n (?P<title>.*)- \\n (?P<page_id> { _uuid_pattern } ) \\n \\\\ #(?P<block_id> { _uuid_pattern } ) \\n $' , flags = re . IGNORECASE | re . VERBOSE ) module-attribute \u00b6 page_url_long_re = re . compile ( f '^ \\n { _base_url_pattern } \\n (?P<title>.*)- \\n (?P<page_id> { _uuid_pattern } ) \\n $' , flags = re . IGNORECASE | re . VERBOSE ) module-attribute \u00b6 page_url_short_re = re . compile ( f '^ \\n { _base_url_pattern } \\n (?P<page_id> { _uuid_pattern } ) \\n $' , flags = re . IGNORECASE | re . VERBOSE ) module-attribute \u00b6 uuid_re = re . compile ( f '^(?P<id> { _uuid_pattern } )$' ) module-attribute \u00b6 extract_id_from_string ( string ) \u00b6 Examine the given string to find a valid Notion object ID. Source code in src/ultimate_notion/obj_api/util.py def extract_id_from_string ( string ): \"\"\"Examine the given string to find a valid Notion object ID.\"\"\" m = uuid_re . match ( string ) if m is not None : return m . group ( \"id\" ) m = page_url_long_re . match ( string ) if m is not None : return m . group ( \"page_id\" ) m = page_url_short_re . match ( string ) if m is not None : return m . group ( \"page_id\" ) m = block_url_long_re . match ( string ) if m is not None : return m . group ( \"block_id\" ) return None","title":"Util"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util","text":"Utility methods for Notional.","title":"util"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.block_url_long_re","text":"","title":"block_url_long_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.page_url_long_re","text":"","title":"page_url_long_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.page_url_short_re","text":"","title":"page_url_short_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.uuid_re","text":"","title":"uuid_re"},{"location":"reference/ultimate_notion/obj_api/util/#ultimate_notion.obj_api.util.extract_id_from_string","text":"Examine the given string to find a valid Notion object ID. Source code in src/ultimate_notion/obj_api/util.py def extract_id_from_string ( string ): \"\"\"Examine the given string to find a valid Notion object ID.\"\"\" m = uuid_re . match ( string ) if m is not None : return m . group ( \"id\" ) m = page_url_long_re . match ( string ) if m is not None : return m . group ( \"page_id\" ) m = page_url_short_re . match ( string ) if m is not None : return m . group ( \"page_id\" ) m = block_url_long_re . match ( string ) if m is not None : return m . group ( \"block_id\" ) return None","title":"extract_id_from_string()"}]}