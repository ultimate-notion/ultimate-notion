{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u200b","text":"<p>Ultimate Notion is the ultimate Python client for Notion! It allows you to access and modify your Notion databases and pages in the most convenient and pythonic way. Under Features you will find the current status of the implemented functionality. Ultimate Notion is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released. Shortcuts can be used for navigation, i.e. ,/p and ./n for previous and next page, respectively, as well as //s for searching.</p>"},{"location":"authors/","title":"Authors","text":""},{"location":"authors/#contributors","title":"Contributors","text":"<ul> <li>Florian Wilhelm</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#version-04","title":"Version 0.4","text":"<ul> <li>New: Introduce a configuration file under <code>~/.ultimate-notion/config.toml</code>.</li> <li>New: Added a simple Google Tasks client.</li> </ul>"},{"location":"changelog/#version-03-2023-12-26","title":"Version 0.3, 2023-12-26","text":"<ul> <li>Chg: <code>RichText</code> is now a subtype of <code>str</code> for more convenient &amp; consistent usage.</li> <li>Docs: Added more documentation about using databases.</li> <li>Chg: <code>icon</code> attribute of database now returns <code>Emoji</code> instead of <code>str</code>.</li> <li>New: Allow setting the <code>icon</code> and <code>cover</code> attribute of a page.</li> <li>New: Allow setting the <code>title</code> of a non-database page.</li> <li>Fix: <code>created_by</code> and <code>last_edited_by</code> return proper <code>User</code> object.</li> </ul>"},{"location":"changelog/#version-02-2023-12-19","title":"Version 0.2, 2023-12-19","text":"<ul> <li>Fix: Notion API's undocumented <code>description</code> of <code>SelectOption</code> added.</li> <li>New: Navigate pages using <code>parent</code> and <code>children</code>.</li> <li>Chg: Rename <code>parents</code> to <code>ancestors</code>.</li> <li>Fix: Wrong return value of PropertyType <code>Status.value</code>.</li> <li>Chg: Make <code>show</code> consistent for Page, View, PageSchema.</li> <li>Ref: Refactor <code>value</code> in <code>PropertyValue</code>.</li> <li>Ref: Reduce unnecessary funtionality of <code>Number</code>, use <code>value</code> instead.</li> </ul>"},{"location":"changelog/#version-01-2023-12-16","title":"Version 0.1, 2023-12-16","text":"<ul> <li>First official alpha release.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Welcome to the contributor guide of Ultimate Notion.</p> <p>This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated.</p> <p>If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org. Other resources are also listed in the excellent guide created by FreeCodeCamp <sup>1</sup>.</p> <p>Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful. When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.</p>"},{"location":"contributing/#issue-reports","title":"Issue Reports","text":"<p>If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker. If you don't see anything useful there, please feel free to fire an issue report.</p> <p>Tip</p> <p>Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved.</p> <p>New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.</p>"},{"location":"contributing/#documentation-improvements","title":"Documentation improvements","text":"<p>You can help improve the documentation of Ultimate Notion by making them more readable and coherent, or by adding missing information and correcting mistakes.</p> <p>This documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution.</p> <p>Tip</p> <p>Please notice that the GitHub web interface provides a quick way for   proposing changes. While this mechanism can  be tricky for normal code contributions,   it works perfectly fine for contributing to the docs, and can be quite handy.   If you are interested in trying this method out, please navigate to   the <code>docs</code> folder in the source repository, find which file you   would like to propose changes and click in the little pencil icon at the   top, to open GitHub's code editor. Once you finish editing the file,   please write a message in the form at the bottom of the page describing   which changes have you made and what are the motivations behind them and   submit your proposal.</p> <p>When working on documentation changes in your local machine, you can build and serve them using hatch with <code>hatch run docs:build</code> and <code>hatch run docs:serve</code>, respectively.</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":""},{"location":"contributing/#submit-an-issue","title":"Submit an issue","text":"<p>Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.</p>"},{"location":"contributing/#clone-the-repository","title":"Clone the repository","text":"<ol> <li> <p>Create a user account on GitHub if you do not already have one.</p> </li> <li> <p>Fork the project repository: click on the Fork button near the top of the    page. This creates a copy of the code under your account on GitHub.</p> </li> <li> <p>Clone this copy to your local disk:</p> </li> </ol> <pre><code>git clone git@github.com:YourLogin/ultimate-notion.git\ncd ultimate-notion\n</code></pre> <ol> <li>Make sure hatch and pre-commit is installed using pipx:</li> </ol> <pre><code>pipx install hatch\npipx install pre-commit\n</code></pre> <ol> <li>Optionally run <code>hatch config set dirs.env.virtual .direnv</code> to let    VS Code find your virtual environments. If you are using VS Code,    then it's quite convenient to add a file <code>.vscode/.env</code> in your checkout with:</li> </ol> <pre><code>NOTION_TOKEN=secret_YOUR_TOKEN_TO_YOUR_TEST_NOTION_ACCOUNT\nULTIMATE_NOTION_CONFIG=/path/to/repo/.ultimate-notion/config.toml\n</code></pre> <p>These settings will also be respected by pytest using pytest-dotenv.</p>"},{"location":"contributing/#implement-your-changes","title":"Implement your changes","text":"<ol> <li>Create a branch to hold your changes:</li> </ol> <pre><code>git checkout -b my-feature\n</code></pre> <p>and start making changes. Never work on the main branch!</p> <ol> <li> <p>Start your work on this branch. Don't forget to add docstrings in Google style    to new functions, modules and classes, especially if they are part of public APIs.</p> </li> <li> <p>Check that your changes don't break any unit tests with <code>hatch run vcr-only</code> for tests    that do not generate calls to the Notion API or  <code>hatch run test</code> for new tests generating API calls.</p> </li> <li> <p>Run <code>hatch run lint:all</code> and <code>hatch run lint:fix</code> to check the code with ruff &amp; mypy    and automatically fix ruff issues if possible.</p> </li> <li> <p>Add yourself to the list of contributors in <code>AUTHORS.md</code>.</p> </li> <li> <p>When you\u2019re done editing, do:</p> </li> </ol> <pre><code>git add &lt;MODIFIED FILES&gt;\ngit commit\n</code></pre> <p>to record your changes in git.</p> <p>Please make sure you see the validation messages from pre-commit and fix and remaining issues.</p> <pre><code>!!! info\n    Don't forget to add unit tests and documentation in case your\n    contribution adds a feature and is not just a bugfix.\n\n    Moreover, writing an [descriptive commit message] is highly recommended.\n    In case of doubt, you can check the commit history with:\n    ```\n    git log --graph --decorate --pretty=oneline --abbrev-commit --all\n    ```\n    to look for recurring communication patterns.\n</code></pre>"},{"location":"contributing/#submit-your-contribution","title":"Submit your contribution","text":"<ol> <li>If everything works fine, push your local branch to the remote server with:</li> </ol> <pre><code>git push -u origin my-feature\n</code></pre> <ol> <li>Go to the web page of your fork and click \"Create pull request\"    to send your changes for review.</li> </ol> <p>Find more detailed information in creating a PR. You might also want to open    the PR as a draft first and mark it as ready for review after the feedbacks    from the continuous integration (CI) system or any required fixes.</p> <ol> <li> <p>Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases.\u00a0\u21a9</p> </li> </ol>"},{"location":"features/","title":"Features","text":"<p>Some of the feature listed here, loosely correspond to the features of the endpoints defined in the Notion API. Please note that a slightly different terminology is used. Since the term properties is highly overloaded, we call the properties of a database schema and refer to the individual properties as columns. With page properties, we denote only the properties of a page within a database that correspond to the columns of the schema. In contrast to that, the properties that every page has, e.g. title, icon, last edited by/time, etc., are called page attributes.</p>"},{"location":"features/#databases","title":"Databases","text":"<ul> <li> retrieve a database by its ID</li> <li> search for a database by its title</li> <li> create a new database with a given schema, i.e. columns and their types</li> <li> delete/archive and restore/unarchive a database</li> <li> update a database schema, i.e. adding/removing columns or changing their types</li> <li> change the properties of database columns, e.g. name, formula of formula column, options, etc.</li> <li> read the database attributes like title, description, cover, icon, etc.</li> <li> change database attributes like title, description, etc.</li> <li> retrieve all pages of a database</li> <li> query with filters and sortings to retrieve only specific pages</li> <li> display the content of a database as a table, e.g. in Jupyter Lab</li> <li> create new pages with properties within the database respecting the schema</li> </ul>"},{"location":"features/#pages","title":"Pages","text":"<ul> <li> retrieve a page by its ID</li> <li> search for a page by its title</li> <li> create a new page</li> <li> delete/archive and restore/unarchive a page</li> <li> read page attributes like title, cover, icon, etc.</li> <li> change page attributes like title, cover, icon, etc.</li> <li> read page properties defined by a database schema</li> <li> change page properties</li> <li> navigate pages using parent and children links</li> <li> read the blocks within a page</li> <li> add/remove and modify the blocks within a page</li> <li> view the content of a page as Markdown</li> </ul>"},{"location":"features/#blocks","title":"Blocks","text":"<ul> <li> navigate blocks using references of parent and children</li> <li> create blocks within a page or another block</li> <li> modify blocks</li> </ul>"},{"location":"features/#users","title":"Users","text":"<ul> <li> retrieve a user by their ID</li> <li> retrieve own bot user, i.e. self-identify</li> <li> retrieve all users</li> <li> read the attributes of a user</li> </ul>"},{"location":"features/#comments","title":"Comments","text":"<ul> <li> create a comment within a block or page</li> <li> retrieve comments of a block or page</li> </ul>"},{"location":"features/#notion-api-limitations","title":"Notion API Limitations","text":"<p>Some features that the Notion UI provides are not possible to implement due to limitations of the API itself.</p> <ul> <li>creating a Status column or updating the options as well as option groups. Sending an Status column within a create   database call is currently accepted but just ignored, i.e. a database without the column will show up.</li> <li>creating a Unique ID column or updating its properties like the prefix. This column type is not even mentioned   as one of the database properties.</li> <li>creating a Wiki database which has a special Verification column.</li> <li>updating the database schema with respect to the options of a select/multi-select column, the formula of a   formula column, and synced content.</li> <li>referencing in a formula expression another formula column, e.g. <code>prop(\"other formula\")</code>. Use substitution instead.</li> <li>creating a two-way relation with the same source and target database, i.e. self-referencing. The update database call   is currently accepted but only a one-way relation created, which seems to be a bug.</li> <li>uploading files as icons or in general uploading files.</li> <li>setting the icon and cover of a database.</li> </ul> <p>If you think those limitations should be fixed, let the developers of Notion know \ud83d\ude06</p>"},{"location":"license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2022 Florian Wilhelm</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"examples/getting_started/","title":"Connecting to Notion","text":"<pre><code>\"\"\"This example demonstrates how to create an Ultimate Notion session\"\"\"\n\nimport ultimate_notion as uno\n\nPAGE_TITLE = \"Getting Started\"\n\nwith uno.Session() as notion:\n    page = notion.search_page(PAGE_TITLE).item()\n    page.show()\n\n# Alternatively, without a context manager:\nnotion = uno.Session()\npage = notion.search_page(PAGE_TITLE).item()\npage.show()\nnotion.close()\n</code></pre>"},{"location":"examples/simple_taskdb/","title":"Simple task list","text":"<pre><code>\"\"\"This example demonstrates how to create a simple task list\"\"\"\n\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom ultimate_notion import (\n    Color,\n    ColType,\n    Column,\n    Option,\n    OptionNS,\n    PageSchema,\n    Session,\n)\n\nPARENT_PAGE = \"Tests\"  # Defines the page where the database should be created\ntoday = datetime.now(tz=ZoneInfo(\"Europe/Berlin\"))\n\n\nclass Status(OptionNS):\n    backlog = Option(\"Backlog\", color=Color.GRAY)\n    in_progress = Option(\"In Progress\", color=Color.BLUE)\n    blocked = Option(\"Blocked\", color=Color.RED)\n    done = Option(\"Done\", color=Color.GREEN)\n\n\nclass Priority(OptionNS):\n    high = Option(\"\u2739 High\", color=Color.RED)\n    medium = Option(\"\u2737 Medium\", color=Color.YELLOW)\n    low = Option(\"\u2736 Low\", color=Color.GRAY)\n\n\n# assembling the formula to show the urgency of the task\ndays_left = (\n    'if(empty(prop(\"Due Date\")), toNumber(\"\"), '\n    'dateBetween(prop(\"Due Date\"), now(), \"days\"))'\n)\nweeks_left = f\"(if((({days_left}) &lt; 0), -1, 1)) * floor(abs(({days_left}) / 7))\"\ntime_left = (\n    f'if(empty(({days_left})), \"\", (((if((({days_left}) &lt; 0), \"-\", \"\")) + '\n    f'(if((({weeks_left}) == 0), \"\", (format(abs(({weeks_left}))) + \"w\")))) + '\n    f'(if(((({days_left}) % 7) == 0), \"\", (format(abs(({days_left})) % 7) + '\n    '\"d\")))))'\n)\nurgency = (\n    'if(prop(\"Status\") == \"Done\", \"\u2705\", (if(empty(prop(\"Due Date\")), \"\", '\n    '(if((formatDate(now(), \"YWD\") == formatDate(prop(\"Due Date\"), \"YWD\")), '\n    f'\"\ud83d\udd39 Today\", (if(now() &gt; prop(\"Due Date\"), \"\ud83d\udd25 \" + {time_left}, \"\ud83d\udd50 \" '\n    f\"+ {time_left})))))))\"\n)\n\n\nclass Task(PageSchema, db_title=\"My task list\"):\n    \"\"\"My personal task list of all the important stuff I have to do\"\"\"\n\n    task = Column(\"Task\", ColType.Title())\n    status = Column(\"Status\", ColType.Select(Status))\n    priority = Column(\"Priority\", ColType.Select(Priority))\n    urgency = Column(\"Urgency\", ColType.Formula(urgency))\n    due_date = Column(\"Due Date\", ColType.Date())\n\n\nwith Session() as notion:\n    parent = notion.search_page(PARENT_PAGE).item()\n    task_db = notion.create_db(parent=parent, schema=Task)\n\n    # just create 10 random tasks for demonstration\n    Task.create(\n        task=\"Plan vacation\",\n        due_date=today + timedelta(weeks=3, days=3),\n        status=Status.backlog,\n        priority=Priority.high,\n    )\n    Task.create(\n        task=\"Read book about procastination\",\n        due_date=today + timedelta(weeks=2, days=2),\n        status=Status.backlog,\n        priority=Priority.medium,\n    )\n    Task.create(\n        task=\"Clean the house\",\n        due_date=today + timedelta(days=5),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n    Task.create(\n        task=\"Build tool with Ultimate Notion\",\n        due_date=today + timedelta(days=1),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n    Task.create(\n        task=\"Complete project report for work\",\n        due_date=today,\n        status=Status.in_progress,\n        priority=Priority.medium,\n    )\n    Task.create(\n        task=\"Call family\",\n        due_date=today - timedelta(days=1),\n        status=Status.done,\n        priority=Priority.low,\n    )\n    Task.create(\n        task=\"Pay yearly utility bills\",\n        due_date=today - timedelta(days=5),\n        status=Status.blocked,\n        priority=Priority.high,\n    )\n    Task.create(\n        task=\"Run first Marathon\",\n        due_date=today - timedelta(weeks=1, days=1),\n        status=Status.done,\n        priority=Priority.low,\n    )\n    Task.create(\n        task=\"Clearing out the cellar\",\n        due_date=today - timedelta(weeks=2, days=2),\n        status=Status.in_progress,\n        priority=Priority.low,\n    )\n\n    task_db.fetch_all().show()\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ultimate_notion<ul> <li>adapters<ul> <li>google<ul> <li>tasks</li> </ul> </li> </ul> </li> <li>blocks</li> <li>config</li> <li>database</li> <li>obj_api<ul> <li>blocks</li> <li>core</li> <li>endpoints</li> <li>enums</li> <li>iterator</li> <li>objects</li> <li>props</li> <li>query</li> <li>schema</li> </ul> </li> <li>objects</li> <li>page</li> <li>props</li> <li>schema</li> <li>session</li> <li>text</li> <li>utils</li> <li>view</li> </ul> </li> </ul>"},{"location":"reference/ultimate_notion/","title":"Reference","text":""},{"location":"reference/ultimate_notion/#ultimate_notion","title":"<code>ultimate_notion</code>","text":"<p>Ultimate Notion provides a pythonic, high-level API for Notion.</p> <p>Notion-API: https://developers.notion.com/reference/intro</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","title":"<code>__all__ = ['AggFunc', 'BGColor', 'CodeLang', 'Color', 'ColType', 'Column', 'Database', 'Emoji', 'File', 'NumberFormat', 'Option', 'OptionNS', 'Page', 'PageSchema', 'RichText', 'SelfRef', 'Session', 'User', 'VState', '__version__']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","title":"<code>__version__ = version('ultimate-notion')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc","title":"<code>AggFunc</code>","text":"<p>Aggregation functions for formulas.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.AVERAGE","title":"<code>AVERAGE = 'average'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.CHECKED","title":"<code>CHECKED = 'checked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT","title":"<code>COUNT = 'count'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_PER_GROUP","title":"<code>COUNT_PER_GROUP = 'count_per_group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.COUNT_VALUES","title":"<code>COUNT_VALUES = 'count_values'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.DATE_RANGE","title":"<code>DATE_RANGE = 'date_range'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.EARLIEST_DATE","title":"<code>EARLIEST_DATE = 'earliest_date'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.EMPTY","title":"<code>EMPTY = 'empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.LATEST_DATE","title":"<code>LATEST_DATE = 'latest_date'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MAX","title":"<code>MAX = 'max'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MEDIAN","title":"<code>MEDIAN = 'median'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.MIN","title":"<code>MIN = 'min'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.NOT_EMPTY","title":"<code>NOT_EMPTY = 'not_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_CHECKED","title":"<code>PERCENT_CHECKED = 'percent_checked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_EMPTY","title":"<code>PERCENT_EMPTY = 'percent_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_NOT_EMPTY","title":"<code>PERCENT_NOT_EMPTY = 'percent_not_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.PERCENT_PER_GROUP","title":"<code>PERCENT_PER_GROUP = 'percent_per_group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.RANGE","title":"<code>RANGE = 'range'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SHOW_ORIGINAL","title":"<code>SHOW_ORIGINAL = 'show_original'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SHOW_UNIQUE","title":"<code>SHOW_UNIQUE = 'show_unique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.SUM","title":"<code>SUM = 'sum'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.UNCHECKED","title":"<code>UNCHECKED = 'unchecked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.AggFunc.UNIQUE","title":"<code>UNIQUE = 'unique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor","title":"<code>BGColor</code>","text":"<p>Background colors for most textual blocks, e.g. paragraphs, callouts, etc.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.BLUE","title":"<code>BLUE = 'blue_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.BROWN","title":"<code>BROWN = 'brown_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.GRAY","title":"<code>GRAY = 'gray_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.GREEN","title":"<code>GREEN = 'green_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.ORANGE","title":"<code>ORANGE = 'orange_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.PINK","title":"<code>PINK = 'pink_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.PURPLE","title":"<code>PURPLE = 'purple_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.RED","title":"<code>RED = 'red_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.BGColor.YELLOW","title":"<code>YELLOW = 'yellow_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang","title":"<code>CodeLang</code>","text":"<p>Coding languages for code blocks.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ABAP","title":"<code>ABAP = 'abap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ARDUINO","title":"<code>ARDUINO = 'arduino'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.BASH","title":"<code>BASH = 'bash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.BASIC","title":"<code>BASIC = 'basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.C","title":"<code>C = 'c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CLOJURE","title":"<code>CLOJURE = 'clojure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.COFFEESCRIPT","title":"<code>COFFEESCRIPT = 'coffeescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CPP","title":"<code>CPP = 'c++'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CSHARP","title":"<code>CSHARP = 'c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.CSS","title":"<code>CSS = 'css'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DART","title":"<code>DART = 'dart'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DIFF","title":"<code>DIFF = 'diff'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.DOCKER","title":"<code>DOCKER = 'docker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ELIXIR","title":"<code>ELIXIR = 'elixir'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ELM","title":"<code>ELM = 'elm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.ERLANG","title":"<code>ERLANG = 'erlang'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FLOW","title":"<code>FLOW = 'flow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FORTRAN","title":"<code>FORTRAN = 'fortran'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.FSHARP","title":"<code>FSHARP = 'f#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GHERKIN","title":"<code>GHERKIN = 'gherkin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GLSL","title":"<code>GLSL = 'glsl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GO","title":"<code>GO = 'go'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GRAPHQL","title":"<code>GRAPHQL = 'graphql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.GROOVY","title":"<code>GROOVY = 'groovy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.HASKELL","title":"<code>HASKELL = 'haskell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.HTML","title":"<code>HTML = 'html'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JAVA","title":"<code>JAVA = 'java'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JAVASCRIPT","title":"<code>JAVASCRIPT = 'javascript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.JULIA","title":"<code>JULIA = 'julia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.KOTLIN","title":"<code>KOTLIN = 'kotlin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LATEX","title":"<code>LATEX = 'latex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LESS","title":"<code>LESS = 'less'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LISP","title":"<code>LISP = 'lisp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LIVESCRIPT","title":"<code>LIVESCRIPT = 'livescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.LUA","title":"<code>LUA = 'lua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MAKEFILE","title":"<code>MAKEFILE = 'makefile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MARKDOWN","title":"<code>MARKDOWN = 'markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MARKUP","title":"<code>MARKUP = 'markup'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MATLAB","title":"<code>MATLAB = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MERMAID","title":"<code>MERMAID = 'mermaid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.MISC","title":"<code>MISC = 'java/c/c++/c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.NIX","title":"<code>NIX = 'nix'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.OBJECTIVE_C","title":"<code>OBJECTIVE_C = 'objective-c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.OCAML","title":"<code>OCAML = 'ocaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PASCAL","title":"<code>PASCAL = 'pascal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PERL","title":"<code>PERL = 'perl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PHP","title":"<code>PHP = 'php'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PLAIN_TEXT","title":"<code>PLAIN_TEXT = 'plain text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.POWERSHELL","title":"<code>POWERSHELL = 'powershell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PROLOG","title":"<code>PROLOG = 'prolog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PROTOBUF","title":"<code>PROTOBUF = 'protobuf'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.PYTHON","title":"<code>PYTHON = 'python'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.R","title":"<code>R = 'r'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.REASON","title":"<code>REASON = 'reason'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.RUBY","title":"<code>RUBY = 'ruby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.RUST","title":"<code>RUST = 'rust'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SASS","title":"<code>SASS = 'sass'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCALA","title":"<code>SCALA = 'scala'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCHEME","title":"<code>SCHEME = 'scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SCSS","title":"<code>SCSS = 'scss'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SHELL","title":"<code>SHELL = 'shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SQL","title":"<code>SQL = 'sql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.SWIFT","title":"<code>SWIFT = 'swift'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.TYPESCRIPT","title":"<code>TYPESCRIPT = 'typescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VB_NET","title":"<code>VB_NET = 'vb.net'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VERILOG","title":"<code>VERILOG = 'verilog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VHDL","title":"<code>VHDL = 'vhdl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.VISUAL_BASIC","title":"<code>VISUAL_BASIC = 'visual basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.WEBASSEMBLY","title":"<code>WEBASSEMBLY = 'webassembly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.XML","title":"<code>XML = 'xml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.CodeLang.YAML","title":"<code>YAML = 'yaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType","title":"<code>ColType</code>","text":"<p>Namespace class of all columns types for easier access.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Checkbox","title":"<code>Checkbox = Checkbox</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.CreatedBy","title":"<code>CreatedBy = CreatedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.CreatedTime","title":"<code>CreatedTime = CreatedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Date","title":"<code>Date = Date</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Email","title":"<code>Email = Email</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Files","title":"<code>Files = Files</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Formula","title":"<code>Formula = Formula</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.ID","title":"<code>ID = ID</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.LastEditedBy","title":"<code>LastEditedBy = LastEditedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.LastEditedTime","title":"<code>LastEditedTime = LastEditedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.MultiSelect","title":"<code>MultiSelect = MultiSelect</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Number","title":"<code>Number = Number</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.People","title":"<code>People = People</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.PhoneNumber","title":"<code>PhoneNumber = PhoneNumber</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Relation","title":"<code>Relation = Relation</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Rollup","title":"<code>Rollup = Rollup</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Select","title":"<code>Select = Select</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Status","title":"<code>Status = Status</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Text","title":"<code>Text = Text</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Title","title":"<code>Title = Title</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.URL","title":"<code>URL = URL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.ColType.Verification","title":"<code>Verification = Verification</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color","title":"<code>Color</code>","text":"<p>Basic colors</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Color.BLUE","title":"<code>BLUE = 'blue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.BROWN","title":"<code>BROWN = 'brown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.GRAY","title":"<code>GRAY = 'gray'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.GREEN","title":"<code>GREEN = 'green'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.ORANGE","title":"<code>ORANGE = 'orange'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.PINK","title":"<code>PINK = 'pink'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.PURPLE","title":"<code>PURPLE = 'purple'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.RED","title":"<code>RED = 'red'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Color.YELLOW","title":"<code>YELLOW = 'yellow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column","title":"<code>Column(name: str, type: PropertyType)</code>","text":"<p>Column with a name and a certain Property Type for defining a Notion database schema.</p> <p>This is implemented as a descriptor.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Column.attr_name","title":"<code>attr_name: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column.type","title":"<code>type: PropertyType</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Column.__set_name__","title":"<code>__set_name__(owner: type[PageSchema], name: str)</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database","title":"<code>Database(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion database.</p> <p>This object always represents an original database, not a linked database.</p> <p>API reference: https://developers.notion.com/docs/working-with-databases</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.cover","title":"<code>cover: File | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.description","title":"<code>description: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Return the description of this database as rich text.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.icon","title":"<code>icon: File | Emoji | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_inline","title":"<code>is_inline: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.is_wiki","title":"<code>is_wiki: bool</code>  <code>property</code>","text":"<p>Is this database a wiki database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.schema","title":"<code>schema: type[PageSchema]</code>  <code>property</code> <code>writable</code>","text":"<p>Schema of the database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.title","title":"<code>title: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Return the title of this database as rich text.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.__str__","title":"<code>__str__()</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Database.create_page","title":"<code>create_page(**kwargs) -&gt; Page</code>","text":"<p>Create a page with properties according to the schema within the corresponding database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.delete","title":"<code>delete() -&gt; Database</code>","text":"<p>Delete/archive this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.fetch_all","title":"<code>fetch_all() -&gt; View</code>","text":"<p>Fetch all pages and return a view.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.query","title":"<code>query()</code>","text":"<p>Query a (large) database for pages in a more specific way.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.reload","title":"<code>reload() -&gt; Database</code>","text":"<p>Reload this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Database.restore","title":"<code>restore() -&gt; Database</code>","text":"<p>Restore/unarchive this database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji","title":"<code>Emoji(emoji: str)</code>","text":"<p>Emoji object which behaves like str.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.obj_ref","title":"<code>obj_ref = objs.EmojiObject.build(emoji)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.from_code","title":"<code>from_code(shortcode: str) -&gt; Emoji</code>  <code>classmethod</code>","text":"<p>Create an Emoji object from a :shortcode:, e.g. </p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Emoji.to_code","title":"<code>to_code() -&gt; str</code>","text":"<p>Represent the emoji as :shortcode:, e.g. </p>"},{"location":"reference/ultimate_notion/#ultimate_notion.File","title":"<code>File(*, url: str, name: str | None = None)</code>","text":"<p>A web resource e.g. for the files property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.File.name","title":"<code>name: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.obj_ref","title":"<code>obj_ref: objs.FileObject = objs.ExternalFile.build(url=url, name=name)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.File.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.FileObject) -&gt; File</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat","title":"<code>NumberFormat</code>","text":"<p>Number formats for numbers.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.ARGENTINE_PESO","title":"<code>ARGENTINE_PESO = 'argentine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.BAHT","title":"<code>BAHT = 'baht'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.CANADIAN_DOLLAR","title":"<code>CANADIAN_DOLLAR = 'canadian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.CHILEAN_PESO","title":"<code>CHILEAN_PESO = 'chilean_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.COLOMBIAN_PESO","title":"<code>COLOMBIAN_PESO = 'colombian_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DANISH_KRONE","title":"<code>DANISH_KRONE = 'danish_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DIRHAM","title":"<code>DIRHAM = 'dirham'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.DOLLAR","title":"<code>DOLLAR = 'dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.EURO","title":"<code>EURO = 'euro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.FORINT","title":"<code>FORINT = 'forint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.FRANC","title":"<code>FRANC = 'franc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.HONG_KONG_DOLLAR","title":"<code>HONG_KONG_DOLLAR = 'hong_kong_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.KORUNA","title":"<code>KORUNA = 'koruna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.KRONA","title":"<code>KRONA = 'krona'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.LEU","title":"<code>LEU = 'leu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.LIRA","title":"<code>LIRA = 'lira'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.MEXICAN_PESO","title":"<code>MEXICAN_PESO = 'mexican_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NEW_TAIWAN_DOLLAR","title":"<code>NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NEW_ZEALAND_DOLLAR","title":"<code>NEW_ZEALAND_DOLLAR = 'new_zealand_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NORWEGIAN_KRONE","title":"<code>NORWEGIAN_KRONE = 'norwegian_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.NUMBER_WITH_COMMAS","title":"<code>NUMBER_WITH_COMMAS = 'number_with_commas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.PERCENT","title":"<code>PERCENT = 'percent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.PHILIPPINE_PESO","title":"<code>PHILIPPINE_PESO = 'philippine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.POUND","title":"<code>POUND = 'pound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RAND","title":"<code>RAND = 'rand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.REAL","title":"<code>REAL = 'real'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RINGGIT","title":"<code>RINGGIT = 'ringgit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RIYAL","title":"<code>RIYAL = 'riyal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUBLE","title":"<code>RUBLE = 'ruble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUPEE","title":"<code>RUPEE = 'rupee'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.RUPIAH","title":"<code>RUPIAH = 'rupiah'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.SHEKEL","title":"<code>SHEKEL = 'shekel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.URUGUAYAN_PESO","title":"<code>URUGUAYAN_PESO = 'uruguayan_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.WON","title":"<code>WON = 'won'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.YEN","title":"<code>YEN = 'yen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.YUAN","title":"<code>YUAN = 'yuan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.NumberFormat.ZLOTY","title":"<code>ZLOTY = 'zloty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option","title":"<code>Option(name: str, *, color: Color = Color.DEFAULT)</code>","text":"<p>Option for select &amp; multi-select property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>ID of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Option.description","title":"<code>description() -&gt; str</code>","text":"<p>Description of the option.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionNS","title":"<code>OptionNS</code>","text":"<p>Option namespace to simplify working with (Multi-)Select options.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.OptionNS.to_list","title":"<code>to_list() -&gt; list[Option]</code>  <code>classmethod</code>","text":"<p>Convert the enum to a list as needed by the (Multi)Select column types.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page","title":"<code>Page(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion page.</p> <p>Attributes:</p> Name Type Description <code>props</code> <code>PageProperties</code> <p>accessor for all page properties</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.children","title":"<code>children: list[Page | Database]</code>  <code>property</code>","text":"<p>Return all contained databases and pages within this page</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.content","title":"<code>content: list[Block]</code>  <code>property</code>","text":"<p>Return the content of this page, i.e. all blocks belonging to this page</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.cover","title":"<code>cover: File | None</code>  <code>property</code> <code>writable</code>","text":"<p>Cover of the page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.database","title":"<code>database: Database | None</code>  <code>property</code>","text":"<p>If this page is located in a database return the database or None otherwise.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.icon","title":"<code>icon: File | Emoji | None</code>  <code>property</code> <code>writable</code>","text":"<p>Icon of the page, i.e. emojis, Notion's icons, or custom images.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.props","title":"<code>props: PageProperties</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.title","title":"<code>title: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Title of the page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Page.delete","title":"<code>delete() -&gt; Page</code>","text":"<p>Delete/archive this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.reload","title":"<code>reload() -&gt; Page</code>","text":"<p>Reload this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.restore","title":"<code>restore() -&gt; Page</code>","text":"<p>Restore/unarchive this page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.show","title":"<code>show(*, simple: bool | None = None)</code>","text":"<p>Show the content of the page, rendered in Jupyter Lab</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of the page as Markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Page.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.Page) -&gt; Page</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema","title":"<code>PageSchema</code>","text":"<p>Base class for the schema of a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.db_desc","title":"<code>db_desc: RichText | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.db_title","title":"<code>db_title: RichText | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.__init_subclass__","title":"<code>__init_subclass__(db_title: RichText | str | None, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return the schema in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.bind_db","title":"<code>bind_db(db: Database)</code>  <code>classmethod</code>","text":"<p>Bind the PageSchema to the corresponding database for back-reference.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.create","title":"<code>create(**kwargs) -&gt; Page</code>  <code>classmethod</code>","text":"<p>Create a page using this schema with a bound database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.from_dict","title":"<code>from_dict(schema_dct: dict[str, PropertyType], db_title: str | None = None, db_desc: str | None = None) -&gt; type[PageSchema]</code>  <code>classmethod</code>","text":"<p>Creation of a schema from a dictionary for easy support of dynamically created schemas.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_col","title":"<code>get_col(col_name: str) -&gt; Column</code>  <code>classmethod</code>","text":"<p>Get a specific column from this schema assuming that column names are unique.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_cols","title":"<code>get_cols() -&gt; list[Column]</code>  <code>classmethod</code>","text":"<p>Get all columns of this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_db","title":"<code>get_db() -&gt; Database</code>  <code>classmethod</code>","text":"<p>Get the database that is bound to this schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.get_title_prop","title":"<code>get_title_prop() -&gt; Column</code>  <code>classmethod</code>","text":"<p>Returns the title property.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.is_bound","title":"<code>is_bound() -&gt; bool</code>  <code>classmethod</code>","text":"<p>Determines if the schema is bound to a database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.is_consistent_with","title":"<code>is_consistent_with(other_schema: type[PageSchema]) -&gt; bool</code>  <code>classmethod</code>","text":"<p>Is this schema consistent with another ignoring backward relations if not in other schema.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.show","title":"<code>show(*, simple: bool | None = None)</code>  <code>classmethod</code>","text":"<p>Show the schema as html or as simple table.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.PageSchema.to_dict","title":"<code>to_dict() -&gt; dict[str, PropertyType]</code>  <code>classmethod</code>","text":"<p>Convert this schema to a dictionary.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText","title":"<code>RichText(plain_text: str)</code>","text":"<p>User-facing class holding several RichTexts.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.obj_ref","title":"<code>obj_ref: list[objs.RichTextObject]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.rich_texts","title":"<code>rich_texts: list[RichTextBase] = rich_texts</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.from_markdown","title":"<code>from_markdown(text: str) -&gt; RichText</code>  <code>classmethod</code>","text":"<p>Create RichTextList by parsing the markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.from_plain_text","title":"<code>from_plain_text(text: str) -&gt; RichText</code>  <code>classmethod</code>","text":"<p>Create RichTextList from plain text.</p> <p>This method is a more explicit alias for the default constructor</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.to_markdown","title":"<code>to_markdown() -&gt; str | None</code>","text":"<p>Convert the list of RichText objects to markdown.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.to_plain_text","title":"<code>to_plain_text() -&gt; str</code>","text":"<p>Return rich text as plaintext</p> <p>This method is a more explicit variant then just using the object.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.RichText.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_refs: list[objs.RichTextObject]) -&gt; RichText</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.SelfRef","title":"<code>SelfRef</code>","text":"<p>Target schema for self-referencing database relations.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session","title":"<code>Session(cfg: Config | None = None, **kwargs: Any)</code>","text":"<p>A session for the Notion API.</p> <p>The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>Config | None</code> <p>configuration object</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/]</p> <code>{}</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.api","title":"<code>api: NotionAPI = NotionAPI(self.client)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.cache","title":"<code>cache: dict[UUID, DataObject | User] = {}</code>  <code>class-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.client","title":"<code>client: notion_client.Client = notion_client.Client(auth=auth, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__enter__","title":"<code>__enter__() -&gt; Session</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.__exit__","title":"<code>__exit__(exc_type: type[BaseException], exc_value: BaseException, traceback: TracebackType) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.Session.all_users","title":"<code>all_users() -&gt; list[User]</code>","text":"<p>Retrieve all users of this workspace.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.close","title":"<code>close()</code>","text":"<p>Close the session and release resources.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_db","title":"<code>create_db(parent: Page, schema: type[PageSchema] | None = None) -&gt; Database</code>","text":"<p>Create a new database within a page.</p> <p>Implementation:</p> <pre><code>1. initialize external forward relations, i.e. relations pointing to other databases\n2. create the database using a Notion API call and potential external forward relations\n3. initialize self-referencing forward relations\n4. create columns with self-referencing forward relations using an update call\n5. update the backward references, i.e. two-way relations, using an update call\n</code></pre>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_dbs","title":"<code>create_dbs(parents: Page | list[Page], schemas: list[type[PageSchema]]) -&gt; list[Database]</code>","text":"<p>Create new databases in the right order in case there a relations between them.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.create_page","title":"<code>create_page(parent: Page, title: RichText | str | None = None) -&gt; Page</code>","text":"<p>Create a new page in a parent page.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_active","title":"<code>get_active() -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or None.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_db","title":"<code>get_db(db_ref: ObjRef, *, use_cache: bool = True) -&gt; Database</code>","text":"<p>Retrieve Notion database by uuid</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create","title":"<code>get_or_create(*args, **kwargs) -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or create a new session.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_or_create_db","title":"<code>get_or_create_db(parent: Page, schema: type[PageSchema], title: str | None = None)</code>","text":"<p>Get or create the database.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_page","title":"<code>get_page(page_ref: ObjRef, *, use_cache: bool = True) -&gt; Page</code>","text":"<p>Retrieve a page by uuid.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.get_user","title":"<code>get_user(user_ref: ObjRef, *, use_cache: bool = True) -&gt; User</code>","text":"<p>Get a user by uuid.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.is_closed","title":"<code>is_closed() -&gt; bool</code>","text":"<p>Determine if the session is closed or not.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.raise_for_status","title":"<code>raise_for_status()</code>","text":"<p>Confirm that the session is active and raise otherwise.</p> <p>Raises SessionError if there is a problem, otherwise returns None.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_db","title":"<code>search_db(db_name: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Database]</code>","text":"<p>Search a database by name or return all if <code>db_name</code> is None.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str | None</code> <p>name/title of the database, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted databases in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_page","title":"<code>search_page(title: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Page]</code>","text":"<p>Search a page by name.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>title of the page, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted pages in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.search_user","title":"<code>search_user(name: str) -&gt; SList[User]</code>","text":"<p>Search a user by name.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.Session.whoami","title":"<code>whoami() -&gt; User</code>","text":"<p>Return the user object of this bot.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.User","title":"<code>User(*args: Any, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.avatar_url","title":"<code>avatar_url</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.email","title":"<code>email: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.is_bot","title":"<code>is_bot: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.is_person","title":"<code>is_person: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.__str__","title":"<code>__str__()</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.User.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.User) -&gt; User</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.VState","title":"<code>VState</code>","text":"<p>Verification states for pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/#ultimate_notion.VState.UNVERIFIED","title":"<code>UNVERIFIED = 'unverified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/#ultimate_notion.VState.VERIFIED","title":"<code>VERIFIED = 'verified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/","title":"Blocks","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks","title":"<code>blocks</code>","text":"<p>Core building blocks for pages and databases.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.T","title":"<code>T = TypeVar('T', bound=obj_blocks.DataObject)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Block","title":"<code>Block(*args: Any, **kwargs: Any)</code>","text":"<p>General Notion block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Bookmark","title":"<code>Bookmark(*args: Any, **kwargs: Any)</code>","text":"<p>Bookmark block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Breadcrumb","title":"<code>Breadcrumb(*args: Any, **kwargs: Any)</code>","text":"<p>Breadcrumb block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.BulletedItem","title":"<code>BulletedItem(*args: Any, **kwargs: Any)</code>","text":"<p>Bulleted list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Callout","title":"<code>Callout(*args: Any, **kwargs: Any)</code>","text":"<p>Callout block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildDatabase","title":"<code>ChildDatabase(*args: Any, **kwargs: Any)</code>","text":"<p>Child database block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildPage","title":"<code>ChildPage(*args: Any, **kwargs: Any)</code>","text":"<p>Child page block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ChildrenMixin","title":"<code>ChildrenMixin</code>","text":"<p>Mixin for blocks that support children blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Code","title":"<code>Code(*args: Any, **kwargs: Any)</code>","text":"<p>Code block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Column","title":"<code>Column(*args: Any, **kwargs: Any)</code>","text":"<p>Collumn block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ColumnList","title":"<code>ColumnList(*args: Any, **kwargs: Any)</code>","text":"<p>Column list block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject","title":"<code>DataObject(*args: Any, **kwargs: Any)</code>","text":"<p>The base type for all data-related types, i.e, pages, databases and blocks.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.ancestors","title":"<code>ancestors: tuple[DataObject, ...]</code>  <code>property</code>","text":"<p>Return all ancestors from the workspace to the actual record (excluding).</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.created_by","title":"<code>created_by: User</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.created_time","title":"<code>created_time: datetime</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.has_children","title":"<code>has_children: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.id","title":"<code>id: UUID</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.is_deleted","title":"<code>is_deleted: bool</code>  <code>property</code>","text":"<p>Return wether the object is deleted/archived.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.last_edited_by","title":"<code>last_edited_by: User</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.last_edited_time","title":"<code>last_edited_time: datetime</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.parent","title":"<code>parent: DataObject | None</code>  <code>property</code>","text":"<p>Return the parent record or None if the workspace is the parent.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.DataObject.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Divider","title":"<code>Divider(*args: Any, **kwargs: Any)</code>","text":"<p>Divider block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Embed","title":"<code>Embed(*args: Any, **kwargs: Any)</code>","text":"<p>Embed block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Equation","title":"<code>Equation(*args: Any, **kwargs: Any)</code>","text":"<p>Equation block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.File","title":"<code>File(*args: Any, **kwargs: Any)</code>","text":"<p>File block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading1","title":"<code>Heading1(*args: Any, **kwargs: Any)</code>","text":"<p>Heading 1 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading2","title":"<code>Heading2(*args: Any, **kwargs: Any)</code>","text":"<p>Heading 2 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Heading3","title":"<code>Heading3(*args: Any, **kwargs: Any)</code>","text":"<p>Heading 3 block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Image","title":"<code>Image(*args: Any, **kwargs: Any)</code>","text":"<p>Image block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkPreview","title":"<code>LinkPreview(*args: Any, **kwargs: Any)</code>","text":"<p>Link preview block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.LinkToPage","title":"<code>LinkToPage(*args: Any, **kwargs: Any)</code>","text":"<p>Link to page block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.NumberedItem","title":"<code>NumberedItem(*args: Any, **kwargs: Any)</code>","text":"<p>Numbered list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.PDF","title":"<code>PDF(*args: Any, **kwargs: Any)</code>","text":"<p>PDF block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Paragraph","title":"<code>Paragraph(*args: Any, **kwargs: Any)</code>","text":"<p>Paragraph block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Quote","title":"<code>Quote(*args: Any, **kwargs: Any)</code>","text":"<p>Quote block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock","title":"<code>SyncedBlock(*args: Any, **kwargs: Any)</code>","text":"<p>Synced block - either original or synched.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.is_original","title":"<code>is_original: bool</code>  <code>property</code>","text":"<p>Is this block the original content.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.SyncedBlock.is_synched","title":"<code>is_synched: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Table","title":"<code>Table(*args: Any, **kwargs: Any)</code>","text":"<p>Table block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableOfContents","title":"<code>TableOfContents(*args: Any, **kwargs: Any)</code>","text":"<p>Table of contents block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TableRow","title":"<code>TableRow(*args: Any, **kwargs: Any)</code>","text":"<p>Table row block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Template","title":"<code>Template(*args: Any, **kwargs: Any)</code>","text":"<p>Template block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.TextBlock","title":"<code>TextBlock(*args: Any, **kwargs: Any)</code>","text":"<p>Text block.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToDoItem","title":"<code>ToDoItem(*args: Any, **kwargs: Any)</code>","text":"<p>ToDo list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.ToggleItem","title":"<code>ToggleItem(*args: Any, **kwargs: Any)</code>","text":"<p>Toggle list item.</p>"},{"location":"reference/ultimate_notion/blocks/#ultimate_notion.blocks.Video","title":"<code>Video(*args: Any, **kwargs: Any)</code>","text":"<p>Video block.</p>"},{"location":"reference/ultimate_notion/config/","title":"Config","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config","title":"<code>config</code>","text":"<p>Handling the configuration for all adapters</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.DEFAULT_CFG","title":"<code>DEFAULT_CFG = f'# Configuration for Ultimate Notion## * Non-absolute paths are always relative to the directory of this file.# * You can use environment variables in the format ${env:VAR_NAME} or ${env:VAR_NAME|DEFAULT_VALUE}.[ultimate_notion]token = \"${env:{ENV_NOTION_TOKEN}}\"[google]client_secret_json = \"client_secret.json\"token_json = \"token.json\"'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.DEFAULT_ULTIMATE_NOTION_CFG_PATH","title":"<code>DEFAULT_ULTIMATE_NOTION_CFG_PATH: str = '.ultimate-notion/config.toml'</code>  <code>module-attribute</code>","text":"<p>Default path within $HOME to the configuration file of Ultimate Notion</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.ENV_NOTION_TOKEN","title":"<code>ENV_NOTION_TOKEN = 'NOTION_TOKEN'</code>  <code>module-attribute</code>","text":"<p>Name of the environment variable to look up the Notion token</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.ENV_ULTIMATE_NOTION_CFG","title":"<code>ENV_ULTIMATE_NOTION_CFG: str = 'ULTIMATE_NOTION_CONFIG'</code>  <code>module-attribute</code>","text":"<p>Name of the environment variable to look up the path for the config</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config","title":"<code>Config</code>","text":"<p>Main configuration object.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.google","title":"<code>google: GoogleCfg | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.ultimate_notion","title":"<code>ultimate_notion: UNOCfg</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.Config.convert_json_path","title":"<code>convert_json_path(v: GoogleCfg | None, info: ValidationInfo) -&gt; GoogleCfg | None</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg","title":"<code>GoogleCfg</code>","text":"<p>Configuration related to the Google API.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg.client_secret_json","title":"<code>client_secret_json: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.GoogleCfg.token_json","title":"<code>token_json: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg","title":"<code>UNOCfg</code>","text":"<p>Configuration related to Ultimate Notion itself.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.cfg_path","title":"<code>cfg_path: FilePath</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.UNOCfg.token","title":"<code>token: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_cfg","title":"<code>get_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_cfg_file","title":"<code>get_cfg_file() -&gt; Path</code>","text":"<p>Determines the path of the config file.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.get_or_create_cfg","title":"<code>get_or_create_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object or creates it if it doesn't exist yet.</p>"},{"location":"reference/ultimate_notion/config/#ultimate_notion.config.resolve_env_value","title":"<code>resolve_env_value(value: str) -&gt; str</code>","text":"<p>Resolves environment variable values in the format ${env:VAR_NAME|DEFAULT_VALUE}.</p>"},{"location":"reference/ultimate_notion/database/","title":"Database","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","title":"<code>database</code>","text":"<p>Functionality for working with Notion databases.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","title":"<code>Database(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion database.</p> <p>This object always represents an original database, not a linked database.</p> <p>API reference: https://developers.notion.com/docs/working-with-databases</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","title":"<code>cover: File | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","title":"<code>description: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Return the description of this database as rich text.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","title":"<code>icon: File | Emoji | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","title":"<code>is_inline: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_wiki","title":"<code>is_wiki: bool</code>  <code>property</code>","text":"<p>Is this database a wiki database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.schema","title":"<code>schema: type[PageSchema]</code>  <code>property</code> <code>writable</code>","text":"<p>Schema of the database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","title":"<code>title: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Return the title of this database as rich text.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","title":"<code>__str__()</code>","text":""},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.create_page","title":"<code>create_page(**kwargs) -&gt; Page</code>","text":"<p>Create a page with properties according to the schema within the corresponding database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.delete","title":"<code>delete() -&gt; Database</code>","text":"<p>Delete/archive this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.fetch_all","title":"<code>fetch_all() -&gt; View</code>","text":"<p>Fetch all pages and return a view.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.query","title":"<code>query()</code>","text":"<p>Query a (large) database for pages in a more specific way.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.reload","title":"<code>reload() -&gt; Database</code>","text":"<p>Reload this database.</p>"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.restore","title":"<code>restore() -&gt; Database</code>","text":"<p>Restore/unarchive this database.</p>"},{"location":"reference/ultimate_notion/objects/","title":"Objects","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects","title":"<code>objects</code>","text":"<p>Functionality for general Notion objects like texts, files, options, etc.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji","title":"<code>Emoji(emoji: str)</code>","text":"<p>Emoji object which behaves like str.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.obj_ref","title":"<code>obj_ref = objs.EmojiObject.build(emoji)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.from_code","title":"<code>from_code(shortcode: str) -&gt; Emoji</code>  <code>classmethod</code>","text":"<p>Create an Emoji object from a :shortcode:, e.g. </p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Emoji.to_code","title":"<code>to_code() -&gt; str</code>","text":"<p>Represent the emoji as :shortcode:, e.g. </p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Equation","title":"<code>Equation(*args: Any, **kwargs: Any)</code>","text":"<p>An Equation object.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File","title":"<code>File(*, url: str, name: str | None = None)</code>","text":"<p>A web resource e.g. for the files property.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.name","title":"<code>name: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.obj_ref","title":"<code>obj_ref: objs.FileObject = objs.ExternalFile.build(url=url, name=name)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.url","title":"<code>url: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.File.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.FileObject) -&gt; File</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Mention","title":"<code>Mention(*args: Any, **kwargs: Any)</code>","text":"<p>A Mention object.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option","title":"<code>Option(name: str, *, color: Color = Color.DEFAULT)</code>","text":"<p>Option for select &amp; multi-select property.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>ID of the option.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Option.description","title":"<code>description() -&gt; str</code>","text":"<p>Description of the option.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup","title":"<code>OptionGroup(*args: Any, **kwargs: Any)</code>","text":"<p>Group of options for status property.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of the option group.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup.options","title":"<code>options: list[Option]</code>  <code>property</code>","text":"<p>Options within this option group.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionGroup.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref, /, *, options: list[Option] | None = None) -&gt; OptionGroup</code>  <code>classmethod</code>","text":"<p>Convienence constructor for the group of options.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionNS","title":"<code>OptionNS</code>","text":"<p>Option namespace to simplify working with (Multi-)Select options.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.OptionNS.to_list","title":"<code>to_list() -&gt; list[Option]</code>  <code>classmethod</code>","text":"<p>Convert the enum to a list as needed by the (Multi)Select column types.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText","title":"<code>RichText(plain_text: str)</code>","text":"<p>User-facing class holding several RichTexts.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.obj_ref","title":"<code>obj_ref: list[objs.RichTextObject]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.rich_texts","title":"<code>rich_texts: list[RichTextBase] = rich_texts</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.__hash__","title":"<code>__hash__()</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.from_markdown","title":"<code>from_markdown(text: str) -&gt; RichText</code>  <code>classmethod</code>","text":"<p>Create RichTextList by parsing the markdown.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.from_plain_text","title":"<code>from_plain_text(text: str) -&gt; RichText</code>  <code>classmethod</code>","text":"<p>Create RichTextList from plain text.</p> <p>This method is a more explicit alias for the default constructor</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.to_markdown","title":"<code>to_markdown() -&gt; str | None</code>","text":"<p>Convert the list of RichText objects to markdown.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.to_plain_text","title":"<code>to_plain_text() -&gt; str</code>","text":"<p>Return rich text as plaintext</p> <p>This method is a more explicit variant then just using the object.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichText.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_refs: list[objs.RichTextObject]) -&gt; RichText</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.RichTextBase","title":"<code>RichTextBase(*args: Any, **kwargs: Any)</code>","text":"<p>Super class for text, equation and mentions of various kinds.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.Text","title":"<code>Text(*args: Any, **kwargs: Any)</code>","text":"<p>A Text object.</p>"},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User","title":"<code>User(*args: Any, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.avatar_url","title":"<code>avatar_url</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.email","title":"<code>email: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.id","title":"<code>id</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.is_bot","title":"<code>is_bot: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.is_person","title":"<code>is_person: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.name","title":"<code>name</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.__str__","title":"<code>__str__()</code>","text":""},{"location":"reference/ultimate_notion/objects/#ultimate_notion.objects.User.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: objs.User) -&gt; User</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/page/","title":"Page","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","title":"<code>page</code>","text":"<p>Functionality around Notion pages.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","title":"<code>Page(*args: Any, **kwargs: Any)</code>","text":"<p>A Notion page.</p> <p>Attributes:</p> Name Type Description <code>props</code> <code>PageProperties</code> <p>accessor for all page properties</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.children","title":"<code>children: list[Page | Database]</code>  <code>property</code>","text":"<p>Return all contained databases and pages within this page</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.content","title":"<code>content: list[Block]</code>  <code>property</code>","text":"<p>Return the content of this page, i.e. all blocks belonging to this page</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.cover","title":"<code>cover: File | None</code>  <code>property</code> <code>writable</code>","text":"<p>Cover of the page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.database","title":"<code>database: Database | None</code>  <code>property</code>","text":"<p>If this page is located in a database return the database or None otherwise.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.icon","title":"<code>icon: File | Emoji | None</code>  <code>property</code> <code>writable</code>","text":"<p>Icon of the page, i.e. emojis, Notion's icons, or custom images.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.props","title":"<code>props: PageProperties</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","title":"<code>title: RichText</code>  <code>property</code> <code>writable</code>","text":"<p>Title of the page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.delete","title":"<code>delete() -&gt; Page</code>","text":"<p>Delete/archive this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.reload","title":"<code>reload() -&gt; Page</code>","text":"<p>Reload this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.restore","title":"<code>restore() -&gt; Page</code>","text":"<p>Restore/unarchive this page.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.show","title":"<code>show(*, simple: bool | None = None)</code>","text":"<p>Show the content of the page, rendered in Jupyter Lab</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_markdown","title":"<code>to_markdown() -&gt; str</code>","text":"<p>Return the content of the page as Markdown.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: obj_blocks.Page) -&gt; Page</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties","title":"<code>PageProperties(page: Page)</code>","text":"<p>Properties of a page as defined in the schema of the database.</p> <p>This defines the <code>.props</code> namespace of a page <code>page</code> and updates the content on the Notion server side in case of an assignment. Access the properties with <code>page.props.property_name</code> or <code>page.props[\"Property Name\"]</code>.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__getitem__","title":"<code>__getitem__(prop_name: str) -&gt; PropertyValue</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterator of property names.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.__setitem__","title":"<code>__setitem__(prop_name: str, value: Any)</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperties.to_dict","title":"<code>to_dict() -&gt; dict[str, PropertyValue]</code>","text":"<p>All page properties as dictionary.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty","title":"<code>PageProperty(prop_name: str)</code>","text":"<p>Property of a page implementing the descriptor protocol.</p>"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty.__get__","title":"<code>__get__(obj: PageProperties, type=None) -&gt; PropertyValue</code>","text":""},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.PageProperty.__set__","title":"<code>__set__(obj: PageProperties, value)</code>","text":""},{"location":"reference/ultimate_notion/props/","title":"Props","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props","title":"<code>props</code>","text":"<p>Page properties especially for pages within databases. The names of the properties reflect the name in the Notion UI.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.T","title":"<code>T = TypeVar('T', bound=obj_props.PropertyValue)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Checkbox","title":"<code>Checkbox(values)</code>","text":"<p>Simple checkbox type; represented as a boolean.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Checkbox.value","title":"<code>value: bool | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy","title":"<code>CreatedBy(values)</code>","text":"<p>Created-by property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedBy.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime","title":"<code>CreatedTime(values)</code>","text":"<p>Created-time property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.CreatedTime.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date","title":"<code>Date(start: datetime | date, end: datetime | date | None = None)</code>","text":"<p>Date(-time) property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.obj_ref","title":"<code>obj_ref = obj_props.Date.build(start, end)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Date.value","title":"<code>value: DateType | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Email","title":"<code>Email(values)</code>","text":"<p>Email property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Email.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Files","title":"<code>Files(files: File | list[File])</code>","text":"<p>Files property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Files.value","title":"<code>value: list[File]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula","title":"<code>Formula(values)</code>","text":"<p>Formula property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Formula.value","title":"<code>value: str | float | int | DateType | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID","title":"<code>ID(values)</code>","text":"<p>Unique ID property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.ID.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy","title":"<code>LastEditedBy(values)</code>","text":"<p>Last-edited-by property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedBy.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime","title":"<code>LastEditedTime(values)</code>","text":"<p>Last-edited-time property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.LastEditedTime.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect","title":"<code>MultiSelect(options: str | Option | list[str | Option])</code>","text":"<p>Multi-select property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.MultiSelect.value","title":"<code>value: list[Option] | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number","title":"<code>Number(values)</code>","text":"<p>Number property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Number.value","title":"<code>value: int | float | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.People","title":"<code>People(users: User | list[User])</code>","text":"<p>People property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.People.value","title":"<code>value: list[User]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PhoneNumber","title":"<code>PhoneNumber(values)</code>","text":"<p>Phone property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PhoneNumber.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue","title":"<code>PropertyValue(values)</code>","text":"<p>Base class for Notion property values.</p> <p>Used to map high-level objects to low-level Notion-API objects</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.id","title":"<code>id: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.readonly","title":"<code>readonly: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.value","title":"<code>value: Any</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the actual Python value object of this property.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__init_subclass__","title":"<code>__init_subclass__(wraps: type[T], **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.PropertyValue.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations","title":"<code>Relations(pages: Page | list[Page])</code>","text":"<p>Relation property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Relations.value","title":"<code>value: list[Page]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup","title":"<code>Rollup(values)</code>","text":"<p>Rollup property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Rollup.value","title":"<code>value: str | float | int | DateType | list[PropertyValue] | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select","title":"<code>Select(option: str | Option)</code>","text":"<p>Single select property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Select.value","title":"<code>value: Option | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status","title":"<code>Status(option: str | Option)</code>","text":"<p>Status property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Status.value","title":"<code>value: Option | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text","title":"<code>Text(text: str | RichText)</code>","text":"<p>Rich text property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Text.value","title":"<code>value: RichText</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title","title":"<code>Title(text: str | RichText)</code>","text":"<p>Title property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Title.value","title":"<code>value: RichText</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.URL","title":"<code>URL(values)</code>","text":"<p>URL property value.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.URL.value","title":"<code>value: str | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification","title":"<code>Verification(values)</code>","text":"<p>Verification property value of pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/props/#ultimate_notion.props.Verification.readonly","title":"<code>readonly = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/","title":"Schema","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema","title":"<code>schema</code>","text":"<p>Functionality around defining a database schema.</p> <p>Currently only normal databases, no wiki databases, can be created [1]. Neither the <code>Unique ID</code> nor <code>Status</code> nor the <code>Verfication</code> page property can be set as a database column in a custom Schema when creating the database.</p> <p>[1] https://developers.notion.com/docs/working-with-databases#wiki-databases</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema--design-principles","title":"Design Principles","text":"<p>A schema is a subclass of <code>PageShema</code> that holds <code>Column</code> objects with a name and an actual <code>PropertyType</code>, e.g. <code>Text</code>, <code>Number</code>.</p> <p>The source of truth is always the <code>obj_ref</code> and a <code>PropertyType</code> holds only auxilliary information if actually needed. Since the object references <code>obj_ref</code> must always point to the actual <code>obj_api.blocks.Database.properties</code> value if the schema is bound to an database, the method <code>_remap_obj_refs</code> rewires this when a schema is used to create a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.T","title":"<code>T = TypeVar('T', bound=obj_schema.PropertyType)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Checkbox","title":"<code>Checkbox(*args, **kwargs)</code>","text":"<p>Defines a checkbox column in database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType","title":"<code>ColType</code>","text":"<p>Namespace class of all columns types for easier access.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Checkbox","title":"<code>Checkbox = Checkbox</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.CreatedBy","title":"<code>CreatedBy = CreatedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.CreatedTime","title":"<code>CreatedTime = CreatedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Date","title":"<code>Date = Date</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Email","title":"<code>Email = Email</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Files","title":"<code>Files = Files</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Formula","title":"<code>Formula = Formula</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.ID","title":"<code>ID = ID</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.LastEditedBy","title":"<code>LastEditedBy = LastEditedBy</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.LastEditedTime","title":"<code>LastEditedTime = LastEditedTime</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.MultiSelect","title":"<code>MultiSelect = MultiSelect</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Number","title":"<code>Number = Number</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.People","title":"<code>People = People</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.PhoneNumber","title":"<code>PhoneNumber = PhoneNumber</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Relation","title":"<code>Relation = Relation</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Rollup","title":"<code>Rollup = Rollup</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Select","title":"<code>Select = Select</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Status","title":"<code>Status = Status</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Text","title":"<code>Text = Text</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Title","title":"<code>Title = Title</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.URL","title":"<code>URL = URL</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ColType.Verification","title":"<code>Verification = Verification</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column","title":"<code>Column(name: str, type: PropertyType)</code>","text":"<p>Column with a name and a certain Property Type for defining a Notion database schema.</p> <p>This is implemented as a descriptor.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.attr_name","title":"<code>attr_name: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.type","title":"<code>type: PropertyType</code>  <code>property</code> <code>writable</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Column.__set_name__","title":"<code>__set_name__(owner: type[PageSchema], name: str)</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedBy","title":"<code>CreatedBy(*args, **kwargs)</code>","text":"<p>Defines the created-by column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.CreatedTime","title":"<code>CreatedTime(*args, **kwargs)</code>","text":"<p>Defines the created-time column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Date","title":"<code>Date(*args, **kwargs)</code>","text":"<p>Defines a date column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.DefaultSchema","title":"<code>DefaultSchema</code>","text":"<p>Default database schema of Notion.</p> <p>As inferred by just creating an empty database in the Notion UI.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.DefaultSchema.name","title":"<code>name = Column('Name', Title())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.DefaultSchema.tags","title":"<code>tags = Column('Tags', MultiSelect([]))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Email","title":"<code>Email(*args, **kwargs)</code>","text":"<p>Defines an e-mail column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Files","title":"<code>Files(*args, **kwargs)</code>","text":"<p>Defines a files column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Formula","title":"<code>Formula(expression: str)</code>","text":"<p>Defines a formula column in a database.</p> <p>Currently the formula expression cannot reference other formula columns, e.g. <code>prop(\"other formula\")</code> This is a limitation of the API.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID","title":"<code>ID(*args, **kwargs)</code>","text":"<p>Defines a unique ID column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ID.prefix","title":"<code>prefix: str</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedBy","title":"<code>LastEditedBy(*args, **kwargs)</code>","text":"<p>Defines the last-edited-by column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.LastEditedTime","title":"<code>LastEditedTime(*args, **kwargs)</code>","text":"<p>Defines the last-edited-time column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect","title":"<code>MultiSelect(options: list[Option] | type[OptionNS])</code>","text":"<p>Defines a multi-select column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.MultiSelect.options","title":"<code>options: dict[str, Option]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Number","title":"<code>Number(number_format: NumberFormat)</code>","text":"<p>Defines a number column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema","title":"<code>PageSchema</code>","text":"<p>Base class for the schema of a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.db_desc","title":"<code>db_desc: RichText | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.db_title","title":"<code>db_title: RichText | None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.__init_subclass__","title":"<code>__init_subclass__(db_title: RichText | str | None, **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>  <code>classmethod</code>","text":"<p>Return the schema in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.bind_db","title":"<code>bind_db(db: Database)</code>  <code>classmethod</code>","text":"<p>Bind the PageSchema to the corresponding database for back-reference.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.create","title":"<code>create(**kwargs) -&gt; Page</code>  <code>classmethod</code>","text":"<p>Create a page using this schema with a bound database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.from_dict","title":"<code>from_dict(schema_dct: dict[str, PropertyType], db_title: str | None = None, db_desc: str | None = None) -&gt; type[PageSchema]</code>  <code>classmethod</code>","text":"<p>Creation of a schema from a dictionary for easy support of dynamically created schemas.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_col","title":"<code>get_col(col_name: str) -&gt; Column</code>  <code>classmethod</code>","text":"<p>Get a specific column from this schema assuming that column names are unique.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_cols","title":"<code>get_cols() -&gt; list[Column]</code>  <code>classmethod</code>","text":"<p>Get all columns of this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_db","title":"<code>get_db() -&gt; Database</code>  <code>classmethod</code>","text":"<p>Get the database that is bound to this schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.get_title_prop","title":"<code>get_title_prop() -&gt; Column</code>  <code>classmethod</code>","text":"<p>Returns the title property.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.is_bound","title":"<code>is_bound() -&gt; bool</code>  <code>classmethod</code>","text":"<p>Determines if the schema is bound to a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.is_consistent_with","title":"<code>is_consistent_with(other_schema: type[PageSchema]) -&gt; bool</code>  <code>classmethod</code>","text":"<p>Is this schema consistent with another ignoring backward relations if not in other schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.show","title":"<code>show(*, simple: bool | None = None)</code>  <code>classmethod</code>","text":"<p>Show the schema as html or as simple table.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PageSchema.to_dict","title":"<code>to_dict() -&gt; dict[str, PropertyType]</code>  <code>classmethod</code>","text":"<p>Convert this schema to a dictionary.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.People","title":"<code>People(*args, **kwargs)</code>","text":"<p>Defines a people column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PhoneNumber","title":"<code>PhoneNumber(*args, **kwargs)</code>","text":"<p>Defines a phone number column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType","title":"<code>PropertyType(*args, **kwargs)</code>","text":"<p>Base class for Notion property objects.</p> <p>Property types define the value types of columns in a database, e.g. number, date, text, etc.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.allowed_at_creation","title":"<code>allowed_at_creation = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.col_ref","title":"<code>col_ref: Column | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.id","title":"<code>id: str | None</code>  <code>property</code>","text":"<p>Return identifier of this property type.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.name","title":"<code>name: str | None</code>  <code>property</code>","text":"<p>Return name of this property type.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.obj_ref","title":"<code>obj_ref: T = obj_api_type.build(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.prop_value","title":"<code>prop_value: type[PropertyValue]</code>  <code>property</code>","text":"<p>Return the corresponding property value of this property type.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.readonly","title":"<code>readonly: bool</code>  <code>property</code>","text":"<p>Return if this property type is read-only.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.PropertyType.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ReadOnlyColumnError","title":"<code>ReadOnlyColumnError(col: Column)</code>","text":"<p>Raised when a read-only columns tries to be written to.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.ReadOnlyColumnError.col","title":"<code>col = col</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation","title":"<code>Relation(schema: type[PageSchema] | None = None, *, two_way_col: Column | None = None)</code>","text":"<p>Relation to another database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.is_self_ref","title":"<code>is_self_ref: bool</code>  <code>property</code>","text":"<p>Determines if this relation is self referencing the same schema.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.is_two_way","title":"<code>is_two_way: bool</code>  <code>property</code>","text":"<p>Determine if this relation is a two-way relation.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.schema","title":"<code>schema: type[PageSchema] | None</code>  <code>property</code>","text":"<p>Schema of the relation database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Relation.two_way_col","title":"<code>two_way_col: Column | None</code>  <code>property</code>","text":"<p>Return the target column object of a two-way relation.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.RelationError","title":"<code>RelationError(message)</code>","text":"<p>Error if a Relation cannot be initialised.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Rollup","title":"<code>Rollup(relation: Column, property: Column, calculate: AggFunc)</code>","text":"<p>Defines the rollup column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.RollupError","title":"<code>RollupError(message)</code>","text":"<p>Error if definition of rollup is wrong.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaError","title":"<code>SchemaError(message)</code>","text":"<p>Raised when there are issues with the schema of a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaNotBoundError","title":"<code>SchemaNotBoundError(schema: type[PageSchema])</code>","text":"<p>Raised when the schema is not bound to a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SchemaNotBoundError.schema","title":"<code>schema = schema</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Select","title":"<code>Select(options: list[Option] | type[OptionNS])</code>","text":"<p>Defines a select column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Select.options","title":"<code>options: dict[str, Option]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.SelfRef","title":"<code>SelfRef</code>","text":"<p>Target schema for self-referencing database relations.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status","title":"<code>Status(*args, **kwargs)</code>","text":"<p>Defines a status column in a database.</p> <p>The Notion API doesn't allow to create a column of this type. Sending it to the API with options and option groups defined results in an error about the existence of the keys <code>options</code> and <code>groups</code> and removing them creates a database with the column missing... ignorance is bliss.</p> <p>Also the Status configuration is not mentioned as a [Property Schema Object])https://developers.notion.com/reference/property-schema-object).</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.groups","title":"<code>groups: list[OptionGroup]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Status.options","title":"<code>options: list[Option]</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Text","title":"<code>Text(*args, **kwargs)</code>","text":"<p>Defines a text column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Title","title":"<code>Title(*args, **kwargs)</code>","text":"<p>Defines the mandatory title column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.URL","title":"<code>URL(*args, **kwargs)</code>","text":"<p>Defines a URL column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification","title":"<code>Verification(*args, **kwargs)</code>","text":"<p>Defines a unique ID column in a database.</p>"},{"location":"reference/ultimate_notion/schema/#ultimate_notion.schema.Verification.allowed_at_creation","title":"<code>allowed_at_creation = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/","title":"Session","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","title":"<code>session</code>","text":"<p>Functionality to initialize a Notion Session.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","title":"<code>Session(cfg: Config | None = None, **kwargs: Any)</code>","text":"<p>A session for the Notion API.</p> <p>The session keeps tracks of all objects, e.g. pages, databases, etc. in an object store to avoid unnecessary calls to the API.</p> <p>Parameters:</p> Name Type Description Default <code>cfg</code> <code>Config | None</code> <p>configuration object</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Arguments for the [Notion SDK Client][https://ramnes.github.io/notion-sdk-py/reference/client/]</p> <code>{}</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.api","title":"<code>api: NotionAPI = NotionAPI(self.client)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.cache","title":"<code>cache: dict[UUID, DataObject | User] = {}</code>  <code>class-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.client","title":"<code>client: notion_client.Client = notion_client.Client(auth=auth, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","title":"<code>__enter__() -&gt; Session</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","title":"<code>__exit__(exc_type: type[BaseException], exc_value: BaseException, traceback: TracebackType) -&gt; None</code>","text":""},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.all_users","title":"<code>all_users() -&gt; list[User]</code>","text":"<p>Retrieve all users of this workspace.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","title":"<code>close()</code>","text":"<p>Close the session and release resources.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_db","title":"<code>create_db(parent: Page, schema: type[PageSchema] | None = None) -&gt; Database</code>","text":"<p>Create a new database within a page.</p> <p>Implementation:</p> <pre><code>1. initialize external forward relations, i.e. relations pointing to other databases\n2. create the database using a Notion API call and potential external forward relations\n3. initialize self-referencing forward relations\n4. create columns with self-referencing forward relations using an update call\n5. update the backward references, i.e. two-way relations, using an update call\n</code></pre>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_dbs","title":"<code>create_dbs(parents: Page | list[Page], schemas: list[type[PageSchema]]) -&gt; list[Database]</code>","text":"<p>Create new databases in the right order in case there a relations between them.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.create_page","title":"<code>create_page(parent: Page, title: RichText | str | None = None) -&gt; Page</code>","text":"<p>Create a new page in a parent page.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_active","title":"<code>get_active() -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or None.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","title":"<code>get_db(db_ref: ObjRef, *, use_cache: bool = True) -&gt; Database</code>","text":"<p>Retrieve Notion database by uuid</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create","title":"<code>get_or_create(*args, **kwargs) -&gt; Session</code>  <code>classmethod</code>","text":"<p>Return the current active session or create a new session.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_or_create_db","title":"<code>get_or_create_db(parent: Page, schema: type[PageSchema], title: str | None = None)</code>","text":"<p>Get or create the database.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","title":"<code>get_page(page_ref: ObjRef, *, use_cache: bool = True) -&gt; Page</code>","text":"<p>Retrieve a page by uuid.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","title":"<code>get_user(user_ref: ObjRef, *, use_cache: bool = True) -&gt; User</code>","text":"<p>Get a user by uuid.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.is_closed","title":"<code>is_closed() -&gt; bool</code>","text":"<p>Determine if the session is closed or not.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","title":"<code>raise_for_status()</code>","text":"<p>Confirm that the session is active and raise otherwise.</p> <p>Raises SessionError if there is a problem, otherwise returns None.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","title":"<code>search_db(db_name: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Database]</code>","text":"<p>Search a database by name or return all if <code>db_name</code> is None.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str | None</code> <p>name/title of the database, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted databases in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_page","title":"<code>search_page(title: str | None = None, *, exact: bool = True, reverse: bool = False, deleted: bool = False) -&gt; SList[Page]</code>","text":"<p>Search a page by name.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str | None</code> <p>title of the page, return all if <code>None</code></p> <code>None</code> <code>exact</code> <code>bool</code> <p>perform an exact search, not only a substring match</p> <code>True</code> <code>reverse</code> <code>bool</code> <p>search in the reverse order, i.e. the least recently edited results first</p> <code>False</code> <code>deleted</code> <code>bool</code> <p>include deleted pages in search</p> <code>False</code>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_user","title":"<code>search_user(name: str) -&gt; SList[User]</code>","text":"<p>Search a user by name.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.whoami","title":"<code>whoami() -&gt; User</code>","text":"<p>Return the user object of this bot.</p>"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.SessionError","title":"<code>SessionError(message)</code>","text":"<p>Raised when there are issues with the Notion session.</p>"},{"location":"reference/ultimate_notion/text/","title":"Text","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text","title":"<code>text</code>","text":"<p>Utilities for working text, markdown &amp; rich text in Notion.</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.BASE_URL_PATTERN","title":"<code>BASE_URL_PATTERN = 'https://(www.)?notion.so/'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.BLOCK_URL_LONG_RE","title":"<code>BLOCK_URL_LONG_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;username&gt;.*)/(?P&lt;title&gt;.*)-(?P&lt;page_id&gt;{UUID_PATTERN})\\#(?P&lt;block_id&gt;{UUID_PATTERN})$', flags=re.IGNORECASE | re.VERBOSE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.MAX_TEXT_OBJECT_SIZE","title":"<code>MAX_TEXT_OBJECT_SIZE = 2000</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.PAGE_URL_LONG_RE","title":"<code>PAGE_URL_LONG_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;title&gt;.*)-(?P&lt;page_id&gt;{UUID_PATTERN})$', flags=re.IGNORECASE | re.VERBOSE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.PAGE_URL_SHORT_RE","title":"<code>PAGE_URL_SHORT_RE = re.compile(f'^{BASE_URL_PATTERN}(?P&lt;page_id&gt;{UUID_PATTERN})$', flags=re.IGNORECASE | re.VERBOSE)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.UUID_PATTERN","title":"<code>UUID_PATTERN = '[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.UUID_RE","title":"<code>UUID_RE = re.compile(f'^(?P&lt;id&gt;{UUID_PATTERN})$')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.camel_case","title":"<code>camel_case(string: str) -&gt; str</code>","text":"<p>Make a Python identifier in CamelCase.</p> <p>Attention: This may result in an empty string and a CamelCase sting will be capitalized!</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.chunky","title":"<code>chunky(text: str, length: int = MAX_TEXT_OBJECT_SIZE) -&gt; Iterator[str]</code>","text":"<p>Break the given <code>text</code> into chunks of at most <code>length</code> size.</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.decapitalize","title":"<code>decapitalize(string: str) -&gt; str</code>","text":"<p>Inverse of <code>capitalize</code>.</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.extract_id","title":"<code>extract_id(text: str) -&gt; str | None</code>","text":"<p>Examine the given text to find a valid Notion object ID.</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.html_img","title":"<code>html_img(url: str, size: float) -&gt; str</code>","text":"<p>Create a img tag in HTML.</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.python_identifier","title":"<code>python_identifier(string: str) -&gt; str</code>","text":"<p>Make a valid Python identifier.</p> <p>This will remove any leading characters that are not valid and change all invalid interior sequences to underscore.</p> <p>Attention: This may result in an empty string!</p>"},{"location":"reference/ultimate_notion/text/#ultimate_notion.text.snake_case","title":"<code>snake_case(string: str) -&gt; str</code>","text":"<p>Make a Python identifier in snake_case.</p> <p>Attention: This may result in an empty string!</p>"},{"location":"reference/ultimate_notion/utils/","title":"Utils","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","title":"<code>utils</code>","text":"<p>Additional utilities that fit nowhere else.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.GT","title":"<code>GT = TypeVar('GT', bound=GenericObject)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.KT","title":"<code>KT = TypeVar('KT')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.ObjRef","title":"<code>ObjRef: TypeAlias = UUID | str</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Self","title":"<code>Self = TypeVar('Self', bound='Wrapper[Any]')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.VT","title":"<code>VT = TypeVar('VT')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","title":"<code>SList</code>","text":"<p>A list that holds often only a single element.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","title":"<code>item() -&gt; T</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper","title":"<code>Wrapper(*args: Any, **kwargs: Any)</code>","text":"<p>Convert objects from the obj-based API to the high-level API and vice versa.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.obj_ref","title":"<code>obj_ref: GT = obj_api_type.build(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.__init_subclass__","title":"<code>__init_subclass__(wraps: type[GT], **kwargs: Any)</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.__new__","title":"<code>__new__(*args, **kwargs) -&gt; Wrapper</code>","text":""},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.Wrapper.wrap_obj_ref","title":"<code>wrap_obj_ref(obj_ref: GT) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Wraps <code>obj_ref</code> into a high-level object for the API of Ultimate Notion.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.convert_md_to_py","title":"<code>convert_md_to_py(path: Path | str)</code>","text":"<p>Converts a Markdown file to a py file by extracting all python codeblocks</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.deepcopy_with_sharing","title":"<code>deepcopy_with_sharing(obj: Any, shared_attributes: list[str], memo: dict[int, Any] | None = None)</code>","text":"<p>Like <code>deepcopy</code> but specified attributes are shared.</p> <p>Deepcopy an object, except for a given list of attributes, which should be shared between the original object and its copy.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>some object to copy</p> required <code>shared_attributes</code> <code>list[str]</code> <p>A list of strings identifying the attributes that should be shared instead of copied.</p> required <code>memo</code> <code>dict[int, Any] | None</code> <p>dictionary passed into deepcopy.  Ignore this argument if not calling from within deepcopy.</p> <code>None</code> <p>Example</p> <pre><code>class A(object):\n    def __init__(self):\n        self.copy_me = []\n        self.share_me = []\n\n    def __deepcopy__(self, memo):\n        return deepcopy_with_sharing(\n            self, shared_attribute_names=[\"share_me\"], memo=memo\n        )\n\n\na = A()\nb = deepcopy(a)\nassert a.copy_me is not b.copy_me\nassert a.share_me is b.share_me\n\nc = deepcopy(b)\nassert c.copy_me is not b.copy_me\nassert c.share_me is b.share_me\n</code></pre> <p>Original from https://stackoverflow.com/a/24621200</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff","title":"<code>dict_diff(dct1: dict[KT, VT], dct2: dict[KT, VT]) -&gt; tuple[list[KT], list[KT], dict[KT, tuple[VT, VT]]]</code>","text":"<p>Returns the added keys, removed keys and keys of changed values of both dictionaries.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.dict_diff_str","title":"<code>dict_diff_str(dct1: dict[KT, VT], dct2: dict[KT, VT]) -&gt; tuple[str, str, str]</code>","text":"<p>Returns the added keys, removed keys and keys of changed values of both dictionaries as strings for printing.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_index","title":"<code>find_index(elem: Any, lst: list[Any]) -&gt; int | None</code>","text":"<p>Find the index of the element in the list or return <code>None</code>.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.find_indices","title":"<code>find_indices(elements: np.ndarray | list[Any], total_set: np.ndarray | list[Any]) -&gt; np.ndarray</code>","text":"<p>Finds the indices of the elements in the total set.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_active_session","title":"<code>get_active_session() -&gt; Session</code>","text":"<p>Return the current active session or raise an exception.</p> <p>Avoids cyclic imports when used within the package itself. For internal use mostly.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_repr","title":"<code>get_repr(obj: Any, /, *, name: Any = None, desc: Any = None) -&gt; str</code>","text":"<p>Default representation, i.e. <code>repr(...)</code>, used by us for consistency.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.get_uuid","title":"<code>get_uuid(obj: str | UUID | objs.ParentRef | objs.NotionObject) -&gt; UUID</code>","text":"<p>Retrieves a UUID from an object reference.</p> <p>Only meant for internal use.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","title":"<code>is_notebook() -&gt; bool</code>","text":"<p>Determine if we are running within a Jupyter notebook.</p>"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.store_retvals","title":"<code>store_retvals(func)</code>","text":"<p>Decorator storing the return values as function attribute for later cleanups.</p> <p>This can be used for instance in a generator like this: <pre><code>@pytest.fixture\ndef create_blank_db(notion, test_area):\n    @store_retvals\n    def nested_func(db_name):\n        db = notion.databases.create(\n            parent=test_area,\n            title=db_name,\n            schema={\n                \"Name\": schema.Title(),\n            },\n        )\n        return db\n\n    yield nested_func\n\n    # clean up by deleting the db of each prior call\n    for db in nested_func.retvals:\n        notion.databases.delete(db)\n</code></pre></p>"},{"location":"reference/ultimate_notion/view/","title":"View","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","title":"<code>view</code>","text":"<p>View representing the result of a Query.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.ColType","title":"<code>ColType: TypeAlias = str | list[str]</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.Col","title":"<code>Col</code>","text":"<p>Column in a view, behaving like a string with some special attributes.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","title":"<code>View(database: Database, pages: list[Page], query: DBQueryBuilder)</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","title":"<code>columns: list[str]</code>  <code>property</code>","text":"<p>Columns of the database view aligned with the elements of a row.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","title":"<code>database = database</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.default_limit","title":"<code>default_limit = 10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_icon","title":"<code>has_icon: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_id","title":"<code>has_id: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","title":"<code>has_index: bool</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__len__","title":"<code>__len__()</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__repr__","title":"<code>__repr__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","title":"<code>__str__() -&gt; str</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.apply","title":"<code>apply(func: Callable[[Page], T]) -&gt; list[T]</code>","text":"<p>Apply function to all pages in view.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[Page], T]</code> <p>function taking a Page as input</p> required"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.as_table","title":"<code>as_table(tablefmt: str | None = None) -&gt; str</code>","text":"<p>Return the view in a given string table format.</p> <p>Some table formats:</p> <ul> <li>plain: no pseudographics</li> <li>simple: Pandoc's simple table, i.e. only dashes to separate header from content</li> <li>github: GitHub flavored Markdown</li> <li>simple_grid: uses dashes &amp; pipes to separate cells</li> <li>html: standard html markup</li> </ul> <p>Find more table formats under: astanin/python-tabulate#table-format</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","title":"<code>clone() -&gt; View</code>","text":"<p>Clone the current view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.filter","title":"<code>filter()</code>","text":"<p>Filter the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.get_page","title":"<code>get_page(idx: int) -&gt; Page</code>","text":"<p>Retrieve a page by index of the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.get_row","title":"<code>get_row(idx: int) -&gt; tuple[Any, ...]</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.head","title":"<code>head(num: int) -&gt; View</code>","text":"<p>Keep only the first <code>num</code> elements in view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","title":"<code>limit(num: int) -&gt; View</code>","text":"<p>Alias for <code>head</code></p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reload","title":"<code>reload() -&gt; View</code>","text":"<p>Reload all pages by re-executing the query that generated the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reset","title":"<code>reset() -&gt; View</code>","text":"<p>Reset the view, i.e. remove filtering, index and sorting.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.reverse","title":"<code>reverse() -&gt; View</code>","text":"<p>Reverse the order of the rows.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.search_page","title":"<code>search_page(name: str | RichText) -&gt; SList[Page]</code>","text":"<p>Retrieve a page from this view by name</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.select","title":"<code>select(*cols: str) -&gt; View</code>","text":"<p>Select columns for the view</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.show","title":"<code>show(*, simple: bool | None = None)</code>","text":"<p>Show the database as human-readable table.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.sort","title":"<code>sort()</code>","text":"<p>Sort the view with respect to some columns.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.tail","title":"<code>tail(num: int) -&gt; View</code>","text":"<p>Keep only the last <code>num</code> elements in view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pages","title":"<code>to_pages() -&gt; list[Page]</code>","text":"<p>Convert the view to a simple list of pages.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_pandas","title":"<code>to_pandas() -&gt; pd.DataFrame</code>","text":"<p>Convert the view to a pandas dataframe.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.to_rows","title":"<code>to_rows() -&gt; list[tuple[Any, ...]]</code>","text":""},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_icon","title":"<code>with_icon(name='icon') -&gt; View</code>","text":"<p>Show icons in HTML output.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_id","title":"<code>with_id(name: str = 'id') -&gt; View</code>","text":"<p>Add an id column to the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","title":"<code>with_index(name='index') -&gt; View</code>","text":"<p>Add an index column to the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_icon","title":"<code>without_icon() -&gt; View</code>","text":"<p>Don't show icons in HTML output.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_id","title":"<code>without_id() -&gt; View</code>","text":"<p>Remove id column from the view.</p>"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","title":"<code>without_index() -&gt; View</code>","text":"<p>Remove index column from the view.</p>"},{"location":"reference/ultimate_notion/adapters/","title":"Adapters","text":""},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters","title":"<code>adapters</code>","text":""},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters.__all__","title":"<code>__all__ = ['get_cfg']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/#ultimate_notion.adapters.get_cfg","title":"<code>get_cfg() -&gt; Config</code>","text":"<p>Returns the configuration as an object.</p>"},{"location":"reference/ultimate_notion/adapters/google/","title":"Google","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google","title":"<code>google</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.__all__","title":"<code>__all__ = ['GTasksClient']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient","title":"<code>GTasksClient(config: Config | None = None, *, read_only: bool = True)</code>","text":"<p>Google API to easily handle Google Tasks.</p> <p>By default, only the least permissive scope <code>TASKS_RO</code> in case of <code>read_only = True</code> is used.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.read_only","title":"<code>read_only = read_only</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.resource","title":"<code>resource = self._build_resource()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.all_tasklists","title":"<code>all_tasklists(max_results: int | None = None) -&gt; list[GTaskList]</code>","text":"<p>Returns a list of all task lists.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.create_tasklist","title":"<code>create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Creates a new task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.get_tasklist","title":"<code>get_tasklist(tasklist_id: str) -&gt; GTaskList</code>","text":"<p>Returns the task list with the given ID.</p>"},{"location":"reference/ultimate_notion/adapters/google/#ultimate_notion.adapters.google.GTasksClient.recreate_token","title":"<code>recreate_token()</code>","text":"<p>Recreate the current token using the scopes given at initialization.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/","title":"Tasks","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks","title":"<code>tasks</code>","text":"<p>Client for Google Tasks API.</p> <p>Follow this quickstart guide to enalbe the API and create the necessary credentials: https://developers.google.com/tasks/quickstart/python</p> <p>Official API documentation: https://googleapis.github.io/google-api-python-client/docs/dyn/tasks_v1.html</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject","title":"<code>GObject(_resource: Resource, **data: str)</code>","text":"<p>Representation of a general Google Object from the Tasks API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.etag","title":"<code>etag: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.id","title":"<code>id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.kind","title":"<code>kind: Kind</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.self_link","title":"<code>self_link: HttpUrl = Field(..., alias='selfLink')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.title_","title":"<code>title_: str = Field(..., alias='title')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.updated","title":"<code>updated: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.__eq__","title":"<code>__eq__(other: object) -&gt; bool</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GObject.__hash__","title":"<code>__hash__() -&gt; int</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask","title":"<code>GTask(_resource: Resource, **data: str)</code>","text":"<p>Representation of a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.children","title":"<code>children: list[GTask]</code>  <code>property</code>","text":"<p>Returns the children of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.completed","title":"<code>completed: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Returns whether this task is completed.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.completed_at","title":"<code>completed_at: datetime | None = Field(alias='completed', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.due","title":"<code>due: datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.is_deleted","title":"<code>is_deleted: bool = Field(alias='deleted', default=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.kind","title":"<code>kind: Literal[Kind.TASK]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.links","title":"<code>links: list[Link] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.notes","title":"<code>notes: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the notes of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.notes_","title":"<code>notes_: str | None = Field(alias='notes', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.parent","title":"<code>parent: GTask | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the parent task of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.parent_id","title":"<code>parent_id: str | None = Field(alias='parent', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.position","title":"<code>position: int</code>  <code>property</code>","text":"<p>Returns the position of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.position_","title":"<code>position_: str = Field(alias='position')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.status","title":"<code>status: Status = Status.NEEDS_ACTION</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.tasklist","title":"<code>tasklist: GTaskList</code>  <code>property</code>","text":"<p>Returns the task list this task belongs to.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.tasklist_id","title":"<code>tasklist_id: str</code>  <code>property</code>","text":"<p>Returns the task list this task belongs to.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the title of this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.delete","title":"<code>delete() -&gt; GTask</code>","text":"<p>Deletes this task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.position_after","title":"<code>position_after(previous: GTask | None = None) -&gt; GTask</code>","text":"<p>Moves this task to the behind the given task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTask.reload","title":"<code>reload() -&gt; GTask</code>","text":"<p>Reloads this task from the API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList","title":"<code>GTaskList(_resource: Resource, **data: str)</code>","text":"<p>Representation of a Google Task List.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.kind","title":"<code>kind: Literal[Kind.TASK_LIST]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the title of this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.all_tasks","title":"<code>all_tasks(max_results: int | None = None) -&gt; list[GTask]</code>","text":"<p>Returns a list of all tasks in this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.clear","title":"<code>clear() -&gt; GTaskList</code>","text":"<p>Clears all completed tasks in this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.create_task","title":"<code>create_task(title: str) -&gt; GTask</code>","text":"<p>Creates a new task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.delete","title":"<code>delete()</code>","text":"<p>Deletes this task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.get_task","title":"<code>get_task(task_id: str) -&gt; GTask</code>","text":"<p>Returns the task with the given ID.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTaskList.reload","title":"<code>reload() -&gt; GTaskList</code>","text":"<p>Reloads this task list from the API.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient","title":"<code>GTasksClient(config: Config | None = None, *, read_only: bool = True)</code>","text":"<p>Google API to easily handle Google Tasks.</p> <p>By default, only the least permissive scope <code>TASKS_RO</code> in case of <code>read_only = True</code> is used.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.read_only","title":"<code>read_only = read_only</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.resource","title":"<code>resource = self._build_resource()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.all_tasklists","title":"<code>all_tasklists(max_results: int | None = None) -&gt; list[GTaskList]</code>","text":"<p>Returns a list of all task lists.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.create_tasklist","title":"<code>create_tasklist(title: str) -&gt; GTaskList</code>","text":"<p>Creates a new task list.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.get_tasklist","title":"<code>get_tasklist(tasklist_id: str) -&gt; GTaskList</code>","text":"<p>Returns the task list with the given ID.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.GTasksClient.recreate_token","title":"<code>recreate_token()</code>","text":"<p>Recreate the current token using the scopes given at initialization.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Kind","title":"<code>Kind</code>","text":"<p>Representation of the different kinds of Google Objects.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Kind.TASK","title":"<code>TASK = 'tasks#task'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Kind.TASK_LIST","title":"<code>TASK_LIST = 'tasks#taskList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Link","title":"<code>Link</code>","text":"<p>Representation of a link in a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Link.Link","title":"<code>Link: HttpUrl</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Link.description","title":"<code>description: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Link.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Link.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Scope","title":"<code>Scope</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Scope.TASKS_RO","title":"<code>TASKS_RO = 'https://www.googleapis.com/auth/tasks.readonly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Scope.TASKS_RW","title":"<code>TASKS_RW = 'https://www.googleapis.com/auth/tasks'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Status","title":"<code>Status</code>","text":"<p>Representation of the different statuses of a Google Task.</p>"},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Status.COMPLETED","title":"<code>COMPLETED = 'completed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/adapters/google/tasks/#ultimate_notion.adapters.google.tasks.Status.NEEDS_ACTION","title":"<code>NEEDS_ACTION = 'needsAction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/","title":"Obj api","text":""},{"location":"reference/ultimate_notion/obj_api/#ultimate_notion.obj_api","title":"<code>obj_api</code>","text":"<p>The Notion API mapped to Python objects by Pydantic.</p> <p>The code was taken originally from Notional by Jason Heddings and is MIT-licensed. Due to the Pydantic v2 migration and several other design changes, it was refactored since then.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/","title":"Blocks","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks","title":"<code>blocks</code>","text":"<p>Wrapper for Notion API blocks.</p> <p>Blocks are the base for all Notion content.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Block","title":"<code>Block</code>","text":"<p>A standard block object in Notion.</p> <p>Calling the block will expose the nested data in the object.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark","title":"<code>Bookmark</code>","text":"<p>A bookmark block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Bookmark.bookmark","title":"<code>bookmark: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb","title":"<code>Breadcrumb</code>","text":"<p>A breadcrumb block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Breadcrumb.breadcrumb","title":"<code>breadcrumb: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem","title":"<code>BulletedListItem</code>","text":"<p>A bulleted list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.BulletedListItem.bulleted_list_item","title":"<code>bulleted_list_item: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout","title":"<code>Callout</code>","text":"<p>A callout block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Callout.callout","title":"<code>callout: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase","title":"<code>ChildDatabase</code>","text":"<p>A child database block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildDatabase.child_database","title":"<code>child_database: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage","title":"<code>ChildPage</code>","text":"<p>A child page block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ChildPage.child_page","title":"<code>child_page: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code","title":"<code>Code</code>","text":"<p>A code block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Code.code","title":"<code>code: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column","title":"<code>Column</code>","text":"<p>A column block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Column.column","title":"<code>column: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList","title":"<code>ColumnList</code>","text":"<p>A column list block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ColumnList.column_list","title":"<code>column_list: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject","title":"<code>DataObject</code>","text":"<p>The base type for all Notion API records.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.archived","title":"<code>archived: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.created_by","title":"<code>created_by: UserRef = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.created_time","title":"<code>created_time: datetime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.has_children","title":"<code>has_children: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.id","title":"<code>id: UUID = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.last_edited_by","title":"<code>last_edited_by: UserRef = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.last_edited_time","title":"<code>last_edited_time: datetime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.DataObject.parent","title":"<code>parent: SerializeAsAny[ParentRef] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database","title":"<code>Database</code>","text":"<p>A database record type.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.cover","title":"<code>cover: FileObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.description","title":"<code>description: list[RichTextObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.icon","title":"<code>icon: SerializeAsAny[FileObject] | EmojiObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.is_inline","title":"<code>is_inline: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.properties","title":"<code>properties: dict[str, PropertyType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.public_url","title":"<code>public_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.title","title":"<code>title: list[RichTextObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Database.url","title":"<code>url: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider","title":"<code>Divider</code>","text":"<p>A divider block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Divider.divider","title":"<code>divider: Any = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed","title":"<code>Embed</code>","text":"<p>An embed block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Embed.embed","title":"<code>embed: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation","title":"<code>Equation</code>","text":"<p>An equation block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Equation.equation","title":"<code>equation: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File","title":"<code>File</code>","text":"<p>A file block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.File.file","title":"<code>file: SerializeAsAny[FileObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1","title":"<code>Heading1</code>","text":"<p>A heading_1 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading1.heading_1","title":"<code>heading_1: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2","title":"<code>Heading2</code>","text":"<p>A heading_2 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading2.heading_2","title":"<code>heading_2: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3","title":"<code>Heading3</code>","text":"<p>A heading_3 block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Heading3.heading_3","title":"<code>heading_3: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image","title":"<code>Image</code>","text":"<p>An image block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Image.image","title":"<code>image: SerializeAsAny[FileObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview","title":"<code>LinkPreview</code>","text":"<p>A link_preview block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkPreview.link_preview","title":"<code>link_preview: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage","title":"<code>LinkToPage</code>","text":"<p>A link_to_page block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.LinkToPage.link_to_page","title":"<code>link_to_page: SerializeAsAny[ParentRef]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem","title":"<code>NumberedListItem</code>","text":"<p>A numbered list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.NumberedListItem.numbered_list_item","title":"<code>numbered_list_item: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF","title":"<code>PDF</code>","text":"<p>A pdf block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.PDF.pdf","title":"<code>pdf: SerializeAsAny[FileObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page","title":"<code>Page</code>","text":"<p>A standard Notion page object.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.cover","title":"<code>cover: SerializeAsAny[FileObject] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.icon","title":"<code>icon: SerializeAsAny[FileObject] | EmojiObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.properties","title":"<code>properties: dict[str, PropertyValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.public_url","title":"<code>public_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Page.url","title":"<code>url: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph","title":"<code>Paragraph</code>","text":"<p>A paragraph block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Paragraph.paragraph","title":"<code>paragraph: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote","title":"<code>Quote</code>","text":"<p>A quote block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Quote.quote","title":"<code>quote: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock","title":"<code>SyncedBlock</code>","text":"<p>A synced_block block in Notion - either original or synced.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.SyncedBlock.synced_block","title":"<code>synced_block: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table","title":"<code>Table</code>","text":"<p>A table block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Table.table","title":"<code>table: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents","title":"<code>TableOfContents</code>","text":"<p>A table_of_contents block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableOfContents.table_of_contents","title":"<code>table_of_contents: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow","title":"<code>TableRow</code>","text":"<p>A table_row block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TableRow.table_row","title":"<code>table_row: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template","title":"<code>Template</code>","text":"<p>A template block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Template.template","title":"<code>template: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.TextBlock","title":"<code>TextBlock</code>","text":"<p>A standard abstract text block object in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo","title":"<code>ToDo</code>","text":"<p>A todo list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.ToDo.to_do","title":"<code>to_do: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle","title":"<code>Toggle</code>","text":"<p>A toggle list item in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Toggle.toggle","title":"<code>toggle: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock","title":"<code>UnsupportedBlock</code>","text":"<p>A placeholder for unsupported blocks in the API.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.UnsupportedBlock.unsupported","title":"<code>unsupported: _NestedData | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video","title":"<code>Video</code>","text":"<p>A video block in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/blocks/#ultimate_notion.obj_api.blocks.Video.video","title":"<code>video: SerializeAsAny[FileObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/","title":"Core","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core","title":"<code>core</code>","text":"<p>Base classes for working with the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject","title":"<code>GenericObject</code>","text":"<p>The base for all API objects.</p> <p>As a general convention, data fields in lower case are defined by the Notion API.  Properties in Title Case are provided for convenience.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.model_config","title":"<code>model_config = ConfigDict(extra='forbid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.build","title":"<code>build(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Use the standard constructur to build the instance. Will be overridden for more complex types.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.serialize_for_api","title":"<code>serialize_for_api()</code>","text":"<p>Serialize the object for sending it to the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.GenericObject.update","title":"<code>update(**data)</code>","text":"<p>Update the internal attributes with new data.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject","title":"<code>NotionObject</code>","text":"<p>A top-level Notion API resource.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.id","title":"<code>id: UUID | str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.object","title":"<code>object: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.request_id","title":"<code>request_id: UUID = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__init_subclass__","title":"<code>__init_subclass__(*, object=None, **kwargs)</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.NotionObject.__pydantic_init_subclass__","title":"<code>__pydantic_init_subclass__(*, object=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Update <code>GenericObject</code> defaults for the named object.</p> <p>Needed since <code>model_fields</code> are not available during init_subclass See: pydantic/pydantic#5369</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject","title":"<code>TypedObject</code>","text":"<p>A type-referenced object.</p> <p>Many objects in the Notion API follow a standard pattern with a 'type' property followed by additional data.  These objects must specify a <code>type</code> attribute to ensure that the correct object is created.</p> <p>For example, this contains a nested 'detail' object:</p> <pre><code>data = {\n    type: \"detail\",\n    ...\n    detail: {\n        ...\n    }\n}\n</code></pre> <p>Calling the object provides direct access to the data stored in <code>{type}</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.value","title":"<code>value: Any</code>  <code>property</code>","text":"<p>Return the nested object.</p>"},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__init_subclass__","title":"<code>__init_subclass__(*, type: str | None = None, polymorphic_base: bool = False, **kwargs)</code>","text":""},{"location":"reference/ultimate_notion/obj_api/core/#ultimate_notion.obj_api.core.TypedObject.__pydantic_init_subclass__","title":"<code>__pydantic_init_subclass__(*, type: str | None = None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Register the subtypes of the TypedObject subclass.</p> <p>Needed since <code>model_fields</code> are not available during init_subclass. See: pydantic/pydantic#5369</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/","title":"Endpoints","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints","title":"<code>endpoints</code>","text":"<p>Provides an object-based Notion API with all endpoints.</p> <p>This pydantic based API is often referred to as just <code>api</code> while the low-level API of the Notion Client SDK library is just referred to as <code>raw_api</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.T_UNSET","title":"<code>T_UNSET: TypeAlias = Literal['UNSET']</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UNSET","title":"<code>UNSET: T_UNSET = 'UNSET'</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint","title":"<code>BlocksEndpoint(*args, **kwargs)</code>","text":"<p>Interface to the 'blocks' endpoint of the Notion API</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.children","title":"<code>children = BlocksEndpoint.ChildrenEndpoint(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.raw_api","title":"<code>raw_api: NCBlocksEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint","title":"<code>ChildrenEndpoint(api: NotionAPI)</code>","text":"<p>Interface to the API 'blocks/children' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.raw_api","title":"<code>raw_api: NCBlocksChildrenEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.append","title":"<code>append(parent, *blocks: Block)</code>","text":"<p>Add the given blocks as children of the specified parent.</p> <p>The blocks info will be updated based on returned data.</p> <p><code>parent</code> may be any suitable <code>ObjectReference</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.ChildrenEndpoint.list","title":"<code>list(parent)</code>","text":"<p>Return all Blocks contained by the specified parent.</p> <p><code>parent</code> may be any suitable <code>ObjectReference</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.delete","title":"<code>delete(block: Block) -&gt; Block</code>","text":"<p>Delete (archive) the specified Block.</p> <p><code>block</code> may be any suitable <code>ObjectReference</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.restore","title":"<code>restore(block: Block) -&gt; Block</code>","text":"<p>Restore (unarchive) the specified Block.</p> <p><code>block</code> may be any suitable <code>ObjectReference</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.retrieve","title":"<code>retrieve(block) -&gt; Block</code>","text":"<p>Return the requested Block.</p> <p><code>block</code> may be any suitable <code>ObjectReference</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.BlocksEndpoint.update","title":"<code>update(block: Block) -&gt; Block</code>","text":"<p>Update the block content on the server.</p> <p>The block info will be updated to the latest version from the server.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint","title":"<code>DatabasesEndpoint(api: NotionAPI)</code>","text":"<p>Interface to the 'databases' endpoint of the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.raw_api","title":"<code>raw_api: NCDatabasesEndpoint</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.create","title":"<code>create(parent: Page, schema: dict[str, PropertyType], title: list[RichTextObject] | None = None) -&gt; Database</code>","text":"<p>Add a database to the given Page parent.</p> <p><code>parent</code> may be any suitable <code>PageRef</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.delete","title":"<code>delete(db: Database) -&gt; Database</code>","text":"<p>Delete (archive) the specified Database.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.query","title":"<code>query(db: Database) -&gt; DBQueryBuilder</code>","text":"<p>Initialize a new Query object with the target data class.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.restore","title":"<code>restore(db: Database) -&gt; Database</code>","text":"<p>Restore (unarchive) the specified Database.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.retrieve","title":"<code>retrieve(dbref: Database | str | UUID) -&gt; Database</code>","text":"<p>Return the Database with the given ID.</p> <p><code>dbref</code> may be any suitable <code>DatabaseRef</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.DatabasesEndpoint.update","title":"<code>update(db: Database, title: list[RichTextObject] | None = None, description: list[RichTextObject] | None = None, schema: dict[str, PropertyType] | None = None) -&gt; Database</code>","text":"<p>Update the Database object on the server.</p> <p>The database info will be updated to the latest version from the server.</p> <p>API reference: https://developers.notion.com/reference/update-a-database</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint","title":"<code>Endpoint(api: NotionAPI)</code>","text":"<p>Baseclass of the Notion API endpoints.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.Endpoint.api","title":"<code>api = api</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI","title":"<code>NotionAPI(client: NCClient)</code>","text":"<p>Object-based Notion API (pydantic) with all endpoints.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.blocks","title":"<code>blocks = BlocksEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.client","title":"<code>client = client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.databases","title":"<code>databases = DatabasesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.pages","title":"<code>pages = PagesEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.search","title":"<code>search = SearchEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.NotionAPI.users","title":"<code>users = UsersEndpoint(self)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint","title":"<code>PagesEndpoint(*args, **kwargs)</code>","text":"<p>Interface to the API 'pages' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.properties","title":"<code>properties = PagesEndpoint.PropertiesEndpoint(*args, **kwargs)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.raw_api","title":"<code>raw_api</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint","title":"<code>PropertiesEndpoint(api: NotionAPI)</code>","text":"<p>Interface to the API 'pages/properties' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.raw_api","title":"<code>raw_api</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.PropertiesEndpoint.retrieve","title":"<code>retrieve(page_id, property_id)</code>","text":"<p>Return the Property on a specific Page with the given ID</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.create","title":"<code>create(parent, title: Title | None = None, properties=None, children=None) -&gt; Page</code>","text":"<p>Add a page to the given parent (Page or Database).</p> <p><code>parent</code> may be a <code>ParentRef</code>, <code>Page</code>, or <code>Database</code> object.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.delete","title":"<code>delete(page: Page) -&gt; Page</code>","text":"<p>Delete (archive) the specified Page.</p> <p><code>page</code> may be any suitable <code>PageRef</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.restore","title":"<code>restore(page: Page) -&gt; Page</code>","text":"<p>Restore (unarchive) the specified Page.</p> <p><code>page</code> may be any suitable <code>PageRef</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.retrieve","title":"<code>retrieve(page) -&gt; Page</code>","text":"<p>Return the requested Page.</p> <p><code>page</code> may be any suitable <code>PageRef</code> type.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.set_attr","title":"<code>set_attr(page: Page, *, cover: FileObject | None | T_UNSET = UNSET, icon: FileObject | EmojiObject | None | T_UNSET = UNSET, archived: bool | T_UNSET = UNSET)</code>","text":"<p>Set specific page attributes (such as cover, icon, etc.) on the server.</p> <p><code>page</code> may be any suitable <code>PageRef</code> type.</p> <p>To remove an attribute, set its value to None.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.PagesEndpoint.update","title":"<code>update(page: Page, **properties)</code>","text":"<p>Update the Page object properties on the server.</p> <p>An optional <code>properties</code> may be specified as <code>\"name\"</code>: <code>PropertyValue</code> pairs.</p> <p>If <code>properties</code> are provided, only those values will be updated. If <code>properties</code> is empty, all page properties will be updated.</p> <p>The page info will be updated to the latest version from the server.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint","title":"<code>SearchEndpoint(api: NotionAPI)</code>","text":"<p>Interface to the API 'search' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SearchEndpoint.__call__","title":"<code>__call__(text=None) -&gt; SearchQueryBuilder</code>","text":"<p>Perform a search with the optional text</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.SessionError","title":"<code>SessionError(message)</code>","text":"<p>Raised when there are issues with the Notion session.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint","title":"<code>UsersEndpoint(api: NotionAPI)</code>","text":"<p>Interface to the API 'users' endpoint.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.raw_api","title":"<code>raw_api</code>  <code>property</code>","text":"<p>Return the underlying endpoint in the Notion SDK</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.as_list","title":"<code>as_list()</code>","text":"<p>Return an iterator for all users in the workspace.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.me","title":"<code>me()</code>","text":"<p>Return the current bot User.</p>"},{"location":"reference/ultimate_notion/obj_api/endpoints/#ultimate_notion.obj_api.endpoints.UsersEndpoint.retrieve","title":"<code>retrieve(user_id)</code>","text":"<p>Return the User with the given ID.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/","title":"Enums","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums","title":"<code>enums</code>","text":"<p>All definitions and enumerations</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc","title":"<code>AggFunc</code>","text":"<p>Aggregation functions for formulas.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.AVERAGE","title":"<code>AVERAGE = 'average'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.CHECKED","title":"<code>CHECKED = 'checked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT","title":"<code>COUNT = 'count'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_PER_GROUP","title":"<code>COUNT_PER_GROUP = 'count_per_group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.COUNT_VALUES","title":"<code>COUNT_VALUES = 'count_values'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.DATE_RANGE","title":"<code>DATE_RANGE = 'date_range'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.EARLIEST_DATE","title":"<code>EARLIEST_DATE = 'earliest_date'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.EMPTY","title":"<code>EMPTY = 'empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.LATEST_DATE","title":"<code>LATEST_DATE = 'latest_date'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MAX","title":"<code>MAX = 'max'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MEDIAN","title":"<code>MEDIAN = 'median'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.MIN","title":"<code>MIN = 'min'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.NOT_EMPTY","title":"<code>NOT_EMPTY = 'not_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_CHECKED","title":"<code>PERCENT_CHECKED = 'percent_checked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_EMPTY","title":"<code>PERCENT_EMPTY = 'percent_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_NOT_EMPTY","title":"<code>PERCENT_NOT_EMPTY = 'percent_not_empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.PERCENT_PER_GROUP","title":"<code>PERCENT_PER_GROUP = 'percent_per_group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.RANGE","title":"<code>RANGE = 'range'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SHOW_ORIGINAL","title":"<code>SHOW_ORIGINAL = 'show_original'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SHOW_UNIQUE","title":"<code>SHOW_UNIQUE = 'show_unique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.SUM","title":"<code>SUM = 'sum'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.UNCHECKED","title":"<code>UNCHECKED = 'unchecked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.AggFunc.UNIQUE","title":"<code>UNIQUE = 'unique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor","title":"<code>BGColor</code>","text":"<p>Background colors for most textual blocks, e.g. paragraphs, callouts, etc.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.BLUE","title":"<code>BLUE = 'blue_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.BROWN","title":"<code>BROWN = 'brown_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.GRAY","title":"<code>GRAY = 'gray_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.GREEN","title":"<code>GREEN = 'green_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.ORANGE","title":"<code>ORANGE = 'orange_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.PINK","title":"<code>PINK = 'pink_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.PURPLE","title":"<code>PURPLE = 'purple_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.RED","title":"<code>RED = 'red_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.BGColor.YELLOW","title":"<code>YELLOW = 'yellow_background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang","title":"<code>CodeLang</code>","text":"<p>Coding languages for code blocks.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ABAP","title":"<code>ABAP = 'abap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ARDUINO","title":"<code>ARDUINO = 'arduino'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.BASH","title":"<code>BASH = 'bash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.BASIC","title":"<code>BASIC = 'basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.C","title":"<code>C = 'c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CLOJURE","title":"<code>CLOJURE = 'clojure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.COFFEESCRIPT","title":"<code>COFFEESCRIPT = 'coffeescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CPP","title":"<code>CPP = 'c++'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CSHARP","title":"<code>CSHARP = 'c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.CSS","title":"<code>CSS = 'css'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DART","title":"<code>DART = 'dart'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DIFF","title":"<code>DIFF = 'diff'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.DOCKER","title":"<code>DOCKER = 'docker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ELIXIR","title":"<code>ELIXIR = 'elixir'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ELM","title":"<code>ELM = 'elm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.ERLANG","title":"<code>ERLANG = 'erlang'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FLOW","title":"<code>FLOW = 'flow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FORTRAN","title":"<code>FORTRAN = 'fortran'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.FSHARP","title":"<code>FSHARP = 'f#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GHERKIN","title":"<code>GHERKIN = 'gherkin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GLSL","title":"<code>GLSL = 'glsl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GO","title":"<code>GO = 'go'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GRAPHQL","title":"<code>GRAPHQL = 'graphql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.GROOVY","title":"<code>GROOVY = 'groovy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.HASKELL","title":"<code>HASKELL = 'haskell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.HTML","title":"<code>HTML = 'html'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JAVA","title":"<code>JAVA = 'java'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JAVASCRIPT","title":"<code>JAVASCRIPT = 'javascript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.JULIA","title":"<code>JULIA = 'julia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.KOTLIN","title":"<code>KOTLIN = 'kotlin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LATEX","title":"<code>LATEX = 'latex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LESS","title":"<code>LESS = 'less'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LISP","title":"<code>LISP = 'lisp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LIVESCRIPT","title":"<code>LIVESCRIPT = 'livescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.LUA","title":"<code>LUA = 'lua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MAKEFILE","title":"<code>MAKEFILE = 'makefile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MARKDOWN","title":"<code>MARKDOWN = 'markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MARKUP","title":"<code>MARKUP = 'markup'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MATLAB","title":"<code>MATLAB = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MERMAID","title":"<code>MERMAID = 'mermaid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.MISC","title":"<code>MISC = 'java/c/c++/c#'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.NIX","title":"<code>NIX = 'nix'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.OBJECTIVE_C","title":"<code>OBJECTIVE_C = 'objective-c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.OCAML","title":"<code>OCAML = 'ocaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PASCAL","title":"<code>PASCAL = 'pascal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PERL","title":"<code>PERL = 'perl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PHP","title":"<code>PHP = 'php'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PLAIN_TEXT","title":"<code>PLAIN_TEXT = 'plain text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.POWERSHELL","title":"<code>POWERSHELL = 'powershell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PROLOG","title":"<code>PROLOG = 'prolog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PROTOBUF","title":"<code>PROTOBUF = 'protobuf'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.PYTHON","title":"<code>PYTHON = 'python'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.R","title":"<code>R = 'r'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.REASON","title":"<code>REASON = 'reason'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.RUBY","title":"<code>RUBY = 'ruby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.RUST","title":"<code>RUST = 'rust'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SASS","title":"<code>SASS = 'sass'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCALA","title":"<code>SCALA = 'scala'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCHEME","title":"<code>SCHEME = 'scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SCSS","title":"<code>SCSS = 'scss'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SHELL","title":"<code>SHELL = 'shell'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SQL","title":"<code>SQL = 'sql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.SWIFT","title":"<code>SWIFT = 'swift'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.TYPESCRIPT","title":"<code>TYPESCRIPT = 'typescript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VB_NET","title":"<code>VB_NET = 'vb.net'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VERILOG","title":"<code>VERILOG = 'verilog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VHDL","title":"<code>VHDL = 'vhdl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.VISUAL_BASIC","title":"<code>VISUAL_BASIC = 'visual basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.WEBASSEMBLY","title":"<code>WEBASSEMBLY = 'webassembly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.XML","title":"<code>XML = 'xml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.CodeLang.YAML","title":"<code>YAML = 'yaml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color","title":"<code>Color</code>","text":"<p>Basic colors</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BLUE","title":"<code>BLUE = 'blue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.BROWN","title":"<code>BROWN = 'brown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GRAY","title":"<code>GRAY = 'gray'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.GREEN","title":"<code>GREEN = 'green'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.ORANGE","title":"<code>ORANGE = 'orange'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PINK","title":"<code>PINK = 'pink'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.PURPLE","title":"<code>PURPLE = 'purple'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.RED","title":"<code>RED = 'red'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.Color.YELLOW","title":"<code>YELLOW = 'yellow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat","title":"<code>NumberFormat</code>","text":"<p>Number formats for numbers.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ARGENTINE_PESO","title":"<code>ARGENTINE_PESO = 'argentine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.BAHT","title":"<code>BAHT = 'baht'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CANADIAN_DOLLAR","title":"<code>CANADIAN_DOLLAR = 'canadian_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.CHILEAN_PESO","title":"<code>CHILEAN_PESO = 'chilean_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.COLOMBIAN_PESO","title":"<code>COLOMBIAN_PESO = 'colombian_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DANISH_KRONE","title":"<code>DANISH_KRONE = 'danish_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DIRHAM","title":"<code>DIRHAM = 'dirham'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.DOLLAR","title":"<code>DOLLAR = 'dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.EURO","title":"<code>EURO = 'euro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FORINT","title":"<code>FORINT = 'forint'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.FRANC","title":"<code>FRANC = 'franc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.HONG_KONG_DOLLAR","title":"<code>HONG_KONG_DOLLAR = 'hong_kong_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KORUNA","title":"<code>KORUNA = 'koruna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.KRONA","title":"<code>KRONA = 'krona'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LEU","title":"<code>LEU = 'leu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.LIRA","title":"<code>LIRA = 'lira'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.MEXICAN_PESO","title":"<code>MEXICAN_PESO = 'mexican_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_TAIWAN_DOLLAR","title":"<code>NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NEW_ZEALAND_DOLLAR","title":"<code>NEW_ZEALAND_DOLLAR = 'new_zealand_dollar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NORWEGIAN_KRONE","title":"<code>NORWEGIAN_KRONE = 'norwegian_krone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.NUMBER_WITH_COMMAS","title":"<code>NUMBER_WITH_COMMAS = 'number_with_commas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PERCENT","title":"<code>PERCENT = 'percent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.PHILIPPINE_PESO","title":"<code>PHILIPPINE_PESO = 'philippine_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.POUND","title":"<code>POUND = 'pound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RAND","title":"<code>RAND = 'rand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.REAL","title":"<code>REAL = 'real'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RINGGIT","title":"<code>RINGGIT = 'ringgit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RIYAL","title":"<code>RIYAL = 'riyal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUBLE","title":"<code>RUBLE = 'ruble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPEE","title":"<code>RUPEE = 'rupee'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.RUPIAH","title":"<code>RUPIAH = 'rupiah'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.SHEKEL","title":"<code>SHEKEL = 'shekel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.URUGUAYAN_PESO","title":"<code>URUGUAYAN_PESO = 'uruguayan_peso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.WON","title":"<code>WON = 'won'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YEN","title":"<code>YEN = 'yen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.YUAN","title":"<code>YUAN = 'yuan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.NumberFormat.ZLOTY","title":"<code>ZLOTY = 'zloty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState","title":"<code>VState</code>","text":"<p>Verification states for pages in wiki databases.</p>"},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState.UNVERIFIED","title":"<code>UNVERIFIED = 'unverified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/enums/#ultimate_notion.obj_api.enums.VState.VERIFIED","title":"<code>VERIFIED = 'verified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/","title":"Iterator","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator","title":"<code>iterator</code>","text":"<p>Iterator classes for working with paginated API responses.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.MAX_PAGE_SIZE","title":"<code>MAX_PAGE_SIZE = 100</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList","title":"<code>BlockList</code>","text":"<p>A list of Block objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.BlockList.block","title":"<code>block: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList","title":"<code>DatabaseList</code>","text":"<p>A list of Database objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.DatabaseList.database","title":"<code>database: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator","title":"<code>EndpointIterator(endpoint)</code>","text":"<p>Iterates over results from a paginated API response.</p> <p>These objects may be reused, however they are not thread safe. For example, after creating the following iterator:</p> <pre><code>notion = notional.connect(auth=NOTION_TOKEN)\nquery = EndpointIterator(notion.databases().query)\n</code></pre> <p>The iterator may be reused with different database ID's:</p> <pre><code>for items in query(database_id=first_db):\n    ...\n\nfor items in query(database_id=second_db):\n    ...\n</code></pre> <p>Objects returned by the iterator may also be converted to a specific type.  This is most commonly used to wrap API objects with a higher-level object (such as ORM types).</p> <p>If a class is provided, it will be constructued for each result returned by this iterator.  The constructor must accept a single argument, which is the <code>NotionObject</code> contained in the <code>ObjectList</code>.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.has_more","title":"<code>has_more = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.next_cursor","title":"<code>next_cursor = None</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.page_num","title":"<code>page_num = -1</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.total_items","title":"<code>total_items = -1</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.__call__","title":"<code>__call__(**kwargs)</code>","text":"<p>Return a generator for this endpoint using the given parameters.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.EndpointIterator.as_list","title":"<code>as_list(**kwargs)</code>","text":"<p>Collect all items from the endpoint as a list.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList","title":"<code>ObjectList</code>","text":"<p>A paginated list of objects returned by the Notion API.</p> <p>More details in the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.has_more","title":"<code>has_more: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.next_cursor","title":"<code>next_cursor: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.ObjectList.results","title":"<code>results: list[Annotated[NotionObject, BeforeValidator(convert_to_notion_obj)]] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList","title":"<code>PageList</code>","text":"<p>A list of Page objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageList.page","title":"<code>page: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList","title":"<code>PageOrDatabaseList</code>","text":"<p>A list of Page or Database objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PageOrDatabaseList.page_or_database","title":"<code>page_or_database: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList","title":"<code>PropertyItemList</code>","text":"<p>A paginated list of property items returned by the Notion API.</p> <p>Property item lists contain one or more pages of basic property items.  These types do not typically match the schema for corresponding property values.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.PropertyItemList.property_item","title":"<code>property_item: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList","title":"<code>UserList</code>","text":"<p>A list of User objects returned by the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.UserList.user","title":"<code>user: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/iterator/#ultimate_notion.obj_api.iterator.convert_to_notion_obj","title":"<code>convert_to_notion_obj(obj: dict[str, Any]) -&gt; Block | Page | Database | PropertyItem | User | GenericObject</code>","text":"<p>Convert a dictionary to the corresponding subtype of Notion Object.</p> <p>Used in the ObjectList below the convert the results from the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/","title":"Objects","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects","title":"<code>objects</code>","text":"<p>Wrapper for various Notion API objects like parents, mentions, emojis &amp; users</p> <p>Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods.</p> <p>For validation the Pydantic model fields specify if a field is optional or not. Some fields are always set, e.g. <code>id</code>, when retrieving an object but must not be set when sending the object to the Notion API in order to create the object. To model this behavior, the default value <code>None</code> is used for those objects, e.g. <pre><code>class SelectOption(GenericObject)\n    id: str = None  # type: ignore  # to make sure mypy doesn't complain\n</code></pre> Also be aware that this is import when updating to differentiate actual set values from default/unset values.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations","title":"<code>Annotations</code>","text":"<p>Style information for RichTextObject's.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.bold","title":"<code>bold: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.code","title":"<code>code: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.color","title":"<code>color: BGColor = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.is_plain","title":"<code>is_plain</code>  <code>property</code>","text":"<p>Determine if any flags are set in this <code>Annotations</code> object.</p> <p>If all flags match their defaults, this is considered a \"plain\" style.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.italic","title":"<code>italic: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.strikethrough","title":"<code>strikethrough: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Annotations.underline","title":"<code>underline: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef","title":"<code>BlockRef</code>","text":"<p>Reference a block.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.block_id","title":"<code>block_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.BlockRef.build","title":"<code>build(block_ref)</code>  <code>classmethod</code>","text":"<p>Compose a BlockRef from the given reference object.</p> <p><code>block_ref</code> can be either a string, UUID, or block.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot","title":"<code>Bot</code>","text":"<p>Represents a Bot in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Bot.bot","title":"<code>bot: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef","title":"<code>DatabaseRef</code>","text":"<p>Reference a database.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.database_id","title":"<code>database_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DatabaseRef.build","title":"<code>build(db_ref: Database | str | UUID)</code>  <code>classmethod</code>","text":"<p>Compose a DatabaseRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange","title":"<code>DateRange</code>","text":"<p>A Notion date range, with an optional end date.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.end","title":"<code>end: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.start","title":"<code>start: date | datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.DateRange.time_zone","title":"<code>time_zone: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject","title":"<code>EmojiObject</code>","text":"<p>A Notion emoji object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.emoji","title":"<code>emoji: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EmojiObject.build","title":"<code>build(emoji)</code>  <code>classmethod</code>","text":"<p>Compose an EmojiObject from the given emoji string.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject","title":"<code>EquationObject</code>","text":"<p>Notion equation element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.EquationObject.equation","title":"<code>equation: _NestedData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile","title":"<code>ExternalFile</code>","text":"<p>An external file object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.external","title":"<code>external: _NestedData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ExternalFile.build","title":"<code>build(url, name=None)</code>  <code>classmethod</code>","text":"<p>Create a new <code>ExternalFile</code> from the given URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject","title":"<code>FileObject</code>","text":"<p>A Notion file object.</p> <p>Depending on the context, a FileObject may require a name (such as in the <code>Files</code> property).  This makes the object hierarchy difficult, so here we simply allow <code>name</code> to be optional. It is the responsibility of the caller to set <code>name</code> if required by the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.FileObject.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile","title":"<code>HostedFile</code>","text":"<p>A Notion file object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.HostedFile.file","title":"<code>file: _NestedData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject","title":"<code>LinkObject</code>","text":"<p>Reference a URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.type","title":"<code>type: str = 'url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.LinkObject.url","title":"<code>url: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionData","title":"<code>MentionData</code>","text":"<p>Base class for typed <code>Mention</code> data objects.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase","title":"<code>MentionDatabase</code>","text":"<p>Nested database information for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.database","title":"<code>database: ObjectReference</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDatabase.build","title":"<code>build(page) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a <code>Mention</code> object for the specified database reference.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate","title":"<code>MentionDate</code>","text":"<p>Nested date data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.date","title":"<code>date: DateRange</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionDate.build","title":"<code>build(start, end=None) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a <code>Mention</code> object for the specified URL.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview","title":"<code>MentionLinkPreview</code>","text":"<p>Nested url data for <code>Mention</code> properties.</p> <p>These objects cannot be created via the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionLinkPreview.link_preview","title":"<code>link_preview: _NestedData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject","title":"<code>MentionObject</code>","text":"<p>Notion mention element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionObject.mention","title":"<code>mention: MentionData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage","title":"<code>MentionPage</code>","text":"<p>Nested page data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.page","title":"<code>page: ObjectReference</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionPage.build","title":"<code>build(page_ref) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a <code>Mention</code> object for the specified page reference.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate","title":"<code>MentionTemplate</code>","text":"<p>Nested template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplate.template_mention","title":"<code>template_mention: MentionTemplateData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateData","title":"<code>MentionTemplateData</code>","text":"<p>Nested template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate","title":"<code>MentionTemplateDate</code>","text":"<p>Nested date template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateDate.template_mention_date","title":"<code>template_mention_date: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser","title":"<code>MentionTemplateUser</code>","text":"<p>Nested user template data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionTemplateUser.template_mention_user","title":"<code>template_mention_user: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser","title":"<code>MentionUser</code>","text":"<p>Nested user data for <code>Mention</code> properties.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.user","title":"<code>user: UserRef</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.MentionUser.build","title":"<code>build(user: User) -&gt; MentionObject</code>  <code>classmethod</code>","text":"<p>Build a <code>Mention</code> object for the specified user.</p> <p>The <code>id</code> field must be set for the given User.  Other fields may cause errors if they do not match the specific type returned from the API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference","title":"<code>ObjectReference</code>","text":"<p>A general-purpose object reference in the Notion API.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ObjectReference.build","title":"<code>build(ref)</code>  <code>classmethod</code>","text":"<p>Compose an ObjectReference from the given reference.</p> <p><code>ref</code> may be a <code>UUID</code>, <code>str</code>, <code>ParentRef</code> or <code>GenericObject</code> with an <code>id</code>.</p> <p>Strings may be either UUID's or URL's to Notion content.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef","title":"<code>PageRef</code>","text":"<p>Reference a page.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.page_id","title":"<code>page_id: UUID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.PageRef.build","title":"<code>build(page_ref: Page | str | UUID)</code>  <code>classmethod</code>","text":"<p>Compose a PageRef from the given reference object.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.ParentRef","title":"<code>ParentRef</code>","text":"<p>Reference another block as a parent.</p> <p>This class is simply a placeholder for the typed concrete *Ref classes.</p> <p>Callers should always instantiate the intended concrete versions.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person","title":"<code>Person</code>","text":"<p>Represents a Person in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.Person.person","title":"<code>person: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject","title":"<code>RichTextObject</code>","text":"<p>Base class for Notion rich text elements.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.annotations","title":"<code>annotations: Annotations | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.href","title":"<code>href: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.plain_text","title":"<code>plain_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.RichTextObject.build","title":"<code>build(text: str, href: str | None = None, style: Annotations | None = None)</code>  <code>classmethod</code>","text":"<p>Compose a TextObject from the given properties.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>the plain text of this object</p> required <code>href</code> <code>str | None</code> <p>an optional link for this object</p> <code>None</code> <code>style</code> <code>Annotations | None</code> <p>an optional Annotations object for this text</p> <code>None</code>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup","title":"<code>SelectGroup</code>","text":"<p>Group of options for status objects.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.color","title":"<code>color: Color = Color.DEFAULT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.id","title":"<code>id: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectGroup.option_ids","title":"<code>option_ids: list[str] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption","title":"<code>SelectOption</code>","text":"<p>Options for select &amp; multi-select objects.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.color","title":"<code>color: Color = Color.DEFAULT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.description","title":"<code>description: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.id","title":"<code>id: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.SelectOption.build","title":"<code>build(name, color=Color.DEFAULT)</code>  <code>classmethod</code>","text":"<p>Create a <code>SelectOption</code> object from the given name and color.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject","title":"<code>TextObject</code>","text":"<p>Notion text element.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.text","title":"<code>text: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.TextObject.build","title":"<code>build(text: str, href: str | None = None, style: Annotations | None = None)</code>  <code>classmethod</code>","text":"<p>Compose a TextObject from the given properties.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>the plain text of this object</p> required <code>href</code> <code>str | None</code> <p>optional link for this object</p> <code>None</code> <code>style</code> <code>Annotations | None</code> <p>optional annotations for styling this text</p> <code>None</code>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User","title":"<code>User</code>","text":"<p>Represents a User in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.avatar_url","title":"<code>avatar_url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.User.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserRef","title":"<code>UserRef</code>","text":"<p>Reference to a user, e.g. in <code>created_by</code>, <code>last_edited_by</code>, mentioning, etc.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType","title":"<code>UserType</code>","text":"<p>Available user types.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType.BOT","title":"<code>BOT = 'bot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.UserType.PERSON","title":"<code>PERSON = 'person'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef","title":"<code>WorkspaceRef</code>","text":"<p>Reference the workspace.</p>"},{"location":"reference/ultimate_notion/obj_api/objects/#ultimate_notion.obj_api.objects.WorkspaceRef.workspace","title":"<code>workspace: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/","title":"Props","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props","title":"<code>props</code>","text":"<p>Wrapper for property values of pages</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateType","title":"<code>DateType: TypeAlias = dt_date | tuple[dt_date, dt_date]</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula","title":"<code>BooleanFormula</code>","text":"<p>A Notion boolean formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula.boolean","title":"<code>boolean: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.BooleanFormula.value","title":"<code>value</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox","title":"<code>Checkbox</code>","text":"<p>Simple checkbox type; represented as a boolean.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Checkbox.checkbox","title":"<code>checkbox: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy","title":"<code>CreatedBy</code>","text":"<p>A Notion created-by property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedBy.created_by","title":"<code>created_by: SerializeAsAny[User]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime","title":"<code>CreatedTime</code>","text":"<p>A Notion created-time property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.CreatedTime.created_time","title":"<code>created_time: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date","title":"<code>Date</code>","text":"<p>Notion complex date type - may include timestamp and/or be a date range.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Date.build","title":"<code>build(start: dt_date, end: dt_date | None = None)</code>  <code>classmethod</code>","text":"<p>Create a new Date from the native values.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula","title":"<code>DateFormula</code>","text":"<p>A Notion date formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.DateFormula.value","title":"<code>value: None | DateType</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email","title":"<code>Email</code>","text":"<p>Notion email type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Email.email","title":"<code>email: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files","title":"<code>Files</code>","text":"<p>Notion files type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Files.files","title":"<code>files: list[SerializeAsAny[FileObject]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula","title":"<code>Formula</code>","text":"<p>A Notion formula property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Formula.formula","title":"<code>formula: FormulaResult | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaResult","title":"<code>FormulaResult</code>","text":"<p>A Notion formula result.</p> <p>This object contains the result of the expression in the database properties.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.FormulaResult.value","title":"<code>value</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the result of this FormulaResult.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy","title":"<code>LastEditedBy</code>","text":"<p>A Notion last-edited-by property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedBy.last_edited_by","title":"<code>last_edited_by: SerializeAsAny[User]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime","title":"<code>LastEditedTime</code>","text":"<p>A Notion last-edited-time property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.LastEditedTime.last_edited_time","title":"<code>last_edited_time: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect","title":"<code>MultiSelect</code>","text":"<p>Notion multi-select type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.MultiSelect.multi_select","title":"<code>multi_select: list[SelectOption] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number","title":"<code>Number</code>","text":"<p>Simple number type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Number.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula","title":"<code>NumberFormula</code>","text":"<p>A Notion number formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.NumberFormula.value","title":"<code>value</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People","title":"<code>People</code>","text":"<p>Notion people type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People.people","title":"<code>people: list[User] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.People.serialize","title":"<code>serialize() -&gt; dict[str, Any]</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber","title":"<code>PhoneNumber</code>","text":"<p>Notion phone type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PhoneNumber.phone_number","title":"<code>phone_number: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyItem","title":"<code>PropertyItem</code>","text":"<p>A <code>PropertyItem</code> returned by the Notion API.</p> <p>Basic property items have a similar schema to corresponding property values.  As a result, these items share the <code>PropertyValue</code> type definitions.</p> <p>This class provides a placeholder for parsing property items, however objects parse by this class will likely be <code>PropertyValue</code>'s instead.</p> <p>Notion-API: https://developers.notion.com/reference/property-item-object</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyItem.id","title":"<code>id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue","title":"<code>PropertyValue</code>","text":"<p>Base class for Notion property values.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.id","title":"<code>id: str = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.PropertyValue.build","title":"<code>build(value)</code>  <code>classmethod</code>","text":"<p>Build the property value from given value, e.g. native Python or nested type.</p> <p>In practice, this is like calling init with the corresponding keyword.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation","title":"<code>Relation</code>","text":"<p>A Notion relation property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.has_more","title":"<code>has_more: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.relation","title":"<code>relation: list[ObjectReference] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Relation.build","title":"<code>build(pages)</code>  <code>classmethod</code>","text":"<p>Return a <code>Relation</code> property with the specified pages.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText","title":"<code>RichText</code>","text":"<p>Notion rich text type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RichText.rich_text","title":"<code>rich_text: list[SerializeAsAny[RichTextObject]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup","title":"<code>Rollup</code>","text":"<p>A Notion rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Rollup.rollup","title":"<code>rollup: RollupObject | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray","title":"<code>RollupArray</code>","text":"<p>A Notion rollup array property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray.array","title":"<code>array: list[PropertyValue]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupArray.value","title":"<code>value: list[PropertyValue]</code>  <code>property</code>","text":"<p>Return the native representation of this Rollup object.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate","title":"<code>RollupDate</code>","text":"<p>A Notion rollup date property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate.date","title":"<code>date: DateRange | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupDate.value","title":"<code>value: DateType | None</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber","title":"<code>RollupNumber</code>","text":"<p>A Notion rollup number property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber.number","title":"<code>number: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupNumber.value","title":"<code>value: float | int | None</code>  <code>property</code>","text":"<p>Return the native representation of this Rollup object.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject","title":"<code>RollupObject</code>","text":"<p>A Notion rollup property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject.function","title":"<code>function: AggFunc | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.RollupObject.value","title":"<code>value</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the native representation of this Rollup object.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select","title":"<code>Select</code>","text":"<p>Notion select type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Select.select","title":"<code>select: SelectOption | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status","title":"<code>Status</code>","text":"<p>Notion status property.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Status.status","title":"<code>status: SelectOption | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula","title":"<code>StringFormula</code>","text":"<p>A Notion string formula result.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula.string","title":"<code>string: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.StringFormula.value","title":"<code>value</code>  <code>property</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title","title":"<code>Title</code>","text":"<p>Notion title type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Title.title","title":"<code>title: list[SerializeAsAny[RichTextObject]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL","title":"<code>URL</code>","text":"<p>Notion URL type.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.URL.url","title":"<code>url: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID","title":"<code>UniqueID</code>","text":"<p>A Notion unique-id property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.UniqueID.unique_id","title":"<code>unique_id: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification","title":"<code>Verification</code>","text":"<p>A Notion verification property value.</p>"},{"location":"reference/ultimate_notion/obj_api/props/#ultimate_notion.obj_api.props.Verification.verification","title":"<code>verification: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/","title":"Query","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query","title":"<code>query</code>","text":"<p>Provides an interactive query builder for Notion databases.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition","title":"<code>CheckboxCondition</code>","text":"<p>Represents checkbox criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.does_not_equal","title":"<code>does_not_equal: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CheckboxCondition.equals","title":"<code>equals: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter","title":"<code>CompoundFilter</code>","text":"<p>Represents a compound filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.and_","title":"<code>and_: list[QueryFilter] | None = Field(None, alias='and')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.model_config","title":"<code>model_config = ConfigDict(populate_by_name=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CompoundFilter.or_","title":"<code>or_: list[QueryFilter] | None = Field(None, alias='or')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter","title":"<code>CreatedTimeFilter</code>","text":"<p>Represents a created_time filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.created_time","title":"<code>created_time: DateCondition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.timestamp","title":"<code>timestamp: TimestampKind = TimestampKind.CREATED_TIME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.CreatedTimeFilter.build","title":"<code>build(value)</code>  <code>classmethod</code>","text":"<p>Create a new <code>CreatedTimeFilter</code> using the given constraint.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQuery","title":"<code>DBQuery</code>","text":"<p>Query object in Notion for querying a database</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQuery.sorts","title":"<code>sorts: list[DBSort] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder","title":"<code>DBQueryBuilder(endpoint, db_id: str)</code>","text":"<p>Query builder to query a database.</p> <p>Notion API: https://developers.notion.com/reference/post-search</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.query","title":"<code>query: DBQuery = DBQuery()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.filter","title":"<code>filter(condition: QueryFilter) -&gt; DBQueryBuilder</code>","text":"<p>Add the given filter to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBQueryBuilder.sort","title":"<code>sort(sort_orders: DBSort | list[DBSort]) -&gt; DBQueryBuilder</code>","text":"<p>Add the given sort elements to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort","title":"<code>DBSort</code>","text":"<p>Sort instruction when querying a database</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort.direction","title":"<code>direction: SortDirection</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DBSort.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition","title":"<code>DateCondition</code>","text":"<p>Represents date criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.after","title":"<code>after: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.before","title":"<code>before: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.equals","title":"<code>equals: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_month","title":"<code>next_month: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_week","title":"<code>next_week: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.next_year","title":"<code>next_year: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_after","title":"<code>on_or_after: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.on_or_before","title":"<code>on_or_before: date | datetime | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_month","title":"<code>past_month: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_week","title":"<code>past_week: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.DateCondition.past_year","title":"<code>past_year: Any | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition","title":"<code>FilesCondition</code>","text":"<p>Represents files criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FilesCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition","title":"<code>FormulaCondition</code>","text":"<p>Represents formula criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.checkbox","title":"<code>checkbox: CheckboxCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.date","title":"<code>date: DateCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.number","title":"<code>number: NumberCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.FormulaCondition.string","title":"<code>string: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter","title":"<code>LastEditedTimeFilter</code>","text":"<p>Represents a last_edited_time filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.last_edited_time","title":"<code>last_edited_time: DateCondition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.timestamp","title":"<code>timestamp: TimestampKind = TimestampKind.LAST_EDITED_TIME</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.LastEditedTimeFilter.build","title":"<code>build(value)</code>  <code>classmethod</code>","text":"<p>Create a new <code>LastEditedTimeFilter</code> using the given constraint.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition","title":"<code>MultiSelectCondition</code>","text":"<p>Represents a multi_select criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.contains","title":"<code>contains: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.does_not_contains","title":"<code>does_not_contains: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.MultiSelectCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition","title":"<code>NumberCondition</code>","text":"<p>Represents number criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.does_not_equal","title":"<code>does_not_equal: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.equals","title":"<code>equals: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than","title":"<code>greater_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.greater_than_or_equal_to","title":"<code>greater_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than","title":"<code>less_than: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.NumberCondition.less_than_or_equal_to","title":"<code>less_than_or_equal_to: float | int | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition","title":"<code>PeopleCondition</code>","text":"<p>Represents people criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.contains","title":"<code>contains: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.does_not_contain","title":"<code>does_not_contain: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PeopleCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter","title":"<code>PropertyFilter</code>","text":"<p>Represents a database property filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.checkbox","title":"<code>checkbox: CheckboxCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.date","title":"<code>date: DateCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.files","title":"<code>files: FilesCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.formula","title":"<code>formula: FormulaCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.multi_select","title":"<code>multi_select: MultiSelectCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.number","title":"<code>number: NumberCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.people","title":"<code>people: PeopleCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.phone_number","title":"<code>phone_number: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.relation","title":"<code>relation: RelationCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.rich_text","title":"<code>rich_text: TextCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.PropertyFilter.select","title":"<code>select: SelectCondition | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query","title":"<code>Query</code>","text":"<p>Abstract query object in Notion for searching pages/databases and querying databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.filter","title":"<code>filter: SerializeAsAny[QueryFilter] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.page_size","title":"<code>page_size: int = MAX_PAGE_SIZE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.start_cursor","title":"<code>start_cursor: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.Query.valid_page_size","title":"<code>valid_page_size(value: int) -&gt; int</code>  <code>classmethod</code>","text":"<p>Validate that the given page size meets the Notion API requirements</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder","title":"<code>QueryBuilder(endpoint: NCEndpoint, **params: str | None)</code>","text":"<p>General query builder for the Notion search &amp; database query API</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.endpoint","title":"<code>endpoint: NCEndpoint = endpoint</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.params","title":"<code>params: dict[str, str] = {param: valuefor (param, value) in params.items() if value is not None}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.query","title":"<code>query: Query</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.execute","title":"<code>execute()</code>","text":"<p>Execute the current query and return an iterator for the results.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.first","title":"<code>first()</code>","text":"<p>Execute the current query and return the first result only.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.limit","title":"<code>limit(count: int)</code>","text":"<p>Limit the number of results to the given count.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryBuilder.start_at","title":"<code>start_at(cursor_id: UUID)</code>","text":"<p>Set the start cursor to a specific page ID.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.QueryFilter","title":"<code>QueryFilter</code>","text":"<p>Base class for query filters.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition","title":"<code>RelationCondition</code>","text":"<p>Represents relation criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.contains","title":"<code>contains: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.does_not_contain","title":"<code>does_not_contain: UUID | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.RelationCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter","title":"<code>SearchFilter</code>","text":"<p>Represents a search property filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.property","title":"<code>property: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchFilter.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQuery","title":"<code>SearchQuery</code>","text":"<p>Query object in Notion for searching pages &amp; databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQuery.sort","title":"<code>sort: SearchSort | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder","title":"<code>SearchQueryBuilder(endpoint, text: str | None = None)</code>","text":"<p>Search query builder to search for pages and databases</p> <p>By default and not changed by <code>sort</code>, then the most recently edited results are returned first.</p> <p>Notion API: https://developers.notion.com/reference/post-search</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.query","title":"<code>query: SearchQuery = SearchQuery()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.filter","title":"<code>filter(*, page_only: bool = False, db_only: bool = False) -&gt; SearchQueryBuilder</code>","text":"<p>Filter for pages or databases only</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchQueryBuilder.sort","title":"<code>sort(*, ascending: bool) -&gt; SearchQueryBuilder</code>","text":"<p>Add the given sort elements to the query.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort","title":"<code>SearchSort</code>","text":"<p>Sort instruction when searching for pages and databases</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort.direction","title":"<code>direction: SortDirection</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SearchSort.timestamp","title":"<code>timestamp: Literal[TimestampKind.LAST_EDITED_TIME]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition","title":"<code>SelectCondition</code>","text":"<p>Represents select criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.does_not_equal","title":"<code>does_not_equal: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.equals","title":"<code>equals: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SelectCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection","title":"<code>SortDirection</code>","text":"<p>Sort direction options.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.ASCENDING","title":"<code>ASCENDING = 'ascending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.SortDirection.DESCENDING","title":"<code>DESCENDING = 'descending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition","title":"<code>TextCondition</code>","text":"<p>Represents text criteria in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.contains","title":"<code>contains: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_contain","title":"<code>does_not_contain: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.does_not_equal","title":"<code>does_not_equal: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.ends_with","title":"<code>ends_with: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.equals","title":"<code>equals: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_empty","title":"<code>is_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.is_not_empty","title":"<code>is_not_empty: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TextCondition.starts_with","title":"<code>starts_with: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter","title":"<code>TimestampFilter</code>","text":"<p>Represents a timestamp filter in Notion.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampFilter.timestamp","title":"<code>timestamp: TimestampKind</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind","title":"<code>TimestampKind</code>","text":"<p>Possible timestamp types.</p>"},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.CREATED_TIME","title":"<code>CREATED_TIME = 'created_time'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/query/#ultimate_notion.obj_api.query.TimestampKind.LAST_EDITED_TIME","title":"<code>LAST_EDITED_TIME = 'last_edited_time'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/","title":"Schema","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema","title":"<code>schema</code>","text":"<p>Objects representing a database schema.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox","title":"<code>Checkbox</code>","text":"<p>Defines the checkbox configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Checkbox.checkbox","title":"<code>checkbox: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy","title":"<code>CreatedBy</code>","text":"<p>Defines the created-by configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedBy.created_by","title":"<code>created_by: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime","title":"<code>CreatedTime</code>","text":"<p>Defines the created-time configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.CreatedTime.created_time","title":"<code>created_time: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date","title":"<code>Date</code>","text":"<p>Defines the date configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Date.date","title":"<code>date: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation","title":"<code>DualPropertyRelation</code>","text":"<p>Defines a two-way relation configuration for a database property.</p> <p>If a two-way relation property X relates to Y then the two-way relation property Y relates to X.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.dual_property","title":"<code>dual_property: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.DualPropertyRelation.build","title":"<code>build(dbref)</code>  <code>classmethod</code>","text":"<p>Create a <code>dual_property</code> relation using the target database reference.</p> <p><code>dbref</code> must be either a string or UUID.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email","title":"<code>Email</code>","text":"<p>Defines the email configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Email.email","title":"<code>email: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files","title":"<code>Files</code>","text":"<p>Defines the files configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Files.files","title":"<code>files: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula","title":"<code>Formula</code>","text":"<p>Defines the formula configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.formula","title":"<code>formula: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Formula.build","title":"<code>build(expression)</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy","title":"<code>LastEditedBy</code>","text":"<p>Defines the last-edited-by configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedBy.last_edited_by","title":"<code>last_edited_by: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime","title":"<code>LastEditedTime</code>","text":"<p>Defines the last-edited-time configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.LastEditedTime.last_edited_time","title":"<code>last_edited_time: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect","title":"<code>MultiSelect</code>","text":"<p>Defines the multi-select configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.multi_select","title":"<code>multi_select: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.MultiSelect.build","title":"<code>build(options)</code>  <code>classmethod</code>","text":"<p>Create a <code>Select</code> object from the list of <code>SelectOption</code>'s.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number","title":"<code>Number</code>","text":"<p>Defines the number configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.number","title":"<code>number: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Number.build","title":"<code>build(format)</code>  <code>classmethod</code>","text":"<p>Create a <code>Number</code> object with the expected format.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People","title":"<code>People</code>","text":"<p>Defines the people configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.People.people","title":"<code>people: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber","title":"<code>PhoneNumber</code>","text":"<p>Defines the phone number configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PhoneNumber.phone_number","title":"<code>phone_number: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation","title":"<code>PropertyRelation</code>","text":"<p>Defines common configuration for a property relation.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyRelation.database_id","title":"<code>database_id: UUID = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType","title":"<code>PropertyType</code>","text":"<p>Base class for Notion property objects.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.id","title":"<code>id: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.PropertyType.build","title":"<code>build()</code>  <code>classmethod</code>","text":"<p>Build the property value from given value, e.g. native Python or nested type.</p> <p>In practice, this is like calling init with the corresponding keyword.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation","title":"<code>Relation</code>","text":"<p>Defines the relation configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Relation.relation","title":"<code>relation: SerializeAsAny[PropertyRelation]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp","title":"<code>RenameProp</code>","text":"<p>Use to rename a property during a database update.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RenameProp.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText","title":"<code>RichText</code>","text":"<p>Defines the rich text configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.RichText.rich_text","title":"<code>rich_text: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup","title":"<code>Rollup</code>","text":"<p>Defines the rollup configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.rollup","title":"<code>rollup: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Rollup.build","title":"<code>build(relation, property, function)</code>  <code>classmethod</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select","title":"<code>Select</code>","text":"<p>Defines the select configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.select","title":"<code>select: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Select.build","title":"<code>build(options)</code>  <code>classmethod</code>","text":"<p>Create a <code>Select</code> object from the list of <code>SelectOption</code>'s.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation","title":"<code>SinglePropertyRelation</code>","text":"<p>Defines a one-way relation configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.single_property","title":"<code>single_property: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.SinglePropertyRelation.build","title":"<code>build(dbref)</code>  <code>classmethod</code>","text":"<p>Create a <code>single_property</code> relation using the target database reference.</p> <p><code>dbref</code> must be either a string or UUID.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status","title":"<code>Status</code>","text":"<p>Defines the status configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Status.status","title":"<code>status: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title","title":"<code>Title</code>","text":"<p>Defines the title configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Title.title","title":"<code>title: Any = Field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL","title":"<code>URL</code>","text":"<p>Defines the URL configuration for a database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.URL.url","title":"<code>url: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID","title":"<code>UniqueID</code>","text":"<p>Unique ID database property.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.UniqueID.unique_id","title":"<code>unique_id: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification","title":"<code>Verification</code>","text":"<p>Verfication database property of Wiki databases.</p>"},{"location":"reference/ultimate_notion/obj_api/schema/#ultimate_notion.obj_api.schema.Verification.verification","title":"<code>verification: _NestedData = _NestedData()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"usage/db_advanced/","title":"Data models &amp; schemas","text":"<p>We gonna create two simple databases with a relation quite similar as described in the Notion docs. We gonna have a database for customers and one for items, which customers can purchase.</p> <p>Let's first initialize a Notion session with</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()\n</code></pre>"},{"location":"usage/db_advanced/#declarative-schemas-relations","title":"Declarative schemas &amp; relations","text":"<p>We start by defining the schema for our items in a really pythonic way. The schema should have three columns, the title column <code>Name</code> for the name of an item, e.g. \"Jeans\", a size column <code>Size</code> and of course a <code>Price</code> column numbers in Dollars. The size of of piece of clothing can be chosen from the options <code>S</code>, <code>M</code> and <code>L</code>. We can directly translate this schema into Python code:</p> <pre><code>class Size(uno.OptionNS):\n    \"\"\"Namespace for the select options of our various sizes\"\"\"\n    S = uno.Option(name='S', color='green')\n    M = uno.Option(name='M', color='yellow')\n    L = uno.Option(name='L', color='red')\n\n\nclass Item(uno.PageSchema, db_title='Item DB'):\n    \"\"\"Database of all the items we sell\"\"\"\n    name = uno.Column('Name', uno.ColType.Title())\n    size = uno.Column('Size', uno.ColType.Select(Size))\n    price = uno.Column('Price', uno.ColType.Number(uno.NumberFormat.DOLLAR))\n</code></pre> <p>Since a database needs to be a block wighin a page, we assume there is a page called <code>Tests</code>, which is connected with this integration. We retrieve the object of this page and create the database with the page as parent page.</p> <pre><code>root_page = notion.search_page('Tests', exact=True).item()\nitem_db = notion.create_db(parent=root_page, schema=Item)\n</code></pre> <p>Now we create a database for our customers and define a one-way Relation to the items:</p> <pre><code>class Customer(uno.PageSchema, db_title='Customer DB'):\n    \"\"\"Database of all our beloved customers\"\"\"\n    name = uno.Column('Name', uno.ColType.Title())\n    purchases = uno.Column('Items Purchased', uno.ColType.Relation(Item))\n\ncustomer_db = notion.create_db(parent=root_page, schema=Customer)\n</code></pre> <p>Warning</p> <p>To create a database that has a relation to another database requires that the target database already exists. Thus the order of creating the databases from the schemas is important.</p> <p>All available column database are provided by ColType, which is just a namespace for the various column types defined in schema. Column types with the class variable <code>allowed_at_creation</code> set to <code>False</code> are currently not supported by the Notion API. when creating a new database.</p>"},{"location":"usage/db_advanced/#new-database-entries","title":"New database entries","text":"<p>Now that we have created those two databases, we can start filling them with a few entries either using the create_page method of the database object:</p> <pre><code>t_shirt = item_db.create_page(name='T-shirt', size=Size.L, price=17)\nkhaki_pants = item_db.create_page(name='Khaki pants', size=Size.M, price=25)\ntank_top = item_db.create_page(name='Tank top', size=Size.S, price=15)\n</code></pre> <p>or we can also directly use the create method of the schema if the schema is already bound to a database:</p> <pre><code>lovelace = Customer.create(name='Ada Lovelace', purchases=[tank_top])\nhertzfeld = Customer.create(name='Andy Herzfeld', purchases=[khaki_pants])\nengelbart = Customer.create(\n    name='Doug Engelbart', purchases=[khaki_pants, t_shirt]\n)\n</code></pre> <p>Info</p> <p>The keyword-arguments are exactly the class variables from the page schemas <code>Item</code> and <code>Customer</code> above.</p> <p>This is how are two databases <code>item_db</code> and <code>customer_db</code> look like in the Notion UI right now:</p> <p></p> <p></p> <p>Note</p> <p>The description of the databases corresponds to the the docstring of the schema classes <code>Item</code> and <code>Customer</code>.</p>"},{"location":"usage/db_advanced/#two-way-self-relations","title":"Two-way &amp; self relations","text":"<p>Notion also supports two-way relations and so does Ultimate Notion. Taking the same example as before, imagine that we also wanted to see direclty which customers bought a specific item. In this case the one-way relation <code>Items Purchased</code> from <code>Customer</code> needs to become a two-way relation. We can achieve this, with a simple modification in both schemas:</p> <pre><code>class Item(uno.PageSchema, db_title='Item DB'):\n    \"\"\"Database of all the items we sell\"\"\"\n    name = uno.Column('Name', uno.ColType.Title())\n    size = uno.Column('Size', uno.ColType.Select(Size))\n    price = uno.Column('Price', uno.ColType.Number(uno.NumberFormat.DOLLAR))\n    bought_by = uno.Column('Bought by', uno.ColType.Relation())\n\nclass Customer(uno.PageSchema, db_title='Customer DB'):\n    \"\"\"Database of all our beloved customers\"\"\"\n    name = uno.Column('Name', uno.ColType.Title())\n    purchases = uno.Column(\n        'Items Purchased',\n        uno.ColType.Relation(Item, two_way_col=Item.bought_by)\n    )\n</code></pre> <p>So what happens here is that we first create a target relation column <code>bought_by</code> in <code>Item</code> by not specifying any other schema. Then in <code>Customer</code>, we define now a two-way column but specifying not only the schema <code>Item</code> bouth also the column we want to synchronize with using the <code>two_way_col</code> keyword.</p> <p>Let's delete the old databases and recreate them with our updates schemas and a few items</p> <pre><code>item_db.delete(), customer_db.delete()\n\nitem_db = notion.create_db(parent=root_page, schema=Item)\ncustomer_db = notion.create_db(parent=root_page, schema=Customer)\n\nt_shirt = item_db.create_page(name='T-shirt', size=Size.L, price=17)\nlovelace = Customer.create(name='Ada Lovelace', purchases=[t_shirt])\nhertzfeld = Customer.create(name='Andy Herzfeld', purchases=[t_shirt])\n</code></pre> <p>and take a look at the two-way relation within <code>item_db</code>:</p> <p></p> <p>Assume now that we want to have a schema that references itself, for instance a simple task list like where certain tasks can be subtasks of others:</p> <pre><code>class Task(uno.PageSchema, db_title='Task List'):\n    \"\"\"A really simple task lists with subtasks\"\"\"\n    task = uno.Column('Task', uno.ColType.Title())\n    due_by = uno.Column('Due by', uno.ColType.Date())\n    parent = uno.Column('Parent Task', uno.ColType.Relation(uno.SelfRef))\n\ntask_db = notion.create_db(parent=root_page, schema=Task)\n\nfrom datetime import datetime, timedelta\n\ntoday = datetime.now()\n\nclean_house = Task.create(\n    task='Clean the house',\n    due_by=today + timedelta(weeks=4)\n)\nTask.create(\n    task='Vacuum living room',\n    due_by=today + timedelta(weeks=1),\n    parent=clean_house\n)\nTask.create(\n    task='Tidy up kitchen',\n    due_by=today + timedelta(days=3),\n    parent=clean_house\n)\n</code></pre> <p>Warning</p> <p>Due to a bug in the Notion API, it's not possible to have a two-way self-referencing relation right now. Creating a two-way relation leads to the creation of a one-way relation. We check for that and fail.</p>"},{"location":"usage/db_introduction/","title":"Introduction to databases","text":"<p>Databases are one of the most versatile and powerful features of Notion. Working programmatically with your databases extends Notion's functionality to infinity as you can use Python for all kinds of transformations, use external data services and what not. Ultimate Notion unleashes the full power of Python for use with Notion's databases. So let's see what we can do.</p>"},{"location":"usage/db_introduction/#searching-for-a-database","title":"Searching for a database","text":"<p>Assume we have a database called Contacts DB.</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()  # if NOTION_TOKEN is set in environment\n\ncontacts_dbs = notion.search_db('Contacts DB')\n\nassert [db.title for db in contacts_dbs] == ['Contacts DB']\n</code></pre> <p>The method <code>search_db</code> will always return a list as Notion gives no guarantees that the title of a database is unique. Practically though, most users will give databases unique names and to accommodate for this, the returned list provides a method <code>.item()</code>, which will return the item of a single-item list or raise an error otherwise. Another possibility would be to retrieve the database by its unqiue id.</p> <pre><code>contacts_db = notion.search_db('Contacts DB').item()\n# or in case the unique ID of the database is known\ncontacts_db = notion.get_db(contacts_db.id)\n</code></pre> <p>The Database object provides access to many attributes like title, icon, description, etc.</p> <pre><code>assert contacts_db.description == 'Database of all my contacts!'\n</code></pre>"},{"location":"usage/db_introduction/#creating-a-database-and-adding-pages","title":"Creating a database and adding pages","text":"<p>A simple database with the default columns <code>Name</code> for the title of pages and the Multi-select column <code>Tags</code>, can be created using create_db. To tell Notion where to put the database, we have to provide an existing page. Let's assume we have a page called <code>Tests</code>, which is shared with our integration:</p> <pre><code>root_page = notion.search_page('Tests').item()\nmy_db = notion.create_db(parent=root_page)\n</code></pre> <p>Using the <code>my_db</code> object, we can now set its attributes, e.g.:</p> <pre><code>my_db.title = 'My DB'\nmy_db.description = 'This is my database for cool Python libraries!'\n</code></pre> <p>Info</p> <p>Unfortunately, the Notion API does not support setting the icon or the cover of a database.</p> <p>We can now simple add a new page to this database and set some attributes:</p> <pre><code>new_page = my_db.create_page(name='Ultimate Notion')\nnew_page.description = 'Notes about Ultimate Notion'\nnew_page.icon = '\ud83d\ude80'\nnew_page.cover = 'https://www.notion.so/images/page-cover/woodcuts_2.jpg'\n</code></pre> <p>This is how My DB looks right now.</p> <p></p> <p>But how can I figure out which keyword arguments to pass to create_page? For this we can take a look at the [schema] of the database, which also allows us to create new pages in a neat way. As our database holds tools, we can express this by naming the variable for the schema accordingly. An example illustrates this:</p> <pre><code>Tool = my_db.schema\nTool.show()\n</code></pre> <p>This shows us that our database has two columns <code>Name</code> and <code>Tags</code> as well as the name of the arguments for create_page.</p> <pre><code>Name    Property     Attribute\n------  -----------  -----------\nTags    MultiSelect  tags\nName    Title        name\n</code></pre> <p>A new page can now also be created using <code>Tool</code>, i.e.</p> <pre><code>new_tool = Tool.create(name='Ultimate Notion')\n</code></pre> <p>This is basically just an alias for create_page but can make your code much more expressive.</p>"},{"location":"usage/db_introduction/#viewing-the-pages-of-a-database","title":"Viewing the pages of a database","text":"<p>Assume we have a simple database listing tasks like this:</p> <p></p> <p>To access the tasks, i.e. the pages within this database, we can use the fetch_all method to generate a View. It's as simple as:</p> <pre><code>task_db = notion.search_db('Task DB').item()\ntask_view = task_db.fetch_all()\n</code></pre> <p>To get a quick overview of our tasks, we can use show. On the console, this will print:</p> <pre><code>Task                              Status       Priority    Urgency    Due Date\n--------------------------------  -----------  ----------  ---------  -------------------------\nClearing out the cellar           In Progress  \u2736 Low       \ud83d\udd25 -2w2d   2023-11-16 17:10:00+01:00\nRun first Marathon                Done         \u2736 Low       \u2705         2023-11-24 17:10:00+01:00\nPay yearly utility bills          Blocked      \u2739 High      \ud83d\udd25 -5d     2023-11-27 17:10:00+01:00\nCall family                       Done         \u2736 Low       \u2705         2023-12-01 17:10:00+01:00\nComplete project report for work  In Progress  \u2737 Medium    \ud83d\udd39 Today   2023-12-02 17:10:00+01:00\nBuild tool with Ultimate Notion   In Progress  \u2736 Low       \ud83d\udd50 1d      2023-12-03 17:10:00+01:00\nClean the house                   In Progress  \u2736 Low       \ud83d\udd50 5d      2023-12-07 17:10:00+01:00\nRead book about procastination    Backlog      \u2737 Medium    \ud83d\udd50 2w2d    2023-12-18 17:10:00+01:00\nPlan vacation                     Backlog      \u2739 High      \ud83d\udd50 3w3d    2023-12-26 17:10:00+01:00\n</code></pre> <p>or in Jupyter Lab this will be shown as:</p> <p></p> <p>Special columns, for the index, the page's id and its icon, can be activated using with_index, with_id, with_icon, respectively.:</p> <pre><code>task_view.with_index().with_id().with_icon()\n</code></pre> <p></p> <p>The index can now be used to retrieve a specific page with get_page or we could just convert the whole view to a Pandas dataframe with to_pandas.</p>"},{"location":"usage/db_introduction/#working-with-views","title":"Working with views","text":"<p>Views help you setting the stage for various operations like exporting with the help of the various <code>to_*</code> methods or applying a function to the contained pages using apply. With select the view can be restricted to certain columns whereas head (with alias limit) and tail can be used to restrict the number of rows in the view, e.g.:</p> <pre><code>task_view.select('Task', 'Status').head(3).show(simple=True)\n</code></pre> <pre><code>Task                      Status\n------------------------  -----------\nClearing out the cellar   In Progress\nRun first Marathon        Done\nPay yearly utility bills  Blocked\n</code></pre> <p>All methods return a new view without modifying the current one, which allows keeping different views at the same time. To reset the current view object, the reset method can be used. To reload the view, i.e. re-execute the query that led to the view, use reload.</p> <p>Find out about more about the functionality of View by reading the API references but keep in mind that some methods are just stubs.</p>"},{"location":"usage/getting_started/","title":"Getting started","text":""},{"location":"usage/getting_started/#installation","title":"Installation","text":"<p>To install Ultimate Notion simple run:</p> <pre><code>pip install ultimate-notion\n</code></pre> <p>or to install all additional dependencies, use:</p> <pre><code>pip install 'ultimate-notion[all]'\n</code></pre> <p>Ultimate Notion needs at least Pyton 3.10. Depending on your system, you might need to use pyenv, conda, etc. to install a more recent version.</p>"},{"location":"usage/getting_started/#creating-an-integration","title":"Creating an integration","text":"<p>Now open the web interface of Notion, select a workspace, click Settings &amp; members, click Connections and choose Develop or manage integrations. This should take you to the My integrations site. Now select + Create new integration, provide a name, a logo and select the Notion workspace the integration should be associated to. After that click the Submit button.</p> <p></p> <p>This brings you to the Secrets-site where you need to copy and save the Internal Integration Token, which always starts with <code>secret_</code>. This token will be used by Ultimate Notion for authentication.</p>"},{"location":"usage/getting_started/#granting-access-to-an-integration","title":"Granting access to an integration","text":"<p>Open Notion, i.e. the web interface or your Notion app. Make sure the integration you created shows up under Settings &amp; members \u00bb Connections. Now select any page you want to access via Ultimate Notion and select the \u00b7\u00b7\u00b7 on the upper right. In the drop-down menu, scroll down, select + Add connections, search and select your created integration. A pop-up that you need to confirm will inform you that your integration will have access to the selected page as well as all its children.</p> <p></p>"},{"location":"usage/getting_started/#ultimate-notion-configuration","title":"Ultimate Notion configuration","text":"<p>Ultimate Notion looks up the environment variable <code>ULTIMATE_NOTION_CONFIG</code> for a configuration TOML-file. If this variable is not set, it defaults to <code>~/.ultimate-notion/config.toml</code> under MacOS/Linux and <code>$HOME/.ultimate-notion/config.toml</code> under Windows systems. If no configuration file is found, a default one is created automatically that will set the Notion token to be looked up using the environment variable <code>NOTION_TOKEN</code>. Alternatively, you can set the your token directly in the configuration file.</p>"},{"location":"usage/getting_started/#loading-a-notion-page","title":"Loading a Notion page","text":"<p>To try out if your integration works, just copy&amp;paste the following code into your favorite editor or better Jupyter Lab. Replace the content of <code>PAGE_TITLE</code> with the title of the page, you granted access for your integration and make sure your token is set correctly as environment variable or in your configuration file.</p> <pre><code>\"\"\"This example demonstrates how to create an Ultimate Notion session\"\"\"\n\nimport ultimate_notion as uno\n\nPAGE_TITLE = \"Getting Started\"\n\nwith uno.Session() as notion:\n    page = notion.search_page(PAGE_TITLE).item()\n    page.show()\n\n# Alternatively, without a context manager:\nnotion = uno.Session()\npage = notion.search_page(PAGE_TITLE).item()\npage.show()\nnotion.close()\n</code></pre> <p>Run the code and you should see in Jupyter Lab following rendered Markdown code or just the plain output if you run the code in a terminal.</p> <p></p>"},{"location":"usage/getting_started/#notion-concepts-in-a-nutshell","title":"Notion concepts in a nutshell","text":"<p>In Notion everything is either a page or a block. A page contains a number of blocks, e.g. headings, text, bulleted list, tables, quotes and so on.</p> <p>An important and special block is the database, which may be within a page, i.e. inline, as a block or at the same hierarchy level as a page. Every database has a schema, i.e. a set of columns with specific types, e.g. number, text, url, etc., that imposes structured properties on every page within that database. Only pages contained in a database have properties. Notion itself also offers linked databases (with \u2197 next to the database title) but those are not accessible via the API, thus you must always work with the source database. A special type of database is a wiki database that comes with a pre-defined schema, i.e., title, last_edited_time, owner, tags, verification.</p> <p>Besides the properties of pages contained in a database, every page has attributes such as a title, cover, icon, or whether it is archived or not. The title attribute of a page is special and will always be included in the schema if the page is contained in a database. The column name of the title attribute can be customized. Think of the title property as a human-readable identifier, which does not have to be unique! This concept is important when relation properties are used between different databases as the title property of a linked page will show up in the relation column of the other database. If a page is deleted by you using Ultimate Notion, it will not be deleted but archived and this page attribute will be set accordingly.</p> <p>A page, e.g. with title \"child-page\", can be contained in another page, e.g. with title \"parent-page\". This leads to a hierarchy that is typically used for structuring content. We say that \"parent-page\" is the parent of \"child-page\" and \"child-page\" is one of the children of \"parent-page\". A page at the root of the workspace has the workspace itself as parent. This concept is important as access permissions for integrations are inherited from parent pages. Permissions can only be granted to pages, not to complete workspaces encompassing all pages.</p> <p>To identify a page, block, user, comment or even a property, Notion assigns each of them a universally unique identifier (UUID), i.e. 32 hexadecimal digits, potentially structured in various fields by a dash, i.e. <code>-</code>. Using for instance, the uuid of a database instead of its title, always you to reference it in your code even after someone changed its title. The UUIDs of pages and databases can be retrieved by using the web interface of Notion or using Copy link from the \u00b7\u00b7\u00b7-menu in the upper right corner. The link will have the schema:</p> <pre><code>https://www.notion.so/{Title}-{UUID}?{PARAMS}\n</code></pre> <p>UUIDs of other entities like blocks, properties, users etc. can only be retrieved via the API. Ultimate Notion provides an <code>id</code>-property on most of its objects for that.</p>"},{"location":"usage/page_introduction/","title":"Introduction to pages","text":"<p>Pages are one of the most essential building blocks of Notion. A page has certain attributes such as a title, cover, icon, and wether it is deleted (archived in the bin) or not. Items within a database, or rows if you will, are just pages and the schema of the database, that is the set of columns and their types, imposes properties on each contained page.</p> <p>Beside attributes and properties, a page also has a content, consisting of blocks for text and everything you can choose in the Notion UI by hitting /. As a page can be contained in another page, we can have a parent and children relation between pages. Check out the Page object to find out more about accessing these functionalities.</p>"},{"location":"usage/page_introduction/#searching-for-a-page","title":"Searching for a page","text":"<p>To get started, assume we have a page called \"Getting Started\", which we want to access using Ultimate Notion.</p> <pre><code>import ultimate_notion as uno\n\nnotion = uno.Session.get_or_create()  # if NOTION_TOKEN is set in environment\n\nintro_page = notion.search_page('Getting Started').item()\n</code></pre> <p>We can also display that content of the page within Jupyter Lab or even at the console with</p> <pre><code>intro_page.show()\n</code></pre> <p>In a Jupyter notebook, you would see</p> <p></p>"},{"location":"usage/page_introduction/#properties-of-a-page","title":"Properties of a page","text":"<p>The properties of a page can be accessed with the <code>props</code> attribute of each page object. Assume we have a page acting like a task in a database similar to the Task List example like this:</p> <p></p> <p>We search for <code>Task DB</code>, fetch all pages in a View and select the <code>Run first Marathon</code>-page:</p> <pre><code>task_view = notion.search_db('Task DB').item().fetch_all()\ntask = task_view.search_page('Run first Marathon').item()\n</code></pre> <p>Note</p> <p>As Notion rarely has any uniqueness guarantees, many methods return SList, i.e. Single-item List, a special list type for lists that typically hold a single item. An <code>SList</code> behaves exactly like a normal Python list except of the fact that it provides an additional item method to retrieve the single item or raise an exception otherwise.</p> <p>To check again for the date of the marathon, and also if we completed this task, we can use <code>props.col_name</code>, like</p> <pre><code>print(f'Task \"{task.title}\" was {task.props.status} on {task.props.due_date}')\n</code></pre> <p>to get the output:</p> <pre><code>Task \"Run first Marathon\" was Done on 2023-11-24 17:10:00+01:00\n</code></pre> <p>The actual property names like <code>status</code> and <code>due_date</code> can be easily find out by looking at the schema of the database holding our page, with:</p> <pre><code>task.database.schema.show()\n</code></pre> <p>returning the actual column name, the property type and the Python attribute name within <code>props</code>:</p> <pre><code>Name      Property    Attribute\n--------  ----------  -----------\nUrgency   Formula     urgency\nDue Date  Date        due_date\nStatus    Select      status\nPriority  Select      priority\nTask      Title       task\n</code></pre> <p>It is also possible to access the property directly with the column name using the indexing operator <code>[column name]</code>, e.g.:</p> <pre><code>f'Task \"{task.title}\" was {task.props[\"Status\"]} on {task.props[\"Due Date\"]}'\n</code></pre>"},{"location":"usage/page_introduction/#working-with-properties","title":"Working with properties","text":"<p>The properties of a page are all subclasses of PropertyValue and each provides a <code>value</code> attribute to access the actual low-level Python object like <code>int</code>, <code>float</code>, <code>datetime</code>, the <code>str</code> subtype RichText and so on. There are a few excpetions though like Select, MultiSelect and Status where value will return an Option object given you access to its name, color and description.</p> <p>To change a page property, we can just assign a new value to the corresponding PropertyValue. This is possible with the corresponding property value from the <code>value</code> attribute but also using the low-level Python object. To demonstrate this we gonna set a different due date for our task but first we save the current value to switch it back again.</p> <pre><code>from datetime import datetime, timedelta\n\nold_due_date = task.props.due_date\n# assign a datetime Python object\nnew_due_date_dt = datetime(2024, 1, 1, 12, 0) + timedelta(days=7)\ntask.props.due_date = new_due_date_dt\nassert task.props.due_date.value.date() == new_due_date_dt.date()\n\n# reassign the old property value object\ntask.props.due_date = old_due_date\nassert task.props.due_date == old_due_date\n</code></pre> <p>Those change will also be automatically reflected on the Notion server. So each assignment triggers an update web request.</p> <p>Here is an example on how to change the task status, which is a select property. First we get the list of all options by accessing the the corresponding column type of the property with:</p> <pre><code>options = task.database.schema.status.type.options\n</code></pre> <p>This generates a dictionary of Option objects:</p> <pre><code>{'backlog': &lt;Option: 'Backlog' at 0x13513d570&gt;,\n 'in_progress': &lt;Option: 'In Progress' at 0x13513d630&gt;,\n 'blocked': &lt;Option: 'Blocked' at 0x13513d420&gt;,\n 'done': &lt;Option: 'Done' at 0x1350fa140&gt;}\n</code></pre> <p>We now assign the <code>In Progress</code> option to our task with:</p> <pre><code>task.props.status = options['In Progress']\n</code></pre> <p>Info</p> <p>The functionality around updating select/multi-select properties will be changed in the future to make the expderience more user-friendly.</p>"}]}