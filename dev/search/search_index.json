{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ultimate-Notion \u00b6 The ultimate Python library for Notion! This is a pre-alpha version! Don't use it! Features \u00b6 in development ... License \u00b6 Ultimate-Notion is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#ultimate-notion","text":"The ultimate Python library for Notion! This is a pre-alpha version! Don't use it!","title":"Ultimate-Notion"},{"location":"#features","text":"in development ...","title":"Features"},{"location":"#license","text":"Ultimate-Notion is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Ultimate-Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help improve ultimate-notion docs by making them more readable and coherent, or by adding missing information and correcting mistakes. ultimate-notion documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in ultimate-notion 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Ultimate-Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help improve ultimate-notion docs by making them more readable and coherent, or by adding missing information and correcting mistakes. ultimate-notion documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in ultimate-notion 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm, Jason Heddings Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"ultimate_notion api core bases blocks endpoints iterator orm query records schema text types user database page parser session utils","title":"SUMMARY"},{"location":"reference/ultimate_notion/","text":"ultimate_notion \u00b6 __all__ = [ '__version__' , 'NotionSession' ] module-attribute \u00b6 __version__ = version ( 'ultimate-notion' ) module-attribute \u00b6 NotionSession ( kwargs ) \u00b6 An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" self . live_updates = kwargs . pop ( \"live_updates\" , True ) if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : kwargs . setdefault ( \"auth\" , env_token ) self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) _log . info ( \"Initialized Notion session\" ) blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = notion_client . Client ( None = kwargs ) instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 live_updates = kwargs . pop ( 'live_updates' , True ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 __enter__ () -> NotionSession \u00b6 Source code in ultimate_notion/session.py def __enter__ ( self ) -> NotionSession : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self __exit__ ( exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback ) close () \u00b6 Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () get_db ( db_id : Union [ str , UUID ]) -> Database \u00b6 Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( db_obj = self . databases . retrieve ( db_uuid ), session = self ) get_page ( page_id : Union [ str , UUID ]) -> Page \u00b6 Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( page_obj = self . pages . retrieve ( page_id ), session = self ) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise NotionSessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise NotionSessionError ( error ) search_db ( db_name : str ) -> slist [ Database ] \u00b6 Source code in ultimate_notion/session.py def search_db ( self , db_name : str ) -> slist [ Database ]: return slist ( Database ( db_obj = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () )","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion","text":"","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","text":"","title":"__all__"},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","text":"","title":"__version__"},{"location":"reference/ultimate_notion/#ultimate_notion.NotionSession","text":"An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" self . live_updates = kwargs . pop ( \"live_updates\" , True ) if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : kwargs . setdefault ( \"auth\" , env_token ) self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) _log . info ( \"Initialized Notion session\" )","title":"NotionSession"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.client","text":"","title":"client"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.live_updates","text":"","title":"live_updates"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.search","text":"","title":"search"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.users","text":"","title":"users"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.__enter__","text":"Source code in ultimate_notion/session.py def __enter__ ( self ) -> NotionSession : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.__exit__","text":"Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.close","text":"Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.get_db","text":"Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( db_obj = self . databases . retrieve ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.get_page","text":"Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( page_obj = self . pages . retrieve ( page_id ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise NotionSessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise NotionSessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.NotionSession.search_db","text":"Source code in ultimate_notion/session.py def search_db ( self , db_name : str ) -> slist [ Database ]: return slist ( Database ( db_obj = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () )","title":"search_db()"},{"location":"reference/ultimate_notion/database/","text":"database \u00b6 Database object Database ( db_obj : records . Database , session : NotionSession ) \u00b6 Source code in ultimate_notion/database.py def __init__ ( self , db_obj : records . Database , session : NotionSession ): self . db_obj = db_obj self . session = session db_obj = db_obj instance-attribute \u00b6 session = session instance-attribute \u00b6 archived () -> bool property \u00b6 Source code in ultimate_notion/database.py @property def archived ( self ) -> bool : return self . db_obj . archived as_df () -> pd . DataFrame \u00b6 Source code in ultimate_notion/database.py def as_df ( self ) -> pd . DataFrame : rows = ( page . to_dict () for page in self . session . databases . query ( self . id ) . execute ()) return pd . DataFrame ( rows ) cover () -> Optional [ FileObject ] property \u00b6 Source code in ultimate_notion/database.py @property def cover ( self ) -> Optional [ FileObject ]: return self . db_obj . cover created_time () -> datetime property \u00b6 Source code in ultimate_notion/database.py @property def created_time ( self ) -> datetime : return self . db_obj . created_time description () -> Optional [ List [ RichTextObject ]] property \u00b6 Source code in ultimate_notion/database.py @property def description ( self ) -> Optional [ List [ RichTextObject ]]: return self . db_obj . description icon () -> Optional [ Union [ FileObject , EmojiObject ]] property \u00b6 Source code in ultimate_notion/database.py @property def icon ( self ) -> Optional [ Union [ FileObject , EmojiObject ]]: return self . db_obj . icon id () -> UUID property \u00b6 Source code in ultimate_notion/database.py @property def id ( self ) -> UUID : return self . db_obj . id is_inline () -> bool property \u00b6 Source code in ultimate_notion/database.py @property def is_inline ( self ) -> bool : return self . db_obj . is_inline last_edited_time () -> datetime property \u00b6 Source code in ultimate_notion/database.py @property def last_edited_time ( self ) -> datetime : return self . db_obj . last_edited_time parent () -> ParentRef property \u00b6 Source code in ultimate_notion/database.py @property def parent ( self ) -> ParentRef : # ToDo: Resolve page when calling? return self . db_obj . parent properties () -> Dict [ str , PropertyObject ] property \u00b6 Source code in ultimate_notion/database.py @property def properties ( self ) -> Dict [ str , PropertyObject ]: return self . db_obj . properties title () -> str property \u00b6 Return the title of this database as plain text. Source code in ultimate_notion/database.py @property def title ( self ) -> str : \"\"\"Return the title of this database as plain text.\"\"\" if self . db_obj . title is None or len ( self . db_obj . title ) == 0 : return None return plain_text ( * self . db_obj . title ) url () -> str property \u00b6 Source code in ultimate_notion/database.py @property def url ( self ) -> str : return self . db_obj . url","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","text":"Database object","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","text":"Source code in ultimate_notion/database.py def __init__ ( self , db_obj : records . Database , session : NotionSession ): self . db_obj = db_obj self . session = session","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.db_obj","text":"","title":"db_obj"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.session","text":"","title":"session"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.archived","text":"Source code in ultimate_notion/database.py @property def archived ( self ) -> bool : return self . db_obj . archived","title":"archived()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.as_df","text":"Source code in ultimate_notion/database.py def as_df ( self ) -> pd . DataFrame : rows = ( page . to_dict () for page in self . session . databases . query ( self . id ) . execute ()) return pd . DataFrame ( rows )","title":"as_df()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","text":"Source code in ultimate_notion/database.py @property def cover ( self ) -> Optional [ FileObject ]: return self . db_obj . cover","title":"cover()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.created_time","text":"Source code in ultimate_notion/database.py @property def created_time ( self ) -> datetime : return self . db_obj . created_time","title":"created_time()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","text":"Source code in ultimate_notion/database.py @property def description ( self ) -> Optional [ List [ RichTextObject ]]: return self . db_obj . description","title":"description()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","text":"Source code in ultimate_notion/database.py @property def icon ( self ) -> Optional [ Union [ FileObject , EmojiObject ]]: return self . db_obj . icon","title":"icon()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.id","text":"Source code in ultimate_notion/database.py @property def id ( self ) -> UUID : return self . db_obj . id","title":"id()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","text":"Source code in ultimate_notion/database.py @property def is_inline ( self ) -> bool : return self . db_obj . is_inline","title":"is_inline()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.last_edited_time","text":"Source code in ultimate_notion/database.py @property def last_edited_time ( self ) -> datetime : return self . db_obj . last_edited_time","title":"last_edited_time()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.parent","text":"Source code in ultimate_notion/database.py @property def parent ( self ) -> ParentRef : # ToDo: Resolve page when calling? return self . db_obj . parent","title":"parent()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.properties","text":"Source code in ultimate_notion/database.py @property def properties ( self ) -> Dict [ str , PropertyObject ]: return self . db_obj . properties","title":"properties()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","text":"Return the title of this database as plain text. Source code in ultimate_notion/database.py @property def title ( self ) -> str : \"\"\"Return the title of this database as plain text.\"\"\" if self . db_obj . title is None or len ( self . db_obj . title ) == 0 : return None return plain_text ( * self . db_obj . title )","title":"title()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","text":"Source code in ultimate_notion/database.py @property def url ( self ) -> str : return self . db_obj . url","title":"url()"},{"location":"reference/ultimate_notion/page/","text":"page \u00b6 Page object Page ( page_obj : records . Page , session : NotionSession ) \u00b6 Source code in ultimate_notion/page.py def __init__ ( self , page_obj : records . Page , session : NotionSession ): self . page_obj = page_obj self . session = session page_obj = page_obj instance-attribute \u00b6 session = session instance-attribute \u00b6 to_dict ( page ) \u00b6 Source code in ultimate_notion/page.py def to_dict ( self , page ): row = dict ( page_title = page . Title , page_id = page . id , page_created_time = page . created_time , page_last_edited_time = page . last_edited_time , ) for k , v in page . properties . items (): if isinstance ( v , ( types . Date , types . MultiSelect )): v = str ( v ) elif isinstance ( v , types . Relation ): v = \", \" . join (( p . title for p in self . _resolve_relation ( v ))) elif isinstance ( v , types . DateFormula ): v = str ( v . Result ) elif isinstance ( v , types . Formula ): v = v . Result else : v = v . Value row [ k ] = v return row","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","text":"Page object","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","text":"Source code in ultimate_notion/page.py def __init__ ( self , page_obj : records . Page , session : NotionSession ): self . page_obj = page_obj self . session = session","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.page_obj","text":"","title":"page_obj"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.session","text":"","title":"session"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_dict","text":"Source code in ultimate_notion/page.py def to_dict ( self , page ): row = dict ( page_title = page . Title , page_id = page . id , page_created_time = page . created_time , page_last_edited_time = page . last_edited_time , ) for k , v in page . properties . items (): if isinstance ( v , ( types . Date , types . MultiSelect )): v = str ( v ) elif isinstance ( v , types . Relation ): v = \", \" . join (( p . title for p in self . _resolve_relation ( v ))) elif isinstance ( v , types . DateFormula ): v = str ( v . Result ) elif isinstance ( v , types . Formula ): v = v . Result else : v = v . Value row [ k ] = v return row","title":"to_dict()"},{"location":"reference/ultimate_notion/parser/","text":"parser \u00b6 Utilities for parsing other document types in Notion. These parsers provide an alternative to the \"Import\" capabilities of the Notion client and Notion Web Clipper. Perhaps that capability will be exposed to the API in the future, which would effectively render these parsers unnecessary. img_data_re = re . compile ( '^data:image/([^;]+);([^,]+),(.+)$' ) module-attribute \u00b6 CsvParser ( header_row = True , title_column = 0 ) \u00b6 A standard CSV parser. Contents of this parser are available as a list of page properties according to the determined schema. Specifically, this content follows the format: ``` [ { column_1_name: entry_1_column_1_data, column_2_name: entry_1_column_2_data, column_3_name: entry_1_column_3_data, ... }, { column_1_name: entry_2_column_1_data, column_2_name: entry_2_column_2_data, column_3_name: entry_2_column_3_data, ... }, ... ] ``` :param header_row: indicates that data will have a header row (for the schema) :param title_column: set the column in data to use for page titles Source code in ultimate_notion/parser.py def __init__ ( self , header_row = True , title_column = 0 ): \"\"\"Initialize a new `CsvParser`. :param header_row: indicates that data will have a header row (for the schema) :param title_column: set the column in data to use for page titles \"\"\" super () . __init__ () self . _has_header = header_row self . _title_index = title_column self . schema = {} self . _field_names = [] schema = {} instance-attribute \u00b6 parse ( data ) \u00b6 Parse the given CSV data. Upon return, the following properties will be available in the parser: schema : a computed schema for the supplied data title : the name of the CSV file being parsed (if available) content : a list of page properties with the tabular data Source code in ultimate_notion/parser.py def parse ( self , data ): \"\"\"Parse the given CSV data. Upon return, the following properties will be available in the parser: `schema`: a computed schema for the supplied data `title`: the name of the CSV file being parsed (if available) `content`: a list of page properties with the tabular data \"\"\" super () . parse ( data ) if isinstance ( data , str ): data = io . StringIO ( data , newline = \"\" ) reader = csv . reader ( data ) self . _process ( reader ) DocumentParser () \u00b6 Base class for document parsers. Source code in ultimate_notion/parser.py def __init__ ( self ): \"\"\"Initialize the document parser.\"\"\" self . title = None self . content = [] content = [] instance-attribute \u00b6 title = None instance-attribute \u00b6 parse ( data ) abstractmethod \u00b6 Parse the given data. This method will attempt to determine a default name for the document from the data source. Subclasses should call this method when implemting parse() locally. Source code in ultimate_notion/parser.py @abstractmethod def parse ( self , data ): \"\"\"Parse the given data. This method will attempt to determine a default name for the document from the data source. Subclasses should call this method when implemting `parse()` locally. \"\"\" if hasattr ( data , \"name\" ): self . title = basename ( data . name ) HtmlParser ( base = None ) \u00b6 An HTML parser that leverages the WHATWG HTML spec. :param base: the base URL for resolving relative paths Source code in ultimate_notion/parser.py def __init__ ( self , base = None ): \"\"\"Initialize an empty `HtmlParser`. :param base: the base URL for resolving relative paths \"\"\" super () . __init__ () self . _base_url = base self . meta = {} self . _current_href = None self . _current_text_style = Annotations () meta = {} instance-attribute \u00b6 parse ( data ) \u00b6 Parse the given HTML data. Upon return, the following properties will be available in the parser: title : contents of the <title> element if found content : a list of blocks containing rendered content from the HTML data meta : a dictionary of any <meta> tags that were found Source code in ultimate_notion/parser.py def parse ( self , data ): \"\"\"Parse the given HTML data. Upon return, the following properties will be available in the parser: `title`: contents of the `<title>` element if found `content`: a list of blocks containing rendered content from the HTML data `meta`: a dictionary of any `<meta>` tags that were found \"\"\" super () . parse ( data ) doc = html5lib . parse ( data , namespaceHTMLElements = False ) self . _render ( doc ) condense_text ( text ) \u00b6 Collapse contiguous whitespace from the given text. Source code in ultimate_notion/parser.py def condense_text ( text ): \"\"\"Collapse contiguous whitespace from the given text.\"\"\" if text is None : return None return re . sub ( r \"\\s+\" , \" \" , text , flags = re . MULTILINE ) elem_has_text ( elem , with_children = True ) \u00b6 Determine if the element has any visible text. :param elem: the element to examine :param with_children: whether to include children nodes in the search Source code in ultimate_notion/parser.py def elem_has_text ( elem , with_children = True ): \"\"\"Determine if the element has any visible text. :param elem: the element to examine :param with_children: whether to include children nodes in the search \"\"\" # first, check the direct text of the element... if elem . text is not None and not elem . text . isspace (): return True # now, we need to check the tail of each child... for child in elem : if with_children and elem_has_text ( child ): return True if child . tail is None : continue if not child . tail . isspace (): return True return False gather_text ( elem ) \u00b6 Return all text from the element and children. Source code in ultimate_notion/parser.py def gather_text ( elem ): \"\"\"Return all text from the element and children.\"\"\" text = \"\" . join ( elem . itertext ()) return normalize_text ( text ) normalize_text ( text ) \u00b6 Remove extra whitespace from the given text. Source code in ultimate_notion/parser.py def normalize_text ( text ): \"\"\"Remove extra whitespace from the given text.\"\"\" if text is None : return None text = text . strip () return condense_text ( text ) strip_text_block ( block ) \u00b6 Remove leading and trailing whitespace from text in the given block. Source code in ultimate_notion/parser.py def strip_text_block ( block ): \"\"\"Remove leading and trailing whitespace from text in the given block.\"\"\" if not isinstance ( block , blocks . TextBlock ): return if isinstance ( block , blocks . Code ): return block_text = block . __text__ if block_text is not None and len ( block_text ) > 0 : lstrip ( block_text [ 0 ]) rstrip ( block_text [ - 1 ])","title":"parser"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser","text":"Utilities for parsing other document types in Notion. These parsers provide an alternative to the \"Import\" capabilities of the Notion client and Notion Web Clipper. Perhaps that capability will be exposed to the API in the future, which would effectively render these parsers unnecessary.","title":"parser"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.img_data_re","text":"","title":"img_data_re"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.CsvParser","text":"A standard CSV parser. Contents of this parser are available as a list of page properties according to the determined schema. Specifically, this content follows the format: ``` [ { column_1_name: entry_1_column_1_data, column_2_name: entry_1_column_2_data, column_3_name: entry_1_column_3_data, ... }, { column_1_name: entry_2_column_1_data, column_2_name: entry_2_column_2_data, column_3_name: entry_2_column_3_data, ... }, ... ] ``` :param header_row: indicates that data will have a header row (for the schema) :param title_column: set the column in data to use for page titles Source code in ultimate_notion/parser.py def __init__ ( self , header_row = True , title_column = 0 ): \"\"\"Initialize a new `CsvParser`. :param header_row: indicates that data will have a header row (for the schema) :param title_column: set the column in data to use for page titles \"\"\" super () . __init__ () self . _has_header = header_row self . _title_index = title_column self . schema = {} self . _field_names = []","title":"CsvParser"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.CsvParser.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.CsvParser.parse","text":"Parse the given CSV data. Upon return, the following properties will be available in the parser: schema : a computed schema for the supplied data title : the name of the CSV file being parsed (if available) content : a list of page properties with the tabular data Source code in ultimate_notion/parser.py def parse ( self , data ): \"\"\"Parse the given CSV data. Upon return, the following properties will be available in the parser: `schema`: a computed schema for the supplied data `title`: the name of the CSV file being parsed (if available) `content`: a list of page properties with the tabular data \"\"\" super () . parse ( data ) if isinstance ( data , str ): data = io . StringIO ( data , newline = \"\" ) reader = csv . reader ( data ) self . _process ( reader )","title":"parse()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.DocumentParser","text":"Base class for document parsers. Source code in ultimate_notion/parser.py def __init__ ( self ): \"\"\"Initialize the document parser.\"\"\" self . title = None self . content = []","title":"DocumentParser"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.DocumentParser.content","text":"","title":"content"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.DocumentParser.title","text":"","title":"title"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.DocumentParser.parse","text":"Parse the given data. This method will attempt to determine a default name for the document from the data source. Subclasses should call this method when implemting parse() locally. Source code in ultimate_notion/parser.py @abstractmethod def parse ( self , data ): \"\"\"Parse the given data. This method will attempt to determine a default name for the document from the data source. Subclasses should call this method when implemting `parse()` locally. \"\"\" if hasattr ( data , \"name\" ): self . title = basename ( data . name )","title":"parse()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.HtmlParser","text":"An HTML parser that leverages the WHATWG HTML spec. :param base: the base URL for resolving relative paths Source code in ultimate_notion/parser.py def __init__ ( self , base = None ): \"\"\"Initialize an empty `HtmlParser`. :param base: the base URL for resolving relative paths \"\"\" super () . __init__ () self . _base_url = base self . meta = {} self . _current_href = None self . _current_text_style = Annotations ()","title":"HtmlParser"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.HtmlParser.meta","text":"","title":"meta"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.HtmlParser.parse","text":"Parse the given HTML data. Upon return, the following properties will be available in the parser: title : contents of the <title> element if found content : a list of blocks containing rendered content from the HTML data meta : a dictionary of any <meta> tags that were found Source code in ultimate_notion/parser.py def parse ( self , data ): \"\"\"Parse the given HTML data. Upon return, the following properties will be available in the parser: `title`: contents of the `<title>` element if found `content`: a list of blocks containing rendered content from the HTML data `meta`: a dictionary of any `<meta>` tags that were found \"\"\" super () . parse ( data ) doc = html5lib . parse ( data , namespaceHTMLElements = False ) self . _render ( doc )","title":"parse()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.condense_text","text":"Collapse contiguous whitespace from the given text. Source code in ultimate_notion/parser.py def condense_text ( text ): \"\"\"Collapse contiguous whitespace from the given text.\"\"\" if text is None : return None return re . sub ( r \"\\s+\" , \" \" , text , flags = re . MULTILINE )","title":"condense_text()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.elem_has_text","text":"Determine if the element has any visible text. :param elem: the element to examine :param with_children: whether to include children nodes in the search Source code in ultimate_notion/parser.py def elem_has_text ( elem , with_children = True ): \"\"\"Determine if the element has any visible text. :param elem: the element to examine :param with_children: whether to include children nodes in the search \"\"\" # first, check the direct text of the element... if elem . text is not None and not elem . text . isspace (): return True # now, we need to check the tail of each child... for child in elem : if with_children and elem_has_text ( child ): return True if child . tail is None : continue if not child . tail . isspace (): return True return False","title":"elem_has_text()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.gather_text","text":"Return all text from the element and children. Source code in ultimate_notion/parser.py def gather_text ( elem ): \"\"\"Return all text from the element and children.\"\"\" text = \"\" . join ( elem . itertext ()) return normalize_text ( text )","title":"gather_text()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.normalize_text","text":"Remove extra whitespace from the given text. Source code in ultimate_notion/parser.py def normalize_text ( text ): \"\"\"Remove extra whitespace from the given text.\"\"\" if text is None : return None text = text . strip () return condense_text ( text )","title":"normalize_text()"},{"location":"reference/ultimate_notion/parser/#ultimate_notion.parser.strip_text_block","text":"Remove leading and trailing whitespace from text in the given block. Source code in ultimate_notion/parser.py def strip_text_block ( block ): \"\"\"Remove leading and trailing whitespace from text in the given block.\"\"\" if not isinstance ( block , blocks . TextBlock ): return if isinstance ( block , blocks . Code ): return block_text = block . __text__ if block_text is not None and len ( block_text ) > 0 : lstrip ( block_text [ 0 ]) rstrip ( block_text [ - 1 ])","title":"strip_text_block()"},{"location":"reference/ultimate_notion/session/","text":"session \u00b6 Session object ENV_NOTION_AUTH_TOKEN = 'NOTION_AUTH_TOKEN' module-attribute \u00b6 NotionSession ( kwargs ) \u00b6 An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" self . live_updates = kwargs . pop ( \"live_updates\" , True ) if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : kwargs . setdefault ( \"auth\" , env_token ) self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) _log . info ( \"Initialized Notion session\" ) blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = notion_client . Client ( None = kwargs ) instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 live_updates = kwargs . pop ( 'live_updates' , True ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 __enter__ () -> NotionSession \u00b6 Source code in ultimate_notion/session.py def __enter__ ( self ) -> NotionSession : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self __exit__ ( exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback ) close () \u00b6 Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () get_db ( db_id : Union [ str , UUID ]) -> Database \u00b6 Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( db_obj = self . databases . retrieve ( db_uuid ), session = self ) get_page ( page_id : Union [ str , UUID ]) -> Page \u00b6 Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( page_obj = self . pages . retrieve ( page_id ), session = self ) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise NotionSessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise NotionSessionError ( error ) search_db ( db_name : str ) -> slist [ Database ] \u00b6 Source code in ultimate_notion/session.py def search_db ( self , db_name : str ) -> slist [ Database ]: return slist ( Database ( db_obj = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () ) NotionSessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","text":"Session object","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.ENV_NOTION_AUTH_TOKEN","text":"","title":"ENV_NOTION_AUTH_TOKEN"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession","text":"An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" self . live_updates = kwargs . pop ( \"live_updates\" , True ) if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : kwargs . setdefault ( \"auth\" , env_token ) self . client = notion_client . Client ( ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) _log . info ( \"Initialized Notion session\" )","title":"NotionSession"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.client","text":"","title":"client"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.live_updates","text":"","title":"live_updates"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.search","text":"","title":"search"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.users","text":"","title":"users"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.__enter__","text":"Source code in ultimate_notion/session.py def __enter__ ( self ) -> NotionSession : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.__exit__","text":"Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.close","text":"Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.get_db","text":"Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( db_obj = self . databases . retrieve ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.get_page","text":"Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( page_obj = self . pages . retrieve ( page_id ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise NotionSessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise NotionSessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSession.search_db","text":"Source code in ultimate_notion/session.py def search_db ( self , db_name : str ) -> slist [ Database ]: return slist ( Database ( db_obj = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () )","title":"search_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.NotionSessionError","text":"Raised when there are issues with the Notion session. Source code in ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"NotionSessionError"},{"location":"reference/ultimate_notion/utils/","text":"utils \u00b6 Additional utilities that fit nowhere else slist \u00b6 A list that holds often only a single element item () \u00b6 Source code in ultimate_notion/utils.py def item ( self ): if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = \"list is empty\" else : msg = f \"list of { type ( self [ 0 ]) . __name__ } has more than one element\" raise ValueError ( msg )","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","text":"Additional utilities that fit nowhere else","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.slist","text":"A list that holds often only a single element","title":"slist"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.slist.item","text":"Source code in ultimate_notion/utils.py def item ( self ): if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = \"list is empty\" else : msg = f \"list of { type ( self [ 0 ]) . __name__ } has more than one element\" raise ValueError ( msg )","title":"item()"},{"location":"reference/ultimate_notion/api/","text":"api \u00b6","title":"api"},{"location":"reference/ultimate_notion/api/#ultimate_notion.api","text":"","title":"api"},{"location":"reference/ultimate_notion/core/","text":"core \u00b6 Core functionality abstracting the Notion API This was mostly copied over from jheddings/notional MIT-licensed, authored by Jason Heddings","title":"core"},{"location":"reference/ultimate_notion/core/#ultimate_notion.core","text":"Core functionality abstracting the Notion API This was mostly copied over from jheddings/notional MIT-licensed, authored by Jason Heddings","title":"core"},{"location":"reference/ultimate_notion/core/bases/","text":"bases \u00b6 Base objects for working with the Notion API. ComposableObject \u00b6 Presents a metaclass that composes objects using simple values. This is primarily to allow easy definition of data objects without disrupting the BaseModel constructor. e.g. rather than requiring a caller to understand how nested data works in the data objects, they can compose objects from simple values. Compare the following code for declaring a Paragraph: # using nested data objects: text = \"hello world\" nested = TextObject . _NestedData ( content = text ) rtf = text . TextObject ( text = nested , plain_text = text ) content = blocks . Paragraph . _NestedData ( text = [ rtf ]) para = blocks . Paragraph ( paragraph = content ) # using a composable object: para = blocks . Paragraph [ \"hello world\" ] Classes that support composition in this way must define and implement the internal __compose__ method. This method takes an arbitrary number of parameters, based on the needs of the implementation. It is up to the implementing class to ensure that the parameters are specified correctly. __getitem__ ( params ) \u00b6 Return the requested class by composing using the given param. Types found in params will be compared to expected types in the __compose__ method. If the requested class does not expose the __compose__ method, this will raise an exception. Source code in ultimate_notion/core/bases.py def __getitem__ ( self , params ): \"\"\"Return the requested class by composing using the given param. Types found in `params` will be compared to expected types in the `__compose__` method. If the requested class does not expose the `__compose__` method, this will raise an exception. \"\"\" if not hasattr ( self , \"__compose__\" ): raise NotImplementedError ( f \" { self } does not support object composition\" ) # XXX if params is empty / None, consider calling the default constructor compose = self . __compose__ if type ( params ) is tuple : return compose ( * params ) return compose ( params ) DataObject \u00b6 The base for all API objects. __setattr__ ( name , value ) \u00b6 Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not allow for properties. See samuelcolvin/pydantic#1577 Source code in ultimate_notion/core/bases.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not allow for properties. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err refresh ( data ) \u00b6 Refresh the internal attributes with new data. Source code in ultimate_notion/core/bases.py def refresh ( self , ** data ): \"\"\"Refresh the internal attributes with new data.\"\"\" values , fields , error = validate_model ( self . __class__ , data ) if error : raise error for name in fields : value = values [ name ] _log . debug ( \"set object data -- %s => %s \" , name , value ) setattr ( self , name , value ) return self to_api () \u00b6 Convert to a suitable representation for the Notion API. Source code in ultimate_notion/core/bases.py def to_api ( self ): \"\"\"Convert to a suitable representation for the Notion API.\"\"\" # the API doesn't like \"undefined\" values... data = self . dict ( exclude_none = True , by_alias = True ) # we need to convert \"special\" types to string forms to help the JSON encoder. # there are efforts underway in pydantic to make this easier, but for now... return json_serialize ( data ) NamedObject \u00b6 A Notion API object. object : str class-attribute \u00b6 __init_subclass__ ( object = None , kwargs ) \u00b6 Update DataObject defaults for the named object. Source code in ultimate_notion/core/bases.py def __init_subclass__ ( cls , object = None , ** kwargs ): \"\"\"Update `DataObject` defaults for the named object.\"\"\" super () . __init_subclass__ ( ** kwargs ) if object is not None : cls . _modify_field_ ( \"object\" , default = object ) NestedObject \u00b6 Represents an API object with nested data. These objects require a 'type' property and a matching property of the same name, which holds additional data. For example, this contains a nested 'text' object: data = { type: \"text\", ... text: { ... } } Currently, this is a convenience class for clarity - it does not provide additional functionality at this time. TypedObject \u00b6 A type-referenced object. Many objects in the Notion API follow a generic->specific pattern with a 'type' parameter followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. Calling the object provides direct access to the data stored in {type} . type : str class-attribute \u00b6 __call__ ( field = None ) \u00b6 Return nested data from this Block. If a field is provided, the contents of that field in the NestedData will be returned. Otherwise, the full contents of the NestedData will be returned. Source code in ultimate_notion/core/bases.py def __call__ ( self , field = None ): \"\"\"Return nested data from this Block. If a field is provided, the contents of that field in the NestedData will be returned. Otherwise, the full contents of the NestedData will be returned. \"\"\" type = getattr ( self , \"type\" , None ) if type is None : raise AttributeError ( \"type not specified\" ) nested = getattr ( self , type ) if field is not None : nested = getattr ( nested , field ) return nested __get_validators__ () classmethod \u00b6 Provide BaseModel with the means to convert TypedObject 's. Source code in ultimate_notion/core/bases.py @classmethod def __get_validators__ ( cls ): \"\"\"Provide `BaseModel` with the means to convert `TypedObject`'s.\"\"\" yield cls . _convert_to_real_type_ __init_subclass__ ( type = None , kwargs ) \u00b6 Register the subtypes of the TypedObject subclass. Source code in ultimate_notion/core/bases.py def __init_subclass__ ( cls , type = None , ** kwargs ): \"\"\"Register the subtypes of the TypedObject subclass.\"\"\" super () . __init_subclass__ ( ** kwargs ) if type is not None : sub_type = type elif hasattr ( cls , \"__type__\" ): sub_type = cls . __type__ else : sub_type = cls . __name__ cls . _modify_field_ ( \"type\" , default = sub_type ) # initialize a __typemap__ map for each direct child of TypedObject # this allows different class trees to have the same 'type' name # but point to a different object (e.g. the 'date' type may have # different implementations depending where it is used in the API) # also, due to the order in which typed classes are defined, once # the map is defined for a subclass of TypedObject, any further # descendants of that class will have the new map via inheritance if TypedObject in cls . __bases__ and not hasattr ( cls , \"__typemap__\" ): cls . __typemap__ = {} if sub_type in cls . __typemap__ : raise ValueError ( f \"Duplicate subtype for class - { sub_type } :: { cls } \" ) _log . debug ( \"registered new subtype: %s => %s \" , sub_type , cls ) cls . __typemap__ [ sub_type ] = cls parse_obj ( obj ) classmethod \u00b6 Parse the structured object data into an instance of TypedObject . This method overrides BaseModel.parse_obj() . Source code in ultimate_notion/core/bases.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the structured object data into an instance of `TypedObject`. This method overrides `BaseModel.parse_obj()`. \"\"\" return cls . _convert_to_real_type_ ( obj ) json_serialize ( data ) \u00b6 Recursively serialize the given nested data structure to JSON compliance. This is mostly to handle data types that will not directly serialize to JSON. Source code in ultimate_notion/core/bases.py def json_serialize ( data ): \"\"\"Recursively serialize the given nested data structure to JSON compliance. This is mostly to handle data types that will not directly serialize to JSON. \"\"\" # https://github.com/samuelcolvin/pydantic/issues/1409#issuecomment-877175194 if isinstance ( data , ( date , datetime )): return data . isoformat () if isinstance ( data , UUID ): return str ( data ) if isinstance ( data , Enum ): return data . value if isinstance ( data , dict ): return { name : json_serialize ( value ) for name , value in data . items ()} if isinstance ( data , list ): return [ json_serialize ( value ) for value in data ] if isinstance ( data , tuple ): return [ json_serialize ( value ) for value in data ] return data","title":"bases"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases","text":"Base objects for working with the Notion API.","title":"bases"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.ComposableObject","text":"Presents a metaclass that composes objects using simple values. This is primarily to allow easy definition of data objects without disrupting the BaseModel constructor. e.g. rather than requiring a caller to understand how nested data works in the data objects, they can compose objects from simple values. Compare the following code for declaring a Paragraph: # using nested data objects: text = \"hello world\" nested = TextObject . _NestedData ( content = text ) rtf = text . TextObject ( text = nested , plain_text = text ) content = blocks . Paragraph . _NestedData ( text = [ rtf ]) para = blocks . Paragraph ( paragraph = content ) # using a composable object: para = blocks . Paragraph [ \"hello world\" ] Classes that support composition in this way must define and implement the internal __compose__ method. This method takes an arbitrary number of parameters, based on the needs of the implementation. It is up to the implementing class to ensure that the parameters are specified correctly.","title":"ComposableObject"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.ComposableObject.__getitem__","text":"Return the requested class by composing using the given param. Types found in params will be compared to expected types in the __compose__ method. If the requested class does not expose the __compose__ method, this will raise an exception. Source code in ultimate_notion/core/bases.py def __getitem__ ( self , params ): \"\"\"Return the requested class by composing using the given param. Types found in `params` will be compared to expected types in the `__compose__` method. If the requested class does not expose the `__compose__` method, this will raise an exception. \"\"\" if not hasattr ( self , \"__compose__\" ): raise NotImplementedError ( f \" { self } does not support object composition\" ) # XXX if params is empty / None, consider calling the default constructor compose = self . __compose__ if type ( params ) is tuple : return compose ( * params ) return compose ( params )","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.DataObject","text":"The base for all API objects.","title":"DataObject"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.DataObject.__setattr__","text":"Set the attribute of this object to a given value. The implementation of BaseModel.__setattr__ does not allow for properties. See samuelcolvin/pydantic#1577 Source code in ultimate_notion/core/bases.py def __setattr__ ( self , name , value ): \"\"\"Set the attribute of this object to a given value. The implementation of `BaseModel.__setattr__` does not allow for properties. See https://github.com/samuelcolvin/pydantic/issues/1577 \"\"\" try : super () . __setattr__ ( name , value ) except ValueError as err : setters = inspect . getmembers ( self . __class__ , predicate = lambda x : isinstance ( x , property ) and x . fset is not None , ) for setter_name , _ in setters : if setter_name == name : object . __setattr__ ( self , name , value ) break else : raise err","title":"__setattr__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.DataObject.refresh","text":"Refresh the internal attributes with new data. Source code in ultimate_notion/core/bases.py def refresh ( self , ** data ): \"\"\"Refresh the internal attributes with new data.\"\"\" values , fields , error = validate_model ( self . __class__ , data ) if error : raise error for name in fields : value = values [ name ] _log . debug ( \"set object data -- %s => %s \" , name , value ) setattr ( self , name , value ) return self","title":"refresh()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.DataObject.to_api","text":"Convert to a suitable representation for the Notion API. Source code in ultimate_notion/core/bases.py def to_api ( self ): \"\"\"Convert to a suitable representation for the Notion API.\"\"\" # the API doesn't like \"undefined\" values... data = self . dict ( exclude_none = True , by_alias = True ) # we need to convert \"special\" types to string forms to help the JSON encoder. # there are efforts underway in pydantic to make this easier, but for now... return json_serialize ( data )","title":"to_api()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.NamedObject","text":"A Notion API object.","title":"NamedObject"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.NamedObject.object","text":"","title":"object"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.NamedObject.__init_subclass__","text":"Update DataObject defaults for the named object. Source code in ultimate_notion/core/bases.py def __init_subclass__ ( cls , object = None , ** kwargs ): \"\"\"Update `DataObject` defaults for the named object.\"\"\" super () . __init_subclass__ ( ** kwargs ) if object is not None : cls . _modify_field_ ( \"object\" , default = object )","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.NestedObject","text":"Represents an API object with nested data. These objects require a 'type' property and a matching property of the same name, which holds additional data. For example, this contains a nested 'text' object: data = { type: \"text\", ... text: { ... } } Currently, this is a convenience class for clarity - it does not provide additional functionality at this time.","title":"NestedObject"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject","text":"A type-referenced object. Many objects in the Notion API follow a generic->specific pattern with a 'type' parameter followed by additional data. These objects must specify a type attribute to ensure that the correct object is created. Calling the object provides direct access to the data stored in {type} .","title":"TypedObject"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject.__call__","text":"Return nested data from this Block. If a field is provided, the contents of that field in the NestedData will be returned. Otherwise, the full contents of the NestedData will be returned. Source code in ultimate_notion/core/bases.py def __call__ ( self , field = None ): \"\"\"Return nested data from this Block. If a field is provided, the contents of that field in the NestedData will be returned. Otherwise, the full contents of the NestedData will be returned. \"\"\" type = getattr ( self , \"type\" , None ) if type is None : raise AttributeError ( \"type not specified\" ) nested = getattr ( self , type ) if field is not None : nested = getattr ( nested , field ) return nested","title":"__call__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject.__get_validators__","text":"Provide BaseModel with the means to convert TypedObject 's. Source code in ultimate_notion/core/bases.py @classmethod def __get_validators__ ( cls ): \"\"\"Provide `BaseModel` with the means to convert `TypedObject`'s.\"\"\" yield cls . _convert_to_real_type_","title":"__get_validators__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject.__init_subclass__","text":"Register the subtypes of the TypedObject subclass. Source code in ultimate_notion/core/bases.py def __init_subclass__ ( cls , type = None , ** kwargs ): \"\"\"Register the subtypes of the TypedObject subclass.\"\"\" super () . __init_subclass__ ( ** kwargs ) if type is not None : sub_type = type elif hasattr ( cls , \"__type__\" ): sub_type = cls . __type__ else : sub_type = cls . __name__ cls . _modify_field_ ( \"type\" , default = sub_type ) # initialize a __typemap__ map for each direct child of TypedObject # this allows different class trees to have the same 'type' name # but point to a different object (e.g. the 'date' type may have # different implementations depending where it is used in the API) # also, due to the order in which typed classes are defined, once # the map is defined for a subclass of TypedObject, any further # descendants of that class will have the new map via inheritance if TypedObject in cls . __bases__ and not hasattr ( cls , \"__typemap__\" ): cls . __typemap__ = {} if sub_type in cls . __typemap__ : raise ValueError ( f \"Duplicate subtype for class - { sub_type } :: { cls } \" ) _log . debug ( \"registered new subtype: %s => %s \" , sub_type , cls ) cls . __typemap__ [ sub_type ] = cls","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.TypedObject.parse_obj","text":"Parse the structured object data into an instance of TypedObject . This method overrides BaseModel.parse_obj() . Source code in ultimate_notion/core/bases.py @classmethod def parse_obj ( cls , obj ): \"\"\"Parse the structured object data into an instance of `TypedObject`. This method overrides `BaseModel.parse_obj()`. \"\"\" return cls . _convert_to_real_type_ ( obj )","title":"parse_obj()"},{"location":"reference/ultimate_notion/core/bases/#ultimate_notion.core.bases.json_serialize","text":"Recursively serialize the given nested data structure to JSON compliance. This is mostly to handle data types that will not directly serialize to JSON. Source code in ultimate_notion/core/bases.py def json_serialize ( data ): \"\"\"Recursively serialize the given nested data structure to JSON compliance. This is mostly to handle data types that will not directly serialize to JSON. \"\"\" # https://github.com/samuelcolvin/pydantic/issues/1409#issuecomment-877175194 if isinstance ( data , ( date , datetime )): return data . isoformat () if isinstance ( data , UUID ): return str ( data ) if isinstance ( data , Enum ): return data . value if isinstance ( data , dict ): return { name : json_serialize ( value ) for name , value in data . items ()} if isinstance ( data , list ): return [ json_serialize ( value ) for value in data ] if isinstance ( data , tuple ): return [ json_serialize ( value ) for value in data ] return data","title":"json_serialize()"},{"location":"reference/ultimate_notion/core/blocks/","text":"blocks \u00b6 Wrapper for Notion API blocks. Blocks are specific records that hold content. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods. Block \u00b6 A standard block object in Notion. Calling the block will expose the nested data in the object. Bookmark \u00b6 A bookmark block in Notion. bookmark : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . bookmark and self . bookmark . url : return f \"< { self . bookmark . url } >\" return \"\" URL () property \u00b6 Return the URL contained in this Bookmark block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `Bookmark` block.\"\"\" return self . bookmark . url __compose__ ( url ) classmethod \u00b6 Compose a new Bookmark block from a specific URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Compose a new `Bookmark` block from a specific URL.\"\"\" return Bookmark ( bookmark = Bookmark . _NestedData ( url = url )) Breadcrumb \u00b6 A breadcrumb block in Notion. breadcrumb : _NestedData = _NestedData () class-attribute \u00b6 BulletedListItem \u00b6 A bulleted list item in Notion. bulleted_list_item : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . bulleted_list_item and self . bulleted_list_item . rich_text : return f \"- { markdown ( * self . bulleted_list_item . rich_text ) } \" return \"\" Callout \u00b6 A callout block in Notion. callout : _NestedData = _NestedData () class-attribute \u00b6 ChildDatabase \u00b6 A child database block in Notion. child_database : _NestedData = _NestedData () class-attribute \u00b6 ChildPage \u00b6 A child page block in Notion. child_page : _NestedData = _NestedData () class-attribute \u00b6 Code \u00b6 A code block in Notion. code : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" lang = self . code . language if self . code and self . code . language else \"\" # FIXME this is not the standard way to represent code blocks in markdown... if self . code and self . code . rich_text : return f \"``` { lang } \\n { markdown ( * self . code . rich_text ) } \\n ```\" return \"\" __compose__ ( text , lang = CodingLanguage . PLAIN_TEXT ) classmethod \u00b6 Compose a Code block from the given text and language. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text , lang = CodingLanguage . PLAIN_TEXT ): \"\"\"Compose a `Code` block from the given text and language.\"\"\" return Code ( code = Code . _NestedData ( rich_text = [ TextObject [ text ]], language = lang , ) ) Column \u00b6 A column block in Notion. column : _NestedData = _NestedData () class-attribute \u00b6 ColumnList \u00b6 A column list block in Notion. column_list : _NestedData = _NestedData () class-attribute \u00b6 Divider \u00b6 A divider block in Notion. divider : Any = {} class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" return \"---\" Embed \u00b6 An embed block in Notion. embed : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . embed and self . embed . url : return f \"< { self . embed . url } >\" return \"\" URL () property \u00b6 Return the URL contained in this Embed block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `Embed` block.\"\"\" return self . embed . url __compose__ ( url ) classmethod \u00b6 Create a new Embed block from the given URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `Embed` block from the given URL.\"\"\" return Embed ( embed = Embed . _NestedData ( url = url )) File \u00b6 A file block in Notion. file : FileObject = None class-attribute \u00b6 Heading1 \u00b6 A heading_1 block in Notion. heading_1 : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_1 and self . heading_1 . rich_text : return f \"# { markdown ( * self . heading_1 . rich_text ) } #\" return \"\" Heading2 \u00b6 A heading_2 block in Notion. heading_2 : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_2 and self . heading_2 . rich_text : return f \"## { markdown ( * self . heading_2 . rich_text ) } ##\" return \"\" Heading3 \u00b6 A heading_3 block in Notion. heading_3 : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_3 and self . heading_3 . rich_text : return f \"### { markdown ( * self . heading_3 . rich_text ) } ###\" return \"\" Image \u00b6 An image block in Notion. image : FileObject = None class-attribute \u00b6 LinkPreview \u00b6 A link_preview block in Notion. link_preview : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . link_preview and self . link_preview . url : return f \"< { self . link_preview . url } >\" return \"\" URL () property \u00b6 Return the URL contained in this LinkPreview block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `LinkPreview` block.\"\"\" return self . link_preview . url __compose__ ( url ) classmethod \u00b6 Create a new LinkPreview block from the given URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `LinkPreview` block from the given URL.\"\"\" return LinkPreview ( link_preview = LinkPreview . _NestedData ( url = url )) LinkToPage \u00b6 A link_to_page block in Notion. link_to_page : ParentRef class-attribute \u00b6 NumberedListItem \u00b6 A numbered list item in Notion. numbered_list_item : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . numbered_list_item and self . numbered_list_item . rich_text : return f \"1. { markdown ( * self . numbered_list_item . rich_text ) } \" return \"\" PDF \u00b6 A pdf block in Notion. pdf : FileObject = None class-attribute \u00b6 Paragraph \u00b6 A paragraph block in Notion. paragraph : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . paragraph and self . paragraph . rich_text : return markdown ( * self . paragraph . rich_text ) return \"\" Quote \u00b6 A quote block in Notion. quote : _NestedData = _NestedData () class-attribute \u00b6 Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . quote and self . quote . rich_text : return \"> \" + markdown ( * self . quote . rich_text ) return \"\" SyncedBlock \u00b6 A synced_block block in Notion - either original or synced. synced_block : _NestedData = _NestedData () class-attribute \u00b6 IsOriginal () property \u00b6 Determine if this block represents the original content. If this method returns False , the block represents the sync'ed block. Source code in ultimate_notion/core/blocks.py @property def IsOriginal ( self ): \"\"\"Determine if this block represents the original content. If this method returns `False`, the block represents the sync'ed block. \"\"\" return self . synced_block . synced_from is None Table \u00b6 A table block in Notion. table : _NestedData = _NestedData () class-attribute \u00b6 Width () property \u00b6 Return the current width of this table. Source code in ultimate_notion/core/blocks.py @property def Width ( self ): \"\"\"Return the current width of this table.\"\"\" return self . table . table_width append ( block : TableRow ) \u00b6 Append the given row to this table. This method is only applicable when creating a new Table block. In order to add rows to an existing Table , use the blocks.children.append() endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. Source code in ultimate_notion/core/blocks.py def append ( self , block : TableRow ): \"\"\"Append the given row to this table. This method is only applicable when creating a new `Table` block. In order to add rows to an existing `Table`, use the `blocks.children.append()` endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. \"\"\" # XXX need to review whether this is applicable during update... may need # to raise an error if the block has already been created on the server if not isinstance ( block , TableRow ): raise ValueError ( \"Only TableRow may be appended to Table blocks.\" ) if self . Width == 0 : self . table . table_width = block . Width elif self . Width != block . Width : raise ValueError ( \"Number of cells in row must match table\" ) self . table . children . append ( block ) TableOfContents \u00b6 A table_of_contents block in Notion. table_of_contents : _NestedData = _NestedData () class-attribute \u00b6 TableRow \u00b6 A table_row block in Notion. table_row : _NestedData = _NestedData () class-attribute \u00b6 Width () property \u00b6 Return the width (number of cells) in this TableRow . Source code in ultimate_notion/core/blocks.py @property def Width ( self ): \"\"\"Return the width (number of cells) in this `TableRow`.\"\"\" return len ( self . table_row . cells ) if self . table_row . cells else 0 append ( text ) \u00b6 Append the given text as a new cell in this TableRow . text may be a string, RichTextObject or a list of RichTextObject 's. :param text: the text content to append Source code in ultimate_notion/core/blocks.py def append ( self , text ): \"\"\"Append the given text as a new cell in this `TableRow`. `text` may be a string, `RichTextObject` or a list of `RichTextObject`'s. :param text: the text content to append \"\"\" if self . table_row . cells is None : self . table_row . cells = [] if isinstance ( text , list ): self . table_row . cells . append ( list ) elif isinstance ( text , RichTextObject ): self . table_row . cells . append ([ text ]) else : rtf = TextObject . from_value ( text ) self . table_row . cells . append ([ rtf ]) Template \u00b6 A template block in Notion. template : _NestedData = _NestedData () class-attribute \u00b6 TextBlock \u00b6 A standard text block object in Notion. PlainText () property \u00b6 Return the contents of this Block as plain text. Source code in ultimate_notion/core/blocks.py @property def PlainText ( self ): \"\"\"Return the contents of this Block as plain text.\"\"\" content = self . __text__ return None if content is None else plain_text ( * content ) __compose__ ( text ) classmethod \u00b6 Compose a TextBlock from the given text. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text ): \"\"\"Compose a `TextBlock` from the given text.\"\"\" if text is None : return None obj = cls () obj . concat ( text ) return obj __text__ () property \u00b6 Provide shorthand access to the nested text content in this block. Source code in ultimate_notion/core/blocks.py @property def __text__ ( self ): \"\"\"Provide shorthand access to the nested text content in this block.\"\"\" return self ( \"rich_text\" ) concat ( text ) \u00b6 Concatenate text (either RichTextObject or str items) to this block. Source code in ultimate_notion/core/blocks.py def concat ( self , * text ): \"\"\"Concatenate text (either `RichTextObject` or `str` items) to this block.\"\"\" nested = self () if not hasattr ( nested , \"rich_text\" ): raise AttributeError ( \"nested data does not contain text\" ) if nested . rich_text is None : nested . rich_text = [] for obj in text : if obj is None : continue self . _append_object ( obj ) ToDo \u00b6 A todo list item in Notion. to_do : _NestedData = _NestedData () class-attribute \u00b6 IsChecked () property \u00b6 Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns None . Source code in ultimate_notion/core/blocks.py @property def IsChecked ( self ): \"\"\"Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns `None`. \"\"\" return self . to_do . checked if self . to_do else None Markdown () property \u00b6 Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . to_do and self . to_do . rich_text : if self . to_do . checked : return f \"- [x] { markdown ( * self . to_do . rich_text ) } \" return f \"- [ ] { markdown ( * self . to_do . rich_text ) } \" return \"\" __compose__ ( text , checked = False , href = None ) classmethod \u00b6 Compose a ToDo block from the given text and checked state. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text , checked = False , href = None ): \"\"\"Compose a ToDo block from the given text and checked state.\"\"\" return ToDo ( to_do = ToDo . _NestedData ( rich_text = [ TextObject [ text , href ]], checked = checked , ) ) Toggle \u00b6 A toggle list item in Notion. toggle : _NestedData = _NestedData () class-attribute \u00b6 UnsupportedBlock \u00b6 A placeholder for unsupported blocks in the API. unsupported : Optional [ _NestedData ] = None class-attribute \u00b6 Video \u00b6 A video block in Notion. video : FileObject = None class-attribute \u00b6 WithChildrenMixin \u00b6 Mixin for blocks that support children blocks. __children__ () property \u00b6 Provide short-hand access to the children in this block. Source code in ultimate_notion/core/blocks.py @property def __children__ ( self ): \"\"\"Provide short-hand access to the children in this block.\"\"\" return self ( \"children\" ) __iadd__ ( block ) \u00b6 Append the given block to the children of this parent in place. Source code in ultimate_notion/core/blocks.py def __iadd__ ( self , block ): \"\"\"Append the given block to the children of this parent in place.\"\"\" self . append ( block ) return self append ( block ) \u00b6 Append the given block to the children of this parent. Source code in ultimate_notion/core/blocks.py def append ( self , block ): \"\"\"Append the given block to the children of this parent.\"\"\" if block is None : raise ValueError ( \"block cannot be None\" ) nested = self () if not hasattr ( nested , \"children\" ): raise TypeError ( \"nested data does not contain children\" ) if nested . children is None : nested . children = [] nested . children . append ( block ) self . has_children = True","title":"blocks"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks","text":"Wrapper for Notion API blocks. Blocks are specific records that hold content. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods.","title":"blocks"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Block","text":"A standard block object in Notion. Calling the block will expose the nested data in the object.","title":"Block"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Bookmark","text":"A bookmark block in Notion.","title":"Bookmark"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Bookmark.bookmark","text":"","title":"bookmark"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Bookmark.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . bookmark and self . bookmark . url : return f \"< { self . bookmark . url } >\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Bookmark.URL","text":"Return the URL contained in this Bookmark block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `Bookmark` block.\"\"\" return self . bookmark . url","title":"URL()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Bookmark.__compose__","text":"Compose a new Bookmark block from a specific URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Compose a new `Bookmark` block from a specific URL.\"\"\" return Bookmark ( bookmark = Bookmark . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Breadcrumb","text":"A breadcrumb block in Notion.","title":"Breadcrumb"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Breadcrumb.breadcrumb","text":"","title":"breadcrumb"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.BulletedListItem","text":"A bulleted list item in Notion.","title":"BulletedListItem"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.BulletedListItem.bulleted_list_item","text":"","title":"bulleted_list_item"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.BulletedListItem.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . bulleted_list_item and self . bulleted_list_item . rich_text : return f \"- { markdown ( * self . bulleted_list_item . rich_text ) } \" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Callout","text":"A callout block in Notion.","title":"Callout"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Callout.callout","text":"","title":"callout"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ChildDatabase","text":"A child database block in Notion.","title":"ChildDatabase"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ChildDatabase.child_database","text":"","title":"child_database"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ChildPage","text":"A child page block in Notion.","title":"ChildPage"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ChildPage.child_page","text":"","title":"child_page"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Code","text":"A code block in Notion.","title":"Code"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Code.code","text":"","title":"code"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Code.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" lang = self . code . language if self . code and self . code . language else \"\" # FIXME this is not the standard way to represent code blocks in markdown... if self . code and self . code . rich_text : return f \"``` { lang } \\n { markdown ( * self . code . rich_text ) } \\n ```\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Code.__compose__","text":"Compose a Code block from the given text and language. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text , lang = CodingLanguage . PLAIN_TEXT ): \"\"\"Compose a `Code` block from the given text and language.\"\"\" return Code ( code = Code . _NestedData ( rich_text = [ TextObject [ text ]], language = lang , ) )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Column","text":"A column block in Notion.","title":"Column"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Column.column","text":"","title":"column"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ColumnList","text":"A column list block in Notion.","title":"ColumnList"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ColumnList.column_list","text":"","title":"column_list"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Divider","text":"A divider block in Notion.","title":"Divider"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Divider.divider","text":"","title":"divider"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Divider.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" return \"---\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Embed","text":"An embed block in Notion.","title":"Embed"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Embed.embed","text":"","title":"embed"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Embed.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . embed and self . embed . url : return f \"< { self . embed . url } >\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Embed.URL","text":"Return the URL contained in this Embed block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `Embed` block.\"\"\" return self . embed . url","title":"URL()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Embed.__compose__","text":"Create a new Embed block from the given URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `Embed` block from the given URL.\"\"\" return Embed ( embed = Embed . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.File","text":"A file block in Notion.","title":"File"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.File.file","text":"","title":"file"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading1","text":"A heading_1 block in Notion.","title":"Heading1"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading1.heading_1","text":"","title":"heading_1"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading1.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_1 and self . heading_1 . rich_text : return f \"# { markdown ( * self . heading_1 . rich_text ) } #\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading2","text":"A heading_2 block in Notion.","title":"Heading2"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading2.heading_2","text":"","title":"heading_2"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading2.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_2 and self . heading_2 . rich_text : return f \"## { markdown ( * self . heading_2 . rich_text ) } ##\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading3","text":"A heading_3 block in Notion.","title":"Heading3"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading3.heading_3","text":"","title":"heading_3"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Heading3.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . heading_3 and self . heading_3 . rich_text : return f \"### { markdown ( * self . heading_3 . rich_text ) } ###\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Image","text":"An image block in Notion.","title":"Image"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Image.image","text":"","title":"image"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkPreview","text":"A link_preview block in Notion.","title":"LinkPreview"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkPreview.link_preview","text":"","title":"link_preview"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkPreview.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . link_preview and self . link_preview . url : return f \"< { self . link_preview . url } >\" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkPreview.URL","text":"Return the URL contained in this LinkPreview block. Source code in ultimate_notion/core/blocks.py @property def URL ( self ): \"\"\"Return the URL contained in this `LinkPreview` block.\"\"\" return self . link_preview . url","title":"URL()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkPreview.__compose__","text":"Create a new LinkPreview block from the given URL. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , url ): \"\"\"Create a new `LinkPreview` block from the given URL.\"\"\" return LinkPreview ( link_preview = LinkPreview . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkToPage","text":"A link_to_page block in Notion.","title":"LinkToPage"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.LinkToPage.link_to_page","text":"","title":"link_to_page"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.NumberedListItem","text":"A numbered list item in Notion.","title":"NumberedListItem"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.NumberedListItem.numbered_list_item","text":"","title":"numbered_list_item"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.NumberedListItem.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . numbered_list_item and self . numbered_list_item . rich_text : return f \"1. { markdown ( * self . numbered_list_item . rich_text ) } \" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.PDF","text":"A pdf block in Notion.","title":"PDF"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.PDF.pdf","text":"","title":"pdf"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Paragraph","text":"A paragraph block in Notion.","title":"Paragraph"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Paragraph.paragraph","text":"","title":"paragraph"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Paragraph.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . paragraph and self . paragraph . rich_text : return markdown ( * self . paragraph . rich_text ) return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Quote","text":"A quote block in Notion.","title":"Quote"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Quote.quote","text":"","title":"quote"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Quote.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . quote and self . quote . rich_text : return \"> \" + markdown ( * self . quote . rich_text ) return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.SyncedBlock","text":"A synced_block block in Notion - either original or synced.","title":"SyncedBlock"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.SyncedBlock.synced_block","text":"","title":"synced_block"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.SyncedBlock.IsOriginal","text":"Determine if this block represents the original content. If this method returns False , the block represents the sync'ed block. Source code in ultimate_notion/core/blocks.py @property def IsOriginal ( self ): \"\"\"Determine if this block represents the original content. If this method returns `False`, the block represents the sync'ed block. \"\"\" return self . synced_block . synced_from is None","title":"IsOriginal()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Table","text":"A table block in Notion.","title":"Table"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Table.table","text":"","title":"table"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Table.Width","text":"Return the current width of this table. Source code in ultimate_notion/core/blocks.py @property def Width ( self ): \"\"\"Return the current width of this table.\"\"\" return self . table . table_width","title":"Width()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Table.append","text":"Append the given row to this table. This method is only applicable when creating a new Table block. In order to add rows to an existing Table , use the blocks.children.append() endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. Source code in ultimate_notion/core/blocks.py def append ( self , block : TableRow ): \"\"\"Append the given row to this table. This method is only applicable when creating a new `Table` block. In order to add rows to an existing `Table`, use the `blocks.children.append()` endpoint. When adding a row, this method will rase an exception if the width does not match the expected number of cells for existing rows in the block. \"\"\" # XXX need to review whether this is applicable during update... may need # to raise an error if the block has already been created on the server if not isinstance ( block , TableRow ): raise ValueError ( \"Only TableRow may be appended to Table blocks.\" ) if self . Width == 0 : self . table . table_width = block . Width elif self . Width != block . Width : raise ValueError ( \"Number of cells in row must match table\" ) self . table . children . append ( block )","title":"append()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableOfContents","text":"A table_of_contents block in Notion.","title":"TableOfContents"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableOfContents.table_of_contents","text":"","title":"table_of_contents"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableRow","text":"A table_row block in Notion.","title":"TableRow"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableRow.table_row","text":"","title":"table_row"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableRow.Width","text":"Return the width (number of cells) in this TableRow . Source code in ultimate_notion/core/blocks.py @property def Width ( self ): \"\"\"Return the width (number of cells) in this `TableRow`.\"\"\" return len ( self . table_row . cells ) if self . table_row . cells else 0","title":"Width()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TableRow.append","text":"Append the given text as a new cell in this TableRow . text may be a string, RichTextObject or a list of RichTextObject 's. :param text: the text content to append Source code in ultimate_notion/core/blocks.py def append ( self , text ): \"\"\"Append the given text as a new cell in this `TableRow`. `text` may be a string, `RichTextObject` or a list of `RichTextObject`'s. :param text: the text content to append \"\"\" if self . table_row . cells is None : self . table_row . cells = [] if isinstance ( text , list ): self . table_row . cells . append ( list ) elif isinstance ( text , RichTextObject ): self . table_row . cells . append ([ text ]) else : rtf = TextObject . from_value ( text ) self . table_row . cells . append ([ rtf ])","title":"append()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Template","text":"A template block in Notion.","title":"Template"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Template.template","text":"","title":"template"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TextBlock","text":"A standard text block object in Notion.","title":"TextBlock"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TextBlock.PlainText","text":"Return the contents of this Block as plain text. Source code in ultimate_notion/core/blocks.py @property def PlainText ( self ): \"\"\"Return the contents of this Block as plain text.\"\"\" content = self . __text__ return None if content is None else plain_text ( * content )","title":"PlainText()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TextBlock.__compose__","text":"Compose a TextBlock from the given text. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text ): \"\"\"Compose a `TextBlock` from the given text.\"\"\" if text is None : return None obj = cls () obj . concat ( text ) return obj","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TextBlock.__text__","text":"Provide shorthand access to the nested text content in this block. Source code in ultimate_notion/core/blocks.py @property def __text__ ( self ): \"\"\"Provide shorthand access to the nested text content in this block.\"\"\" return self ( \"rich_text\" )","title":"__text__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.TextBlock.concat","text":"Concatenate text (either RichTextObject or str items) to this block. Source code in ultimate_notion/core/blocks.py def concat ( self , * text ): \"\"\"Concatenate text (either `RichTextObject` or `str` items) to this block.\"\"\" nested = self () if not hasattr ( nested , \"rich_text\" ): raise AttributeError ( \"nested data does not contain text\" ) if nested . rich_text is None : nested . rich_text = [] for obj in text : if obj is None : continue self . _append_object ( obj )","title":"concat()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ToDo","text":"A todo list item in Notion.","title":"ToDo"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ToDo.to_do","text":"","title":"to_do"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ToDo.IsChecked","text":"Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns None . Source code in ultimate_notion/core/blocks.py @property def IsChecked ( self ): \"\"\"Determine if this ToDo is marked as checked or not. If the block is empty (e.g. no nested data), this method returns `None`. \"\"\" return self . to_do . checked if self . to_do else None","title":"IsChecked()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ToDo.Markdown","text":"Return the contents of this block as markdown text. Source code in ultimate_notion/core/blocks.py @property def Markdown ( self ): \"\"\"Return the contents of this block as markdown text.\"\"\" if self . to_do and self . to_do . rich_text : if self . to_do . checked : return f \"- [x] { markdown ( * self . to_do . rich_text ) } \" return f \"- [ ] { markdown ( * self . to_do . rich_text ) } \" return \"\"","title":"Markdown()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.ToDo.__compose__","text":"Compose a ToDo block from the given text and checked state. Source code in ultimate_notion/core/blocks.py @classmethod def __compose__ ( cls , text , checked = False , href = None ): \"\"\"Compose a ToDo block from the given text and checked state.\"\"\" return ToDo ( to_do = ToDo . _NestedData ( rich_text = [ TextObject [ text , href ]], checked = checked , ) )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Toggle","text":"A toggle list item in Notion.","title":"Toggle"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Toggle.toggle","text":"","title":"toggle"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.UnsupportedBlock","text":"A placeholder for unsupported blocks in the API.","title":"UnsupportedBlock"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.UnsupportedBlock.unsupported","text":"","title":"unsupported"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Video","text":"A video block in Notion.","title":"Video"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.Video.video","text":"","title":"video"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.WithChildrenMixin","text":"Mixin for blocks that support children blocks.","title":"WithChildrenMixin"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.WithChildrenMixin.__children__","text":"Provide short-hand access to the children in this block. Source code in ultimate_notion/core/blocks.py @property def __children__ ( self ): \"\"\"Provide short-hand access to the children in this block.\"\"\" return self ( \"children\" )","title":"__children__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.WithChildrenMixin.__iadd__","text":"Append the given block to the children of this parent in place. Source code in ultimate_notion/core/blocks.py def __iadd__ ( self , block ): \"\"\"Append the given block to the children of this parent in place.\"\"\" self . append ( block ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/blocks/#ultimate_notion.core.blocks.WithChildrenMixin.append","text":"Append the given block to the children of this parent. Source code in ultimate_notion/core/blocks.py def append ( self , block ): \"\"\"Append the given block to the children of this parent.\"\"\" if block is None : raise ValueError ( \"block cannot be None\" ) nested = self () if not hasattr ( nested , \"children\" ): raise TypeError ( \"nested data does not contain children\" ) if nested . children is None : nested . children = [] nested . children . append ( block ) self . has_children = True","title":"append()"},{"location":"reference/ultimate_notion/core/endpoints/","text":"endpoints \u00b6 Provides direct access to the endpoints of the Notion API. BlocksEndpoint ( args , kwargs ) \u00b6 Notional interface to the API 'blocks' endpoint. Source code in ultimate_notion/core/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs ) children = BlocksEndpoint . ChildrenEndpoint ( args , None = kwargs ) instance-attribute \u00b6 ChildrenEndpoint \u00b6 Notional interface to the API 'blocks/children' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks . children append ( parent , blocks ) \u00b6 Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. Source code in ultimate_notion/core/endpoints.py def append ( self , parent , * blocks ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. \"\"\" parent_id = get_target_id ( parent ) children = [ block . to_api () for block in blocks if block is not None ] _log . info ( \"Appending %d blocks to %s ...\" , len ( children ), parent_id ) data = self () . append ( block_id = parent_id , children = children ) if \"results\" in data : if len ( blocks ) == len ( data [ \"results\" ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ \"results\" ][ idx ] block . refresh ( ** result ) else : _log . warning ( \"Unable to refresh results; size mismatch\" ) else : _log . warning ( \"Unable to refresh results; not provided\" ) return parent list ( parent ) \u00b6 Return all Blocks contained by the specified parent. Source code in ultimate_notion/core/endpoints.py def list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent.\"\"\" parent_id = get_target_id ( parent ) blocks = EndpointIterator ( endpoint = self () . list , block_id = parent_id ) _log . info ( \"Listing blocks for %s ...\" , parent_id ) return ResultSet ( exec = blocks , cls = Block ) __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks delete ( block ) \u00b6 Delete (archive) the specified Block. Source code in ultimate_notion/core/endpoints.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block.\"\"\" _log . info ( \"Deleting block :: %s \" , block . id ) data = self () . delete ( block . id . hex ) return block . refresh ( ** data ) restore ( block ) \u00b6 Restore (unarchive) the specified Block. Source code in ultimate_notion/core/endpoints.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block.\"\"\" _log . info ( \"Restoring block :: %s \" , block . id ) data = self () . update ( block . id . hex , archived = False ) return block . refresh ( ** data ) retrieve ( block_id ) \u00b6 Return the Block with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , block_id ): \"\"\"Return the Block with the given ID.\"\"\" _log . info ( \"Retrieving block :: %s \" , block_id ) data = self () . retrieve ( block_id ) return Block . parse_obj ( data ) update ( block ) \u00b6 Update the block content on the server. The block info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , block ): \"\"\"Update the block content on the server. The block info will be refreshed to the latest version from the server. \"\"\" _log . info ( \"Updating block :: %s \" , block . id ) data = self () . update ( block . id . hex , ** block . to_api ()) return block . refresh ( ** data ) DatabasesEndpoint \u00b6 Notional interface to the API 'databases' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . databases create ( parent , schema , title = None ) \u00b6 Add a database to the given Page parent. Source code in ultimate_notion/core/endpoints.py def create ( self , parent , schema , title = None ): \"\"\"Add a database to the given Page parent.\"\"\" _log . info ( \"Creating database %s - %s \" , parent , title ) request = self . _build_request ( parent , schema , title ) data = self () . create ( ** request ) return Database . parse_obj ( data ) delete ( database ) \u00b6 Delete (archive) the specified Database. Source code in ultimate_notion/core/endpoints.py def delete ( self , database ): \"\"\"Delete (archive) the specified Database.\"\"\" _log . info ( \"Deleting database :: %s \" , database . id ) return self . session . blocks . delete ( database ) list () \u00b6 Return an iterator for all Database objects in the integration scope. Source code in ultimate_notion/core/endpoints.py def list ( self ): \"\"\"Return an iterator for all Database objects in the integration scope.\"\"\" # DEPRECATED ENDPOINT ### _log . info ( \"Listing known databases...\" ) databases = EndpointIterator ( endpoint = self () . list ) return ResultSet ( exec = databases , cls = Database ) query ( target ) \u00b6 Initialize a new Query object with the target data class. :param target: either a string with the database ID or an ORM class Source code in ultimate_notion/core/endpoints.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a string with the database ID or an ORM class \"\"\" _log . info ( \"Initializing database query :: { %s }\" , get_target_id ( target )) database_id = get_target_id ( target ) cls = None if isclass ( target ) and issubclass ( target , ConnectedPage ): cls = target if cls . _notional__session != self . session : raise ValueError ( \"ConnectedPage belongs to a different session\" ) return QueryBuilder ( endpoint = self () . query , cls = cls , database_id = database_id ) restore ( database ) \u00b6 Restore (unarchive) the specified Database. Source code in ultimate_notion/core/endpoints.py def restore ( self , database ): \"\"\"Restore (unarchive) the specified Database.\"\"\" _log . info ( \"Restoring database :: %s \" , database . id ) return self . session . blocks . restore ( database ) retrieve ( database_id ) \u00b6 Return the Database with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , database_id ): \"\"\"Return the Database with the given ID.\"\"\" _log . info ( \"Retrieving database :: %s \" , database_id ) data = self () . retrieve ( database_id ) return Database . parse_obj ( data ) update ( database , title = None , schema = None ) \u00b6 Update the Database object on the server. The database info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , database , title = None , schema = None ): \"\"\"Update the Database object on the server. The database info will be refreshed to the latest version from the server. \"\"\" dbid = get_target_id ( database ) _log . info ( \"Updating database info :: %s \" , dbid ) request = self . _build_request ( schema = schema , title = title ) if request : data = self () . update ( dbid , ** request ) database = database . refresh ( ** data ) return database Endpoint ( session ) \u00b6 Notional wrapper for the API endpoints. Source code in ultimate_notion/core/endpoints.py def __init__ ( self , session ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . session = session session = session instance-attribute \u00b6 PagesEndpoint \u00b6 Notional interface to the API 'pages' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages create ( parent , title = None , properties = None , children = None ) \u00b6 Add a page to the given parent (Page or Database). Source code in ultimate_notion/core/endpoints.py def create ( self , parent , title = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database).\"\"\" if parent is None : raise ValueError ( \"'parent' must be provided\" ) parent = ParentRef [ parent ] request = { \"parent\" : parent . to_api ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ \"title\" ] = Title [ title ] request [ \"properties\" ] = { name : prop . to_api () if prop is not None else None for name , prop in properties . items ()} if children is not None : request [ \"children\" ] = [ child . to_api () for child in children if child is not None ] _log . info ( \"Creating page :: %s => %s \" , parent , title ) data = self () . create ( ** request ) return Page . parse_obj ( data ) delete ( page ) \u00b6 Delete (archive) the specified Page. Source code in ultimate_notion/core/endpoints.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page.\"\"\" return self . set ( page , archived = True ) restore ( page ) \u00b6 Restore (unarchive) the specified Page. Source code in ultimate_notion/core/endpoints.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page.\"\"\" return self . set ( page , archived = False ) retrieve ( page_id ) \u00b6 Return the Page with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , page_id ): \"\"\"Return the Page with the given ID.\"\"\" _log . info ( \"Retrieving page :: %s \" , page_id ) data = self () . retrieve ( page_id ) return Page . parse_obj ( data ) set ( page , cover = False , icon = False , archived = None ) \u00b6 Set specific page attributes (such as cover, icon, etc) on the server. To remove an attribute, set its value to None. Source code in ultimate_notion/core/endpoints.py def set ( self , page , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc) on the server. To remove an attribute, set its value to None. \"\"\" if cover is None : _log . info ( \"Removing page cover :: %s \" , page . id ) data = self () . update ( page . id . hex , cover = {}) elif cover is not False : _log . info ( \"Setting page cover :: %s => %s \" , page . id , cover ) data = self () . update ( page . id . hex , cover = cover . to_api ()) if icon is None : _log . info ( \"Removing page icon :: %s \" , page . id ) data = self () . update ( page . id . hex , icon = {}) elif icon is not False : _log . info ( \"Setting page icon :: %s => %s \" , page . id , icon ) data = self () . update ( page . id . hex , icon = icon . to_api ()) if archived is False : _log . info ( \"Restoring page :: %s \" , page . id ) data = self () . update ( page . id . hex , archived = False ) elif archived is True : _log . info ( \"Archiving page :: %s \" , page . id ) data = self () . update ( page . id . hex , archived = True ) return page . refresh ( ** data ) update ( page , properties ) \u00b6 Update the Page object properties on the server. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. properties are specified as \"name\" : PropertyValue pairs. The page info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , page , ** properties ): \"\"\"Update the Page object properties on the server. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. `properties` are specified as `\"name\"`: `PropertyValue` pairs. The page info will be refreshed to the latest version from the server. \"\"\" _log . info ( \"Updating page info :: %s \" , page . id ) if not properties : properties = page . properties props = { name : value . to_api () if value is not None else None for name , value in properties . items ()} data = self () . update ( page . id . hex , properties = props ) return page . refresh ( ** data ) SearchEndpoint \u00b6 Notional interface to the API 'search' endpoint. __call__ ( text = None ) \u00b6 Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in ultimate_notion/core/endpoints.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ \"query\" ] = text return QueryBuilder ( endpoint = self . session . client . search , ** params ) UsersEndpoint \u00b6 Notional interface to the API 'users' endpoint. __call__ () \u00b6 Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . users list () \u00b6 Return an iterator for all users in the workspace. Source code in ultimate_notion/core/endpoints.py def list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" users = EndpointIterator ( endpoint = self () . list ) _log . info ( \"Listing known users...\" ) return ResultSet ( exec = users , cls = User ) me () \u00b6 Return the current bot User. Source code in ultimate_notion/core/endpoints.py def me ( self ): \"\"\"Return the current bot User.\"\"\" _log . info ( \"Retrieving current integration bot\" ) data = self () . me () return User . parse_obj ( data ) retrieve ( user_id ) \u00b6 Return the User with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" _log . info ( \"Retrieving user :: %s \" , user_id ) data = self () . retrieve ( user_id ) return User . parse_obj ( data )","title":"endpoints"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints","text":"Provides direct access to the endpoints of the Notion API.","title":"endpoints"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint","text":"Notional interface to the API 'blocks' endpoint. Source code in ultimate_notion/core/endpoints.py def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the `blocks` endpoint for the Notion API.\"\"\" super () . __init__ ( * args , ** kwargs ) self . children = BlocksEndpoint . ChildrenEndpoint ( * args , ** kwargs )","title":"BlocksEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.children","text":"","title":"children"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.ChildrenEndpoint","text":"Notional interface to the API 'blocks/children' endpoint.","title":"ChildrenEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.ChildrenEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks . children","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.ChildrenEndpoint.append","text":"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. Source code in ultimate_notion/core/endpoints.py def append ( self , parent , * blocks ): \"\"\"Add the given blocks as children of the specified parent. The blocks info will be refreshed based on returned data. \"\"\" parent_id = get_target_id ( parent ) children = [ block . to_api () for block in blocks if block is not None ] _log . info ( \"Appending %d blocks to %s ...\" , len ( children ), parent_id ) data = self () . append ( block_id = parent_id , children = children ) if \"results\" in data : if len ( blocks ) == len ( data [ \"results\" ]): for idx in range ( len ( blocks )): block = blocks [ idx ] result = data [ \"results\" ][ idx ] block . refresh ( ** result ) else : _log . warning ( \"Unable to refresh results; size mismatch\" ) else : _log . warning ( \"Unable to refresh results; not provided\" ) return parent","title":"append()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.ChildrenEndpoint.list","text":"Return all Blocks contained by the specified parent. Source code in ultimate_notion/core/endpoints.py def list ( self , parent ): \"\"\"Return all Blocks contained by the specified parent.\"\"\" parent_id = get_target_id ( parent ) blocks = EndpointIterator ( endpoint = self () . list , block_id = parent_id ) _log . info ( \"Listing blocks for %s ...\" , parent_id ) return ResultSet ( exec = blocks , cls = Block )","title":"list()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . blocks","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.delete","text":"Delete (archive) the specified Block. Source code in ultimate_notion/core/endpoints.py def delete ( self , block ): \"\"\"Delete (archive) the specified Block.\"\"\" _log . info ( \"Deleting block :: %s \" , block . id ) data = self () . delete ( block . id . hex ) return block . refresh ( ** data )","title":"delete()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.restore","text":"Restore (unarchive) the specified Block. Source code in ultimate_notion/core/endpoints.py def restore ( self , block ): \"\"\"Restore (unarchive) the specified Block.\"\"\" _log . info ( \"Restoring block :: %s \" , block . id ) data = self () . update ( block . id . hex , archived = False ) return block . refresh ( ** data )","title":"restore()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.retrieve","text":"Return the Block with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , block_id ): \"\"\"Return the Block with the given ID.\"\"\" _log . info ( \"Retrieving block :: %s \" , block_id ) data = self () . retrieve ( block_id ) return Block . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.BlocksEndpoint.update","text":"Update the block content on the server. The block info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , block ): \"\"\"Update the block content on the server. The block info will be refreshed to the latest version from the server. \"\"\" _log . info ( \"Updating block :: %s \" , block . id ) data = self () . update ( block . id . hex , ** block . to_api ()) return block . refresh ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint","text":"Notional interface to the API 'databases' endpoint.","title":"DatabasesEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . databases","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.create","text":"Add a database to the given Page parent. Source code in ultimate_notion/core/endpoints.py def create ( self , parent , schema , title = None ): \"\"\"Add a database to the given Page parent.\"\"\" _log . info ( \"Creating database %s - %s \" , parent , title ) request = self . _build_request ( parent , schema , title ) data = self () . create ( ** request ) return Database . parse_obj ( data )","title":"create()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.delete","text":"Delete (archive) the specified Database. Source code in ultimate_notion/core/endpoints.py def delete ( self , database ): \"\"\"Delete (archive) the specified Database.\"\"\" _log . info ( \"Deleting database :: %s \" , database . id ) return self . session . blocks . delete ( database )","title":"delete()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.list","text":"Return an iterator for all Database objects in the integration scope. Source code in ultimate_notion/core/endpoints.py def list ( self ): \"\"\"Return an iterator for all Database objects in the integration scope.\"\"\" # DEPRECATED ENDPOINT ### _log . info ( \"Listing known databases...\" ) databases = EndpointIterator ( endpoint = self () . list ) return ResultSet ( exec = databases , cls = Database )","title":"list()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.query","text":"Initialize a new Query object with the target data class. :param target: either a string with the database ID or an ORM class Source code in ultimate_notion/core/endpoints.py def query ( self , target ): \"\"\"Initialize a new Query object with the target data class. :param target: either a string with the database ID or an ORM class \"\"\" _log . info ( \"Initializing database query :: { %s }\" , get_target_id ( target )) database_id = get_target_id ( target ) cls = None if isclass ( target ) and issubclass ( target , ConnectedPage ): cls = target if cls . _notional__session != self . session : raise ValueError ( \"ConnectedPage belongs to a different session\" ) return QueryBuilder ( endpoint = self () . query , cls = cls , database_id = database_id )","title":"query()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.restore","text":"Restore (unarchive) the specified Database. Source code in ultimate_notion/core/endpoints.py def restore ( self , database ): \"\"\"Restore (unarchive) the specified Database.\"\"\" _log . info ( \"Restoring database :: %s \" , database . id ) return self . session . blocks . restore ( database )","title":"restore()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.retrieve","text":"Return the Database with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , database_id ): \"\"\"Return the Database with the given ID.\"\"\" _log . info ( \"Retrieving database :: %s \" , database_id ) data = self () . retrieve ( database_id ) return Database . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.DatabasesEndpoint.update","text":"Update the Database object on the server. The database info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , database , title = None , schema = None ): \"\"\"Update the Database object on the server. The database info will be refreshed to the latest version from the server. \"\"\" dbid = get_target_id ( database ) _log . info ( \"Updating database info :: %s \" , dbid ) request = self . _build_request ( schema = schema , title = title ) if request : data = self () . update ( dbid , ** request ) database = database . refresh ( ** data ) return database","title":"update()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.Endpoint","text":"Notional wrapper for the API endpoints. Source code in ultimate_notion/core/endpoints.py def __init__ ( self , session ): \"\"\"Initialize the `Endpoint` for the supplied session.\"\"\" self . session = session","title":"Endpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.Endpoint.session","text":"","title":"session"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint","text":"Notional interface to the API 'pages' endpoint.","title":"PagesEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . pages","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.create","text":"Add a page to the given parent (Page or Database). Source code in ultimate_notion/core/endpoints.py def create ( self , parent , title = None , properties = None , children = None ): \"\"\"Add a page to the given parent (Page or Database).\"\"\" if parent is None : raise ValueError ( \"'parent' must be provided\" ) parent = ParentRef [ parent ] request = { \"parent\" : parent . to_api ()} # the API requires a properties object, even if empty if properties is None : properties = {} if title is not None : properties [ \"title\" ] = Title [ title ] request [ \"properties\" ] = { name : prop . to_api () if prop is not None else None for name , prop in properties . items ()} if children is not None : request [ \"children\" ] = [ child . to_api () for child in children if child is not None ] _log . info ( \"Creating page :: %s => %s \" , parent , title ) data = self () . create ( ** request ) return Page . parse_obj ( data )","title":"create()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.delete","text":"Delete (archive) the specified Page. Source code in ultimate_notion/core/endpoints.py def delete ( self , page ): \"\"\"Delete (archive) the specified Page.\"\"\" return self . set ( page , archived = True )","title":"delete()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.restore","text":"Restore (unarchive) the specified Page. Source code in ultimate_notion/core/endpoints.py def restore ( self , page ): \"\"\"Restore (unarchive) the specified Page.\"\"\" return self . set ( page , archived = False )","title":"restore()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.retrieve","text":"Return the Page with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , page_id ): \"\"\"Return the Page with the given ID.\"\"\" _log . info ( \"Retrieving page :: %s \" , page_id ) data = self () . retrieve ( page_id ) return Page . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.set","text":"Set specific page attributes (such as cover, icon, etc) on the server. To remove an attribute, set its value to None. Source code in ultimate_notion/core/endpoints.py def set ( self , page , cover = False , icon = False , archived = None ): \"\"\"Set specific page attributes (such as cover, icon, etc) on the server. To remove an attribute, set its value to None. \"\"\" if cover is None : _log . info ( \"Removing page cover :: %s \" , page . id ) data = self () . update ( page . id . hex , cover = {}) elif cover is not False : _log . info ( \"Setting page cover :: %s => %s \" , page . id , cover ) data = self () . update ( page . id . hex , cover = cover . to_api ()) if icon is None : _log . info ( \"Removing page icon :: %s \" , page . id ) data = self () . update ( page . id . hex , icon = {}) elif icon is not False : _log . info ( \"Setting page icon :: %s => %s \" , page . id , icon ) data = self () . update ( page . id . hex , icon = icon . to_api ()) if archived is False : _log . info ( \"Restoring page :: %s \" , page . id ) data = self () . update ( page . id . hex , archived = False ) elif archived is True : _log . info ( \"Archiving page :: %s \" , page . id ) data = self () . update ( page . id . hex , archived = True ) return page . refresh ( ** data )","title":"set()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.PagesEndpoint.update","text":"Update the Page object properties on the server. If properties are provided, only those values will be updated. If properties is empty, all page properties will be updated. properties are specified as \"name\" : PropertyValue pairs. The page info will be refreshed to the latest version from the server. Source code in ultimate_notion/core/endpoints.py def update ( self , page , ** properties ): \"\"\"Update the Page object properties on the server. If `properties` are provided, only those values will be updated. If `properties` is empty, all page properties will be updated. `properties` are specified as `\"name\"`: `PropertyValue` pairs. The page info will be refreshed to the latest version from the server. \"\"\" _log . info ( \"Updating page info :: %s \" , page . id ) if not properties : properties = page . properties props = { name : value . to_api () if value is not None else None for name , value in properties . items ()} data = self () . update ( page . id . hex , properties = props ) return page . refresh ( ** data )","title":"update()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.SearchEndpoint","text":"Notional interface to the API 'search' endpoint.","title":"SearchEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.SearchEndpoint.__call__","text":"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a QueryBuilder with the requested search :rtype: query.QueryBuilder Source code in ultimate_notion/core/endpoints.py def __call__ ( self , text = None ): \"\"\"Perform a search with the optional text. If specified, the call will perform a search with the given text. :return: a `QueryBuilder` with the requested search :rtype: query.QueryBuilder \"\"\" params = {} if text is not None : params [ \"query\" ] = text return QueryBuilder ( endpoint = self . session . client . search , ** params )","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.UsersEndpoint","text":"Notional interface to the API 'users' endpoint.","title":"UsersEndpoint"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.UsersEndpoint.__call__","text":"Return the underlying endpoint in the Notion SDK. Source code in ultimate_notion/core/endpoints.py def __call__ ( self ): \"\"\"Return the underlying endpoint in the Notion SDK.\"\"\" return self . session . client . users","title":"__call__()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.UsersEndpoint.list","text":"Return an iterator for all users in the workspace. Source code in ultimate_notion/core/endpoints.py def list ( self ): \"\"\"Return an iterator for all users in the workspace.\"\"\" users = EndpointIterator ( endpoint = self () . list ) _log . info ( \"Listing known users...\" ) return ResultSet ( exec = users , cls = User )","title":"list()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.UsersEndpoint.me","text":"Return the current bot User. Source code in ultimate_notion/core/endpoints.py def me ( self ): \"\"\"Return the current bot User.\"\"\" _log . info ( \"Retrieving current integration bot\" ) data = self () . me () return User . parse_obj ( data )","title":"me()"},{"location":"reference/ultimate_notion/core/endpoints/#ultimate_notion.core.endpoints.UsersEndpoint.retrieve","text":"Return the User with the given ID. Source code in ultimate_notion/core/endpoints.py def retrieve ( self , user_id ): \"\"\"Return the User with the given ID.\"\"\" _log . info ( \"Retrieving user :: %s \" , user_id ) data = self () . retrieve ( user_id ) return User . parse_obj ( data )","title":"retrieve()"},{"location":"reference/ultimate_notion/core/iterator/","text":"iterator \u00b6 Iterator classes for notional. CONTENT_PAGE_SIZE = 100 module-attribute \u00b6 ContentIterator () \u00b6 Base class to handle pagination over arbitrary content. Source code in ultimate_notion/core/iterator.py def __init__ ( self ): \"\"\"Initialize the iterator.\"\"\" self . log = _log . getChild ( \"ContentIterator\" ) self . page = None self . page_index = - 1 self . page_num = 0 self . n_items = 0 log = _log . getChild ( 'ContentIterator' ) instance-attribute \u00b6 n_items = 0 instance-attribute \u00b6 page = None instance-attribute \u00b6 page_index = - 1 instance-attribute \u00b6 page_num = 0 instance-attribute \u00b6 __iter__ () \u00b6 Initialize the iterator. Source code in ultimate_notion/core/iterator.py def __iter__ ( self ): \"\"\"Initialize the iterator.\"\"\" self . log . debug ( \"initializing content iterator\" ) return self __next__ () \u00b6 Return the next item from the result set or raise StopIteration. Source code in ultimate_notion/core/iterator.py def __next__ ( self ): \"\"\"Return the next item from the result set or raise StopIteration.\"\"\" # load a new page if needed if self . page is None or self . page_index >= len ( self . page ): self . page_index = 0 self . page = self . load_next_page () self . page_num += 1 # if we have run out of results... if self . page is None or len ( self . page ) == 0 : raise StopIteration # pull the next item from the current page item = self . page [ self . page_index ] # setup for the next call self . page_index += 1 self . n_items += 1 return item load_next_page () abstractmethod \u00b6 Retrieve the next page of data as a list of items. Source code in ultimate_notion/core/iterator.py @abstractmethod def load_next_page ( self ): \"\"\"Retrieve the next page of data as a list of items.\"\"\" page_number () property \u00b6 Return the current page number of results in this iterator. Source code in ultimate_notion/core/iterator.py @property def page_number ( self ): \"\"\"Return the current page number of results in this iterator.\"\"\" return self . page_num total_items () property \u00b6 Return the total number of items returns by this iterator. Source code in ultimate_notion/core/iterator.py @property def total_items ( self ): \"\"\"Return the total number of items returns by this iterator.\"\"\" return self . n_items EndpointIterator ( endpoint , params ) \u00b6 Base class for iterating over results from an API endpoint. :param endpoint: the concrete endpoint to use for this iterator :param params: parameters sent to the endpoint when called Source code in ultimate_notion/core/iterator.py def __init__ ( self , endpoint , ** params ): \"\"\"Initialize the `EndpointIterator` for a specific API endpoint. :param endpoint: the concrete endpoint to use for this iterator :param params: parameters sent to the endpoint when called \"\"\" super () . __init__ () self . endpoint = endpoint self . params = params or {} self . log = _log . getChild ( \"EndpointIterator\" ) endpoint = endpoint instance-attribute \u00b6 log = _log . getChild ( 'EndpointIterator' ) instance-attribute \u00b6 params = params or {} instance-attribute \u00b6 __setitem__ ( name , value ) \u00b6 Set the parameter in this EndpointIterator . Source code in ultimate_notion/core/iterator.py def __setitem__ ( self , name , value ): \"\"\"Set the parameter in this `EndpointIterator`.\"\"\" self . params [ name ] = value load_page_data ( params ) \u00b6 Return the next page with given parameters. Source code in ultimate_notion/core/iterator.py def load_page_data ( self , params ): \"\"\"Return the next page with given parameters.\"\"\" params . update ( self . params ) return self . endpoint ( ** params ) PageIterator \u00b6 Base class to handle pagination by page number. get_page_content ( page_num ) abstractmethod \u00b6 Retrieve the page of data with the given number. Source code in ultimate_notion/core/iterator.py @abstractmethod def get_page_content ( self , page_num ): \"\"\"Retrieve the page of data with the given number.\"\"\" load_next_page () \u00b6 Retrieve the next page of data as a list of items. Source code in ultimate_notion/core/iterator.py def load_next_page ( self ): \"\"\"Retrieve the next page of data as a list of items.\"\"\" return self . get_page_content ( self . page_num + 1 ) PositionalIterator () \u00b6 Base class to handle pagination by positional cursor. Source code in ultimate_notion/core/iterator.py def __init__ ( self ): \"\"\"Initialize the iterator.\"\"\" super () . __init__ () self . cursor = None self . first_pass = True cursor = None instance-attribute \u00b6 first_pass = True instance-attribute \u00b6 PageData \u00b6 Represents a page of data from the Notion API. items : Optional [ List [ Any ]] = None class-attribute \u00b6 next_cursor : Optional [ Any ] = None class-attribute \u00b6 this_cursor : Optional [ Any ] = None class-attribute \u00b6 page_size () property \u00b6 Return the page size for this data set. Source code in ultimate_notion/core/iterator.py @property def page_size ( self ): \"\"\"Return the page size for this data set.\"\"\" return - 1 if self . items is None else len ( self . items ) get_page_data ( cursor ) abstractmethod \u00b6 Retrieve the page of data starting at the given cursor. Source code in ultimate_notion/core/iterator.py @abstractmethod def get_page_data ( self , cursor ): \"\"\"Retrieve the page of data starting at the given cursor.\"\"\" load_next_page () \u00b6 Load the next page of data from this iterator. Source code in ultimate_notion/core/iterator.py def load_next_page ( self ): \"\"\"Load the next page of data from this iterator.\"\"\" if not self . first_pass and not self . cursor : return None results = self . get_page_data ( self . cursor ) self . cursor = results . next_cursor self . first_pass = False return results . items ResultSetIterator \u00b6 Base class for iterating over Notion API result sets. get_page_data ( cursor ) \u00b6 Retrieve the page of data starting at the given cursor. Source code in ultimate_notion/core/iterator.py def get_page_data ( self , cursor ): \"\"\"Retrieve the page of data starting at the given cursor.\"\"\" params = { \"page_size\" : CONTENT_PAGE_SIZE } if cursor : params [ \"start_cursor\" ] = cursor self . log . debug ( \"loading next page - start cursor: %s \" , cursor ) # TODO error checking on result data = self . load_page_data ( params ) results = PositionalIterator . PageData ( this_cursor = cursor , next_cursor = data [ \"next_cursor\" ] if data [ \"has_more\" ] else None , items = data [ \"results\" ] if \"results\" in data else None , ) self . log . debug ( \"loaded %d results; next cursor: %s \" , results . page_size , results . next_cursor ) return results last_page () property \u00b6 Return true if this is the last page of results. Source code in ultimate_notion/core/iterator.py @property def last_page ( self ): \"\"\"Return true if this is the last page of results.\"\"\" return not self . first_pass and self . cursor is None load_page_data ( params ) abstractmethod \u00b6 Load the page of data defined by the given params. Source code in ultimate_notion/core/iterator.py @abstractmethod def load_page_data ( self , params ): \"\"\"Load the page of data defined by the given params.\"\"\"","title":"iterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator","text":"Iterator classes for notional.","title":"iterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.CONTENT_PAGE_SIZE","text":"","title":"CONTENT_PAGE_SIZE"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator","text":"Base class to handle pagination over arbitrary content. Source code in ultimate_notion/core/iterator.py def __init__ ( self ): \"\"\"Initialize the iterator.\"\"\" self . log = _log . getChild ( \"ContentIterator\" ) self . page = None self . page_index = - 1 self . page_num = 0 self . n_items = 0","title":"ContentIterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.log","text":"","title":"log"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.n_items","text":"","title":"n_items"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.page","text":"","title":"page"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.page_index","text":"","title":"page_index"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.page_num","text":"","title":"page_num"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.__iter__","text":"Initialize the iterator. Source code in ultimate_notion/core/iterator.py def __iter__ ( self ): \"\"\"Initialize the iterator.\"\"\" self . log . debug ( \"initializing content iterator\" ) return self","title":"__iter__()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.__next__","text":"Return the next item from the result set or raise StopIteration. Source code in ultimate_notion/core/iterator.py def __next__ ( self ): \"\"\"Return the next item from the result set or raise StopIteration.\"\"\" # load a new page if needed if self . page is None or self . page_index >= len ( self . page ): self . page_index = 0 self . page = self . load_next_page () self . page_num += 1 # if we have run out of results... if self . page is None or len ( self . page ) == 0 : raise StopIteration # pull the next item from the current page item = self . page [ self . page_index ] # setup for the next call self . page_index += 1 self . n_items += 1 return item","title":"__next__()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.load_next_page","text":"Retrieve the next page of data as a list of items. Source code in ultimate_notion/core/iterator.py @abstractmethod def load_next_page ( self ): \"\"\"Retrieve the next page of data as a list of items.\"\"\"","title":"load_next_page()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.page_number","text":"Return the current page number of results in this iterator. Source code in ultimate_notion/core/iterator.py @property def page_number ( self ): \"\"\"Return the current page number of results in this iterator.\"\"\" return self . page_num","title":"page_number()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ContentIterator.total_items","text":"Return the total number of items returns by this iterator. Source code in ultimate_notion/core/iterator.py @property def total_items ( self ): \"\"\"Return the total number of items returns by this iterator.\"\"\" return self . n_items","title":"total_items()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator","text":"Base class for iterating over results from an API endpoint. :param endpoint: the concrete endpoint to use for this iterator :param params: parameters sent to the endpoint when called Source code in ultimate_notion/core/iterator.py def __init__ ( self , endpoint , ** params ): \"\"\"Initialize the `EndpointIterator` for a specific API endpoint. :param endpoint: the concrete endpoint to use for this iterator :param params: parameters sent to the endpoint when called \"\"\" super () . __init__ () self . endpoint = endpoint self . params = params or {} self . log = _log . getChild ( \"EndpointIterator\" )","title":"EndpointIterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator.endpoint","text":"","title":"endpoint"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator.log","text":"","title":"log"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator.params","text":"","title":"params"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator.__setitem__","text":"Set the parameter in this EndpointIterator . Source code in ultimate_notion/core/iterator.py def __setitem__ ( self , name , value ): \"\"\"Set the parameter in this `EndpointIterator`.\"\"\" self . params [ name ] = value","title":"__setitem__()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.EndpointIterator.load_page_data","text":"Return the next page with given parameters. Source code in ultimate_notion/core/iterator.py def load_page_data ( self , params ): \"\"\"Return the next page with given parameters.\"\"\" params . update ( self . params ) return self . endpoint ( ** params )","title":"load_page_data()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PageIterator","text":"Base class to handle pagination by page number.","title":"PageIterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PageIterator.get_page_content","text":"Retrieve the page of data with the given number. Source code in ultimate_notion/core/iterator.py @abstractmethod def get_page_content ( self , page_num ): \"\"\"Retrieve the page of data with the given number.\"\"\"","title":"get_page_content()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PageIterator.load_next_page","text":"Retrieve the next page of data as a list of items. Source code in ultimate_notion/core/iterator.py def load_next_page ( self ): \"\"\"Retrieve the next page of data as a list of items.\"\"\" return self . get_page_content ( self . page_num + 1 )","title":"load_next_page()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator","text":"Base class to handle pagination by positional cursor. Source code in ultimate_notion/core/iterator.py def __init__ ( self ): \"\"\"Initialize the iterator.\"\"\" super () . __init__ () self . cursor = None self . first_pass = True","title":"PositionalIterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.cursor","text":"","title":"cursor"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.first_pass","text":"","title":"first_pass"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.PageData","text":"Represents a page of data from the Notion API.","title":"PageData"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.PageData.items","text":"","title":"items"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.PageData.next_cursor","text":"","title":"next_cursor"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.PageData.this_cursor","text":"","title":"this_cursor"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.PageData.page_size","text":"Return the page size for this data set. Source code in ultimate_notion/core/iterator.py @property def page_size ( self ): \"\"\"Return the page size for this data set.\"\"\" return - 1 if self . items is None else len ( self . items )","title":"page_size()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.get_page_data","text":"Retrieve the page of data starting at the given cursor. Source code in ultimate_notion/core/iterator.py @abstractmethod def get_page_data ( self , cursor ): \"\"\"Retrieve the page of data starting at the given cursor.\"\"\"","title":"get_page_data()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.PositionalIterator.load_next_page","text":"Load the next page of data from this iterator. Source code in ultimate_notion/core/iterator.py def load_next_page ( self ): \"\"\"Load the next page of data from this iterator.\"\"\" if not self . first_pass and not self . cursor : return None results = self . get_page_data ( self . cursor ) self . cursor = results . next_cursor self . first_pass = False return results . items","title":"load_next_page()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ResultSetIterator","text":"Base class for iterating over Notion API result sets.","title":"ResultSetIterator"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ResultSetIterator.get_page_data","text":"Retrieve the page of data starting at the given cursor. Source code in ultimate_notion/core/iterator.py def get_page_data ( self , cursor ): \"\"\"Retrieve the page of data starting at the given cursor.\"\"\" params = { \"page_size\" : CONTENT_PAGE_SIZE } if cursor : params [ \"start_cursor\" ] = cursor self . log . debug ( \"loading next page - start cursor: %s \" , cursor ) # TODO error checking on result data = self . load_page_data ( params ) results = PositionalIterator . PageData ( this_cursor = cursor , next_cursor = data [ \"next_cursor\" ] if data [ \"has_more\" ] else None , items = data [ \"results\" ] if \"results\" in data else None , ) self . log . debug ( \"loaded %d results; next cursor: %s \" , results . page_size , results . next_cursor ) return results","title":"get_page_data()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ResultSetIterator.last_page","text":"Return true if this is the last page of results. Source code in ultimate_notion/core/iterator.py @property def last_page ( self ): \"\"\"Return true if this is the last page of results.\"\"\" return not self . first_pass and self . cursor is None","title":"last_page()"},{"location":"reference/ultimate_notion/core/iterator/#ultimate_notion.core.iterator.ResultSetIterator.load_page_data","text":"Load the page of data defined by the given params. Source code in ultimate_notion/core/iterator.py @abstractmethod def load_page_data ( self , params ): \"\"\"Load the page of data defined by the given params.\"\"\"","title":"load_page_data()"},{"location":"reference/ultimate_notion/core/orm/","text":"orm \u00b6 Utilities for working with Notion as an ORM. There are two primary constructs in this module that enable custom type definitions in Notional: Property() and connected_page() . ConnectedPage ( data ) \u00b6 Base class for \"live\" pages via the Notion API. All changes are committed in real time. Source code in ultimate_notion/core/orm.py def __init__ ( self , ** data ): \"\"\"Construct a page from the given data dictionary.\"\"\" self . _notional__page = Page ( ** data ) if data else None __iadd__ ( block ) \u00b6 Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. Source code in ultimate_notion/core/orm.py def __iadd__ ( self , block ): \"\"\"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. \"\"\" self . append ( block ) return self __init_subclass__ ( database = None , kwargs ) \u00b6 Register new subclasses of a ConnectedPage. Source code in ultimate_notion/core/orm.py def __init_subclass__ ( cls , database = None , ** kwargs ): \"\"\"Register new subclasses of a ConnectedPage.\"\"\" super ( cls ) . __init_subclass__ ( ** kwargs ) if database is not None : cls . _notional__database = database elif hasattr ( cls , \"__database__\" ): cls . _notional__database = cls . __database__ append ( blocks ) \u00b6 Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. Source code in ultimate_notion/core/orm.py def append ( self , * blocks ): \"\"\"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. \"\"\" if self . _notional__page is None : raise ValueError ( \"Cannot append blocks; missing page\" ) if self . _notional__session is None : raise ValueError ( \"Cannot append blocks; invalid session\" ) _log . debug ( \"appending %d blocks to page :: %s \" , len ( blocks ), self . _notional__page . id ) self . _notional__session . blocks . children . append ( self . _notional__page , * blocks ) bind ( to_session ) classmethod \u00b6 Attach this ConnectedPage to the given session. Setting this to None will detach the page. Source code in ultimate_notion/core/orm.py @classmethod def bind ( cls , to_session ): \"\"\"Attach this ConnectedPage to the given session. Setting this to None will detach the page. \"\"\" cls . _notional__session = to_session children () property \u00b6 Return an iterator for all child blocks of this Page. Source code in ultimate_notion/core/orm.py @property def children ( self ): \"\"\"Return an iterator for all child blocks of this Page.\"\"\" if self . _notional__page is None : return [] return self . _notional__session . blocks . children . list ( parent = self . _notional__page ) cover () writable property \u00b6 Return the cover for the Page. Source code in ultimate_notion/core/orm.py @property def cover ( self ): \"\"\"Return the cover for the Page.\"\"\" return self . _notional__page . cover create ( kwargs ) classmethod \u00b6 Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in kwargs . This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. name=value , where name is the attribute in the custom type and value is a supported type for composing. Source code in ultimate_notion/core/orm.py @classmethod def create ( cls , ** kwargs ): \"\"\"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in `kwargs`. This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. `name=value`, where `name` is the attribute in the custom type and `value` is a supported type for composing. \"\"\" if cls . _notional__session is None : raise ValueError ( \"Cannot create Page; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Cannot create Page; invalid database\" ) _log . debug ( \"creating new %s :: %s \" , cls , cls . _notional__database ) parent = DatabaseRef ( database_id = cls . _notional__database ) connected = cls () connected . _notional__page = cls . _notional__session . pages . create ( parent = parent ) # FIXME it would be better to convert properties to a dict and pass to the API, # rather than setting them individually here... for name , value in kwargs . items (): setattr ( connected , name , value ) return connected icon () writable property \u00b6 Return the icon for the Page. Source code in ultimate_notion/core/orm.py @property def icon ( self ): \"\"\"Return the icon for the Page.\"\"\" return self . _notional__page . icon id () property \u00b6 Return the ID of this page (if available). Source code in ultimate_notion/core/orm.py @property def id ( self ): \"\"\"Return the ID of this page (if available).\"\"\" return self . _notional__page . id if self . _notional__page else None parse_obj ( data ) classmethod \u00b6 Invoke the class constructor using the structured data. Similar to BaseModel.parse_obj(data) . Source code in ultimate_notion/core/orm.py @classmethod def parse_obj ( cls , data ): \"\"\"Invoke the class constructor using the structured data. Similar to `BaseModel.parse_obj(data)`. \"\"\" return cls ( ** data ) query () classmethod \u00b6 Return a QueryBuilder for the custom type. Source code in ultimate_notion/core/orm.py @classmethod def query ( cls ): \"\"\"Return a `QueryBuilder` for the custom type.\"\"\" if cls . _notional__session is None : raise ValueError ( \"Unable to query; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Unable to query; invalid database\" ) return cls . _notional__session . databases . query ( cls ) ConnectedPageFactory ( name = 'CustomBase' , base = None , metaclass = None ) \u00b6 A factory that builds custom types for ConnectedPage classes. Typically, these generated classes will be extended to form a custom type. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to None :param metaclass: the callable metaclass to use for generating new types; defaults to type Source code in ultimate_notion/core/orm.py def __init__ ( self , name = \"CustomBase\" , base = None , metaclass = None , ): \"\"\"Initialize the `ConnectedPageFactory` with the given parameters. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to `None` :param metaclass: the callable metaclass to use for generating new types; defaults to `type` \"\"\" self . name = name if base is None : self . bases = ( ConnectedPage ,) elif isinstance ( base , tuple ): self . bases = base else : self . bases = ( base ,) if metaclass is None : self . metaclass = type else : self . metaclass = metaclass bases = ( ConnectedPage ) instance-attribute \u00b6 metaclass = type instance-attribute \u00b6 name = name instance-attribute \u00b6 __call__ ( session , database , schema = None ) \u00b6 Return a new type from this factory with the given configuration. Source code in ultimate_notion/core/orm.py def __call__ ( self , session , database , schema = None ): \"\"\"Return a new type from this factory with the given configuration.\"\"\" attrs = { \"_notional__session\" : session , \"_notional__database\" : database , } if schema is not None : for name , obj in schema . items (): safe_name = make_safe_python_name ( name ) prop = Property ( name , obj ) attrs [ safe_name ] = prop return self . metaclass ( self . name , self . bases , attrs ) ConnectedProperty ( name , schema , default = Ellipsis ) \u00b6 Contains the information and methods needed for a connected property. When created, this object does not have a reference to its parent object. Before this property is accessed for the first time, callers must use bind() to set the containing object at runtime. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API Source code in ultimate_notion/core/orm.py def __init__ ( self , name , schema , default =... ): \"\"\"Initialize the property wrapper. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API \"\"\" if name is None or len ( name ) == 0 : raise ValueError ( \"Must provide a valid property name\" ) if schema is None : raise ValueError ( \"Invalid schema; cannot be None\" ) self . name = name self . default = default self . schema = schema self . data_type = type ( schema ) if not hasattr ( self . data_type , \"type\" ) or self . data_type . type is None : raise ValueError ( \"Invalid schema; undefined type\" ) self . type_name = self . data_type . type # this is kind of an ugly way to grab the value type from the schema type... # mostly b/c we are using internal knowledge of TypedObject.__typemap__ if self . type_name not in PropertyValue . __typemap__ : raise TypeError ( f \"Invalid schema; missing value type ' { self . type_name } '\" ) self . value_type = PropertyValue . __typemap__ [ self . type_name ] data_type = type ( schema ) instance-attribute \u00b6 default = default instance-attribute \u00b6 name = name instance-attribute \u00b6 schema = schema instance-attribute \u00b6 type_name = self . data_type . type instance-attribute \u00b6 value_type = PropertyValue . __typemap__ [ self . type_name ] instance-attribute \u00b6 bind ( obj ) \u00b6 Binds this property to the given object. Source code in ultimate_notion/core/orm.py def bind ( self , obj ): \"\"\"Binds this property to the given object.\"\"\" if not isinstance ( obj , ConnectedPage ): raise TypeError ( \"Properties must be used in a ConnectedPage object\" ) # XXX should we do any additional error checking on the object? self . parent = obj self . page_data = self . parent . _notional__page self . session = self . parent . _notional__session delete () \u00b6 Delete the value associated with this property. Source code in ultimate_notion/core/orm.py def delete ( self ): \"\"\"Delete the value associated with this property.\"\"\" # TODO raise instead? if self . page_data is None : return empty = self . value_type () self . session . pages . update ( self . page_data , ** { self . name : empty }) get () \u00b6 Return the current value of the property as a python object. Source code in ultimate_notion/core/orm.py def get ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" _log . debug ( \"fget :: %s [ %s ]\" , self . type_name , self . name ) # TODO raise instead? if self . page_data is None : return None try : prop = self . page_data [ self . name ] except AttributeError : if self . default == ... : raise AttributeError ( f \"Missing property: ' { self . name } '\" ) return self . default if not isinstance ( prop , self . value_type ): raise TypeError ( \"Type mismatch\" ) if hasattr ( prop , \"Value\" ): return prop . Value return prop set ( value ) \u00b6 Set the property to the given value. Source code in ultimate_notion/core/orm.py def set ( self , value ): \"\"\"Set the property to the given value.\"\"\" _log . debug ( \"fset :: %s [ %s ] => %s \" , self . type_name , self . name , type ( value )) # TODO raise instead? if self . page_data is None : return if isinstance ( value , self . value_type ): prop = value elif hasattr ( self . value_type , \"__compose__\" ): prop = self . value_type . __compose__ ( value ) else : raise TypeError ( f \"Unsupported value type for ' { self . type_name } '\" ) # update the property on the server (which will refresh the local data) self . session . pages . update ( self . page_data , ** { self . name : prop }) Property ( name , schema = None , default = Ellipsis ) \u00b6 Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects Source code in ultimate_notion/core/orm.py def Property ( name , schema = None , default =... ): \"\"\"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects \"\"\" _log . debug ( \"creating new Property: %s \" , name ) if schema is None : schema = RichText () elif not isinstance ( schema , PropertyObject ): raise TypeError ( \"Invalid data_type; not a PropertyObject\" ) cprop = ConnectedProperty ( name = name , schema = schema , default = default , ) def fget ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" cprop . bind ( self ) return cprop . get () def fset ( self , value ): \"\"\"Set the property to the given value.\"\"\" cprop . bind ( self ) cprop . set ( value ) def fdel ( self ): \"\"\"Delete the value for this property.\"\"\" cprop . bind ( self ) cprop . delete () return property ( fget , fset , fdel ) connected_page ( session = None , source_db = None , schema = None , cls = None ) \u00b6 Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to None :param cls: the returned class will inherit from the given class, which must be a sublass of ConnectedPage ; defaults to ConnectedPage Source code in ultimate_notion/core/orm.py def connected_page ( session = None , source_db = None , schema = None , cls = None ): \"\"\"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to `None` :param cls: the returned class will inherit from the given class, which must be a sublass of `ConnectedPage`; defaults to `ConnectedPage` \"\"\" if cls is None : cls = ConnectedPage elif not issubclass ( cls , ConnectedPage ): raise ValueError ( \"'cls' must subclass ConnectedPage\" ) if source_db is None : dbid = None elif not isinstance ( source_db , Database ): raise ValueError ( \"'source_db' must be a Database\" ) else : if schema is None : schema = source_db . properties dbid = source_db . id factory = ConnectedPageFactory ( base = cls ) return factory ( session = session , database = dbid , schema = schema , )","title":"orm"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm","text":"Utilities for working with Notion as an ORM. There are two primary constructs in this module that enable custom type definitions in Notional: Property() and connected_page() .","title":"orm"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage","text":"Base class for \"live\" pages via the Notion API. All changes are committed in real time. Source code in ultimate_notion/core/orm.py def __init__ ( self , ** data ): \"\"\"Construct a page from the given data dictionary.\"\"\" self . _notional__page = Page ( ** data ) if data else None","title":"ConnectedPage"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.__iadd__","text":"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. Source code in ultimate_notion/core/orm.py def __iadd__ ( self , block ): \"\"\"Append the given block to this page. This operation takes place on the Notion server, causing the page to save immediately. \"\"\" self . append ( block ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.__init_subclass__","text":"Register new subclasses of a ConnectedPage. Source code in ultimate_notion/core/orm.py def __init_subclass__ ( cls , database = None , ** kwargs ): \"\"\"Register new subclasses of a ConnectedPage.\"\"\" super ( cls ) . __init_subclass__ ( ** kwargs ) if database is not None : cls . _notional__database = database elif hasattr ( cls , \"__database__\" ): cls . _notional__database = cls . __database__","title":"__init_subclass__()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.append","text":"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. Source code in ultimate_notion/core/orm.py def append ( self , * blocks ): \"\"\"Append the given blocks as children of this ConnectedPage. This operation takes place on the Notion server, causing the page to update immediately. \"\"\" if self . _notional__page is None : raise ValueError ( \"Cannot append blocks; missing page\" ) if self . _notional__session is None : raise ValueError ( \"Cannot append blocks; invalid session\" ) _log . debug ( \"appending %d blocks to page :: %s \" , len ( blocks ), self . _notional__page . id ) self . _notional__session . blocks . children . append ( self . _notional__page , * blocks )","title":"append()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.bind","text":"Attach this ConnectedPage to the given session. Setting this to None will detach the page. Source code in ultimate_notion/core/orm.py @classmethod def bind ( cls , to_session ): \"\"\"Attach this ConnectedPage to the given session. Setting this to None will detach the page. \"\"\" cls . _notional__session = to_session","title":"bind()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.children","text":"Return an iterator for all child blocks of this Page. Source code in ultimate_notion/core/orm.py @property def children ( self ): \"\"\"Return an iterator for all child blocks of this Page.\"\"\" if self . _notional__page is None : return [] return self . _notional__session . blocks . children . list ( parent = self . _notional__page )","title":"children()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.cover","text":"Return the cover for the Page. Source code in ultimate_notion/core/orm.py @property def cover ( self ): \"\"\"Return the cover for the Page.\"\"\" return self . _notional__page . cover","title":"cover()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.create","text":"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in kwargs . This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. name=value , where name is the attribute in the custom type and value is a supported type for composing. Source code in ultimate_notion/core/orm.py @classmethod def create ( cls , ** kwargs ): \"\"\"Create a new instance of the ConnectedPage type. Any properties that support object composition may be defined in `kwargs`. This operation takes place on the Notion server, creating the page immediately. :param kwargs: the properties to initialize for this object as parameters, i.e. `name=value`, where `name` is the attribute in the custom type and `value` is a supported type for composing. \"\"\" if cls . _notional__session is None : raise ValueError ( \"Cannot create Page; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Cannot create Page; invalid database\" ) _log . debug ( \"creating new %s :: %s \" , cls , cls . _notional__database ) parent = DatabaseRef ( database_id = cls . _notional__database ) connected = cls () connected . _notional__page = cls . _notional__session . pages . create ( parent = parent ) # FIXME it would be better to convert properties to a dict and pass to the API, # rather than setting them individually here... for name , value in kwargs . items (): setattr ( connected , name , value ) return connected","title":"create()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.icon","text":"Return the icon for the Page. Source code in ultimate_notion/core/orm.py @property def icon ( self ): \"\"\"Return the icon for the Page.\"\"\" return self . _notional__page . icon","title":"icon()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.id","text":"Return the ID of this page (if available). Source code in ultimate_notion/core/orm.py @property def id ( self ): \"\"\"Return the ID of this page (if available).\"\"\" return self . _notional__page . id if self . _notional__page else None","title":"id()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.parse_obj","text":"Invoke the class constructor using the structured data. Similar to BaseModel.parse_obj(data) . Source code in ultimate_notion/core/orm.py @classmethod def parse_obj ( cls , data ): \"\"\"Invoke the class constructor using the structured data. Similar to `BaseModel.parse_obj(data)`. \"\"\" return cls ( ** data )","title":"parse_obj()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPage.query","text":"Return a QueryBuilder for the custom type. Source code in ultimate_notion/core/orm.py @classmethod def query ( cls ): \"\"\"Return a `QueryBuilder` for the custom type.\"\"\" if cls . _notional__session is None : raise ValueError ( \"Unable to query; invalid session\" ) if cls . _notional__database is None : raise ValueError ( \"Unable to query; invalid database\" ) return cls . _notional__session . databases . query ( cls )","title":"query()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPageFactory","text":"A factory that builds custom types for ConnectedPage classes. Typically, these generated classes will be extended to form a custom type. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to None :param metaclass: the callable metaclass to use for generating new types; defaults to type Source code in ultimate_notion/core/orm.py def __init__ ( self , name = \"CustomBase\" , base = None , metaclass = None , ): \"\"\"Initialize the `ConnectedPageFactory` with the given parameters. :param name: the name of the class generated by this factory; defaults to \"CustomBase\" :param base: the class (or tuple of classes) used as the base class for types generated by this factory; defaults to `None` :param metaclass: the callable metaclass to use for generating new types; defaults to `type` \"\"\" self . name = name if base is None : self . bases = ( ConnectedPage ,) elif isinstance ( base , tuple ): self . bases = base else : self . bases = ( base ,) if metaclass is None : self . metaclass = type else : self . metaclass = metaclass","title":"ConnectedPageFactory"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPageFactory.bases","text":"","title":"bases"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPageFactory.metaclass","text":"","title":"metaclass"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPageFactory.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedPageFactory.__call__","text":"Return a new type from this factory with the given configuration. Source code in ultimate_notion/core/orm.py def __call__ ( self , session , database , schema = None ): \"\"\"Return a new type from this factory with the given configuration.\"\"\" attrs = { \"_notional__session\" : session , \"_notional__database\" : database , } if schema is not None : for name , obj in schema . items (): safe_name = make_safe_python_name ( name ) prop = Property ( name , obj ) attrs [ safe_name ] = prop return self . metaclass ( self . name , self . bases , attrs )","title":"__call__()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty","text":"Contains the information and methods needed for a connected property. When created, this object does not have a reference to its parent object. Before this property is accessed for the first time, callers must use bind() to set the containing object at runtime. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API Source code in ultimate_notion/core/orm.py def __init__ ( self , name , schema , default =... ): \"\"\"Initialize the property wrapper. :param name: the name of this property as it appears on Notional :param schema: the PropertyObject that defines the type of this property :param default: an optional parameter that will return a default value if one is not provided by the API \"\"\" if name is None or len ( name ) == 0 : raise ValueError ( \"Must provide a valid property name\" ) if schema is None : raise ValueError ( \"Invalid schema; cannot be None\" ) self . name = name self . default = default self . schema = schema self . data_type = type ( schema ) if not hasattr ( self . data_type , \"type\" ) or self . data_type . type is None : raise ValueError ( \"Invalid schema; undefined type\" ) self . type_name = self . data_type . type # this is kind of an ugly way to grab the value type from the schema type... # mostly b/c we are using internal knowledge of TypedObject.__typemap__ if self . type_name not in PropertyValue . __typemap__ : raise TypeError ( f \"Invalid schema; missing value type ' { self . type_name } '\" ) self . value_type = PropertyValue . __typemap__ [ self . type_name ]","title":"ConnectedProperty"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.data_type","text":"","title":"data_type"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.default","text":"","title":"default"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.schema","text":"","title":"schema"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.type_name","text":"","title":"type_name"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.value_type","text":"","title":"value_type"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.bind","text":"Binds this property to the given object. Source code in ultimate_notion/core/orm.py def bind ( self , obj ): \"\"\"Binds this property to the given object.\"\"\" if not isinstance ( obj , ConnectedPage ): raise TypeError ( \"Properties must be used in a ConnectedPage object\" ) # XXX should we do any additional error checking on the object? self . parent = obj self . page_data = self . parent . _notional__page self . session = self . parent . _notional__session","title":"bind()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.delete","text":"Delete the value associated with this property. Source code in ultimate_notion/core/orm.py def delete ( self ): \"\"\"Delete the value associated with this property.\"\"\" # TODO raise instead? if self . page_data is None : return empty = self . value_type () self . session . pages . update ( self . page_data , ** { self . name : empty })","title":"delete()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.get","text":"Return the current value of the property as a python object. Source code in ultimate_notion/core/orm.py def get ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" _log . debug ( \"fget :: %s [ %s ]\" , self . type_name , self . name ) # TODO raise instead? if self . page_data is None : return None try : prop = self . page_data [ self . name ] except AttributeError : if self . default == ... : raise AttributeError ( f \"Missing property: ' { self . name } '\" ) return self . default if not isinstance ( prop , self . value_type ): raise TypeError ( \"Type mismatch\" ) if hasattr ( prop , \"Value\" ): return prop . Value return prop","title":"get()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.ConnectedProperty.set","text":"Set the property to the given value. Source code in ultimate_notion/core/orm.py def set ( self , value ): \"\"\"Set the property to the given value.\"\"\" _log . debug ( \"fset :: %s [ %s ] => %s \" , self . type_name , self . name , type ( value )) # TODO raise instead? if self . page_data is None : return if isinstance ( value , self . value_type ): prop = value elif hasattr ( self . value_type , \"__compose__\" ): prop = self . value_type . __compose__ ( value ) else : raise TypeError ( f \"Unsupported value type for ' { self . type_name } '\" ) # update the property on the server (which will refresh the local data) self . session . pages . update ( self . page_data , ** { self . name : prop })","title":"set()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.Property","text":"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects Source code in ultimate_notion/core/orm.py def Property ( name , schema = None , default =... ): \"\"\"Define a property for a Notion Page object. Internally, this method uses a custom wrapper to manage the property methods. :param name: the Notion table property name :param schema: the schema that defines this property (default = RichText) :param default: a default value when creating new objects \"\"\" _log . debug ( \"creating new Property: %s \" , name ) if schema is None : schema = RichText () elif not isinstance ( schema , PropertyObject ): raise TypeError ( \"Invalid data_type; not a PropertyObject\" ) cprop = ConnectedProperty ( name = name , schema = schema , default = default , ) def fget ( self ): \"\"\"Return the current value of the property as a python object.\"\"\" cprop . bind ( self ) return cprop . get () def fset ( self , value ): \"\"\"Set the property to the given value.\"\"\" cprop . bind ( self ) cprop . set ( value ) def fdel ( self ): \"\"\"Delete the value for this property.\"\"\" cprop . bind ( self ) cprop . delete () return property ( fget , fset , fdel )","title":"Property()"},{"location":"reference/ultimate_notion/core/orm/#ultimate_notion.core.orm.connected_page","text":"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to None :param cls: the returned class will inherit from the given class, which must be a sublass of ConnectedPage ; defaults to ConnectedPage Source code in ultimate_notion/core/orm.py def connected_page ( session = None , source_db = None , schema = None , cls = None ): \"\"\"Return a base class for \"connected\" pages through the Notion API. Subclasses may then inherit from the returned class to define custom ORM types. :param session: an active Notional session where the database is hosted :param source_db: if provided, the returned class will use the ID and schema of this object to initialize the connected page :param schema: if provided, the returned class will contain properties according to the schema provided; defaults to `None` :param cls: the returned class will inherit from the given class, which must be a sublass of `ConnectedPage`; defaults to `ConnectedPage` \"\"\" if cls is None : cls = ConnectedPage elif not issubclass ( cls , ConnectedPage ): raise ValueError ( \"'cls' must subclass ConnectedPage\" ) if source_db is None : dbid = None elif not isinstance ( source_db , Database ): raise ValueError ( \"'source_db' must be a Database\" ) else : if schema is None : schema = source_db . properties dbid = source_db . id factory = ConnectedPageFactory ( base = cls ) return factory ( session = session , database = dbid , schema = schema , )","title":"connected_page()"},{"location":"reference/ultimate_notion/core/query/","text":"query \u00b6 Provides an interactive query builder for Notion databases. CheckboxCondition \u00b6 Represents checkbox criteria in Notion. does_not_equal : Optional [ bool ] = None class-attribute \u00b6 equals : Optional [ bool ] = None class-attribute \u00b6 CompoundFilter \u00b6 Represents a compound filter in Notion. and_ : Optional [ List [ QueryFilter ]] = Field ( None , alias = 'and' ) class-attribute \u00b6 or_ : Optional [ List [ QueryFilter ]] = Field ( None , alias = 'or' ) class-attribute \u00b6 Config \u00b6 Pydantic configuration class to support keyword fields. allow_population_by_field_name = True class-attribute \u00b6 CreatedTimeFilter \u00b6 Represents a created_time filter in Notion. created_time : DateCondition class-attribute \u00b6 timestamp : TimestampKind = TimestampKind . CREATED_TIME class-attribute \u00b6 create ( constraint ) classmethod \u00b6 Create a new CreatedTimeFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , constraint ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = constraint ) DateCondition \u00b6 Represents date criteria in Notion. after : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 before : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 equals : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 next_month : Optional [ Any ] = None class-attribute \u00b6 next_week : Optional [ Any ] = None class-attribute \u00b6 next_year : Optional [ Any ] = None class-attribute \u00b6 on_or_after : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 on_or_before : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 past_month : Optional [ Any ] = None class-attribute \u00b6 past_week : Optional [ Any ] = None class-attribute \u00b6 past_year : Optional [ Any ] = None class-attribute \u00b6 FilesCondition \u00b6 Represents files criteria in Notion. is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 FormulaCondition \u00b6 Represents formula criteria in Notion. checkbox : Optional [ CheckboxCondition ] = None class-attribute \u00b6 date : Optional [ DateCondition ] = None class-attribute \u00b6 number : Optional [ NumberCondition ] = None class-attribute \u00b6 string : Optional [ TextCondition ] = None class-attribute \u00b6 LastEditedTimeFilter \u00b6 Represents a last_edited_time filter in Notion. last_edited_time : DateCondition class-attribute \u00b6 timestamp : TimestampKind = TimestampKind . LAST_EDITED_TIME class-attribute \u00b6 create ( constraint ) classmethod \u00b6 Create a new LastEditedTimeFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , constraint ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = constraint ) MultiSelectCondition \u00b6 Represents a multi_select criteria in Notion. contains : Optional [ str ] = None class-attribute \u00b6 does_not_contains : Optional [ str ] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 NumberCondition \u00b6 Represents number criteria in Notion. does_not_equal : Optional [ Union [ float , int ]] = None class-attribute \u00b6 equals : Optional [ Union [ float , int ]] = None class-attribute \u00b6 greater_than : Optional [ Union [ float , int ]] = None class-attribute \u00b6 greater_than_or_equal_to : Optional [ Union [ float , int ]] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 less_than : Optional [ Union [ float , int ]] = None class-attribute \u00b6 less_than_or_equal_to : Optional [ Union [ float , int ]] = None class-attribute \u00b6 PeopleCondition \u00b6 Represents people criteria in Notion. contains : Optional [ UUID ] = None class-attribute \u00b6 does_not_contain : Optional [ UUID ] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 PropertyFilter \u00b6 Represents a database property filter in Notion. checkbox : Optional [ CheckboxCondition ] = None class-attribute \u00b6 date : Optional [ DateCondition ] = None class-attribute \u00b6 files : Optional [ FilesCondition ] = None class-attribute \u00b6 formula : Optional [ FormulaCondition ] = None class-attribute \u00b6 multi_select : Optional [ MultiSelectCondition ] = None class-attribute \u00b6 number : Optional [ NumberCondition ] = None class-attribute \u00b6 people : Optional [ PeopleCondition ] = None class-attribute \u00b6 phone_number : Optional [ TextCondition ] = None class-attribute \u00b6 property : str class-attribute \u00b6 relation : Optional [ RelationCondition ] = None class-attribute \u00b6 rich_text : Optional [ TextCondition ] = None class-attribute \u00b6 select : Optional [ SelectCondition ] = None class-attribute \u00b6 PropertySort \u00b6 Represents a sort instruction in Notion. direction : Optional [ SortDirection ] = None class-attribute \u00b6 property : Optional [ str ] = None class-attribute \u00b6 timestamp : Optional [ TimestampKind ] = None class-attribute \u00b6 Query \u00b6 Represents a query object in Notion. filter : Optional [ QueryFilter ] = None class-attribute \u00b6 page_size : int = 100 class-attribute \u00b6 sorts : Optional [ List [ PropertySort ]] = None class-attribute \u00b6 start_cursor : Optional [ UUID ] = None class-attribute \u00b6 valid_page_size ( value ) classmethod \u00b6 Validate that the given page size meets the Notion API requirements. Source code in ultimate_notion/core/query.py @validator ( \"page_size\" ) @classmethod def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" assert value > 0 , \"size must be greater than zero\" assert value <= 100 , \"size must be less than or equal to 100\" return value QueryBuilder ( endpoint , cls = None , params ) \u00b6 A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param cls: an optional DataObject class for parsing results :param params: optional params that will be passed to the query Source code in ultimate_notion/core/query.py def __init__ ( self , endpoint , cls = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . params = params self . cls = cls self . query = Query () cls = cls instance-attribute \u00b6 endpoint = endpoint instance-attribute \u00b6 params = params instance-attribute \u00b6 query = Query () instance-attribute \u00b6 execute () \u00b6 Execute the current query and return an iterator for the results. Source code in ultimate_notion/core/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : raise ValueError ( \"cannot execute query; no endpoint provided\" ) _log . debug ( \"executing query - %s \" , self . query ) query = self . query . to_api () if self . params : query . update ( self . params ) exec = EndpointIterator ( endpoint = self . endpoint , ** query ) return ResultSet ( exec = exec , cls = self . cls ) filter ( filter = None , kwargs ) \u00b6 Add the given filter to the query. Source code in ultimate_notion/core/query.py def filter ( self , filter = None , ** kwargs ): \"\"\"Add the given filter to the query.\"\"\" if filter is None : if isinstance ( self . endpoint , SearchEndpoint ): filter = SearchFilter . parse_obj ( kwargs ) elif \"property\" in kwargs : filter = PropertyFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"created_time\" : filter = CreatedTimeFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"last_edited_time\" : filter = LastEditedTimeFilter . parse_obj ( kwargs ) else : raise ValueError ( \"unrecognized filter\" ) elif not isinstance ( filter , QueryFilter ): raise ValueError ( \"filter must be of type QueryFilter\" ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , filter ]) return self first () \u00b6 Execute the current query and return the first result only. Source code in ultimate_notion/core/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : _log . debug ( \"iterator returned empty result set\" ) return None limit ( page_size ) \u00b6 Limit the number of results to the given page size. Source code in ultimate_notion/core/query.py def limit ( self , page_size ): \"\"\"Limit the number of results to the given page size.\"\"\" self . query . page_size = page_size return self sort ( sort = None , kwargs ) \u00b6 Add the given sort elements to the query. Source code in ultimate_notion/core/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" # XXX should this support ORM properties also? # e.g. - query.sort(property=Task.Title) # but users won't always use ORM for queries... if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): raise ValueError ( \"sort must be of type PropertySort\" ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self start_at ( page_id ) \u00b6 Set the start cursor to a specific page ID. Source code in ultimate_notion/core/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self QueryFilter \u00b6 Base class for query filters. RelationCondition \u00b6 Represents relation criteria in Notion. contains : Optional [ UUID ] = None class-attribute \u00b6 does_not_contain : Optional [ UUID ] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 ResultSet ( exec , cls = None ) \u00b6 A result for a specific query. Source code in ultimate_notion/core/query.py def __init__ ( self , exec , cls = None ): \"\"\"Initialize a new `ResultSet`.\"\"\" self . source = exec self . cls = cls cls = cls instance-attribute \u00b6 source = exec instance-attribute \u00b6 __iter__ () \u00b6 Return an iterator for this ResultSet . Source code in ultimate_notion/core/query.py def __iter__ ( self ): \"\"\"Return an iterator for this `ResultSet`.\"\"\" return self __next__ () \u00b6 Return the next item from this ResultSet . Source code in ultimate_notion/core/query.py def __next__ ( self ): \"\"\"Return the next item from this `ResultSet`.\"\"\" item = next ( self . source ) if self . cls is not None : item = self . cls . parse_obj ( item ) elif \"object\" in item : if item [ \"object\" ] == \"page\" : item = Page . parse_obj ( item ) elif item [ \"object\" ] == \"database\" : item = Database . parse_obj ( item ) elif item [ \"object\" ] == \"block\" : item = Block . parse_obj ( item ) else : item = Record . parse_obj ( item ) return item SearchFilter \u00b6 Represents a search property filter in Notion. property : str class-attribute \u00b6 value : str class-attribute \u00b6 SelectCondition \u00b6 Represents select criteria in Notion. does_not_equal : Optional [ str ] = None class-attribute \u00b6 equals : Optional [ str ] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 SortDirection \u00b6 Sort direction options. ASCENDING = 'ascending' class-attribute \u00b6 DESCENDING = 'descending' class-attribute \u00b6 TextCondition \u00b6 Represents text criteria in Notion. contains : Optional [ str ] = None class-attribute \u00b6 does_not_contain : Optional [ str ] = None class-attribute \u00b6 does_not_equal : Optional [ str ] = None class-attribute \u00b6 ends_with : Optional [ str ] = None class-attribute \u00b6 equals : Optional [ str ] = None class-attribute \u00b6 is_empty : Optional [ bool ] = None class-attribute \u00b6 is_not_empty : Optional [ bool ] = None class-attribute \u00b6 starts_with : Optional [ str ] = None class-attribute \u00b6 TimestampFilter \u00b6 Represents a timestamp filter in Notion. timestamp : TimestampKind class-attribute \u00b6 create ( kind , constraint ) classmethod \u00b6 Create a new TimeStampFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , kind , constraint ): \"\"\"Create a new `TimeStampFilter` using the given constraint.\"\"\" if kind == TimestampKind . CREATED_TIME : return CreatedTimeFilter . create ( constraint ) if kind == TimestampKind . LAST_EDITED_TIME : return LastEditedTimeFilter . create ( constraint ) raise ValueError ( \"Unsupported kind for timestamp\" ) TimestampKind \u00b6 Possible timestamp types. CREATED_TIME = 'created_time' class-attribute \u00b6 LAST_EDITED_TIME = 'last_edited_time' class-attribute \u00b6 get_target_id ( target ) \u00b6 Examine the given target and returns the appropriate ID as a string. Source code in ultimate_notion/core/query.py def get_target_id ( target ): \"\"\"Examine the given target and returns the appropriate ID as a string.\"\"\" if isinstance ( target , str ): return target if isinstance ( target , UUID ): return target . hex if isinstance ( target , Record ): return target . id . hex if isinstance ( target , ParentRef ): return target () . hex if isclass ( target ) and issubclass ( target , ConnectedPage ): return target . _notional__database raise ValueError ( \"unsupported query target\" )","title":"query"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query","text":"Provides an interactive query builder for Notion databases.","title":"query"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CheckboxCondition","text":"Represents checkbox criteria in Notion.","title":"CheckboxCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CheckboxCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CheckboxCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CompoundFilter","text":"Represents a compound filter in Notion.","title":"CompoundFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CompoundFilter.and_","text":"","title":"and_"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CompoundFilter.or_","text":"","title":"or_"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CompoundFilter.Config","text":"Pydantic configuration class to support keyword fields.","title":"Config"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CompoundFilter.Config.allow_population_by_field_name","text":"","title":"allow_population_by_field_name"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CreatedTimeFilter","text":"Represents a created_time filter in Notion.","title":"CreatedTimeFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CreatedTimeFilter.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CreatedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.CreatedTimeFilter.create","text":"Create a new CreatedTimeFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , constraint ): \"\"\"Create a new `CreatedTimeFilter` using the given constraint.\"\"\" return CreatedTimeFilter ( created_time = constraint )","title":"create()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition","text":"Represents date criteria in Notion.","title":"DateCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.after","text":"","title":"after"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.before","text":"","title":"before"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.next_month","text":"","title":"next_month"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.next_week","text":"","title":"next_week"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.next_year","text":"","title":"next_year"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.on_or_after","text":"","title":"on_or_after"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.on_or_before","text":"","title":"on_or_before"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.past_month","text":"","title":"past_month"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.past_week","text":"","title":"past_week"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.DateCondition.past_year","text":"","title":"past_year"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FilesCondition","text":"Represents files criteria in Notion.","title":"FilesCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FilesCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FilesCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FormulaCondition","text":"Represents formula criteria in Notion.","title":"FormulaCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FormulaCondition.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FormulaCondition.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FormulaCondition.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.FormulaCondition.string","text":"","title":"string"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.LastEditedTimeFilter","text":"Represents a last_edited_time filter in Notion.","title":"LastEditedTimeFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.LastEditedTimeFilter.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.LastEditedTimeFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.LastEditedTimeFilter.create","text":"Create a new LastEditedTimeFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , constraint ): \"\"\"Create a new `LastEditedTimeFilter` using the given constraint.\"\"\" return LastEditedTimeFilter ( last_edited_time = constraint )","title":"create()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.MultiSelectCondition","text":"Represents a multi_select criteria in Notion.","title":"MultiSelectCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.MultiSelectCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.MultiSelectCondition.does_not_contains","text":"","title":"does_not_contains"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.MultiSelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.MultiSelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition","text":"Represents number criteria in Notion.","title":"NumberCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.greater_than","text":"","title":"greater_than"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.greater_than_or_equal_to","text":"","title":"greater_than_or_equal_to"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.less_than","text":"","title":"less_than"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.NumberCondition.less_than_or_equal_to","text":"","title":"less_than_or_equal_to"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PeopleCondition","text":"Represents people criteria in Notion.","title":"PeopleCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PeopleCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PeopleCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PeopleCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PeopleCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter","text":"Represents a database property filter in Notion.","title":"PropertyFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.files","text":"","title":"files"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.people","text":"","title":"people"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertyFilter.select","text":"","title":"select"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertySort","text":"Represents a sort instruction in Notion.","title":"PropertySort"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertySort.direction","text":"","title":"direction"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertySort.property","text":"","title":"property"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.PropertySort.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query","text":"Represents a query object in Notion.","title":"Query"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query.filter","text":"","title":"filter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query.page_size","text":"","title":"page_size"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query.sorts","text":"","title":"sorts"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query.start_cursor","text":"","title":"start_cursor"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.Query.valid_page_size","text":"Validate that the given page size meets the Notion API requirements. Source code in ultimate_notion/core/query.py @validator ( \"page_size\" ) @classmethod def valid_page_size ( cls , value ): \"\"\"Validate that the given page size meets the Notion API requirements.\"\"\" assert value > 0 , \"size must be greater than zero\" assert value <= 100 , \"size must be less than or equal to 100\" return value","title":"valid_page_size()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder","text":"A query builder for the Notion API. :param endpoint: the session endpoint used to execute the query :param cls: an optional DataObject class for parsing results :param params: optional params that will be passed to the query Source code in ultimate_notion/core/query.py def __init__ ( self , endpoint , cls = None , ** params ): \"\"\"Initialize a new `QueryBuilder` for the given endpoint.\"\"\" self . endpoint = endpoint self . params = params self . cls = cls self . query = Query ()","title":"QueryBuilder"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.cls","text":"","title":"cls"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.endpoint","text":"","title":"endpoint"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.params","text":"","title":"params"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.query","text":"","title":"query"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.execute","text":"Execute the current query and return an iterator for the results. Source code in ultimate_notion/core/query.py def execute ( self ): \"\"\"Execute the current query and return an iterator for the results.\"\"\" if self . endpoint is None : raise ValueError ( \"cannot execute query; no endpoint provided\" ) _log . debug ( \"executing query - %s \" , self . query ) query = self . query . to_api () if self . params : query . update ( self . params ) exec = EndpointIterator ( endpoint = self . endpoint , ** query ) return ResultSet ( exec = exec , cls = self . cls )","title":"execute()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.filter","text":"Add the given filter to the query. Source code in ultimate_notion/core/query.py def filter ( self , filter = None , ** kwargs ): \"\"\"Add the given filter to the query.\"\"\" if filter is None : if isinstance ( self . endpoint , SearchEndpoint ): filter = SearchFilter . parse_obj ( kwargs ) elif \"property\" in kwargs : filter = PropertyFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"created_time\" : filter = CreatedTimeFilter . parse_obj ( kwargs ) elif \"timestamp\" in kwargs and kwargs [ \"timestamp\" ] == \"last_edited_time\" : filter = LastEditedTimeFilter . parse_obj ( kwargs ) else : raise ValueError ( \"unrecognized filter\" ) elif not isinstance ( filter , QueryFilter ): raise ValueError ( \"filter must be of type QueryFilter\" ) # use CompoundFilter when necessary... if self . query . filter is None : self . query . filter = filter elif isinstance ( self . query . filter , CompoundFilter ): self . query . filter . and_ . append ( filter ) else : old_filter = self . query . filter self . query . filter = CompoundFilter ( and_ = [ old_filter , filter ]) return self","title":"filter()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.first","text":"Execute the current query and return the first result only. Source code in ultimate_notion/core/query.py def first ( self ): \"\"\"Execute the current query and return the first result only.\"\"\" try : return next ( self . execute ()) except StopIteration : _log . debug ( \"iterator returned empty result set\" ) return None","title":"first()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.limit","text":"Limit the number of results to the given page size. Source code in ultimate_notion/core/query.py def limit ( self , page_size ): \"\"\"Limit the number of results to the given page size.\"\"\" self . query . page_size = page_size return self","title":"limit()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.sort","text":"Add the given sort elements to the query. Source code in ultimate_notion/core/query.py def sort ( self , sort = None , ** kwargs ): \"\"\"Add the given sort elements to the query.\"\"\" # XXX should this support ORM properties also? # e.g. - query.sort(property=Task.Title) # but users won't always use ORM for queries... if sort is None : sort = PropertySort ( ** kwargs ) elif not isinstance ( filter , PropertySort ): raise ValueError ( \"sort must be of type PropertySort\" ) # use multiple sorts when necessary if self . query . sorts is None : self . query . sorts = [ sort ] else : self . query . sorts . append ( sort ) return self","title":"sort()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryBuilder.start_at","text":"Set the start cursor to a specific page ID. Source code in ultimate_notion/core/query.py def start_at ( self , page_id ): \"\"\"Set the start cursor to a specific page ID.\"\"\" self . query . start_cursor = page_id return self","title":"start_at()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.QueryFilter","text":"Base class for query filters.","title":"QueryFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.RelationCondition","text":"Represents relation criteria in Notion.","title":"RelationCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.RelationCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.RelationCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.RelationCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.RelationCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.ResultSet","text":"A result for a specific query. Source code in ultimate_notion/core/query.py def __init__ ( self , exec , cls = None ): \"\"\"Initialize a new `ResultSet`.\"\"\" self . source = exec self . cls = cls","title":"ResultSet"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.ResultSet.cls","text":"","title":"cls"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.ResultSet.source","text":"","title":"source"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.ResultSet.__iter__","text":"Return an iterator for this ResultSet . Source code in ultimate_notion/core/query.py def __iter__ ( self ): \"\"\"Return an iterator for this `ResultSet`.\"\"\" return self","title":"__iter__()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.ResultSet.__next__","text":"Return the next item from this ResultSet . Source code in ultimate_notion/core/query.py def __next__ ( self ): \"\"\"Return the next item from this `ResultSet`.\"\"\" item = next ( self . source ) if self . cls is not None : item = self . cls . parse_obj ( item ) elif \"object\" in item : if item [ \"object\" ] == \"page\" : item = Page . parse_obj ( item ) elif item [ \"object\" ] == \"database\" : item = Database . parse_obj ( item ) elif item [ \"object\" ] == \"block\" : item = Block . parse_obj ( item ) else : item = Record . parse_obj ( item ) return item","title":"__next__()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SearchFilter","text":"Represents a search property filter in Notion.","title":"SearchFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SearchFilter.property","text":"","title":"property"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SearchFilter.value","text":"","title":"value"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SelectCondition","text":"Represents select criteria in Notion.","title":"SelectCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SelectCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SelectCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SelectCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SelectCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SortDirection","text":"Sort direction options.","title":"SortDirection"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SortDirection.ASCENDING","text":"","title":"ASCENDING"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.SortDirection.DESCENDING","text":"","title":"DESCENDING"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition","text":"Represents text criteria in Notion.","title":"TextCondition"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.contains","text":"","title":"contains"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.does_not_contain","text":"","title":"does_not_contain"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.does_not_equal","text":"","title":"does_not_equal"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.ends_with","text":"","title":"ends_with"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.equals","text":"","title":"equals"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.is_empty","text":"","title":"is_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.is_not_empty","text":"","title":"is_not_empty"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TextCondition.starts_with","text":"","title":"starts_with"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampFilter","text":"Represents a timestamp filter in Notion.","title":"TimestampFilter"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampFilter.timestamp","text":"","title":"timestamp"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampFilter.create","text":"Create a new TimeStampFilter using the given constraint. Source code in ultimate_notion/core/query.py @classmethod def create ( cls , kind , constraint ): \"\"\"Create a new `TimeStampFilter` using the given constraint.\"\"\" if kind == TimestampKind . CREATED_TIME : return CreatedTimeFilter . create ( constraint ) if kind == TimestampKind . LAST_EDITED_TIME : return LastEditedTimeFilter . create ( constraint ) raise ValueError ( \"Unsupported kind for timestamp\" )","title":"create()"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampKind","text":"Possible timestamp types.","title":"TimestampKind"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampKind.CREATED_TIME","text":"","title":"CREATED_TIME"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.TimestampKind.LAST_EDITED_TIME","text":"","title":"LAST_EDITED_TIME"},{"location":"reference/ultimate_notion/core/query/#ultimate_notion.core.query.get_target_id","text":"Examine the given target and returns the appropriate ID as a string. Source code in ultimate_notion/core/query.py def get_target_id ( target ): \"\"\"Examine the given target and returns the appropriate ID as a string.\"\"\" if isinstance ( target , str ): return target if isinstance ( target , UUID ): return target . hex if isinstance ( target , Record ): return target . id . hex if isinstance ( target , ParentRef ): return target () . hex if isclass ( target ) and issubclass ( target , ConnectedPage ): return target . _notional__database raise ValueError ( \"unsupported query target\" )","title":"get_target_id()"},{"location":"reference/ultimate_notion/core/records/","text":"records \u00b6 Wrapper for Notion API data types. These objects provide both access to the primitive data structure returned by the API as well as higher-level access methods. In general, attributes in lower case represent the primitive data structure, where capitalized attributes provide higher-level access. BlockRef \u00b6 Reference a block. block_id : UUID class-attribute \u00b6 Database \u00b6 A database record type. cover : Optional [ FileObject ] = None class-attribute \u00b6 description : Optional [ List [ RichTextObject ]] = None class-attribute \u00b6 icon : Optional [ Union [ FileObject , EmojiObject ]] = None class-attribute \u00b6 is_inline : bool = False class-attribute \u00b6 properties : Dict [ str , PropertyObject ] = {} class-attribute \u00b6 title : List [ RichTextObject ] = None class-attribute \u00b6 url : str = None class-attribute \u00b6 DatabaseRef \u00b6 Reference a database. database_id : UUID class-attribute \u00b6 Page \u00b6 A standard Notion page object. cover : Optional [ FileObject ] = None class-attribute \u00b6 icon : Optional [ Union [ FileObject , EmojiObject ]] = None class-attribute \u00b6 properties : Dict [ str , PropertyValue ] = {} class-attribute \u00b6 url : str = None class-attribute \u00b6 Title () property \u00b6 Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate title entry and return as a string. Source code in ultimate_notion/core/records.py @property def Title ( self ): \"\"\"Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate `title` entry and return as a string. \"\"\" if self . properties is None or len ( self . properties ) == 0 : return None for prop in self . properties . values (): if prop . id == \"title\" : return prop . Value or None return None __getitem__ ( name ) \u00b6 Indexer for the given property name. :param name: the name of the property to get from the internal properties Source code in ultimate_notion/core/records.py def __getitem__ ( self , name ): \"\"\"Indexer for the given property name. :param name: the name of the property to get from the internal properties \"\"\" _log . debug ( \"get property :: { %s } [ %s ]\" , self . id , name ) if self . properties is None : raise AttributeError ( \"No properties in Page\" ) prop = self . properties . get ( name ) if prop is None : raise AttributeError ( f \"No such property: { name } \" ) return prop __setitem__ ( name , value ) \u00b6 Set the object data for the given property. If value is None , the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param prop: the PropertyValue for the named property :param value: the new value for the given property Source code in ultimate_notion/core/records.py def __setitem__ ( self , name , value ): \"\"\"Set the object data for the given property. If `value` is `None`, the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param prop: the PropertyValue for the named property :param value: the new value for the given property \"\"\" _log . debug ( \"set property :: { %s } [ %s ] => %s \" , self . id , name , value ) if value is None : self . properties . pop ( name , None ) elif not isinstance ( value , PropertyValue ): raise ValueError ( f \"Unable to set { name } :: unsupported value type\" ) else : self . properties [ name ] = value PageRef \u00b6 Reference a page. page_id : UUID class-attribute \u00b6 ParentRef \u00b6 Reference another block. __compose__ ( record ) classmethod \u00b6 Return the correct parent ID based on the object type. Source code in ultimate_notion/core/records.py @classmethod def __compose__ ( cls , record ): \"\"\"Return the correct parent ID based on the object type.\"\"\" if isinstance ( record , ParentRef ): return record if isinstance ( record , Page ): return PageRef ( page_id = record . id ) if isinstance ( record , Database ): return DatabaseRef ( database_id = record . id ) raise ValueError ( \"Unrecognized 'parent' attribute\" ) Record \u00b6 The base type for Notion API records. archived : bool = False class-attribute \u00b6 created_time : datetime = None class-attribute \u00b6 has_children : bool = False class-attribute \u00b6 id : UUID = None class-attribute \u00b6 last_edited_time : datetime = None class-attribute \u00b6 parent : ParentRef = None class-attribute \u00b6 WorkspaceParent \u00b6 Reference the workspace. workspace : bool = True class-attribute \u00b6","title":"records"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records","text":"Wrapper for Notion API data types. These objects provide both access to the primitive data structure returned by the API as well as higher-level access methods. In general, attributes in lower case represent the primitive data structure, where capitalized attributes provide higher-level access.","title":"records"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.BlockRef","text":"Reference a block.","title":"BlockRef"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.BlockRef.block_id","text":"","title":"block_id"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database","text":"A database record type.","title":"Database"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.title","text":"","title":"title"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.DatabaseRef","text":"Reference a database.","title":"DatabaseRef"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.DatabaseRef.database_id","text":"","title":"database_id"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page","text":"A standard Notion page object.","title":"Page"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.Title","text":"Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate title entry and return as a string. Source code in ultimate_notion/core/records.py @property def Title ( self ): \"\"\"Return the title of this page as a string. The title of a page is stored in its properties. This method will examine the page properties, looking for the appropriate `title` entry and return as a string. \"\"\" if self . properties is None or len ( self . properties ) == 0 : return None for prop in self . properties . values (): if prop . id == \"title\" : return prop . Value or None return None","title":"Title()"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.__getitem__","text":"Indexer for the given property name. :param name: the name of the property to get from the internal properties Source code in ultimate_notion/core/records.py def __getitem__ ( self , name ): \"\"\"Indexer for the given property name. :param name: the name of the property to get from the internal properties \"\"\" _log . debug ( \"get property :: { %s } [ %s ]\" , self . id , name ) if self . properties is None : raise AttributeError ( \"No properties in Page\" ) prop = self . properties . get ( name ) if prop is None : raise AttributeError ( f \"No such property: { name } \" ) return prop","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Page.__setitem__","text":"Set the object data for the given property. If value is None , the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param prop: the PropertyValue for the named property :param value: the new value for the given property Source code in ultimate_notion/core/records.py def __setitem__ ( self , name , value ): \"\"\"Set the object data for the given property. If `value` is `None`, the property data will be deleted from the page. This does not affect the schema of the page, only the contents of the property. :param name: the name of the property to set in the internal properties :param prop: the PropertyValue for the named property :param value: the new value for the given property \"\"\" _log . debug ( \"set property :: { %s } [ %s ] => %s \" , self . id , name , value ) if value is None : self . properties . pop ( name , None ) elif not isinstance ( value , PropertyValue ): raise ValueError ( f \"Unable to set { name } :: unsupported value type\" ) else : self . properties [ name ] = value","title":"__setitem__()"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.PageRef","text":"Reference a page.","title":"PageRef"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.PageRef.page_id","text":"","title":"page_id"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.ParentRef","text":"Reference another block.","title":"ParentRef"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.ParentRef.__compose__","text":"Return the correct parent ID based on the object type. Source code in ultimate_notion/core/records.py @classmethod def __compose__ ( cls , record ): \"\"\"Return the correct parent ID based on the object type.\"\"\" if isinstance ( record , ParentRef ): return record if isinstance ( record , Page ): return PageRef ( page_id = record . id ) if isinstance ( record , Database ): return DatabaseRef ( database_id = record . id ) raise ValueError ( \"Unrecognized 'parent' attribute\" )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record","text":"The base type for Notion API records.","title":"Record"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.Record.parent","text":"","title":"parent"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.WorkspaceParent","text":"Reference the workspace.","title":"WorkspaceParent"},{"location":"reference/ultimate_notion/core/records/#ultimate_notion.core.records.WorkspaceParent.workspace","text":"","title":"workspace"},{"location":"reference/ultimate_notion/core/schema/","text":"schema \u00b6 Objects representing a database schema. Checkbox \u00b6 Defines the checkbox configuration for a database property. checkbox : Any = {} class-attribute \u00b6 CreatedBy \u00b6 Defines the created-by configuration for a database property. created_by : Any = {} class-attribute \u00b6 CreatedTime \u00b6 Defines the created-time configuration for a database property. created_time : Any = {} class-attribute \u00b6 Date \u00b6 Defines the date configuration for a database property. date : Any = {} class-attribute \u00b6 Email \u00b6 Defines the email configuration for a database property. email : Any = {} class-attribute \u00b6 Files \u00b6 Defines the files configuration for a database property. files : Any = {} class-attribute \u00b6 Formula \u00b6 Defines the formula configuration for a database property. formula : _NestedData = _NestedData () class-attribute \u00b6 Function \u00b6 Standard aggregation functions. AVERAGE = 'average' class-attribute \u00b6 COUNT_ALL = 'count_all' class-attribute \u00b6 COUNT_EMPTY = 'count_empty' class-attribute \u00b6 COUNT_NOT_EMPTY = 'count_not_empty' class-attribute \u00b6 COUNT_UNIQUE_VALUES = 'count_unique_values' class-attribute \u00b6 COUNT_VALUES = 'count_values' class-attribute \u00b6 EARLIEST_DATE = 'earliest_date' class-attribute \u00b6 LATEST_DATE = 'latest_date' class-attribute \u00b6 MAX = 'max' class-attribute \u00b6 MEDIAN = 'median' class-attribute \u00b6 MIN = 'min' class-attribute \u00b6 PERCENT_EMPTY = 'percent_empty' class-attribute \u00b6 PERCENT_NOT_EMPTY = 'percent_not_empty' class-attribute \u00b6 RANGE = 'range' class-attribute \u00b6 SHOW_ORIGINAL = 'show_original' class-attribute \u00b6 SUM = 'sum' class-attribute \u00b6 LastEditedBy \u00b6 Defines the last-edited-by configuration for a database property. last_edited_by : Any = {} class-attribute \u00b6 LastEditedTime \u00b6 Defines the last-edited-time configuration for a database property. last_edited_time : Any = {} class-attribute \u00b6 MultiSelect \u00b6 Defines the multi-select configuration for a database property. multi_select : _NestedData = _NestedData () class-attribute \u00b6 Number \u00b6 Defines the number configuration for a database property. number : _NestedData = _NestedData () class-attribute \u00b6 __compose__ ( format ) classmethod \u00b6 Create a Number object with the expected format. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , format ): \"\"\"Create a `Number` object with the expected format.\"\"\" return cls ( number = cls . _NestedData ( format = format )) NumberFormat \u00b6 Available number formats in Notion. ARGENTINE_PESO = 'argentine_peso' class-attribute \u00b6 BAHT = 'baht' class-attribute \u00b6 CANADIAN_DOLLAR = 'canadian_dollar' class-attribute \u00b6 CHILEAN_PESO = 'chilean_peso' class-attribute \u00b6 COLOMBIAN_PESO = 'colombian_peso' class-attribute \u00b6 DANISH_KRONE = 'danish_krone' class-attribute \u00b6 DIRHAM = 'dirham' class-attribute \u00b6 DOLLAR = 'dollar' class-attribute \u00b6 EURO = 'euro' class-attribute \u00b6 FORINT = 'forint' class-attribute \u00b6 FRANC = 'franc' class-attribute \u00b6 HONG_KONG_DOLLAR = 'hong_kong_dollar' class-attribute \u00b6 KORUNA = 'koruna' class-attribute \u00b6 KRONA = 'krona' class-attribute \u00b6 LEU = 'leu' class-attribute \u00b6 LIRA = 'lira' class-attribute \u00b6 MEXICAN_PESO = 'mexican_peso' class-attribute \u00b6 NEW_TAIWAN_DOLLAR = 'new_taiwan_dollar' class-attribute \u00b6 NEW_ZEALAND_DOLLAR = 'new_zealand_dollar' class-attribute \u00b6 NORWEGIAN_KRONE = 'norwegian_krone' class-attribute \u00b6 NUMBER = 'number' class-attribute \u00b6 NUMBER_WITH_COMMAS = 'number_with_commas' class-attribute \u00b6 PERCENT = 'percent' class-attribute \u00b6 PHILIPPINE_PESO = 'philippine_peso' class-attribute \u00b6 POUND = 'pound' class-attribute \u00b6 RAND = 'rand' class-attribute \u00b6 REAL = 'real' class-attribute \u00b6 RINGGIT = 'ringgit' class-attribute \u00b6 RIYAL = 'riyal' class-attribute \u00b6 RUBLE = 'ruble' class-attribute \u00b6 RUPEE = 'rupee' class-attribute \u00b6 RUPIAH = 'rupiah' class-attribute \u00b6 SHEKEL = 'shekel' class-attribute \u00b6 URUGUAYAN_PESO = 'uruguayan_peso' class-attribute \u00b6 WON = 'won' class-attribute \u00b6 YEN = 'yen' class-attribute \u00b6 YUAN = 'yuan' class-attribute \u00b6 ZLOTY = 'zloty' class-attribute \u00b6 People \u00b6 Defines the people configuration for a database property. people : Any = {} class-attribute \u00b6 PhoneNumber \u00b6 Defines the phone number configuration for a database property. phone_number : Any = {} class-attribute \u00b6 PropertyObject \u00b6 Base class for Notion property objects. id : Optional [ str ] = None class-attribute \u00b6 name : Optional [ str ] = None class-attribute \u00b6 Relation \u00b6 Defines the relation configuration for a database property. relation : _NestedData = _NestedData () class-attribute \u00b6 __compose__ ( database_id ) classmethod \u00b6 Create a Relation property using the target database ID. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , database_id ): \"\"\"Create a `Relation` property using the target database ID.\"\"\" return cls ( relation = cls . _NestedData ( database_id = database_id )) RichText \u00b6 Defines the rich text configuration for a database property. rich_text : Any = {} class-attribute \u00b6 Rollup \u00b6 Defines the rollup configuration for a database property. rollup : _NestedData = _NestedData () class-attribute \u00b6 Select \u00b6 Defines the select configuration for a database property. select : _NestedData = _NestedData () class-attribute \u00b6 __compose__ ( options ) classmethod \u00b6 Create a Select object from the list of SelectOption 's. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls ( select = cls . _NestedData ( options = options )) SelectOption \u00b6 Options for select & multi-select objects. color : str = Color . DEFAULT class-attribute \u00b6 id : str = None class-attribute \u00b6 name : str class-attribute \u00b6 __compose__ ( name , color = Color . DEFAULT ) classmethod \u00b6 Create a SelectOption object from the given name and color. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls ( name = name , color = color ) Status \u00b6 Defines the status configuration for a database property. status : Any = {} class-attribute \u00b6 Title \u00b6 Defines the title configuration for a database property. title : Any = {} class-attribute \u00b6 URL \u00b6 Defines the URL configuration for a database property. url : Any = {} class-attribute \u00b6","title":"schema"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema","text":"Objects representing a database schema.","title":"schema"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Checkbox","text":"Defines the checkbox configuration for a database property.","title":"Checkbox"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.CreatedBy","text":"Defines the created-by configuration for a database property.","title":"CreatedBy"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.CreatedTime","text":"Defines the created-time configuration for a database property.","title":"CreatedTime"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Date","text":"Defines the date configuration for a database property.","title":"Date"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Email","text":"Defines the email configuration for a database property.","title":"Email"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Files","text":"Defines the files configuration for a database property.","title":"Files"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Formula","text":"Defines the formula configuration for a database property.","title":"Formula"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function","text":"Standard aggregation functions.","title":"Function"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.AVERAGE","text":"","title":"AVERAGE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.COUNT_ALL","text":"","title":"COUNT_ALL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.COUNT_EMPTY","text":"","title":"COUNT_EMPTY"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.COUNT_NOT_EMPTY","text":"","title":"COUNT_NOT_EMPTY"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.COUNT_UNIQUE_VALUES","text":"","title":"COUNT_UNIQUE_VALUES"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.COUNT_VALUES","text":"","title":"COUNT_VALUES"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.EARLIEST_DATE","text":"","title":"EARLIEST_DATE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.LATEST_DATE","text":"","title":"LATEST_DATE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.MAX","text":"","title":"MAX"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.MEDIAN","text":"","title":"MEDIAN"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.MIN","text":"","title":"MIN"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.PERCENT_EMPTY","text":"","title":"PERCENT_EMPTY"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.PERCENT_NOT_EMPTY","text":"","title":"PERCENT_NOT_EMPTY"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.RANGE","text":"","title":"RANGE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.SHOW_ORIGINAL","text":"","title":"SHOW_ORIGINAL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Function.SUM","text":"","title":"SUM"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.LastEditedBy","text":"Defines the last-edited-by configuration for a database property.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.LastEditedTime","text":"Defines the last-edited-time configuration for a database property.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.MultiSelect","text":"Defines the multi-select configuration for a database property.","title":"MultiSelect"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Number","text":"Defines the number configuration for a database property.","title":"Number"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Number.__compose__","text":"Create a Number object with the expected format. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , format ): \"\"\"Create a `Number` object with the expected format.\"\"\" return cls ( number = cls . _NestedData ( format = format ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat","text":"Available number formats in Notion.","title":"NumberFormat"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.ARGENTINE_PESO","text":"","title":"ARGENTINE_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.BAHT","text":"","title":"BAHT"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.CANADIAN_DOLLAR","text":"","title":"CANADIAN_DOLLAR"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.CHILEAN_PESO","text":"","title":"CHILEAN_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.COLOMBIAN_PESO","text":"","title":"COLOMBIAN_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.DANISH_KRONE","text":"","title":"DANISH_KRONE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.DIRHAM","text":"","title":"DIRHAM"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.DOLLAR","text":"","title":"DOLLAR"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.EURO","text":"","title":"EURO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.FORINT","text":"","title":"FORINT"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.FRANC","text":"","title":"FRANC"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.HONG_KONG_DOLLAR","text":"","title":"HONG_KONG_DOLLAR"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.KORUNA","text":"","title":"KORUNA"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.KRONA","text":"","title":"KRONA"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.LEU","text":"","title":"LEU"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.LIRA","text":"","title":"LIRA"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.MEXICAN_PESO","text":"","title":"MEXICAN_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.NEW_TAIWAN_DOLLAR","text":"","title":"NEW_TAIWAN_DOLLAR"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.NEW_ZEALAND_DOLLAR","text":"","title":"NEW_ZEALAND_DOLLAR"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.NORWEGIAN_KRONE","text":"","title":"NORWEGIAN_KRONE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.NUMBER","text":"","title":"NUMBER"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.NUMBER_WITH_COMMAS","text":"","title":"NUMBER_WITH_COMMAS"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.PERCENT","text":"","title":"PERCENT"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.PHILIPPINE_PESO","text":"","title":"PHILIPPINE_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.POUND","text":"","title":"POUND"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RAND","text":"","title":"RAND"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.REAL","text":"","title":"REAL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RINGGIT","text":"","title":"RINGGIT"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RIYAL","text":"","title":"RIYAL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RUBLE","text":"","title":"RUBLE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RUPEE","text":"","title":"RUPEE"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.RUPIAH","text":"","title":"RUPIAH"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.SHEKEL","text":"","title":"SHEKEL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.URUGUAYAN_PESO","text":"","title":"URUGUAYAN_PESO"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.WON","text":"","title":"WON"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.YEN","text":"","title":"YEN"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.YUAN","text":"","title":"YUAN"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.NumberFormat.ZLOTY","text":"","title":"ZLOTY"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.People","text":"Defines the people configuration for a database property.","title":"People"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.PhoneNumber","text":"Defines the phone number configuration for a database property.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.PropertyObject","text":"Base class for Notion property objects.","title":"PropertyObject"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.PropertyObject.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.PropertyObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Relation","text":"Defines the relation configuration for a database property.","title":"Relation"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Relation.__compose__","text":"Create a Relation property using the target database ID. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , database_id ): \"\"\"Create a `Relation` property using the target database ID.\"\"\" return cls ( relation = cls . _NestedData ( database_id = database_id ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.RichText","text":"Defines the rich text configuration for a database property.","title":"RichText"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Rollup","text":"Defines the rollup configuration for a database property.","title":"Rollup"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Select","text":"Defines the select configuration for a database property.","title":"Select"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Select.select","text":"","title":"select"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Select.__compose__","text":"Create a Select object from the list of SelectOption 's. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , options ): \"\"\"Create a `Select` object from the list of `SelectOption`'s.\"\"\" return cls ( select = cls . _NestedData ( options = options ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.SelectOption","text":"Options for select & multi-select objects.","title":"SelectOption"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.SelectOption.color","text":"","title":"color"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.SelectOption.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.SelectOption.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.SelectOption.__compose__","text":"Create a SelectOption object from the given name and color. Source code in ultimate_notion/core/schema.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `SelectOption` object from the given name and color.\"\"\" return cls ( name = name , color = color )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Status","text":"Defines the status configuration for a database property.","title":"Status"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Title","text":"Defines the title configuration for a database property.","title":"Title"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.URL","text":"Defines the URL configuration for a database property.","title":"URL"},{"location":"reference/ultimate_notion/core/schema/#ultimate_notion.core.schema.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/text/","text":"text \u00b6 Utilities for working text, markdown & Rich Text in Notion. MAX_TEXT_OBJECT_SIZE = 2000 module-attribute \u00b6 Annotations \u00b6 Style information for RichTextObject's. bold : bool = False class-attribute \u00b6 code : bool = False class-attribute \u00b6 color : FullColor = None class-attribute \u00b6 italic : bool = False class-attribute \u00b6 strikethrough : bool = False class-attribute \u00b6 underline : bool = False class-attribute \u00b6 is_plain () property \u00b6 Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style. Source code in ultimate_notion/core/text.py @property def is_plain ( self ): \"\"\"Determine if any flags are set in this `Annotations` object. If all flags match their defaults, this is considered a \"plain\" style. \"\"\" # XXX a better approach here would be to just compate all fields to defaults if self . bold : return False if self . italic : return False if self . strikethrough : return False if self . underline : return False if self . code : return False if self . color is not None : return False return True CodingLanguage \u00b6 Available coding languages. ABAP = 'abap' class-attribute \u00b6 ARDUINO = 'arduino' class-attribute \u00b6 BASH = 'bash' class-attribute \u00b6 BASIC = 'basic' class-attribute \u00b6 C = 'c' class-attribute \u00b6 CLOJURE = 'clojure' class-attribute \u00b6 COFFEESCRIPT = 'coffeescript' class-attribute \u00b6 CPP = 'c++' class-attribute \u00b6 CSHARP = 'c#' class-attribute \u00b6 CSS = 'css' class-attribute \u00b6 DART = 'dart' class-attribute \u00b6 DIFF = 'diff' class-attribute \u00b6 DOCKER = 'docker' class-attribute \u00b6 ELIXIR = 'elixir' class-attribute \u00b6 ELM = 'elm' class-attribute \u00b6 ERLANG = 'erlang' class-attribute \u00b6 FLOW = 'flow' class-attribute \u00b6 FORTRAN = 'fortran' class-attribute \u00b6 FSHARP = 'f#' class-attribute \u00b6 GHERKIN = 'gherkin' class-attribute \u00b6 GLSL = 'glsl' class-attribute \u00b6 GO = 'go' class-attribute \u00b6 GRAPHQL = 'graphql' class-attribute \u00b6 GROOVY = 'groovy' class-attribute \u00b6 HASKELL = 'haskell' class-attribute \u00b6 HTML = 'html' class-attribute \u00b6 JAVA = 'java' class-attribute \u00b6 JAVASCRIPT = 'javascript' class-attribute \u00b6 JSON = 'json' class-attribute \u00b6 JULIA = 'julia' class-attribute \u00b6 KOTLIN = 'kotlin' class-attribute \u00b6 LATEX = 'latex' class-attribute \u00b6 LESS = 'less' class-attribute \u00b6 LISP = 'lisp' class-attribute \u00b6 LIVESCRIPT = 'livescript' class-attribute \u00b6 LUA = 'lua' class-attribute \u00b6 MAKEFILE = 'makefile' class-attribute \u00b6 MARKDOWN = 'markdown' class-attribute \u00b6 MARKUP = 'markup' class-attribute \u00b6 MATLAB = 'matlab' class-attribute \u00b6 MERMAID = 'mermaid' class-attribute \u00b6 MISC = 'java/c/c++/c#' class-attribute \u00b6 NIX = 'nix' class-attribute \u00b6 OBJECTIVE_C = 'objective-c' class-attribute \u00b6 OCAML = 'ocaml' class-attribute \u00b6 PASCAL = 'pascal' class-attribute \u00b6 PERL = 'perl' class-attribute \u00b6 PHP = 'php' class-attribute \u00b6 PLAIN_TEXT = 'plain text' class-attribute \u00b6 POWERSHELL = 'powershell' class-attribute \u00b6 PROLOG = 'prolog' class-attribute \u00b6 PROTOBUF = 'protobuf' class-attribute \u00b6 PYTHON = 'python' class-attribute \u00b6 R = 'r' class-attribute \u00b6 REASON = 'reason' class-attribute \u00b6 RUBY = 'ruby' class-attribute \u00b6 RUST = 'rust' class-attribute \u00b6 SASS = 'sass' class-attribute \u00b6 SCALA = 'scala' class-attribute \u00b6 SCHEME = 'scheme' class-attribute \u00b6 SCSS = 'scss' class-attribute \u00b6 SHELL = 'shell' class-attribute \u00b6 SQL = 'sql' class-attribute \u00b6 SWIFT = 'swift' class-attribute \u00b6 TYPESCRIPT = 'typescript' class-attribute \u00b6 VB_NET = 'vb.net' class-attribute \u00b6 VERILOG = 'verilog' class-attribute \u00b6 VHDL = 'vhdl' class-attribute \u00b6 VISUAL_BASIC = 'visual basic' class-attribute \u00b6 WEBASSEMBLY = 'webassembly' class-attribute \u00b6 XML = 'xml' class-attribute \u00b6 YAML = 'yaml' class-attribute \u00b6 Color \u00b6 Basic color values. BLUE = 'blue' class-attribute \u00b6 BROWN = 'brown' class-attribute \u00b6 DEFAULT = 'default' class-attribute \u00b6 GRAY = 'gray' class-attribute \u00b6 GREEN = 'green' class-attribute \u00b6 ORANGE = 'orange' class-attribute \u00b6 PINK = 'pink' class-attribute \u00b6 PURPLE = 'purple' class-attribute \u00b6 RED = 'red' class-attribute \u00b6 YELLOW = 'yellow' class-attribute \u00b6 FullColor \u00b6 Extended color values, including backgrounds. BLUE = 'blue' class-attribute \u00b6 BLUE_BACKGROUND = 'blue_background' class-attribute \u00b6 BROWN = 'brown' class-attribute \u00b6 BROWN_BACKGROUND = 'brown_background' class-attribute \u00b6 DEFAULT = 'default' class-attribute \u00b6 GRAY = 'gray' class-attribute \u00b6 GRAY_BACKGROUND = 'gray_background' class-attribute \u00b6 GREEN = 'green' class-attribute \u00b6 GREEN_BACKGROUND = 'green_background' class-attribute \u00b6 ORANGE = 'orange' class-attribute \u00b6 ORANGE_BACKGROUND = 'orange_background' class-attribute \u00b6 PINK = 'pink' class-attribute \u00b6 PINK_BACKGROUND = 'pink_background' class-attribute \u00b6 PURPLE = 'purple' class-attribute \u00b6 PURPLE_BACKGROUND = 'purple_background' class-attribute \u00b6 RED = 'red' class-attribute \u00b6 RED_BACKGROUND = 'red_background' class-attribute \u00b6 YELLOW = 'yellow' class-attribute \u00b6 YELLOW_BACKGROUND = 'yellow_background' class-attribute \u00b6 LinkObject \u00b6 Reference a URL. type : str = 'url' class-attribute \u00b6 url : str = None class-attribute \u00b6 RichTextObject \u00b6 Base class for Notion rich text elements. annotations : Optional [ Annotations ] = None class-attribute \u00b6 href : Optional [ str ] = None class-attribute \u00b6 plain_text : str class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/text.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . href is None : text = self . plain_text or \"\" elif self . plain_text is None or len ( self . plain_text ) == 0 : text = f \"( { self . href } )\" else : text = f \"[ { self . plain_text } ]( { self . href } )\" if self . annotations : if self . annotations . bold : text = f \"* { text } *\" if self . annotations . italic : text = f \"** { text } **\" if self . annotations . underline : text = f \"_ { text } _\" if self . annotations . strikethrough : text = f \"~ { text } ~\" if self . annotations . code : text = f \"` { text } `\" return text TextObject \u00b6 Notion text element. text : _NestedData = _NestedData () class-attribute \u00b6 __compose__ ( text , href = None , style = None ) classmethod \u00b6 Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in ultimate_notion/core/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return TextObject ( plain_text = text , text = nested , href = href , annotations = style , ) chunky ( text , length = MAX_TEXT_OBJECT_SIZE ) \u00b6 Break the given text into chunks of at most length size. Source code in ultimate_notion/core/text.py def chunky ( text , length = MAX_TEXT_OBJECT_SIZE ): \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length )) is_emoji ( text ) \u00b6 Check if text is a single emoji. Source code in ultimate_notion/core/text.py def is_emoji ( text ): \"\"\"Check if text is a single emoji.\"\"\" return text in EMOJI_DATA lstrip ( rtf ) \u00b6 Remove leading whitespace from each TextObject in the list. Source code in ultimate_notion/core/text.py def lstrip ( * rtf ): \"\"\"Remove leading whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . lstrip () obj . text . content = strip_text obj . plain_text = strip_text make_safe_python_name ( name ) \u00b6 Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Source code in ultimate_notion/core/text.py def make_safe_python_name ( name ): \"\"\"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. \"\"\" s = re . sub ( r \"[^0-9a-zA-Z_]+\" , \"_\" , name ) s = re . sub ( r \"^[^a-zA-Z]+\" , \"\" , s ) # remove trailing underscores return s . rstrip ( \"_\" ) markdown ( rtf ) \u00b6 Return text as markdown from the list of RichText objects. Source code in ultimate_notion/core/text.py def markdown ( * rtf ): \"\"\"Return text as markdown from the list of RichText objects.\"\"\" return \"\" . join ( str ( text ) for text in rtf if text ) plain_text ( rtf ) \u00b6 Return the combined plain text from the list of RichText objects. Source code in ultimate_notion/core/text.py def plain_text ( * rtf ): \"\"\"Return the combined plain text from the list of RichText objects.\"\"\" return \"\" . join ( text . plain_text for text in rtf if text ) rstrip ( rtf ) \u00b6 Remove trailing whitespace from each TextObject in the list. Source code in ultimate_notion/core/text.py def rstrip ( * rtf ): \"\"\"Remove trailing whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . rstrip () obj . text . content = strip_text obj . plain_text = strip_text strip ( rtf ) \u00b6 Remove leading and trailing whitespace from each TextObject in the list. This is functionally equivalent to lstrip ( * rtf ) rstrip ( * rtf ) :param rtf: a list of TextObject 's Source code in ultimate_notion/core/text.py def strip ( * rtf ): \"\"\"Remove leading and trailing whitespace from each `TextObject` in the list. This is functionally equivalent to: ```python lstrip(*rtf) rstrip(*rtf) ``` :param rtf: a list of `TextObject`'s \"\"\" lstrip ( * rtf ) rstrip ( * rtf ) truncate ( text , length = - 1 , trail = '...' ) \u00b6 Truncate the given text, using a supplied tail as a placeholder. Source code in ultimate_notion/core/text.py def truncate ( text , length =- 1 , trail = \"...\" ): \"\"\"Truncate the given text, using a supplied tail as a placeholder.\"\"\" if text is None : return None # repr() includes open and close quotes... literal = repr ( text )[ 1 : - 1 ] if 0 < length < len ( literal ): literal = literal [: length ] if trail is not None : literal += trail return literal","title":"text"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text","text":"Utilities for working text, markdown & Rich Text in Notion.","title":"text"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.MAX_TEXT_OBJECT_SIZE","text":"","title":"MAX_TEXT_OBJECT_SIZE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations","text":"Style information for RichTextObject's.","title":"Annotations"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.bold","text":"","title":"bold"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.code","text":"","title":"code"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.color","text":"","title":"color"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.italic","text":"","title":"italic"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.strikethrough","text":"","title":"strikethrough"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.underline","text":"","title":"underline"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Annotations.is_plain","text":"Determine if any flags are set in this Annotations object. If all flags match their defaults, this is considered a \"plain\" style. Source code in ultimate_notion/core/text.py @property def is_plain ( self ): \"\"\"Determine if any flags are set in this `Annotations` object. If all flags match their defaults, this is considered a \"plain\" style. \"\"\" # XXX a better approach here would be to just compate all fields to defaults if self . bold : return False if self . italic : return False if self . strikethrough : return False if self . underline : return False if self . code : return False if self . color is not None : return False return True","title":"is_plain()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage","text":"Available coding languages.","title":"CodingLanguage"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.ABAP","text":"","title":"ABAP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.ARDUINO","text":"","title":"ARDUINO"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.BASH","text":"","title":"BASH"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.BASIC","text":"","title":"BASIC"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.C","text":"","title":"C"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.CLOJURE","text":"","title":"CLOJURE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.COFFEESCRIPT","text":"","title":"COFFEESCRIPT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.CPP","text":"","title":"CPP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.CSHARP","text":"","title":"CSHARP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.CSS","text":"","title":"CSS"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.DART","text":"","title":"DART"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.DIFF","text":"","title":"DIFF"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.DOCKER","text":"","title":"DOCKER"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.ELIXIR","text":"","title":"ELIXIR"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.ELM","text":"","title":"ELM"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.ERLANG","text":"","title":"ERLANG"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.FLOW","text":"","title":"FLOW"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.FORTRAN","text":"","title":"FORTRAN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.FSHARP","text":"","title":"FSHARP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.GHERKIN","text":"","title":"GHERKIN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.GLSL","text":"","title":"GLSL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.GO","text":"","title":"GO"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.GRAPHQL","text":"","title":"GRAPHQL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.GROOVY","text":"","title":"GROOVY"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.HASKELL","text":"","title":"HASKELL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.HTML","text":"","title":"HTML"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.JAVA","text":"","title":"JAVA"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.JAVASCRIPT","text":"","title":"JAVASCRIPT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.JSON","text":"","title":"JSON"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.JULIA","text":"","title":"JULIA"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.KOTLIN","text":"","title":"KOTLIN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.LATEX","text":"","title":"LATEX"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.LESS","text":"","title":"LESS"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.LISP","text":"","title":"LISP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.LIVESCRIPT","text":"","title":"LIVESCRIPT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.LUA","text":"","title":"LUA"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MAKEFILE","text":"","title":"MAKEFILE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MARKDOWN","text":"","title":"MARKDOWN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MARKUP","text":"","title":"MARKUP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MATLAB","text":"","title":"MATLAB"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MERMAID","text":"","title":"MERMAID"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.MISC","text":"","title":"MISC"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.NIX","text":"","title":"NIX"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.OBJECTIVE_C","text":"","title":"OBJECTIVE_C"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.OCAML","text":"","title":"OCAML"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PASCAL","text":"","title":"PASCAL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PERL","text":"","title":"PERL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PHP","text":"","title":"PHP"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PLAIN_TEXT","text":"","title":"PLAIN_TEXT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.POWERSHELL","text":"","title":"POWERSHELL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PROLOG","text":"","title":"PROLOG"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PROTOBUF","text":"","title":"PROTOBUF"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.PYTHON","text":"","title":"PYTHON"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.R","text":"","title":"R"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.REASON","text":"","title":"REASON"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.RUBY","text":"","title":"RUBY"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.RUST","text":"","title":"RUST"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SASS","text":"","title":"SASS"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SCALA","text":"","title":"SCALA"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SCHEME","text":"","title":"SCHEME"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SCSS","text":"","title":"SCSS"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SHELL","text":"","title":"SHELL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SQL","text":"","title":"SQL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.SWIFT","text":"","title":"SWIFT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.TYPESCRIPT","text":"","title":"TYPESCRIPT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.VB_NET","text":"","title":"VB_NET"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.VERILOG","text":"","title":"VERILOG"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.VHDL","text":"","title":"VHDL"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.VISUAL_BASIC","text":"","title":"VISUAL_BASIC"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.WEBASSEMBLY","text":"","title":"WEBASSEMBLY"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.XML","text":"","title":"XML"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.CodingLanguage.YAML","text":"","title":"YAML"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color","text":"Basic color values.","title":"Color"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.Color.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor","text":"Extended color values, including backgrounds.","title":"FullColor"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.BLUE","text":"","title":"BLUE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.BLUE_BACKGROUND","text":"","title":"BLUE_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.BROWN","text":"","title":"BROWN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.BROWN_BACKGROUND","text":"","title":"BROWN_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.DEFAULT","text":"","title":"DEFAULT"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.GRAY","text":"","title":"GRAY"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.GRAY_BACKGROUND","text":"","title":"GRAY_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.GREEN","text":"","title":"GREEN"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.GREEN_BACKGROUND","text":"","title":"GREEN_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.ORANGE","text":"","title":"ORANGE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.ORANGE_BACKGROUND","text":"","title":"ORANGE_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.PINK","text":"","title":"PINK"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.PINK_BACKGROUND","text":"","title":"PINK_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.PURPLE","text":"","title":"PURPLE"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.PURPLE_BACKGROUND","text":"","title":"PURPLE_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.RED","text":"","title":"RED"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.RED_BACKGROUND","text":"","title":"RED_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.YELLOW","text":"","title":"YELLOW"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.FullColor.YELLOW_BACKGROUND","text":"","title":"YELLOW_BACKGROUND"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.LinkObject","text":"Reference a URL.","title":"LinkObject"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.LinkObject.type","text":"","title":"type"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.LinkObject.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.RichTextObject","text":"Base class for Notion rich text elements.","title":"RichTextObject"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.RichTextObject.annotations","text":"","title":"annotations"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.RichTextObject.href","text":"","title":"href"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.RichTextObject.plain_text","text":"","title":"plain_text"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.RichTextObject.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/text.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . href is None : text = self . plain_text or \"\" elif self . plain_text is None or len ( self . plain_text ) == 0 : text = f \"( { self . href } )\" else : text = f \"[ { self . plain_text } ]( { self . href } )\" if self . annotations : if self . annotations . bold : text = f \"* { text } *\" if self . annotations . italic : text = f \"** { text } **\" if self . annotations . underline : text = f \"_ { text } _\" if self . annotations . strikethrough : text = f \"~ { text } ~\" if self . annotations . code : text = f \"` { text } `\" return text","title":"__str__()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.TextObject","text":"Notion text element.","title":"TextObject"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.TextObject.text","text":"","title":"text"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.TextObject.__compose__","text":"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text Source code in ultimate_notion/core/text.py @classmethod def __compose__ ( cls , text , href = None , style = None ): \"\"\"Compose a TextObject from the given properties. :param text: the plain text of this object :param href: an optional link for this object :param style: an optional Annotations object for this text \"\"\" if text is None : return None # TODO convert markdown in text:str to RichText? link = LinkObject ( url = href ) if href else None nested = TextObject . _NestedData ( content = text , link = link ) style = deepcopy ( style ) return TextObject ( plain_text = text , text = nested , href = href , annotations = style , )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.chunky","text":"Break the given text into chunks of at most length size. Source code in ultimate_notion/core/text.py def chunky ( text , length = MAX_TEXT_OBJECT_SIZE ): \"\"\"Break the given `text` into chunks of at most `length` size.\"\"\" return ( text [ idx : idx + length ] for idx in range ( 0 , len ( text ), length ))","title":"chunky()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.is_emoji","text":"Check if text is a single emoji. Source code in ultimate_notion/core/text.py def is_emoji ( text ): \"\"\"Check if text is a single emoji.\"\"\" return text in EMOJI_DATA","title":"is_emoji()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.lstrip","text":"Remove leading whitespace from each TextObject in the list. Source code in ultimate_notion/core/text.py def lstrip ( * rtf ): \"\"\"Remove leading whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . lstrip () obj . text . content = strip_text obj . plain_text = strip_text","title":"lstrip()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.make_safe_python_name","text":"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. Source code in ultimate_notion/core/text.py def make_safe_python_name ( name ): \"\"\"Make the given string safe for use as a Python identifier. This will remove any leading characters that are not valid and change all invalid interior sequences to underscore. \"\"\" s = re . sub ( r \"[^0-9a-zA-Z_]+\" , \"_\" , name ) s = re . sub ( r \"^[^a-zA-Z]+\" , \"\" , s ) # remove trailing underscores return s . rstrip ( \"_\" )","title":"make_safe_python_name()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.markdown","text":"Return text as markdown from the list of RichText objects. Source code in ultimate_notion/core/text.py def markdown ( * rtf ): \"\"\"Return text as markdown from the list of RichText objects.\"\"\" return \"\" . join ( str ( text ) for text in rtf if text )","title":"markdown()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.plain_text","text":"Return the combined plain text from the list of RichText objects. Source code in ultimate_notion/core/text.py def plain_text ( * rtf ): \"\"\"Return the combined plain text from the list of RichText objects.\"\"\" return \"\" . join ( text . plain_text for text in rtf if text )","title":"plain_text()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.rstrip","text":"Remove trailing whitespace from each TextObject in the list. Source code in ultimate_notion/core/text.py def rstrip ( * rtf ): \"\"\"Remove trailing whitespace from each `TextObject` in the list.\"\"\" if rtf is None or len ( rtf ) < 1 : return for obj in rtf : if not isinstance ( obj , TextObject ): raise AttributeError ( \"invalid object in rtf\" ) if obj . text and obj . text . content : strip_text = obj . text . content . rstrip () obj . text . content = strip_text obj . plain_text = strip_text","title":"rstrip()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.strip","text":"Remove leading and trailing whitespace from each TextObject in the list. This is functionally equivalent to lstrip ( * rtf ) rstrip ( * rtf ) :param rtf: a list of TextObject 's Source code in ultimate_notion/core/text.py def strip ( * rtf ): \"\"\"Remove leading and trailing whitespace from each `TextObject` in the list. This is functionally equivalent to: ```python lstrip(*rtf) rstrip(*rtf) ``` :param rtf: a list of `TextObject`'s \"\"\" lstrip ( * rtf ) rstrip ( * rtf )","title":"strip()"},{"location":"reference/ultimate_notion/core/text/#ultimate_notion.core.text.truncate","text":"Truncate the given text, using a supplied tail as a placeholder. Source code in ultimate_notion/core/text.py def truncate ( text , length =- 1 , trail = \"...\" ): \"\"\"Truncate the given text, using a supplied tail as a placeholder.\"\"\" if text is None : return None # repr() includes open and close quotes... literal = repr ( text )[ 1 : - 1 ] if 0 < length < len ( literal ): literal = literal [: length ] if trail is not None : literal += trail return literal","title":"truncate()"},{"location":"reference/ultimate_notion/core/types/","text":"types \u00b6 Wrapper for Notion API data types. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods. BooleanFormula \u00b6 A Notion boolean formula result. boolean : Optional [ bool ] = None class-attribute \u00b6 Result () property \u00b6 Return the result of this BooleanFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this BooleanFormula.\"\"\" return self . boolean Checkbox \u00b6 Simple checkbox type; represented as a boolean. checkbox : Optional [ bool ] = None class-attribute \u00b6 CreatedBy \u00b6 A Notion created-by property value. created_by : User class-attribute \u00b6 __str__ () \u00b6 Return the contents of this property as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . created_by ) CreatedTime \u00b6 A Notion created-time property value. created_time : datetime class-attribute \u00b6 Date \u00b6 Notion complex date type - may include timestamp and/or be a date range. date : Optional [ DateRange ] = None class-attribute \u00b6 End () property \u00b6 Return the end date of this property. Source code in ultimate_notion/core/types.py @property def End ( self ): \"\"\"Return the end date of this property.\"\"\" return None if self . date is None else self . date . end IsRange () property \u00b6 Determine if this object represents a date range (versus a single date). Source code in ultimate_notion/core/types.py @property def IsRange ( self ): \"\"\"Determine if this object represents a date range (versus a single date).\"\"\" if self . date is None : return False return self . date . end is not None Start () property \u00b6 Return the start date of this property. Source code in ultimate_notion/core/types.py @property def Start ( self ): \"\"\"Return the start date of this property.\"\"\" return None if self . date is None else self . date . start __compose__ ( start , end = None ) classmethod \u00b6 Create a new Date from the native values. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls ( date = DateRange ( start = start , end = end )) __contains__ ( other ) \u00b6 Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. \"\"\" if not self . IsRange : raise ValueError ( \"This date is not a range\" ) return self . Start <= other <= self . End __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"\" if self . date is None else str ( self . date ) DateFormula \u00b6 A Notion date formula result. date : Optional [ DateRange ] = None class-attribute \u00b6 Result () property \u00b6 Return the result of this DateFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this DateFormula.\"\"\" return self . date DateRange \u00b6 A Notion date range, with an optional end date. end : Optional [ Union [ date , datetime ]] = None class-attribute \u00b6 start : Union [ date , datetime ] class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . end is None : return f \" { self . start } \" return f \" { self . start } :: { self . end } \" Email \u00b6 Notion email type. email : Optional [ str ] = None class-attribute \u00b6 EmojiObject \u00b6 A Notion emoji object. emoji : str class-attribute \u00b6 __compose__ ( emoji ) classmethod \u00b6 Compose an EmojiObject from the given emoji string. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" return EmojiObject ( emoji = emoji ) __str__ () \u00b6 Return this EmojiObject as a simple string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return this EmojiObject as a simple string.\"\"\" return self . emoji EquationObject \u00b6 Notion equation element. equation : _NestedData class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . equation is None : return None return self . equation . expression ExternalFile \u00b6 An external file object. external : _NestedData class-attribute \u00b6 __compose__ ( url , name = None ) classmethod \u00b6 Create a new ExternalFile from the given URL. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls ( name = name , external = cls . _NestedData ( url = url )) __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = self . name or \"__unknown__\" if self . external and self . external . url : return f \"![ { name } ]( { self . external . url } )\" return name FileObject \u00b6 A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API. name : Optional [ str ] = None class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" return self . name or \"__unknown__\" Files \u00b6 Notion files type. files : List [ FileObject ] = [] class-attribute \u00b6 __contains__ ( other ) \u00b6 Determine if the given FileObject or name is in the property. Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given FileObject or name is in the property.\"\"\" if self . files is None : return False for ref in self . files : if ref == other : return True if ref . name == other : return True return False __getitem__ ( name ) \u00b6 Return the FileObject with the given name. Source code in ultimate_notion/core/types.py def __getitem__ ( self , name ): \"\"\"Return the FileObject with the given name.\"\"\" if self . files is None : return None for ref in self . files : if ref . name == name : return ref raise AttributeError ( \"No such file\" ) __iadd__ ( obj ) \u00b6 Append the given FileObject in place. Source code in ultimate_notion/core/types.py def __iadd__ ( self , obj ): \"\"\"Append the given `FileObject` in place.\"\"\" if obj in self : raise ValueError ( f \"Item exists: { obj } \" ) self . append ( obj ) return self __isub__ ( obj ) \u00b6 Remove the given FileObject in place. Source code in ultimate_notion/core/types.py def __isub__ ( self , obj ): \"\"\"Remove the given `FileObject` in place.\"\"\" if obj not in self : raise ValueError ( f \"No such item: { obj } \" ) self . remove ( obj ) return self __iter__ () \u00b6 Iterate over the FileObject's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the FileObject's in this property.\"\"\" if self . files is None : return None return iter ( self . files ) __len__ () \u00b6 Return the number of Files in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of Files in this property.\"\"\" return len ( self . files ) __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"; \" . join ([ str ( file ) for file in self . files ]) append ( obj ) \u00b6 Append the given file reference to this property. :param ref: the FileObject to be added Source code in ultimate_notion/core/types.py def append ( self , obj ): \"\"\"Append the given file reference to this property. :param ref: the `FileObject` to be added \"\"\" _log . debug ( \"append file - %s \" , obj ) self . files . append ( obj ) remove ( obj ) \u00b6 Remove the given file reference from this property. :param ref: the FileObject to be removed Source code in ultimate_notion/core/types.py def remove ( self , obj ): \"\"\"Remove the given file reference from this property. :param ref: the `FileObject` to be removed \"\"\" _log . debug ( \"remove file - %s \" , obj ) self . files . remove ( obj ) Formula \u00b6 A Notion formula property value. formula : Optional [ FormulaResult ] = None class-attribute \u00b6 Result () property \u00b6 Return the result of this Formula in its native type. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this Formula in its native type.\"\"\" if self . formula is None : return None return self . formula . Result __str__ () \u00b6 Return the result of this formula as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the result of this formula as a string.\"\"\" return str ( self . Result or \"\" ) FormulaResult \u00b6 A Notion formula result. This object contains the result of the expression in the database properties. Result () property \u00b6 Return the result of this FormulaResult. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this FormulaResult.\"\"\" raise NotImplementedError ( \"Result unavailable\" ) __str__ () \u00b6 Return the formula result as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the formula result as a string.\"\"\" return self . Result or \"\" HostedFile \u00b6 A Notion file object. file : _NestedData class-attribute \u00b6 LastEditedBy \u00b6 A Notion last-edited-by property value. last_edited_by : User class-attribute \u00b6 __str__ () \u00b6 Return the contents of this property as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . last_edited_by ) LastEditedTime \u00b6 A Notion last-edited-time property value. last_edited_time : datetime class-attribute \u00b6 MentionData \u00b6 Base class for typed Mention data objects. MentionDatabase \u00b6 Nested database information for Mention properties. database : PageReference class-attribute \u00b6 MentionDate \u00b6 Nested date data for Mention properties. date : DateRange class-attribute \u00b6 MentionLink \u00b6 Nested url data for Mention properties. url : str class-attribute \u00b6 MentionObject \u00b6 Notion mention element. mention : MentionData class-attribute \u00b6 MentionPage \u00b6 Nested page data for Mention properties. page : PageReference class-attribute \u00b6 MentionTemplate \u00b6 Nested template data for Mention properties. template_mention : MentionTemplateData class-attribute \u00b6 MentionTemplateData \u00b6 Nested template data for Mention properties. MentionTemplateDate \u00b6 Nested date template data for Mention properties. template_mention_date : str class-attribute \u00b6 MentionTemplateUser \u00b6 Nested user template data for Mention properties. template_mention_user : str class-attribute \u00b6 MentionUser \u00b6 Nested user data for Mention properties. user : User class-attribute \u00b6 MultiSelect \u00b6 Notion multi-select type. multi_select : List [ SelectValue ] = [] class-attribute \u00b6 Values () property \u00b6 Return the names of each value in this MultiSelect as a list. Source code in ultimate_notion/core/types.py @property def Values ( self ): \"\"\"Return the names of each value in this MultiSelect as a list.\"\"\" if self . multi_select is None : return None return [ str ( val ) for val in self . multi_select if val . name is not None ] __compose__ ( value ) classmethod \u00b6 Initialize a new MultiSelect from the given value. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Initialize a new MultiSelect from the given value.\"\"\" if isinstance ( value , list ): return cls . _compose_from_list ( * value ) return cls . _compose_from_list ( value ) __contains__ ( name ) \u00b6 Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. Source code in ultimate_notion/core/types.py def __contains__ ( self , name ): \"\"\"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. \"\"\" for opt in self . multi_select : if opt . name == name : return True return False __getitem__ ( index ) \u00b6 Return the SelectValue object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the SelectValue object at the given index.\"\"\" if self . multi_select is None : raise IndexError ( \"empty property\" ) if index > len ( self . multi_select ): raise IndexError ( \"index out of range\" ) return self . multi_select [ index ] __iadd__ ( other ) \u00b6 Add the given option to this MultiSelect. Source code in ultimate_notion/core/types.py def __iadd__ ( self , other ): \"\"\"Add the given option to this MultiSelect.\"\"\" if other in self : raise ValueError ( f \"Duplicate item: { other } \" ) self . append ( other ) return self __isub__ ( other ) \u00b6 Remove the given value from this MultiSelect. Source code in ultimate_notion/core/types.py def __isub__ ( self , other ): \"\"\"Remove the given value from this MultiSelect.\"\"\" if other not in self : raise ValueError ( f \"No such item: { other } \" ) self . remove ( other ) return self __iter__ () \u00b6 Iterate over the SelectValue's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the SelectValue's in this property.\"\"\" if self . multi_select is None : return None return iter ( self . multi_select ) __len__ () \u00b6 Count the number of selected values. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Count the number of selected values.\"\"\" return len ( self . multi_select ) __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ( self . Values ) append ( values ) \u00b6 Add selected values to this MultiSelect. Source code in ultimate_notion/core/types.py def append ( self , * values ): \"\"\"Add selected values to this MultiSelect.\"\"\" for value in values : if value is None : raise ValueError ( \"'None' is an invalid value\" ) if value not in self : opt = SelectValue ( name = value ) self . multi_select . append ( opt ) remove ( values ) \u00b6 Remove selected values from this MultiSelect. Source code in ultimate_notion/core/types.py def remove ( self , * values ): \"\"\"Remove selected values from this MultiSelect.\"\"\" self . multi_select = [ opt for opt in self . multi_select if opt . name not in values ] NativeTypeMixin \u00b6 Mixin class for properties that can be represented as native Python types. Value () property \u00b6 Get the current value of this property as a native Python type. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Get the current value of this property as a native Python type.\"\"\" cls = self . __class__ # check to see if the object has a field with the type-name # (this is assigned by TypedObject during subclass creation) if hasattr ( cls , \"type\" ) and hasattr ( self , cls . type ): return getattr ( self , cls . type ) raise NotImplementedError () __compose__ ( value ) classmethod \u00b6 Build the property value from the native Python value. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Build the property value from the native Python value.\"\"\" # use type-name field to instantiate the class when possible if hasattr ( cls , \"type\" ): return cls ( ** { cls . type : value }) raise NotImplementedError () __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object.\"\"\" return self . Value == other __ne__ ( other ) \u00b6 Determine if this property is not equal to the given object. Source code in ultimate_notion/core/types.py def __ne__ ( self , other ): \"\"\"Determine if this property is not equal to the given object.\"\"\" return self . Value != other __str__ () \u00b6 Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" value = self . Value if value is None : return \"\" return str ( value ) Number \u00b6 Simple number type. number : Optional [ Union [ float , int ]] = None class-attribute \u00b6 Value () property \u00b6 Get the current value of this property as a native Python number. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Get the current value of this property as a native Python number.\"\"\" if self . number is None : return None if self . number == int ( self . number ): return int ( self . number ) return self . number __iadd__ ( other ) \u00b6 Add the given value to this Number. Source code in ultimate_notion/core/types.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" self . number += other return self __isub__ ( other ) \u00b6 Subtract the given value from this Number. Source code in ultimate_notion/core/types.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" self . number -= other return self NumberFormula \u00b6 A Notion number formula result. number : Optional [ Union [ float , int ]] = None class-attribute \u00b6 Result () property \u00b6 Return the result of this NumberFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this NumberFormula.\"\"\" return self . number PageReference \u00b6 A page reference is an object with an id property. id : UUID class-attribute \u00b6 __compose__ ( page ) classmethod \u00b6 Return the correct page reference based on the object type. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , page ): \"\"\"Return the correct page reference based on the object type.\"\"\" if isinstance ( page , str ): return PageReference ( id = page ) if isinstance ( page , UUID ): return PageReference ( id = page ) if hasattr ( page , \"id\" ): return PageReference ( id = page . id ) raise ValueError ( \"Unrecognized 'page' attribute\" ) People \u00b6 Notion people type. people : List [ User ] = [] class-attribute \u00b6 __contains__ ( other ) \u00b6 Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). \"\"\" for user in self . people : if user == other : return True if user . name == other : return True return False __getitem__ ( index ) \u00b6 Return the People object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the People object at the given index.\"\"\" if self . people is None : raise IndexError ( \"empty property\" ) if index > len ( self . people ): raise IndexError ( \"index out of range\" ) return self . people [ index ] __iter__ () \u00b6 Iterate over the User's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the User's in this property.\"\"\" if self . people is None : return None return iter ( self . people ) __len__ () \u00b6 Return the number of People in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of People in this property.\"\"\" return len ( self . people ) __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ([ str ( user ) for user in self . people ]) PhoneNumber \u00b6 Notion phone type. phone_number : Optional [ str ] = None class-attribute \u00b6 PropertyValue \u00b6 Base class for Notion property values. id : Optional [ str ] = None class-attribute \u00b6 Relation \u00b6 A Notion relation property value. relation : List [ PageReference ] = [] class-attribute \u00b6 __compose__ ( pages ) classmethod \u00b6 Return a Relation property with the specified pages. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" if isinstance ( pages , list ): refs = [ PageReference [ page ] for page in pages ] else : refs = [ PageReference [ pages ]] return cls ( relation = refs ) __contains__ ( page ) \u00b6 Determine if the given page is in this Relation. Source code in ultimate_notion/core/types.py def __contains__ ( self , page ): \"\"\"Determine if the given page is in this Relation.\"\"\" return PageReference [ page ] in self . relation __getitem__ ( index ) \u00b6 Return the PageReference object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the PageReference object at the given index.\"\"\" if self . relation is None : raise IndexError ( \"empty property\" ) if index > len ( self . relation ): raise IndexError ( \"index out of range\" ) return self . relation [ index ] __iadd__ ( page ) \u00b6 Add the given page to this Relation in place. Source code in ultimate_notion/core/types.py def __iadd__ ( self , page ): \"\"\"Add the given page to this Relation in place.\"\"\" ref = PageReference [ page ] if ref in self . relation : raise ValueError ( f \"Duplicate item: { ref . id } \" ) self . relation . append ( ref ) return self __isub__ ( page ) \u00b6 Remove the given page from this Relation in place. Source code in ultimate_notion/core/types.py def __isub__ ( self , page ): \"\"\"Remove the given page from this Relation in place.\"\"\" ref = PageReference [ page ] if ref in self . relation : raise ValueError ( f \"No such item: { ref . id } \" ) self . relation . remove ( ref ) return self __iter__ () \u00b6 Iterate over the PageReference's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the PageReference's in this property.\"\"\" if self . relation is None : return None return iter ( self . relation ) __len__ () \u00b6 Return the number of PageReference's in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of PageReference's in this property.\"\"\" return len ( self . relation ) RichText \u00b6 Notion rich text type. rich_text : List [ RichTextObject ] = [] class-attribute \u00b6 Value () property \u00b6 Return the plain text from this RichText. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the plain text from this RichText.\"\"\" if self . rich_text is None : return None return plain_text ( * self . rich_text ) __compose__ ( text ) classmethod \u00b6 Create a new RichText property from the given strings. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , text ): \"\"\"Create a new `RichText` property from the given strings.\"\"\" return cls ( rich_text = [ TextObject [ text ]]) __len__ () \u00b6 Return the number of object in the RichText object. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of object in the RichText object.\"\"\" return len ( self . rich_text ) Rollup \u00b6 A Notion rollup property value. rollup : Optional [ RollupObject ] = None class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Rollup property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this Rollup property.\"\"\" if self . rollup is None : return \"\" value = self . rollup . Value if value is None : return \"\" return str ( value ) RollupArray \u00b6 A Notion rollup array property value. array : List [ PropertyValue ] class-attribute \u00b6 Value () property \u00b6 Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . array RollupDate \u00b6 A Notion rollup date property value. date : Optional [ DateRange ] = None class-attribute \u00b6 Value () property \u00b6 Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . date RollupNumber \u00b6 A Notion rollup number property value. number : Optional [ Union [ float , int ]] = None class-attribute \u00b6 Value () property \u00b6 Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . number RollupObject \u00b6 A Notion rollup property value. function : Optional [ Function ] = None class-attribute \u00b6 Value () abstractmethod property \u00b6 Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property @abstractmethod def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" SelectOne \u00b6 Notion select type. select : Optional [ SelectValue ] = None class-attribute \u00b6 Value () property \u00b6 Return the value of this property as a string. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the value of this property as a string.\"\"\" if self . select is None : return None return str ( self . select ) __compose__ ( value , color = Color . DEFAULT ) classmethod \u00b6 Create a SelectOne property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value , color = Color . DEFAULT ): \"\"\"Create a `SelectOne` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" if value is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( select = SelectValue ( name = value , color = color )) __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. \"\"\" if other is None : return self . select is None return other == self . select . name __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\" SelectValue \u00b6 Values for select & multi-select properties. color : Optional [ Color ] = None class-attribute \u00b6 id : Optional [ Union [ UUID , str ]] = None class-attribute \u00b6 name : str class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . name Status \u00b6 Notion status property. status : Optional [ _NestedData ] = None class-attribute \u00b6 Value () property \u00b6 Return the value of this property as a string. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the value of this property as a string.\"\"\" return self . status . name __compose__ ( name , color = Color . DEFAULT ) classmethod \u00b6 Create a Status property from the given name. :param name: a string to use for this property :param color: an optional Color for the status Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `Status` property from the given name. :param name: a string to use for this property :param color: an optional Color for the status \"\"\" if name is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( status = Status . _NestedData ( name = name , color = color )) __eq__ ( other ) \u00b6 Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. \"\"\" if other is None : return self . status is None if isinstance ( other , Status ): return self . status . name == other . status . name return self . status . name == other __str__ () \u00b6 Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\" StringFormula \u00b6 A Notion string formula result. string : Optional [ str ] = None class-attribute \u00b6 Result () property \u00b6 Return the result of this StringFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this StringFormula.\"\"\" return self . string Title \u00b6 Notion title type. title : List [ RichTextObject ] = [] class-attribute \u00b6 Value () property \u00b6 Return the plain text from this Title. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the plain text from this Title.\"\"\" if self . title is None : return None return plain_text ( * self . title ) __compose__ ( text ) classmethod \u00b6 Create a new Title property from the given text. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , text ): \"\"\"Create a new `Title` property from the given text.\"\"\" return cls ( title = [ TextObject [ text ]]) __len__ () \u00b6 Return the number of object in the Title object. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of object in the Title object.\"\"\" return len ( self . title ) URL \u00b6 Notion URL type. url : Optional [ str ] = None class-attribute \u00b6","title":"types"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types","text":"Wrapper for Notion API data types. Similar to other records, these object provide access to the primitive data structure used in the Notion API as well as higher-level methods.","title":"types"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.BooleanFormula","text":"A Notion boolean formula result.","title":"BooleanFormula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.BooleanFormula.boolean","text":"","title":"boolean"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.BooleanFormula.Result","text":"Return the result of this BooleanFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this BooleanFormula.\"\"\" return self . boolean","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Checkbox","text":"Simple checkbox type; represented as a boolean.","title":"Checkbox"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Checkbox.checkbox","text":"","title":"checkbox"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.CreatedBy","text":"A Notion created-by property value.","title":"CreatedBy"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.CreatedBy.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.CreatedBy.__str__","text":"Return the contents of this property as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . created_by )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.CreatedTime","text":"A Notion created-time property value.","title":"CreatedTime"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.CreatedTime.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date","text":"Notion complex date type - may include timestamp and/or be a date range.","title":"Date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.End","text":"Return the end date of this property. Source code in ultimate_notion/core/types.py @property def End ( self ): \"\"\"Return the end date of this property.\"\"\" return None if self . date is None else self . date . end","title":"End()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.IsRange","text":"Determine if this object represents a date range (versus a single date). Source code in ultimate_notion/core/types.py @property def IsRange ( self ): \"\"\"Determine if this object represents a date range (versus a single date).\"\"\" if self . date is None : return False return self . date . end is not None","title":"IsRange()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.Start","text":"Return the start date of this property. Source code in ultimate_notion/core/types.py @property def Start ( self ): \"\"\"Return the start date of this property.\"\"\" return None if self . date is None else self . date . start","title":"Start()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.__compose__","text":"Create a new Date from the native values. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , start , end = None ): \"\"\"Create a new Date from the native values.\"\"\" return cls ( date = DateRange ( start = start , end = end ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.__contains__","text":"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given date is in the range (inclusive) of this Date. Raises ValueError if the Date object is not a range - e.g. has no end date. \"\"\" if not self . IsRange : raise ValueError ( \"This date is not a range\" ) return self . Start <= other <= self . End","title":"__contains__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Date.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"\" if self . date is None else str ( self . date )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateFormula","text":"A Notion date formula result.","title":"DateFormula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateFormula.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateFormula.Result","text":"Return the result of this DateFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this DateFormula.\"\"\" return self . date","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateRange","text":"A Notion date range, with an optional end date.","title":"DateRange"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateRange.end","text":"","title":"end"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateRange.start","text":"","title":"start"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.DateRange.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . end is None : return f \" { self . start } \" return f \" { self . start } :: { self . end } \"","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Email","text":"Notion email type.","title":"Email"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Email.email","text":"","title":"email"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EmojiObject","text":"A Notion emoji object.","title":"EmojiObject"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EmojiObject.emoji","text":"","title":"emoji"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EmojiObject.__compose__","text":"Compose an EmojiObject from the given emoji string. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , emoji ): \"\"\"Compose an EmojiObject from the given emoji string.\"\"\" return EmojiObject ( emoji = emoji )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EmojiObject.__str__","text":"Return this EmojiObject as a simple string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return this EmojiObject as a simple string.\"\"\" return self . emoji","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EquationObject","text":"Notion equation element.","title":"EquationObject"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EquationObject.equation","text":"","title":"equation"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.EquationObject.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" if self . equation is None : return None return self . equation . expression","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.ExternalFile","text":"An external file object.","title":"ExternalFile"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.ExternalFile.external","text":"","title":"external"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.ExternalFile.__compose__","text":"Create a new ExternalFile from the given URL. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , url , name = None ): \"\"\"Create a new `ExternalFile` from the given URL.\"\"\" return cls ( name = name , external = cls . _NestedData ( url = url ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.ExternalFile.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" name = self . name or \"__unknown__\" if self . external and self . external . url : return f \"![ { name } ]( { self . external . url } )\" return name","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FileObject","text":"A Notion file object. Depending on the context, a FileObject may require a name (such as in the Files property). This makes the object hierarchy difficult, so here we simply allow name to be optional. It is the responsibility of the caller to set name if required by the API.","title":"FileObject"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FileObject.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FileObject.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" return self . name or \"__unknown__\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files","text":"Notion files type.","title":"Files"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.files","text":"","title":"files"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__contains__","text":"Determine if the given FileObject or name is in the property. Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given FileObject or name is in the property.\"\"\" if self . files is None : return False for ref in self . files : if ref == other : return True if ref . name == other : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__getitem__","text":"Return the FileObject with the given name. Source code in ultimate_notion/core/types.py def __getitem__ ( self , name ): \"\"\"Return the FileObject with the given name.\"\"\" if self . files is None : return None for ref in self . files : if ref . name == name : return ref raise AttributeError ( \"No such file\" )","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__iadd__","text":"Append the given FileObject in place. Source code in ultimate_notion/core/types.py def __iadd__ ( self , obj ): \"\"\"Append the given `FileObject` in place.\"\"\" if obj in self : raise ValueError ( f \"Item exists: { obj } \" ) self . append ( obj ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__isub__","text":"Remove the given FileObject in place. Source code in ultimate_notion/core/types.py def __isub__ ( self , obj ): \"\"\"Remove the given `FileObject` in place.\"\"\" if obj not in self : raise ValueError ( f \"No such item: { obj } \" ) self . remove ( obj ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__iter__","text":"Iterate over the FileObject's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the FileObject's in this property.\"\"\" if self . files is None : return None return iter ( self . files )","title":"__iter__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__len__","text":"Return the number of Files in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of Files in this property.\"\"\" return len ( self . files )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \"; \" . join ([ str ( file ) for file in self . files ])","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.append","text":"Append the given file reference to this property. :param ref: the FileObject to be added Source code in ultimate_notion/core/types.py def append ( self , obj ): \"\"\"Append the given file reference to this property. :param ref: the `FileObject` to be added \"\"\" _log . debug ( \"append file - %s \" , obj ) self . files . append ( obj )","title":"append()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Files.remove","text":"Remove the given file reference from this property. :param ref: the FileObject to be removed Source code in ultimate_notion/core/types.py def remove ( self , obj ): \"\"\"Remove the given file reference from this property. :param ref: the `FileObject` to be removed \"\"\" _log . debug ( \"remove file - %s \" , obj ) self . files . remove ( obj )","title":"remove()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Formula","text":"A Notion formula property value.","title":"Formula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Formula.formula","text":"","title":"formula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Formula.Result","text":"Return the result of this Formula in its native type. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this Formula in its native type.\"\"\" if self . formula is None : return None return self . formula . Result","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Formula.__str__","text":"Return the result of this formula as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the result of this formula as a string.\"\"\" return str ( self . Result or \"\" )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FormulaResult","text":"A Notion formula result. This object contains the result of the expression in the database properties.","title":"FormulaResult"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FormulaResult.Result","text":"Return the result of this FormulaResult. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this FormulaResult.\"\"\" raise NotImplementedError ( \"Result unavailable\" )","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.FormulaResult.__str__","text":"Return the formula result as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the formula result as a string.\"\"\" return self . Result or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.HostedFile","text":"A Notion file object.","title":"HostedFile"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.HostedFile.file","text":"","title":"file"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.LastEditedBy","text":"A Notion last-edited-by property value.","title":"LastEditedBy"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.LastEditedBy.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.LastEditedBy.__str__","text":"Return the contents of this property as a string. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return the contents of this property as a string.\"\"\" return str ( self . last_edited_by )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.LastEditedTime","text":"A Notion last-edited-time property value.","title":"LastEditedTime"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.LastEditedTime.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionData","text":"Base class for typed Mention data objects.","title":"MentionData"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionDatabase","text":"Nested database information for Mention properties.","title":"MentionDatabase"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionDatabase.database","text":"","title":"database"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionDate","text":"Nested date data for Mention properties.","title":"MentionDate"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionLink","text":"Nested url data for Mention properties.","title":"MentionLink"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionLink.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionObject","text":"Notion mention element.","title":"MentionObject"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionObject.mention","text":"","title":"mention"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionPage","text":"Nested page data for Mention properties.","title":"MentionPage"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionPage.page","text":"","title":"page"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplate","text":"Nested template data for Mention properties.","title":"MentionTemplate"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplate.template_mention","text":"","title":"template_mention"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplateData","text":"Nested template data for Mention properties.","title":"MentionTemplateData"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplateDate","text":"Nested date template data for Mention properties.","title":"MentionTemplateDate"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplateDate.template_mention_date","text":"","title":"template_mention_date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplateUser","text":"Nested user template data for Mention properties.","title":"MentionTemplateUser"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionTemplateUser.template_mention_user","text":"","title":"template_mention_user"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionUser","text":"Nested user data for Mention properties.","title":"MentionUser"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MentionUser.user","text":"","title":"user"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect","text":"Notion multi-select type.","title":"MultiSelect"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.multi_select","text":"","title":"multi_select"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.Values","text":"Return the names of each value in this MultiSelect as a list. Source code in ultimate_notion/core/types.py @property def Values ( self ): \"\"\"Return the names of each value in this MultiSelect as a list.\"\"\" if self . multi_select is None : return None return [ str ( val ) for val in self . multi_select if val . name is not None ]","title":"Values()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__compose__","text":"Initialize a new MultiSelect from the given value. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Initialize a new MultiSelect from the given value.\"\"\" if isinstance ( value , list ): return cls . _compose_from_list ( * value ) return cls . _compose_from_list ( value )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__contains__","text":"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. Source code in ultimate_notion/core/types.py def __contains__ ( self , name ): \"\"\"Determine if the given name is in this MultiSelect. To avoid confusion, only names are considered for comparison, not ID's. \"\"\" for opt in self . multi_select : if opt . name == name : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__getitem__","text":"Return the SelectValue object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the SelectValue object at the given index.\"\"\" if self . multi_select is None : raise IndexError ( \"empty property\" ) if index > len ( self . multi_select ): raise IndexError ( \"index out of range\" ) return self . multi_select [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__iadd__","text":"Add the given option to this MultiSelect. Source code in ultimate_notion/core/types.py def __iadd__ ( self , other ): \"\"\"Add the given option to this MultiSelect.\"\"\" if other in self : raise ValueError ( f \"Duplicate item: { other } \" ) self . append ( other ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__isub__","text":"Remove the given value from this MultiSelect. Source code in ultimate_notion/core/types.py def __isub__ ( self , other ): \"\"\"Remove the given value from this MultiSelect.\"\"\" if other not in self : raise ValueError ( f \"No such item: { other } \" ) self . remove ( other ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__iter__","text":"Iterate over the SelectValue's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the SelectValue's in this property.\"\"\" if self . multi_select is None : return None return iter ( self . multi_select )","title":"__iter__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__len__","text":"Count the number of selected values. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Count the number of selected values.\"\"\" return len ( self . multi_select )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ( self . Values )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.append","text":"Add selected values to this MultiSelect. Source code in ultimate_notion/core/types.py def append ( self , * values ): \"\"\"Add selected values to this MultiSelect.\"\"\" for value in values : if value is None : raise ValueError ( \"'None' is an invalid value\" ) if value not in self : opt = SelectValue ( name = value ) self . multi_select . append ( opt )","title":"append()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.MultiSelect.remove","text":"Remove selected values from this MultiSelect. Source code in ultimate_notion/core/types.py def remove ( self , * values ): \"\"\"Remove selected values from this MultiSelect.\"\"\" self . multi_select = [ opt for opt in self . multi_select if opt . name not in values ]","title":"remove()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin","text":"Mixin class for properties that can be represented as native Python types.","title":"NativeTypeMixin"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin.Value","text":"Get the current value of this property as a native Python type. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Get the current value of this property as a native Python type.\"\"\" cls = self . __class__ # check to see if the object has a field with the type-name # (this is assigned by TypedObject during subclass creation) if hasattr ( cls , \"type\" ) and hasattr ( self , cls . type ): return getattr ( self , cls . type ) raise NotImplementedError ()","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin.__compose__","text":"Build the property value from the native Python value. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value ): \"\"\"Build the property value from the native Python value.\"\"\" # use type-name field to instantiate the class when possible if hasattr ( cls , \"type\" ): return cls ( ** { cls . type : value }) raise NotImplementedError ()","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin.__eq__","text":"Determine if this property is equal to the given object. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object.\"\"\" return self . Value == other","title":"__eq__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin.__ne__","text":"Determine if this property is not equal to the given object. Source code in ultimate_notion/core/types.py def __ne__ ( self , other ): \"\"\"Determine if this property is not equal to the given object.\"\"\" return self . Value != other","title":"__ne__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NativeTypeMixin.__str__","text":"Return a string representation of this object. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this object.\"\"\" value = self . Value if value is None : return \"\" return str ( value )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Number","text":"Simple number type.","title":"Number"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Number.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Number.Value","text":"Get the current value of this property as a native Python number. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Get the current value of this property as a native Python number.\"\"\" if self . number is None : return None if self . number == int ( self . number ): return int ( self . number ) return self . number","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Number.__iadd__","text":"Add the given value to this Number. Source code in ultimate_notion/core/types.py def __iadd__ ( self , other ): \"\"\"Add the given value to this Number.\"\"\" self . number += other return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Number.__isub__","text":"Subtract the given value from this Number. Source code in ultimate_notion/core/types.py def __isub__ ( self , other ): \"\"\"Subtract the given value from this Number.\"\"\" self . number -= other return self","title":"__isub__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NumberFormula","text":"A Notion number formula result.","title":"NumberFormula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NumberFormula.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.NumberFormula.Result","text":"Return the result of this NumberFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this NumberFormula.\"\"\" return self . number","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PageReference","text":"A page reference is an object with an id property.","title":"PageReference"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PageReference.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PageReference.__compose__","text":"Return the correct page reference based on the object type. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , page ): \"\"\"Return the correct page reference based on the object type.\"\"\" if isinstance ( page , str ): return PageReference ( id = page ) if isinstance ( page , UUID ): return PageReference ( id = page ) if hasattr ( page , \"id\" ): return PageReference ( id = page . id ) raise ValueError ( \"Unrecognized 'page' attribute\" )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People","text":"Notion people type.","title":"People"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.people","text":"","title":"people"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.__contains__","text":"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). Source code in ultimate_notion/core/types.py def __contains__ ( self , other ): \"\"\"Determine if the given User or name is in this People. To avoid confusion, only names are considered for comparison (not ID's). \"\"\" for user in self . people : if user == other : return True if user . name == other : return True return False","title":"__contains__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.__getitem__","text":"Return the People object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the People object at the given index.\"\"\" if self . people is None : raise IndexError ( \"empty property\" ) if index > len ( self . people ): raise IndexError ( \"index out of range\" ) return self . people [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.__iter__","text":"Iterate over the User's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the User's in this property.\"\"\" if self . people is None : return None return iter ( self . people )","title":"__iter__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.__len__","text":"Return the number of People in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of People in this property.\"\"\" return len ( self . people )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.People.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return \", \" . join ([ str ( user ) for user in self . people ])","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PhoneNumber","text":"Notion phone type.","title":"PhoneNumber"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PhoneNumber.phone_number","text":"","title":"phone_number"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PropertyValue","text":"Base class for Notion property values.","title":"PropertyValue"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.PropertyValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation","text":"A Notion relation property value.","title":"Relation"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.relation","text":"","title":"relation"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__compose__","text":"Return a Relation property with the specified pages. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , pages ): \"\"\"Return a `Relation` property with the specified pages.\"\"\" if isinstance ( pages , list ): refs = [ PageReference [ page ] for page in pages ] else : refs = [ PageReference [ pages ]] return cls ( relation = refs )","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__contains__","text":"Determine if the given page is in this Relation. Source code in ultimate_notion/core/types.py def __contains__ ( self , page ): \"\"\"Determine if the given page is in this Relation.\"\"\" return PageReference [ page ] in self . relation","title":"__contains__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__getitem__","text":"Return the PageReference object at the given index. Source code in ultimate_notion/core/types.py def __getitem__ ( self , index ): \"\"\"Return the PageReference object at the given index.\"\"\" if self . relation is None : raise IndexError ( \"empty property\" ) if index > len ( self . relation ): raise IndexError ( \"index out of range\" ) return self . relation [ index ]","title":"__getitem__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__iadd__","text":"Add the given page to this Relation in place. Source code in ultimate_notion/core/types.py def __iadd__ ( self , page ): \"\"\"Add the given page to this Relation in place.\"\"\" ref = PageReference [ page ] if ref in self . relation : raise ValueError ( f \"Duplicate item: { ref . id } \" ) self . relation . append ( ref ) return self","title":"__iadd__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__isub__","text":"Remove the given page from this Relation in place. Source code in ultimate_notion/core/types.py def __isub__ ( self , page ): \"\"\"Remove the given page from this Relation in place.\"\"\" ref = PageReference [ page ] if ref in self . relation : raise ValueError ( f \"No such item: { ref . id } \" ) self . relation . remove ( ref ) return self","title":"__isub__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__iter__","text":"Iterate over the PageReference's in this property. Source code in ultimate_notion/core/types.py def __iter__ ( self ): \"\"\"Iterate over the PageReference's in this property.\"\"\" if self . relation is None : return None return iter ( self . relation )","title":"__iter__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Relation.__len__","text":"Return the number of PageReference's in this property. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of PageReference's in this property.\"\"\" return len ( self . relation )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RichText","text":"Notion rich text type.","title":"RichText"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RichText.rich_text","text":"","title":"rich_text"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RichText.Value","text":"Return the plain text from this RichText. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the plain text from this RichText.\"\"\" if self . rich_text is None : return None return plain_text ( * self . rich_text )","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RichText.__compose__","text":"Create a new RichText property from the given strings. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , text ): \"\"\"Create a new `RichText` property from the given strings.\"\"\" return cls ( rich_text = [ TextObject [ text ]])","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RichText.__len__","text":"Return the number of object in the RichText object. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of object in the RichText object.\"\"\" return len ( self . rich_text )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Rollup","text":"A Notion rollup property value.","title":"Rollup"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Rollup.rollup","text":"","title":"rollup"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Rollup.__str__","text":"Return a string representation of this Rollup property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this Rollup property.\"\"\" if self . rollup is None : return \"\" value = self . rollup . Value if value is None : return \"\" return str ( value )","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupArray","text":"A Notion rollup array property value.","title":"RollupArray"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupArray.array","text":"","title":"array"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupArray.Value","text":"Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . array","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupDate","text":"A Notion rollup date property value.","title":"RollupDate"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupDate.date","text":"","title":"date"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupDate.Value","text":"Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . date","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupNumber","text":"A Notion rollup number property value.","title":"RollupNumber"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupNumber.number","text":"","title":"number"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupNumber.Value","text":"Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\" return self . number","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupObject","text":"A Notion rollup property value.","title":"RollupObject"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupObject.function","text":"","title":"function"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.RollupObject.Value","text":"Return the native representation of this Rollup object. Source code in ultimate_notion/core/types.py @property @abstractmethod def Value ( self ): \"\"\"Return the native representation of this Rollup object.\"\"\"","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne","text":"Notion select type.","title":"SelectOne"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne.select","text":"","title":"select"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne.Value","text":"Return the value of this property as a string. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the value of this property as a string.\"\"\" if self . select is None : return None return str ( self . select )","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne.__compose__","text":"Create a SelectOne property from the given value. :param value: a string to use for this property :param color: an optional Color for the value Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , value , color = Color . DEFAULT ): \"\"\"Create a `SelectOne` property from the given value. :param value: a string to use for this property :param color: an optional Color for the value \"\"\" if value is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( select = SelectValue ( name = value , color = color ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne.__eq__","text":"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Select options by name. \"\"\" if other is None : return self . select is None return other == self . select . name","title":"__eq__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectOne.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectValue","text":"Values for select & multi-select properties.","title":"SelectValue"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectValue.color","text":"","title":"color"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectValue.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectValue.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.SelectValue.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . name","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status","text":"Notion status property.","title":"Status"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status.status","text":"","title":"status"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status.Value","text":"Return the value of this property as a string. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the value of this property as a string.\"\"\" return self . status . name","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status.__compose__","text":"Create a Status property from the given name. :param name: a string to use for this property :param color: an optional Color for the status Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , name , color = Color . DEFAULT ): \"\"\"Create a `Status` property from the given name. :param name: a string to use for this property :param color: an optional Color for the status \"\"\" if name is None : raise ValueError ( \"'name' cannot be None\" ) return cls ( status = Status . _NestedData ( name = name , color = color ))","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status.__eq__","text":"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. Source code in ultimate_notion/core/types.py def __eq__ ( self , other ): \"\"\"Determine if this property is equal to the given object. To avoid confusion, this method compares Status options by name. \"\"\" if other is None : return self . status is None if isinstance ( other , Status ): return self . status . name == other . status . name return self . status . name == other","title":"__eq__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Status.__str__","text":"Return a string representation of this property. Source code in ultimate_notion/core/types.py def __str__ ( self ): \"\"\"Return a string representation of this property.\"\"\" return self . Value or \"\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.StringFormula","text":"A Notion string formula result.","title":"StringFormula"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.StringFormula.string","text":"","title":"string"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.StringFormula.Result","text":"Return the result of this StringFormula. Source code in ultimate_notion/core/types.py @property def Result ( self ): \"\"\"Return the result of this StringFormula.\"\"\" return self . string","title":"Result()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Title","text":"Notion title type.","title":"Title"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Title.title","text":"","title":"title"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Title.Value","text":"Return the plain text from this Title. Source code in ultimate_notion/core/types.py @property def Value ( self ): \"\"\"Return the plain text from this Title.\"\"\" if self . title is None : return None return plain_text ( * self . title )","title":"Value()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Title.__compose__","text":"Create a new Title property from the given text. Source code in ultimate_notion/core/types.py @classmethod def __compose__ ( cls , text ): \"\"\"Create a new `Title` property from the given text.\"\"\" return cls ( title = [ TextObject [ text ]])","title":"__compose__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.Title.__len__","text":"Return the number of object in the Title object. Source code in ultimate_notion/core/types.py def __len__ ( self ): \"\"\"Return the number of object in the Title object.\"\"\" return len ( self . title )","title":"__len__()"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.URL","text":"Notion URL type.","title":"URL"},{"location":"reference/ultimate_notion/core/types/#ultimate_notion.core.types.URL.url","text":"","title":"url"},{"location":"reference/ultimate_notion/core/user/","text":"user \u00b6 Wrapper for Notion user objects. Bot \u00b6 Represents a Bot in Notion. bot : _NestedData = None class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Bot . Source code in ultimate_notion/core/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Bot`.\"\"\" return f \"[% { self . name } ]\" Person \u00b6 Represents a Person in Notion. person : _NestedData = None class-attribute \u00b6 __str__ () \u00b6 Return a string representation of this Person . Source code in ultimate_notion/core/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Person`.\"\"\" return f \"[@ { self . name } ]\" User \u00b6 Represents a User in Notion. avatar_url : Optional [ str ] = None class-attribute \u00b6 id : UUID class-attribute \u00b6 name : Optional [ str ] = None class-attribute \u00b6 object : str = 'user' class-attribute \u00b6 type : Optional [ UserType ] = None class-attribute \u00b6 parse_obj ( obj ) classmethod \u00b6 Attempt to parse the given object data into the correct User type. Source code in ultimate_notion/core/user.py @classmethod def parse_obj ( cls , obj ): \"\"\"Attempt to parse the given object data into the correct `User` type.\"\"\" if obj is None : return None if \"type\" in obj : if obj [ \"type\" ] == \"person\" : return Person ( ** obj ) if obj [ \"type\" ] == \"bot\" : return Bot ( ** obj ) return cls ( obj ) UserType \u00b6 Available user types. BOT = 'bot' class-attribute \u00b6 PERSON = 'person' class-attribute \u00b6","title":"user"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user","text":"Wrapper for Notion user objects.","title":"user"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Bot","text":"Represents a Bot in Notion.","title":"Bot"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Bot.bot","text":"","title":"bot"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Bot.__str__","text":"Return a string representation of this Bot . Source code in ultimate_notion/core/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Bot`.\"\"\" return f \"[% { self . name } ]\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Person","text":"Represents a Person in Notion.","title":"Person"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Person.person","text":"","title":"person"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.Person.__str__","text":"Return a string representation of this Person . Source code in ultimate_notion/core/user.py def __str__ ( self ): \"\"\"Return a string representation of this `Person`.\"\"\" return f \"[@ { self . name } ]\"","title":"__str__()"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User","text":"Represents a User in Notion.","title":"User"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.id","text":"","title":"id"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.object","text":"","title":"object"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.type","text":"","title":"type"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.User.parse_obj","text":"Attempt to parse the given object data into the correct User type. Source code in ultimate_notion/core/user.py @classmethod def parse_obj ( cls , obj ): \"\"\"Attempt to parse the given object data into the correct `User` type.\"\"\" if obj is None : return None if \"type\" in obj : if obj [ \"type\" ] == \"person\" : return Person ( ** obj ) if obj [ \"type\" ] == \"bot\" : return Bot ( ** obj ) return cls ( obj )","title":"parse_obj()"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.UserType","text":"Available user types.","title":"UserType"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.UserType.BOT","text":"","title":"BOT"},{"location":"reference/ultimate_notion/core/user/#ultimate_notion.core.user.UserType.PERSON","text":"","title":"PERSON"}]}