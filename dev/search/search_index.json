{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ultimate-Notion \u00b6 The ultimate Python library for Notion! This is a pre-alpha version! Don't use it! Features \u00b6 in development ... License \u00b6 Ultimate-Notion is distributed under the terms of the MIT license. Navigation \u00b6 Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#ultimate-notion","text":"The ultimate Python library for Notion! This is a pre-alpha version! Don't use it!","title":"Ultimate-Notion"},{"location":"#features","text":"in development ...","title":"Features"},{"location":"#license","text":"Ultimate-Notion is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Documentation for specific MAJOR.MINOR versions can be chosen by using the dropdown on the top of every page. The dev version reflects changes that have not yet been released. Also, desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"authors/","text":"Contributors \u00b6 Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Authors"},{"location":"authors/#contributors","text":"Florian Wilhelm Florian.Wilhelm@gmail.com","title":"Contributors"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.1 (development) \u00b6 First pre-alpha to have a starting base","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-001-development","text":"First pre-alpha to have a starting base","title":"Version 0.0.1 (development)"},{"location":"contributing/","text":"Contributing \u00b6 Welcome to the contributor guide of Ultimate-Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines. Issue Reports \u00b6 If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue. Documentation improvements \u00b6 You can help improve ultimate-notion docs by making them more readable and coherent, or by adding missing information and correcting mistakes. ultimate-notion documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in ultimate-notion 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively. Code Contributions \u00b6 Submit an issue \u00b6 Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work. Clone the repository \u00b6 Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install Implement your changes \u00b6 Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively. Submit your contribution \u00b6 If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Contributing"},{"location":"contributing/#contributing","text":"Welcome to the contributor guide of Ultimate-Notion. This document focuses on getting any potential contributor familiarized with the development processes, but other kinds of contributions are also appreciated. If you are new to using git or have never collaborated in a project previously, please have a look at contribution-guide.org . Other resources are also listed in the excellent guide created by FreeCodeCamp 1 . Please notice, all users and contributors are expected to be open, considerate, reasonable, and respectful . When in doubt, Python Software Foundation's Code of Conduct is a good reference in terms of behavior guidelines.","title":"Contributing"},{"location":"contributing/#issue-reports","text":"If you experience bugs or general issues with Ultimate-Notion, please have a look on the issue tracker . If you don't see anything useful there, please feel free to fire an issue report. Tip Please don't forget to include the closed issues in your search. Sometimes a solution was already reported, and the problem is considered solved . New issue reports should include information about your programming environment (e.g., operating system, Python version) and steps to reproduce the problem. Please try also to simplify the reproduction steps to a very minimal example that still illustrates the problem you are facing. By removing other factors, you help us to identify the root cause of the issue.","title":"Issue Reports"},{"location":"contributing/#documentation-improvements","text":"You can help improve ultimate-notion docs by making them more readable and coherent, or by adding missing information and correcting mistakes. ultimate-notion documentation uses mkdocs as its main documentation compiler. This means that the docs are kept in the same repository as the project code, and that any documentation update is done in the same way was a code contribution. Tip Please notice that the GitHub web interface provides a quick way of propose changes in ultimate-notion 's files. While this mechanism can be tricky for normal code contributions, it works perfectly fine for contributing to the docs, and can be quite handy. If you are interested in trying this method out, please navigate to the docs folder in the source repository , find which file you would like to propose changes and click in the little pencil icon at the top, to open GitHub's code editor . Once you finish editing the file, please write a message in the form at the bottom of the page describing which changes have you made and what are the motivations behind them and submit your proposal. When working on documentation changes in your local machine, you can build and serve them using hatch with hatch run docs:build and hatch run docs:serve , respectively.","title":"Documentation improvements"},{"location":"contributing/#code-contributions","text":"","title":"Code Contributions"},{"location":"contributing/#submit-an-issue","text":"Before you work on any non-trivial code contribution it's best to first create a report in the issue tracker to start a discussion on the subject. This often provides additional considerations and avoids unnecessary work.","title":"Submit an issue"},{"location":"contributing/#clone-the-repository","text":"Create a user account on GitHub if you do not already have one. Fork the project repository : click on the Fork button near the top of the page. This creates a copy of the code under your account on GitHub. Clone this copy to your local disk: git clone git@github.com:YourLogin/ultimate-notion.git cd ultimate-notion Make sure hatch is installed using pipx : pipx install hatch [only once] install pre-commit hooks in the default environment with: hatch run pre-commit install","title":"Clone the repository"},{"location":"contributing/#implement-your-changes","text":"Create a branch to hold your changes: git checkout -b my-feature and start making changes. Never work on the main branch! Start your work on this branch. Don't forget to add docstrings in Google style to new functions, modules and classes, especially if they are part of public APIs. Add yourself to the list of contributors in AUTHORS.md . When you\u2019re done editing, do: git add <MODIFIED FILES> git commit to record your changes in git . Please make sure to see the validation messages from pre-commit and fix any eventual issues. This should automatically use flake8 / black to check/fix the code style in a way that is compatible with the project. Info Don't forget to add unit tests and documentation in case your contribution adds a feature and is not just a bugfix. Moreover, writing an descriptive commit message is highly recommended. In case of doubt, you can check the commit history with: git log --graph --decorate --pretty=oneline --abbrev-commit --all to look for recurring communication patterns. Please check that your changes don't break any unit tests with hatch run test:cov or hatch run test:no-cov to run the unitest with or without coverage reports, respectively.","title":"Implement your changes"},{"location":"contributing/#submit-your-contribution","text":"If everything works fine, push your local branch to the remote server with: git push -u origin my-feature Go to the web page of your fork and click \"Create pull request\" to send your changes for review. Find more detailed information in creating a PR . You might also want to open the PR as a draft first and mark it as ready for review after the feedbacks from the continuous integration (CI) system or any required fixes. Even though, these resources focus on open source projects and communities, the general ideas behind collaborating with other developers to collectively create software are general and can be applied to all sorts of environments, including private companies and proprietary code bases. \u21a9","title":"Submit your contribution"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2022 Florian Wilhelm, Jason Heddings Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"ultimate_notion database page record session user utils view","title":"SUMMARY"},{"location":"reference/ultimate_notion/","text":"ultimate_notion \u00b6 __all__ = [ '__version__' , 'Session' ] module-attribute \u00b6 __version__ = version ( 'ultimate-notion' ) module-attribute \u00b6 Session ( auth : Optional [ str ] = None , kwargs ) \u00b6 An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , auth : Optional [ str ] = None , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : raise RuntimeError ( f \"Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } \" ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) self . _search_db = self . search_db self . _get_db = self . get_db self . _get_page = self . get_page self . _get_user = self . get_user self . set_cache () _log . info ( \"Initialized Notion session\" ) blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = notion_client . Client ( auth = auth , None = kwargs ) instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self __exit__ ( exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback ) close () \u00b6 Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () get_db ( db_id : Union [ str , UUID ]) -> Database \u00b6 Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( obj_ref = self . databases . retrieve ( db_uuid ), session = self ) get_page ( page_id : Union [ str , UUID ]) -> Page \u00b6 Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( obj_ref = self . pages . retrieve ( page_id ), session = self ) get_user ( user_id : Union [ str , UUID ]) -> types . User \u00b6 Source code in ultimate_notion/session.py def get_user ( self , user_id : Union [ str , UUID ]) -> types . User : return User ( obj_ref = self . users . retrieve ( user_id )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) search_db ( db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name Optional [ str ] name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in ultimate_notion/session.py def search_db ( self , db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" dbs = SList ( Database ( obj_ref = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () ) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db ) self . get_db = wrapper ( self . _get_db ) self . get_page = wrapper ( self . _get_page ) self . get_user = wrapper ( self . _get_user )","title":"Reference"},{"location":"reference/ultimate_notion/#ultimate_notion","text":"","title":"ultimate_notion"},{"location":"reference/ultimate_notion/#ultimate_notion.__all__","text":"","title":"__all__"},{"location":"reference/ultimate_notion/#ultimate_notion.__version__","text":"","title":"__version__"},{"location":"reference/ultimate_notion/#ultimate_notion.Session","text":"An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , auth : Optional [ str ] = None , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : raise RuntimeError ( f \"Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } \" ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) self . _search_db = self . search_db self . _get_db = self . get_db self . _get_page = self . get_page self . _get_user = self . get_user self . set_cache () _log . info ( \"Initialized Notion session\" )","title":"Session"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.client","text":"","title":"client"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search","text":"","title":"search"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.users","text":"","title":"users"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__enter__","text":"Source code in ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.__exit__","text":"Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_db","text":"Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( obj_ref = self . databases . retrieve ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_page","text":"Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( obj_ref = self . pages . retrieve ( page_id ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.get_user","text":"Source code in ultimate_notion/session.py def get_user ( self , user_id : Union [ str , UUID ]) -> types . User : return User ( obj_ref = self . users . retrieve ( user_id ))","title":"get_user()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name Optional [ str ] name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in ultimate_notion/session.py def search_db ( self , db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" dbs = SList ( Database ( obj_ref = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () ) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/#ultimate_notion.session.Session.set_cache","text":"Source code in ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db ) self . get_db = wrapper ( self . _get_db ) self . get_page = wrapper ( self . _get_page ) self . get_user = wrapper ( self . _get_user )","title":"set_cache()"},{"location":"reference/ultimate_notion/database/","text":"database \u00b6 Database object Database ( obj_ref : blocks . Database , session : Session ) \u00b6 Source code in ultimate_notion/database.py def __init__ ( self , obj_ref : blocks . Database , session : Session ): self . obj_ref : blocks . Database = obj_ref self . session = session archived : bool property \u00b6 cover : Optional [ types . FileObject ] property \u00b6 description : Optional [ List [ types . RichTextObject ]] property \u00b6 icon : Optional [ Union [ types . FileObject , types . EmojiObject ]] property \u00b6 is_inline : bool property \u00b6 meta_properties : Dict [ str , Any ] property \u00b6 obj_ref : blocks . Database = obj_ref instance-attribute \u00b6 properties : Dict [ str , PropertyObject ] property \u00b6 session = session instance-attribute \u00b6 title : str property \u00b6 Return the title of this database as plain text. url : str property \u00b6 __repr__ () -> str \u00b6 Source code in ultimate_notion/database.py def __repr__ ( self ) -> str : return f \"< { str ( self ) } at { hex ( id ( self )) } >\" __str__ () -> str \u00b6 Source code in ultimate_notion/database.py def __str__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \" { cls_name } : ' { self . title } '\" view ( live = True ) -> View \u00b6 Source code in ultimate_notion/database.py def view ( self , live = True ) -> View : session = self . session if live else None pages = [ Page ( page_obj , session ) for page_obj in self . session . databases . query ( self . id ) . execute ()] return View ( database = self , pages = pages )","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database","text":"Database object","title":"database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database","text":"Source code in ultimate_notion/database.py def __init__ ( self , obj_ref : blocks . Database , session : Session ): self . obj_ref : blocks . Database = obj_ref self . session = session","title":"Database"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.cover","text":"","title":"cover"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.description","text":"","title":"description"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.icon","text":"","title":"icon"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.is_inline","text":"","title":"is_inline"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.meta_properties","text":"","title":"meta_properties"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.session","text":"","title":"session"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.title","text":"Return the title of this database as plain text.","title":"title"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.url","text":"","title":"url"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__repr__","text":"Source code in ultimate_notion/database.py def __repr__ ( self ) -> str : return f \"< { str ( self ) } at { hex ( id ( self )) } >\"","title":"__repr__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.__str__","text":"Source code in ultimate_notion/database.py def __str__ ( self ) -> str : cls_name = self . __class__ . __name__ return f \" { cls_name } : ' { self . title } '\"","title":"__str__()"},{"location":"reference/ultimate_notion/database/#ultimate_notion.database.Database.view","text":"Source code in ultimate_notion/database.py def view ( self , live = True ) -> View : session = self . session if live else None pages = [ Page ( page_obj , session ) for page_obj in self . session . databases . query ( self . id ) . execute ()] return View ( database = self , pages = pages )","title":"view()"},{"location":"reference/ultimate_notion/page/","text":"page \u00b6 Page object Page ( obj_ref : blocks . Page , session : Session ) \u00b6 Source code in ultimate_notion/page.py def __init__ ( self , obj_ref : blocks . Page , session : Session ): self . obj_ref : blocks . Page = obj_ref self . session = session is_live : bool property \u00b6 obj_ref : blocks . Page = obj_ref instance-attribute \u00b6 properties : Dict [ str , types . PropertyValue ] property \u00b6 session = session instance-attribute \u00b6 title : str property \u00b6 to_dict () -> Dict [ str , Any ] \u00b6 Source code in ultimate_notion/page.py def to_dict ( self ) -> Dict [ str , Any ]: dct = super () . to_dict () dct [ 'title' ] = self . title for k , v in self . properties . items (): if isinstance ( v , types . MultiSelect ): v = str ( v ) elif isinstance ( v , types . Date ): v = v . date elif isinstance ( v , types . Relation ): v = [ p . title for p in self . _resolve_relation ( v )] elif isinstance ( v , types . Formula ): v = v . Result elif isinstance ( v , ( types . LastEditedBy , types . CreatedBy )): v = self . session . get_user ( v . last_edited_by . id ) . name elif isinstance ( v , types . DatabaseRef ): v = self . session . get_db ( v . database_id ) . title else : assert isinstance ( v , types . NativeTypeMixin ) v = v . Value dct [ k ] = v return dct","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page","text":"Page object","title":"page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page","text":"Source code in ultimate_notion/page.py def __init__ ( self , obj_ref : blocks . Page , session : Session ): self . obj_ref : blocks . Page = obj_ref self . session = session","title":"Page"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.is_live","text":"","title":"is_live"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.properties","text":"","title":"properties"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.session","text":"","title":"session"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.title","text":"","title":"title"},{"location":"reference/ultimate_notion/page/#ultimate_notion.page.Page.to_dict","text":"Source code in ultimate_notion/page.py def to_dict ( self ) -> Dict [ str , Any ]: dct = super () . to_dict () dct [ 'title' ] = self . title for k , v in self . properties . items (): if isinstance ( v , types . MultiSelect ): v = str ( v ) elif isinstance ( v , types . Date ): v = v . date elif isinstance ( v , types . Relation ): v = [ p . title for p in self . _resolve_relation ( v )] elif isinstance ( v , types . Formula ): v = v . Result elif isinstance ( v , ( types . LastEditedBy , types . CreatedBy )): v = self . session . get_user ( v . last_edited_by . id ) . name elif isinstance ( v , types . DatabaseRef ): v = self . session . get_db ( v . database_id ) . title else : assert isinstance ( v , types . NativeTypeMixin ) v = v . Value dct [ k ] = v return dct","title":"to_dict()"},{"location":"reference/ultimate_notion/record/","text":"record \u00b6 Core building block is a Record Record \u00b6 The base type for all Notion objects. archived : bool property \u00b6 created_by property \u00b6 created_time : datetime property \u00b6 has_children : bool property \u00b6 id : UUID property \u00b6 last_edited_by property \u00b6 last_edited_time : datetime property \u00b6 obj_ref : Optional [ blocks . DataRecord ] = None class-attribute \u00b6 parent : types . ParentRef property \u00b6 to_dict () -> Dict [ str , Any ] \u00b6 Source code in ultimate_notion/record.py def to_dict ( self ) -> Dict [ str , Any ]: return dict ( id = self . id , created_time = self . created_time , created_by = self . created_by , last_edited_time = self . last_edited_time , last_edited_by = self . last_edited_by , parent = self . parent , has_children = self . has_children , archived = self . archived , )","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record","text":"Core building block is a Record","title":"record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record","text":"The base type for all Notion objects.","title":"Record"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.archived","text":"","title":"archived"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_by","text":"","title":"created_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.created_time","text":"","title":"created_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.has_children","text":"","title":"has_children"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.id","text":"","title":"id"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_by","text":"","title":"last_edited_by"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.last_edited_time","text":"","title":"last_edited_time"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.parent","text":"","title":"parent"},{"location":"reference/ultimate_notion/record/#ultimate_notion.record.Record.to_dict","text":"Source code in ultimate_notion/record.py def to_dict ( self ) -> Dict [ str , Any ]: return dict ( id = self . id , created_time = self . created_time , created_by = self . created_by , last_edited_time = self . last_edited_time , last_edited_by = self . last_edited_by , parent = self . parent , has_children = self . has_children , archived = self . archived , )","title":"to_dict()"},{"location":"reference/ultimate_notion/session/","text":"session \u00b6 Session object Replicates some parts of notional.session but the API is changed ENV_NOTION_AUTH_TOKEN = 'NOTION_AUTH_TOKEN' module-attribute \u00b6 Session ( auth : Optional [ str ] = None , kwargs ) \u00b6 An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , auth : Optional [ str ] = None , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : raise RuntimeError ( f \"Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } \" ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) self . _search_db = self . search_db self . _get_db = self . get_db self . _get_page = self . get_page self . _get_user = self . get_user self . set_cache () _log . info ( \"Initialized Notion session\" ) blocks = BlocksEndpoint ( self ) instance-attribute \u00b6 client = notion_client . Client ( auth = auth , None = kwargs ) instance-attribute \u00b6 databases = DatabasesEndpoint ( self ) instance-attribute \u00b6 pages = PagesEndpoint ( self ) instance-attribute \u00b6 search = SearchEndpoint ( self ) instance-attribute \u00b6 users = UsersEndpoint ( self ) instance-attribute \u00b6 __enter__ () -> Session \u00b6 Source code in ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self __exit__ ( exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType ) -> None \u00b6 Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback ) close () \u00b6 Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close () get_db ( db_id : Union [ str , UUID ]) -> Database \u00b6 Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( obj_ref = self . databases . retrieve ( db_uuid ), session = self ) get_page ( page_id : Union [ str , UUID ]) -> Page \u00b6 Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( obj_ref = self . pages . retrieve ( page_id ), session = self ) get_user ( user_id : Union [ str , UUID ]) -> types . User \u00b6 Source code in ultimate_notion/session.py def get_user ( self , user_id : Union [ str , UUID ]) -> types . User : return User ( obj_ref = self . users . retrieve ( user_id )) raise_for_status () \u00b6 Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error ) search_db ( db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ] \u00b6 Search a database by name Parameters: Name Type Description Default db_name Optional [ str ] name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in ultimate_notion/session.py def search_db ( self , db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" dbs = SList ( Database ( obj_ref = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () ) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs set_cache ( ttl = 30 , maxsize = 1024 ) \u00b6 Source code in ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db ) self . get_db = wrapper ( self . _get_db ) self . get_page = wrapper ( self . _get_page ) self . get_user = wrapper ( self . _get_user ) SessionError ( message ) \u00b6 Raised when there are issues with the Notion session. Source code in ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session","text":"Session object Replicates some parts of notional.session but the API is changed","title":"session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.ENV_NOTION_AUTH_TOKEN","text":"","title":"ENV_NOTION_AUTH_TOKEN"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session","text":"An active session with the Notion SDK. kwargs will be passed direction to the Notion SDK Client. For more details, see the (full docs)[ https://ramnes.github.io/notion-sdk-py/reference/client/ ]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication Source code in ultimate_notion/session.py def __init__ ( self , auth : Optional [ str ] = None , ** kwargs ): \"\"\"Initialize the `Session` object and the endpoints. `kwargs` will be passed direction to the Notion SDK Client. For more details, see the (full docs)[https://ramnes.github.io/notion-sdk-py/reference/client/]. :param live_updates: changes will be propagated to Notion :param auth: bearer token for authentication \"\"\" if auth is None : if ( env_token := os . getenv ( ENV_NOTION_AUTH_TOKEN )) is not None : auth = env_token else : raise RuntimeError ( f \"Either pass `auth` or set { ENV_NOTION_AUTH_TOKEN } \" ) self . client = notion_client . Client ( auth = auth , ** kwargs ) self . blocks = BlocksEndpoint ( self ) self . databases = DatabasesEndpoint ( self ) self . pages = PagesEndpoint ( self ) self . search = SearchEndpoint ( self ) self . users = UsersEndpoint ( self ) self . _search_db = self . search_db self . _get_db = self . get_db self . _get_page = self . get_page self . _get_user = self . get_user self . set_cache () _log . info ( \"Initialized Notion session\" )","title":"Session"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.blocks","text":"","title":"blocks"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.client","text":"","title":"client"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.databases","text":"","title":"databases"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search","text":"","title":"search"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.users","text":"","title":"users"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__enter__","text":"Source code in ultimate_notion/session.py def __enter__ ( self ) -> Session : _log . debug ( \"Connecting to Notion...\" ) self . client . __enter__ () return self","title":"__enter__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.__exit__","text":"Source code in ultimate_notion/session.py def __exit__ ( self , exc_type : Type [ BaseException ], exc_value : BaseException , traceback : TracebackType , ) -> None : _log . debug ( \"Closing connection to Notion...\" ) self . client . __exit__ ( exc_type , exc_value , traceback )","title":"__exit__()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.close","text":"Close the session and release resources. Source code in ultimate_notion/session.py def close ( self ): \"\"\"Close the session and release resources.\"\"\" self . client . close ()","title":"close()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_db","text":"Source code in ultimate_notion/session.py def get_db ( self , db_id : Union [ str , UUID ]) -> Database : db_uuid = db_id if isinstance ( db_id , UUID ) else UUID ( db_id ) return Database ( obj_ref = self . databases . retrieve ( db_uuid ), session = self )","title":"get_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_page","text":"Source code in ultimate_notion/session.py def get_page ( self , page_id : Union [ str , UUID ]) -> Page : return Page ( obj_ref = self . pages . retrieve ( page_id ), session = self )","title":"get_page()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.get_user","text":"Source code in ultimate_notion/session.py def get_user ( self , user_id : Union [ str , UUID ]) -> types . User : return User ( obj_ref = self . users . retrieve ( user_id ))","title":"get_user()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.raise_for_status","text":"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. Source code in ultimate_notion/session.py def raise_for_status ( self ): \"\"\"Confirm that the session is active and raise otherwise. Raises SessionError if there is a problem, otherwise returns None. \"\"\" error = None try : me = self . users . me () if me is None : raise SessionError ( \"Unable to get current user\" ) except ConnectError : error = \"Unable to connect to Notion\" except APIResponseError as err : error = str ( err ) if error is not None : raise SessionError ( error )","title":"raise_for_status()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.search_db","text":"Search a database by name Parameters: Name Type Description Default db_name Optional [ str ] name/title of the database, return all if None None exact bool perform an exact search, not only a substring match True Source code in ultimate_notion/session.py def search_db ( self , db_name : Optional [ str ] = None , exact : bool = True ) -> SList [ Database ]: \"\"\"Search a database by name Args: db_name: name/title of the database, return all if `None` exact: perform an exact search, not only a substring match \"\"\" dbs = SList ( Database ( obj_ref = db , session = self ) for db in self . search ( db_name ) . filter ( property = \"object\" , value = \"database\" ) . execute () ) if exact and db_name is not None : dbs = SList ( db for db in dbs if db . title == db_name ) return dbs","title":"search_db()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.Session.set_cache","text":"Source code in ultimate_notion/session.py def set_cache ( self , ttl = 30 , maxsize = 1024 ): wrapper = cached ( cache = TTLCache ( maxsize = maxsize , ttl = ttl )) self . search_db = wrapper ( self . _search_db ) self . get_db = wrapper ( self . _get_db ) self . get_page = wrapper ( self . _get_page ) self . get_user = wrapper ( self . _get_user )","title":"set_cache()"},{"location":"reference/ultimate_notion/session/#ultimate_notion.session.SessionError","text":"Raised when there are issues with the Notion session. Source code in ultimate_notion/session.py def __init__ ( self , message ): \"\"\"Initialize the `NotionSessionError` with a supplied message.\"\"\" super () . __init__ ( message )","title":"SessionError"},{"location":"reference/ultimate_notion/user/","text":"user \u00b6 User ( obj_ref : types . User ) \u00b6 Source code in ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref avatar_url property \u00b6 email property \u00b6 id property \u00b6 name property \u00b6 obj_ref : types . User = obj_ref instance-attribute \u00b6 type property \u00b6","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user","text":"","title":"user"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User","text":"Source code in ultimate_notion/user.py def __init__ ( self , obj_ref : types . User ): self . obj_ref : types . User = obj_ref","title":"User"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.avatar_url","text":"","title":"avatar_url"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.email","text":"","title":"email"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.id","text":"","title":"id"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.name","text":"","title":"name"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.obj_ref","text":"","title":"obj_ref"},{"location":"reference/ultimate_notion/user/#ultimate_notion.user.User.type","text":"","title":"type"},{"location":"reference/ultimate_notion/utils/","text":"utils \u00b6 Additional utilities that fit nowhere else T = TypeVar ( 'T' ) module-attribute \u00b6 SList \u00b6 A list that holds often only a single element item () -> T \u00b6 Source code in ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = \"list is empty\" else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg ) is_notebook () -> bool \u00b6 Source code in ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter","title":"Utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils","text":"Additional utilities that fit nowhere else","title":"utils"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.T","text":"","title":"T"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList","text":"A list that holds often only a single element","title":"SList"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.SList.item","text":"Source code in ultimate_notion/utils.py def item ( self ) -> T : if len ( self ) == 1 : return self [ 0 ] elif len ( self ) == 0 : msg = \"list is empty\" else : msg = f \"list of ' { type ( self [ 0 ]) . __name__ } ' objects has more than one element\" raise ValueError ( msg )","title":"item()"},{"location":"reference/ultimate_notion/utils/#ultimate_notion.utils.is_notebook","text":"Source code in ultimate_notion/utils.py def is_notebook () -> bool : try : from IPython import get_ipython shell = get_ipython () . __class__ . __name__ if shell == 'ZMQInteractiveShell' : return True # Jupyter notebook or qtconsole elif shell == 'TerminalInteractiveShell' : return False # Terminal running IPython else : return False # Other type (?) except NameError : return False # Probably standard Python interpreter","title":"is_notebook()"},{"location":"reference/ultimate_notion/view/","text":"view \u00b6 View representing the result of a Query View ( database : Database , pages : List [ Page ]) \u00b6 Source code in ultimate_notion/view.py def __init__ ( self , database : Database , pages : List [ Page ]): self . database = database self . pages = pages self . columns = list ( self . database . properties . keys ()) self . _title_col = SList ( col for col , val in database . properties . items () if isinstance ( val , Title )) . item () self . _has_index = False self . _index_name = None columns = list ( self . database . properties . keys ()) instance-attribute \u00b6 database = database instance-attribute \u00b6 has_index property \u00b6 pages = pages instance-attribute \u00b6 __str__ () -> Optional [ str ] \u00b6 Source code in ultimate_notion/view.py def __str__ ( self ) -> Optional [ str ]: rows = self . rows () if is_notebook (): from IPython.core.display import display_html return display_html ( tabulate ( rows , headers = self . columns , tablefmt = \"html\" )) else : return tabulate ( rows , headers = self . columns ) as_df () -> pd . DataFrame \u00b6 Source code in ultimate_notion/view.py def as_df ( self ) -> pd . DataFrame : if self . has_index : view = self . without_index () else : view = self return pd . DataFrame ( view . rows (), columns = view . columns ) clone () -> View \u00b6 Source code in ultimate_notion/view.py def clone ( self ) -> View : view = View ( self . database , self . pages [:]) view . columns = self . columns [:] view . _has_index = self . _has_index view . _index_name = self . _index_name return view limit ( num : int ) -> View \u00b6 Source code in ultimate_notion/view.py def limit ( self , num : int ) -> View : view = self . clone () view . pages = view . pages [: num ] return view row ( idx : int ) -> List [ Any ] \u00b6 Source code in ultimate_notion/view.py def row ( self , idx : int ) -> List [ Any ]: page_dct = self . pages [ idx ] . to_dict () row = [] for col in self . columns : if col == self . _title_col : row . append ( page_dct [ 'title' ]) elif col == self . _index_name : row . append ( idx ) else : row . append ( page_dct [ col ]) return row rows () -> List [ List [ Any ]] \u00b6 Source code in ultimate_notion/view.py def rows ( self ) -> List [ List [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self . pages ))] with_index ( name = 'index' ) -> View \u00b6 Source code in ultimate_notion/view.py def with_index ( self , name = \"index\" ) -> View : assert name not in self . columns , f \"index ' { name } ' is already a column name\" assert not self . _has_index , f \"an index ' { self . _index_name } ' already exists\" view = self . clone () view . _has_index = True view . _index_name = name view . columns . insert ( 0 , name ) return view without_index () -> View \u00b6 Source code in ultimate_notion/view.py def without_index ( self ) -> View : assert self . has_index , \"there is no index\" view = self . clone () view . columns . remove ( self . _index_name ) view . _has_index = False view . _index_name = None return view","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view","text":"View representing the result of a Query","title":"view"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View","text":"Source code in ultimate_notion/view.py def __init__ ( self , database : Database , pages : List [ Page ]): self . database = database self . pages = pages self . columns = list ( self . database . properties . keys ()) self . _title_col = SList ( col for col , val in database . properties . items () if isinstance ( val , Title )) . item () self . _has_index = False self . _index_name = None","title":"View"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.columns","text":"","title":"columns"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.database","text":"","title":"database"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.has_index","text":"","title":"has_index"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.pages","text":"","title":"pages"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.__str__","text":"Source code in ultimate_notion/view.py def __str__ ( self ) -> Optional [ str ]: rows = self . rows () if is_notebook (): from IPython.core.display import display_html return display_html ( tabulate ( rows , headers = self . columns , tablefmt = \"html\" )) else : return tabulate ( rows , headers = self . columns )","title":"__str__()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.as_df","text":"Source code in ultimate_notion/view.py def as_df ( self ) -> pd . DataFrame : if self . has_index : view = self . without_index () else : view = self return pd . DataFrame ( view . rows (), columns = view . columns )","title":"as_df()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.clone","text":"Source code in ultimate_notion/view.py def clone ( self ) -> View : view = View ( self . database , self . pages [:]) view . columns = self . columns [:] view . _has_index = self . _has_index view . _index_name = self . _index_name return view","title":"clone()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.limit","text":"Source code in ultimate_notion/view.py def limit ( self , num : int ) -> View : view = self . clone () view . pages = view . pages [: num ] return view","title":"limit()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.row","text":"Source code in ultimate_notion/view.py def row ( self , idx : int ) -> List [ Any ]: page_dct = self . pages [ idx ] . to_dict () row = [] for col in self . columns : if col == self . _title_col : row . append ( page_dct [ 'title' ]) elif col == self . _index_name : row . append ( idx ) else : row . append ( page_dct [ col ]) return row","title":"row()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.rows","text":"Source code in ultimate_notion/view.py def rows ( self ) -> List [ List [ Any ]]: return [ self . row ( idx ) for idx in range ( len ( self . pages ))]","title":"rows()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.with_index","text":"Source code in ultimate_notion/view.py def with_index ( self , name = \"index\" ) -> View : assert name not in self . columns , f \"index ' { name } ' is already a column name\" assert not self . _has_index , f \"an index ' { self . _index_name } ' already exists\" view = self . clone () view . _has_index = True view . _index_name = name view . columns . insert ( 0 , name ) return view","title":"with_index()"},{"location":"reference/ultimate_notion/view/#ultimate_notion.view.View.without_index","text":"Source code in ultimate_notion/view.py def without_index ( self ) -> View : assert self . has_index , \"there is no index\" view = self . clone () view . columns . remove ( self . _index_name ) view . _has_index = False view . _index_name = None return view","title":"without_index()"}]}