[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

####################
# Project Metadata #
####################

[project]
name = "ultimate-notion"
description = "The ultimate Python client for Notion!"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["notion", "notion client"]
authors = [
    { name = "Florian Wilhelm", email = "Florian.Wilhelm@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Typing :: Typed",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "notion-client~=2.2",
    "tabulate>=0.9",
    "numpy~=1.24",
    "emoji~=2.8",
    "pandas~=2.0",
    "pydantic~=2.0",
    "mistune~=3.0",  # markdown parser
    "packaging",
    "pendulum",
    "typing_extensions", # for Python 3.10 compatibility, check if still needed when pumbing `requires-python`
]
dynamic = ["version"]

[project.optional-dependencies]
google = [
   "google-api-python-client",
   "google-auth-httplib2",
   "google-auth-oauthlib",
]
all = ["ultimate-notion[google]"]

[project.urls]
Documentation = "https://ultimate-notion.com/"
Sponsor = "https://github.com/sponsors/FlorianWilhelm"
Tracker = "https://github.com/ultimate-notion/ultimate-notion/issues"
Source = "https://github.com/ultimate-notion/ultimate-notion"

######################
# Build & Versioning #
######################

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/ultimate_notion/_version.py"

[tool.hatch.build]
packages = ["src/ultimate_notion"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
]

##################
# External Tools #
##################

[tool.mypy]
files = ["src/ultimate_notion", "tests", "examples"]
disallow_untyped_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

# ToDo: Consider switching to pyright and remove mypy
# [tool.pyright]
# include = ["src", "tests", "examples"]
# exclude = ["**/__pycache__"]

# # Type checking mode: "basic" (default) or "strict"
# typeCheckingMode = "basic"

# reportMissingImports = true
# reportMissingTypeStubs = false

# pythonVersion = "3.10"
# pythonPlatform = "All"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-glob='*.md'"
testpaths = [
    "tests",
]
markers = [
    "webtest: tests that use the Notion web API",
    "check_latest_release: tests that check the latest release on PyPI"
]
env_files = [
    ".vscode/.env"
]

[tool.coverage.run]
branch = true
source = ["src/ultimate_notion"]
omit = [
  "_version.py",  # automatically created by hatch-vcs, not in repo
]


[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 120
target-version = "py310"
indent-width = 4
include = [
    "src/**/*.py",
    "src/**/*.pyi",
    "tests/**/*.py",
    "tests/**/*.pyi",
    "examples/**/*.py",
    "docs/**/*.py"
]

[tool.ruff.lint]
preview = true
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q", # quotes, e.g. single quotes
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter
    "PLR0904", # ignore more than 20 public methods warning
]
unfixable = [
    # "F401",  # Don't touch unused imports
]

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint.isort]
known-first-party = ["ultimate_notion"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


###########################
# Hatch Environment Setup #
###########################

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.1"]

# Default environment
[tool.hatch.envs.default]
type = "pip-compile"
python = "3.10"
post-install-commands = ["pre-commit install"]
features = ["google"]  # state them explicitly, not just "all", to avoid installing ultimate-notion from PyPI!
pip-compile-installer = "pip"
pip-compile-constraint = "default"  # keep locks between default & others consistent
pip-compile-hashes = false  # no hashes in lock files
lock-filename = "locks/{env_name}.lock"
dependencies = [
    "coverage[toml]>=6.2",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-recording>=0.13.1",
    "pytest-dotenv",
    "pytest-sugar",
    "hypothesis",
    "jupyterlab",
    "pre-commit",
    "ipython",
    "mktestdocs",
    "packaging",
    "matplotlib",
    "vcrpy~=5.1", # < 6.0.0 to avoid breaking changes with RuntimeError: asyncio.run() cannot be called from a running event loop
]
[tool.hatch.envs.default.scripts]
test = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/ultimate_notion --cov=tests --record-mode once {args}"
debug =  "test --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb {args}"
vcr-off = "test --disable-recording {args}"
test-prod = "pytest --disable-recording --check-latest-release {args}"
vcr-only = "test --record-mode none --block-network {args}"
vcr-rewrite = "test --record-mode=rewrite {args}"
vcr-rewrite-fixtures = "vcr-rewrite --overwrite-fixtures {args}"
vcr-drop-cassettes = "find ./tests -type d -name 'cassettes' -exec rm -rf {{}} +"
ci = "vcr-only --cov-report lcov {args}"
doctest = "pytest docs/examples/"
md2py = "python -c \"from ultimate_notion.utils import convert_md_to_py; convert_md_to_py('{args}')\""
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

# Docs environment
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material[imaging]",
    # Plugins
    "mkdocs-include-markdown-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-minify-plugin",
    "mkdocs-section-index",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocstrings[python]",
    "mkdocs-redirects",
    "mkdocs-glightbox",
    "mike",
    # Extensions
    "pymdown-extensions",
    "pygments", # Necessary for syntax highlighting in code blocks
    "linkchecker", # Validation
    ]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
    "build",
    "validate",
]

# Lint environment
[tool.hatch.envs.lint]
# skip-install = true # mypy gives more feedback if project is installed locally, strange but true
dependencies = [
    "mypy==1.10",
    "pyright~=1.1",  # currently only for testing, not used in CI
    "ruff==0.4.5", # make sure this is consistent with .pre-commit-config.yaml, thus pinned!
]
[tool.hatch.envs.lint.scripts]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}"  # ToDo: Use pyright later here
]
style = [
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",  # feedback on what is not fixable
]
all = [
    "style",
    "typing",
]

# Production environment taking latest Ultimate Notion from PyPI
[tool.hatch.envs.prod]
detached = true
python = "3.10"
dependencies = [
    "ultimate-notion[all]",
    "pytest",
    "pytest-dotenv",
    "pytest-sugar",
    "pytest-recording>=0.13.1",
    "vcrpy~=5.1", # < 6.0.0 to avoid breaking changes with RuntimeError: asyncio.run() cannot be called from a running event loop
    ]
[tool.hatch.envs.prod.scripts]
test = "pytest tests/test_latest_release.py --disable-recording --check-latest-release {args}"
